!function(g){var I={};function C(A){if(I[A])return I[A].exports;var n=I[A]={i:A,l:!1,exports:{}};return g[A].call(n.exports,n,n.exports,C),n.l=!0,n.exports}C.m=g,C.c=I,C.d=function(g,I,A){C.o(g,I)||Object.defineProperty(g,I,{enumerable:!0,get:A})},C.r=function(g){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(g,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(g,"__esModule",{value:!0})},C.t=function(g,I){if(1&I&&(g=C(g)),8&I)return g;if(4&I&&"object"==typeof g&&g&&g.__esModule)return g;var A=Object.create(null);if(C.r(A),Object.defineProperty(A,"default",{enumerable:!0,value:g}),2&I&&"string"!=typeof g)for(var n in g)C.d(A,n,function(I){return g[I]}.bind(null,n));return A},C.n=function(g){var I=g&&g.__esModule?function(){return g.default}:function(){return g};return C.d(I,"a",I),I},C.o=function(g,I){return Object.prototype.hasOwnProperty.call(g,I)},C.p="",C(C.s=1)}([function(module,exports,__webpack_require__){(function(module){var __WEBPACK_AMD_DEFINE_FACTORY__,__WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__,factory;function _typeof(g){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(g){return typeof g}:function(g){return g&&"function"==typeof Symbol&&g.constructor===Symbol&&g!==Symbol.prototype?"symbol":typeof g})(g)}window,factory=function(){return function(g){var I={};function C(A){if(I[A])return I[A].exports;var n=I[A]={i:A,l:!1,exports:{}};return g[A].call(n.exports,n,n.exports,C),n.l=!0,n.exports}return C.m=g,C.c=I,C.d=function(g,I,A){C.o(g,I)||Object.defineProperty(g,I,{enumerable:!0,get:A})},C.r=function(g){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(g,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(g,"__esModule",{value:!0})},C.t=function(g,I){if(1&I&&(g=C(g)),8&I)return g;if(4&I&&"object"===_typeof(g)&&g&&g.__esModule)return g;var A=Object.create(null);if(C.r(A),Object.defineProperty(A,"default",{enumerable:!0,value:g}),2&I&&"string"!=typeof g)for(var n in g)C.d(A,n,function(I){return g[I]}.bind(null,n));return A},C.n=function(g){var I=g&&g.__esModule?function(){return g.default}:function(){return g};return C.d(I,"a",I),I},C.o=function(g,I){return Object.prototype.hasOwnProperty.call(g,I)},C.p="",C(C.s="./dev/raphael.amd.js")}({"./dev/raphael.amd.js":
/*!****************************!*\
  !*** ./dev/raphael.amd.js ***!
  \****************************/
/*! no static exports found */function devRaphaelAmdJs(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./raphael.core */ "./dev/raphael.core.js"), __webpack_require__(/*! ./raphael.svg */ "./dev/raphael.svg.js"), __webpack_require__(/*! ./raphael.vml */ "./dev/raphael.vml.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function(R) {\n\n    return R;\n\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9kZXYvcmFwaGFlbC5hbWQuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9SYXBoYWVsLy4vZGV2L3JhcGhhZWwuYW1kLmpzPzM1NjQiXSwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKFtcIi4vcmFwaGFlbC5jb3JlXCIsIFwiLi9yYXBoYWVsLnN2Z1wiLCBcIi4vcmFwaGFlbC52bWxcIl0sIGZ1bmN0aW9uKFIpIHtcblxuICAgIHJldHVybiBSO1xuXG59KTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./dev/raphael.amd.js\n')},"./dev/raphael.core.js":
/*!*****************************!*\
  !*** ./dev/raphael.core.js ***!
  \*****************************/
/*! no static exports found */function devRaphaelCoreJs(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! eve */ "./node_modules/eve-raphael/eve.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function(eve) {\n\n    /*\\\n     * Raphael\n     [ method ]\n     **\n     * Creates a canvas object on which to draw.\n     * You must do this first, as all future calls to drawing methods\n     * from this instance will be bound to this canvas.\n     > Parameters\n     **\n     - container (HTMLElement|string) DOM element or its ID which is going to be a parent for drawing surface\n     - width (number)\n     - height (number)\n     - callback (function) #optional callback function which is going to be executed in the context of newly created paper\n     * or\n     - x (number)\n     - y (number)\n     - width (number)\n     - height (number)\n     - callback (function) #optional callback function which is going to be executed in the context of newly created paper\n     * or\n     - all (array) (first 3 or 4 elements in the array are equal to [containerID, width, height] or [x, y, width, height]. The rest are element descriptions in format {type: type, <attributes>}). See @Paper.add.\n     - callback (function) #optional callback function which is going to be executed in the context of newly created paper\n     * or\n     - onReadyCallback (function) function that is going to be called on DOM ready event. You can also subscribe to this event via Eve’s “DOMLoad” event. In this case method returns `undefined`.\n     = (object) @Paper\n     > Usage\n     | // Each of the following examples create a canvas\n     | // that is 320px wide by 200px high.\n     | // Canvas is created at the viewport’s 10,50 coordinate.\n     | var paper = Raphael(10, 50, 320, 200);\n     | // Canvas is created at the top left corner of the #notepad element\n     | // (or its top right corner in dir="rtl" elements)\n     | var paper = Raphael(document.getElementById("notepad"), 320, 200);\n     | // Same as above\n     | var paper = Raphael("notepad", 320, 200);\n     | // Image dump\n     | var set = Raphael(["notepad", 320, 200, {\n     |     type: "rect",\n     |     x: 10,\n     |     y: 10,\n     |     width: 25,\n     |     height: 25,\n     |     stroke: "#f00"\n     | }, {\n     |     type: "text",\n     |     x: 30,\n     |     y: 40,\n     |     text: "Dump"\n     | }]);\n    \\*/\n    function R(first) {\n        if (R.is(first, "function")) {\n            return loaded ? first() : eve.on("raphael.DOMload", first);\n        } else if (R.is(first, array)) {\n            return R._engine.create[apply](R, first.splice(0, 3 + R.is(first[0], nu))).add(first);\n        } else {\n            var args = Array.prototype.slice.call(arguments, 0);\n            if (R.is(args[args.length - 1], "function")) {\n                var f = args.pop();\n                return loaded ? f.call(R._engine.create[apply](R, args)) : eve.on("raphael.DOMload", function () {\n                    f.call(R._engine.create[apply](R, args));\n                });\n            } else {\n                return R._engine.create[apply](R, arguments);\n            }\n        }\n    }\n    R.version = "2.2.0";\n    R.eve = eve;\n    var loaded,\n        separator = /[, ]+/,\n        elements = {circle: 1, rect: 1, path: 1, ellipse: 1, text: 1, image: 1},\n        formatrg = /\\{(\\d+)\\}/g,\n        proto = "prototype",\n        has = "hasOwnProperty",\n        g = {\n            doc: document,\n            win: window\n        },\n        oldRaphael = {\n            was: Object.prototype[has].call(g.win, "Raphael"),\n            is: g.win.Raphael\n        },\n        Paper = function () {\n            /*\\\n             * Paper.ca\n             [ property (object) ]\n             **\n             * Shortcut for @Paper.customAttributes\n            \\*/\n            /*\\\n             * Paper.customAttributes\n             [ property (object) ]\n             **\n             * If you have a set of attributes that you would like to represent\n             * as a function of some number you can do it easily with custom attributes:\n             > Usage\n             | paper.customAttributes.hue = function (num) {\n             |     num = num % 1;\n             |     return {fill: "hsb(" + num + ", 0.75, 1)"};\n             | };\n             | // Custom attribute “hue” will change fill\n             | // to be given hue with fixed saturation and brightness.\n             | // Now you can use it like this:\n             | var c = paper.circle(10, 10, 10).attr({hue: .45});\n             | // or even like this:\n             | c.animate({hue: 1}, 1e3);\n             |\n             | // You could also create custom attribute\n             | // with multiple parameters:\n             | paper.customAttributes.hsb = function (h, s, b) {\n             |     return {fill: "hsb(" + [h, s, b].join(",") + ")"};\n             | };\n             | c.attr({hsb: "0.5 .8 1"});\n             | c.animate({hsb: [1, 0, 0.5]}, 1e3);\n            \\*/\n            this.ca = this.customAttributes = {};\n        },\n        paperproto,\n        appendChild = "appendChild",\n        apply = "apply",\n        concat = "concat",\n        //taken from Modernizr touch test: https://github.com/Modernizr/Modernizr/blob/master/feature-detects/touchevents.js#L40\n        supportsTouch = (\'ontouchstart\' in window) || window.TouchEvent || window.DocumentTouch && document instanceof DocumentTouch,\n        E = "",\n        S = " ",\n        Str = String,\n        split = "split",\n        events = "click dblclick mousedown mousemove mouseout mouseover mouseup touchstart touchmove touchend touchcancel"[split](S),\n        touchMap = {\n            mousedown: "touchstart",\n            mousemove: "touchmove",\n            mouseup: "touchend"\n        },\n        lowerCase = Str.prototype.toLowerCase,\n        math = Math,\n        mmax = math.max,\n        mmin = math.min,\n        abs = math.abs,\n        pow = math.pow,\n        PI = math.PI,\n        nu = "number",\n        string = "string",\n        array = "array",\n        toString = "toString",\n        fillString = "fill",\n        objectToString = Object.prototype.toString,\n        paper = {},\n        push = "push",\n        ISURL = R._ISURL = /^url\\([\'"]?(.+?)[\'"]?\\)$/i,\n        colourRegExp = /^\\s*((#[a-f\\d]{6})|(#[a-f\\d]{3})|rgba?\\(\\s*([\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?(?:\\s*,\\s*[\\d\\.]+%?)?)\\s*\\)|hsba?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?)%?\\s*\\)|hsla?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?)%?\\s*\\))\\s*$/i,\n        isnan = {"NaN": 1, "Infinity": 1, "-Infinity": 1},\n        bezierrg = /^(?:cubic-)?bezier\\(([^,]+),([^,]+),([^,]+),([^\\)]+)\\)/,\n        round = math.round,\n        setAttribute = "setAttribute",\n        toFloat = parseFloat,\n        toInt = parseInt,\n        upperCase = Str.prototype.toUpperCase,\n        availableAttrs = R._availableAttrs = {\n            "arrow-end": "none",\n            "arrow-start": "none",\n            blur: 0,\n            "clip-rect": "0 0 1e9 1e9",\n            cursor: "default",\n            cx: 0,\n            cy: 0,\n            fill: "#fff",\n            "fill-opacity": 1,\n            font: \'10px "Arial"\',\n            "font-family": \'"Arial"\',\n            "font-size": "10",\n            "font-style": "normal",\n            "font-weight": 400,\n            gradient: 0,\n            height: 0,\n            href: "http://raphaeljs.com/",\n            "letter-spacing": 0,\n            opacity: 1,\n            path: "M0,0",\n            r: 0,\n            rx: 0,\n            ry: 0,\n            src: "",\n            stroke: "#000",\n            "stroke-dasharray": "",\n            "stroke-linecap": "butt",\n            "stroke-linejoin": "butt",\n            "stroke-miterlimit": 0,\n            "stroke-opacity": 1,\n            "stroke-width": 1,\n            target: "_blank",\n            "text-anchor": "middle",\n            title: "Raphael",\n            transform: "",\n            width: 0,\n            x: 0,\n            y: 0,\n            "class": ""\n        },\n        availableAnimAttrs = R._availableAnimAttrs = {\n            blur: nu,\n            "clip-rect": "csv",\n            cx: nu,\n            cy: nu,\n            fill: "colour",\n            "fill-opacity": nu,\n            "font-size": nu,\n            height: nu,\n            opacity: nu,\n            path: "path",\n            r: nu,\n            rx: nu,\n            ry: nu,\n            stroke: "colour",\n            "stroke-opacity": nu,\n            "stroke-width": nu,\n            transform: "transform",\n            width: nu,\n            x: nu,\n            y: nu\n        },\n        whitespace = /[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]/g,\n        commaSpaces = /[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*/,\n        hsrg = {hs: 1, rg: 1},\n        p2s = /,?([achlmqrstvxz]),?/gi,\n        pathCommand = /([achlmrqstvz])[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*)+)/ig,\n        tCommand = /([rstm])[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*)+)/ig,\n        pathValues = /(-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*/ig,\n        radial_gradient = R._radial_gradient = /^r(?:\\(([^,]+?)[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*([^\\)]+?)\\))?/,\n        eldata = {},\n        sortByKey = function (a, b) {\n            return a.key - b.key;\n        },\n        sortByNumber = function (a, b) {\n            return toFloat(a) - toFloat(b);\n        },\n        fun = function () {},\n        pipe = function (x) {\n            return x;\n        },\n        rectPath = R._rectPath = function (x, y, w, h, r) {\n            if (r) {\n                return [["M", x + r, y], ["l", w - r * 2, 0], ["a", r, r, 0, 0, 1, r, r], ["l", 0, h - r * 2], ["a", r, r, 0, 0, 1, -r, r], ["l", r * 2 - w, 0], ["a", r, r, 0, 0, 1, -r, -r], ["l", 0, r * 2 - h], ["a", r, r, 0, 0, 1, r, -r], ["z"]];\n            }\n            return [["M", x, y], ["l", w, 0], ["l", 0, h], ["l", -w, 0], ["z"]];\n        },\n        ellipsePath = function (x, y, rx, ry) {\n            if (ry == null) {\n                ry = rx;\n            }\n            return [["M", x, y], ["m", 0, -ry], ["a", rx, ry, 0, 1, 1, 0, 2 * ry], ["a", rx, ry, 0, 1, 1, 0, -2 * ry], ["z"]];\n        },\n        getPath = R._getPath = {\n            path: function (el) {\n                return el.attr("path");\n            },\n            circle: function (el) {\n                var a = el.attrs;\n                return ellipsePath(a.cx, a.cy, a.r);\n            },\n            ellipse: function (el) {\n                var a = el.attrs;\n                return ellipsePath(a.cx, a.cy, a.rx, a.ry);\n            },\n            rect: function (el) {\n                var a = el.attrs;\n                return rectPath(a.x, a.y, a.width, a.height, a.r);\n            },\n            image: function (el) {\n                var a = el.attrs;\n                return rectPath(a.x, a.y, a.width, a.height);\n            },\n            text: function (el) {\n                var bbox = el._getBBox();\n                return rectPath(bbox.x, bbox.y, bbox.width, bbox.height);\n            },\n            set : function(el) {\n                var bbox = el._getBBox();\n                return rectPath(bbox.x, bbox.y, bbox.width, bbox.height);\n            }\n        },\n        /*\\\n         * Raphael.mapPath\n         [ method ]\n         **\n         * Transform the path string with given matrix.\n         > Parameters\n         - path (string) path string\n         - matrix (object) see @Matrix\n         = (string) transformed path string\n        \\*/\n        mapPath = R.mapPath = function (path, matrix) {\n            if (!matrix) {\n                return path;\n            }\n            var x, y, i, j, ii, jj, pathi;\n            path = path2curve(path);\n            for (i = 0, ii = path.length; i < ii; i++) {\n                pathi = path[i];\n                for (j = 1, jj = pathi.length; j < jj; j += 2) {\n                    x = matrix.x(pathi[j], pathi[j + 1]);\n                    y = matrix.y(pathi[j], pathi[j + 1]);\n                    pathi[j] = x;\n                    pathi[j + 1] = y;\n                }\n            }\n            return path;\n        };\n\n    R._g = g;\n    /*\\\n     * Raphael.type\n     [ property (string) ]\n     **\n     * Can be “SVG”, “VML” or empty, depending on browser support.\n    \\*/\n    R.type = (g.win.SVGAngle || g.doc.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure", "1.1") ? "SVG" : "VML");\n    if (R.type == "VML") {\n        var d = g.doc.createElement("div"),\n            b;\n        d.innerHTML = \'<v:shape adj="1"/>\';\n        b = d.firstChild;\n        b.style.behavior = "url(#default#VML)";\n        if (!(b && typeof b.adj == "object")) {\n            return (R.type = E);\n        }\n        d = null;\n    }\n    /*\\\n     * Raphael.svg\n     [ property (boolean) ]\n     **\n     * `true` if browser supports SVG.\n    \\*/\n    /*\\\n     * Raphael.vml\n     [ property (boolean) ]\n     **\n     * `true` if browser supports VML.\n    \\*/\n    R.svg = !(R.vml = R.type == "VML");\n    R._Paper = Paper;\n    /*\\\n     * Raphael.fn\n     [ property (object) ]\n     **\n     * You can add your own method to the canvas. For example if you want to draw a pie chart,\n     * you can create your own pie chart function and ship it as a Raphaël plugin. To do this\n     * you need to extend the `Raphael.fn` object. You should modify the `fn` object before a\n     * Raphaël instance is created, otherwise it will take no effect. Please note that the\n     * ability for namespaced plugins was removed in Raphael 2.0. It is up to the plugin to\n     * ensure any namespacing ensures proper context.\n     > Usage\n     | Raphael.fn.arrow = function (x1, y1, x2, y2, size) {\n     |     return this.path( ... );\n     | };\n     | // or create namespace\n     | Raphael.fn.mystuff = {\n     |     arrow: function () {…},\n     |     star: function () {…},\n     |     // etc…\n     | };\n     | var paper = Raphael(10, 10, 630, 480);\n     | // then use it\n     | paper.arrow(10, 10, 30, 30, 5).attr({fill: "#f00"});\n     | paper.mystuff.arrow();\n     | paper.mystuff.star();\n    \\*/\n    R.fn = paperproto = Paper.prototype = R.prototype;\n    R._id = 0;\n    /*\\\n     * Raphael.is\n     [ method ]\n     **\n     * Handful of replacements for `typeof` operator.\n     > Parameters\n     - o (…) any object or primitive\n     - type (string) name of the type, i.e. “string”, “function”, “number”, etc.\n     = (boolean) is given value is of given type\n    \\*/\n    R.is = function (o, type) {\n        type = lowerCase.call(type);\n        if (type == "finite") {\n            return !isnan[has](+o);\n        }\n        if (type == "array") {\n            return o instanceof Array;\n        }\n        return  (type == "null" && o === null) ||\n                (type == typeof o && o !== null) ||\n                (type == "object" && o === Object(o)) ||\n                (type == "array" && Array.isArray && Array.isArray(o)) ||\n                objectToString.call(o).slice(8, -1).toLowerCase() == type;\n    };\n\n    function clone(obj) {\n        if (typeof obj == "function" || Object(obj) !== obj) {\n            return obj;\n        }\n        var res = new obj.constructor;\n        for (var key in obj) if (obj[has](key)) {\n            res[key] = clone(obj[key]);\n        }\n        return res;\n    }\n\n    /*\\\n     * Raphael.angle\n     [ method ]\n     **\n     * Returns angle between two or three points\n     > Parameters\n     - x1 (number) x coord of first point\n     - y1 (number) y coord of first point\n     - x2 (number) x coord of second point\n     - y2 (number) y coord of second point\n     - x3 (number) #optional x coord of third point\n     - y3 (number) #optional y coord of third point\n     = (number) angle in degrees.\n    \\*/\n    R.angle = function (x1, y1, x2, y2, x3, y3) {\n        if (x3 == null) {\n            var x = x1 - x2,\n                y = y1 - y2;\n            if (!x && !y) {\n                return 0;\n            }\n            return (180 + math.atan2(-y, -x) * 180 / PI + 360) % 360;\n        } else {\n            return R.angle(x1, y1, x3, y3) - R.angle(x2, y2, x3, y3);\n        }\n    };\n    /*\\\n     * Raphael.rad\n     [ method ]\n     **\n     * Transform angle to radians\n     > Parameters\n     - deg (number) angle in degrees\n     = (number) angle in radians.\n    \\*/\n    R.rad = function (deg) {\n        return deg % 360 * PI / 180;\n    };\n    /*\\\n     * Raphael.deg\n     [ method ]\n     **\n     * Transform angle to degrees\n     > Parameters\n     - rad (number) angle in radians\n     = (number) angle in degrees.\n    \\*/\n    R.deg = function (rad) {\n        return Math.round ((rad * 180 / PI% 360)* 1000) / 1000;\n    };\n    /*\\\n     * Raphael.snapTo\n     [ method ]\n     **\n     * Snaps given value to given grid.\n     > Parameters\n     - values (array|number) given array of values or step of the grid\n     - value (number) value to adjust\n     - tolerance (number) #optional tolerance for snapping. Default is `10`.\n     = (number) adjusted value.\n    \\*/\n    R.snapTo = function (values, value, tolerance) {\n        tolerance = R.is(tolerance, "finite") ? tolerance : 10;\n        if (R.is(values, array)) {\n            var i = values.length;\n            while (i--) if (abs(values[i] - value) <= tolerance) {\n                return values[i];\n            }\n        } else {\n            values = +values;\n            var rem = value % values;\n            if (rem < tolerance) {\n                return value - rem;\n            }\n            if (rem > values - tolerance) {\n                return value - rem + values;\n            }\n        }\n        return value;\n    };\n\n    /*\\\n     * Raphael.createUUID\n     [ method ]\n     **\n     * Returns RFC4122, version 4 ID\n    \\*/\n    var createUUID = R.createUUID = (function (uuidRegEx, uuidReplacer) {\n        return function () {\n            return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(uuidRegEx, uuidReplacer).toUpperCase();\n        };\n    })(/[xy]/g, function (c) {\n        var r = math.random() * 16 | 0,\n            v = c == "x" ? r : (r & 3 | 8);\n        return v.toString(16);\n    });\n\n    /*\\\n     * Raphael.setWindow\n     [ method ]\n     **\n     * Used when you need to draw in `&lt;iframe>`. Switched window to the iframe one.\n     > Parameters\n     - newwin (window) new window object\n    \\*/\n    R.setWindow = function (newwin) {\n        eve("raphael.setWindow", R, g.win, newwin);\n        g.win = newwin;\n        g.doc = g.win.document;\n        if (R._engine.initWin) {\n            R._engine.initWin(g.win);\n        }\n    };\n    var toHex = function (color) {\n        if (R.vml) {\n            // http://dean.edwards.name/weblog/2009/10/convert-any-colour-value-to-hex-in-msie/\n            var trim = /^\\s+|\\s+$/g;\n            var bod;\n            try {\n                var docum = new ActiveXObject("htmlfile");\n                docum.write("<body>");\n                docum.close();\n                bod = docum.body;\n            } catch(e) {\n                bod = createPopup().document.body;\n            }\n            var range = bod.createTextRange();\n            toHex = cacher(function (color) {\n                try {\n                    bod.style.color = Str(color).replace(trim, E);\n                    var value = range.queryCommandValue("ForeColor");\n                    value = ((value & 255) << 16) | (value & 65280) | ((value & 16711680) >>> 16);\n                    return "#" + ("000000" + value.toString(16)).slice(-6);\n                } catch(e) {\n                    return "none";\n                }\n            });\n        } else {\n            var i = g.doc.createElement("i");\n            i.title = "Rapha\\xebl Colour Picker";\n            i.style.display = "none";\n            g.doc.body.appendChild(i);\n            toHex = cacher(function (color) {\n                i.style.color = color;\n                return g.doc.defaultView.getComputedStyle(i, E).getPropertyValue("color");\n            });\n        }\n        return toHex(color);\n    },\n    hsbtoString = function () {\n        return "hsb(" + [this.h, this.s, this.b] + ")";\n    },\n    hsltoString = function () {\n        return "hsl(" + [this.h, this.s, this.l] + ")";\n    },\n    rgbtoString = function () {\n        return this.hex;\n    },\n    prepareRGB = function (r, g, b) {\n        if (g == null && R.is(r, "object") && "r" in r && "g" in r && "b" in r) {\n            b = r.b;\n            g = r.g;\n            r = r.r;\n        }\n        if (g == null && R.is(r, string)) {\n            var clr = R.getRGB(r);\n            r = clr.r;\n            g = clr.g;\n            b = clr.b;\n        }\n        if (r > 1 || g > 1 || b > 1) {\n            r /= 255;\n            g /= 255;\n            b /= 255;\n        }\n\n        return [r, g, b];\n    },\n    packageRGB = function (r, g, b, o) {\n        r *= 255;\n        g *= 255;\n        b *= 255;\n        var rgb = {\n            r: r,\n            g: g,\n            b: b,\n            hex: R.rgb(r, g, b),\n            toString: rgbtoString\n        };\n        R.is(o, "finite") && (rgb.opacity = o);\n        return rgb;\n    };\n\n    /*\\\n     * Raphael.color\n     [ method ]\n     **\n     * Parses the color string and returns object with all values for the given color.\n     > Parameters\n     - clr (string) color string in one of the supported formats (see @Raphael.getRGB)\n     = (object) Combined RGB & HSB object in format:\n     o {\n     o     r (number) red,\n     o     g (number) green,\n     o     b (number) blue,\n     o     hex (string) color in HTML/CSS format: #••••••,\n     o     error (boolean) `true` if string can’t be parsed,\n     o     h (number) hue,\n     o     s (number) saturation,\n     o     v (number) value (brightness),\n     o     l (number) lightness\n     o }\n    \\*/\n    R.color = function (clr) {\n        var rgb;\n        if (R.is(clr, "object") && "h" in clr && "s" in clr && "b" in clr) {\n            rgb = R.hsb2rgb(clr);\n            clr.r = rgb.r;\n            clr.g = rgb.g;\n            clr.b = rgb.b;\n            clr.hex = rgb.hex;\n        } else if (R.is(clr, "object") && "h" in clr && "s" in clr && "l" in clr) {\n            rgb = R.hsl2rgb(clr);\n            clr.r = rgb.r;\n            clr.g = rgb.g;\n            clr.b = rgb.b;\n            clr.hex = rgb.hex;\n        } else {\n            if (R.is(clr, "string")) {\n                clr = R.getRGB(clr);\n            }\n            if (R.is(clr, "object") && "r" in clr && "g" in clr && "b" in clr) {\n                rgb = R.rgb2hsl(clr);\n                clr.h = rgb.h;\n                clr.s = rgb.s;\n                clr.l = rgb.l;\n                rgb = R.rgb2hsb(clr);\n                clr.v = rgb.b;\n            } else {\n                clr = {hex: "none"};\n                clr.r = clr.g = clr.b = clr.h = clr.s = clr.v = clr.l = -1;\n            }\n        }\n        clr.toString = rgbtoString;\n        return clr;\n    };\n    /*\\\n     * Raphael.hsb2rgb\n     [ method ]\n     **\n     * Converts HSB values to RGB object.\n     > Parameters\n     - h (number) hue\n     - s (number) saturation\n     - v (number) value or brightness\n     = (object) RGB object in format:\n     o {\n     o     r (number) red,\n     o     g (number) green,\n     o     b (number) blue,\n     o     hex (string) color in HTML/CSS format: #••••••\n     o }\n    \\*/\n    R.hsb2rgb = function (h, s, v, o) {\n        if (this.is(h, "object") && "h" in h && "s" in h && "b" in h) {\n            v = h.b;\n            s = h.s;\n            o = h.o;\n            h = h.h;\n        }\n        h *= 360;\n        var R, G, B, X, C;\n        h = (h % 360) / 60;\n        C = v * s;\n        X = C * (1 - abs(h % 2 - 1));\n        R = G = B = v - C;\n\n        h = ~~h;\n        R += [C, X, 0, 0, X, C][h];\n        G += [X, C, C, X, 0, 0][h];\n        B += [0, 0, X, C, C, X][h];\n        return packageRGB(R, G, B, o);\n    };\n    /*\\\n     * Raphael.hsl2rgb\n     [ method ]\n     **\n     * Converts HSL values to RGB object.\n     > Parameters\n     - h (number) hue\n     - s (number) saturation\n     - l (number) luminosity\n     = (object) RGB object in format:\n     o {\n     o     r (number) red,\n     o     g (number) green,\n     o     b (number) blue,\n     o     hex (string) color in HTML/CSS format: #••••••\n     o }\n    \\*/\n    R.hsl2rgb = function (h, s, l, o) {\n        if (this.is(h, "object") && "h" in h && "s" in h && "l" in h) {\n            l = h.l;\n            s = h.s;\n            h = h.h;\n        }\n        if (h > 1 || s > 1 || l > 1) {\n            h /= 360;\n            s /= 100;\n            l /= 100;\n        }\n        h *= 360;\n        var R, G, B, X, C;\n        h = (h % 360) / 60;\n        C = 2 * s * (l < .5 ? l : 1 - l);\n        X = C * (1 - abs(h % 2 - 1));\n        R = G = B = l - C / 2;\n\n        h = ~~h;\n        R += [C, X, 0, 0, X, C][h];\n        G += [X, C, C, X, 0, 0][h];\n        B += [0, 0, X, C, C, X][h];\n        return packageRGB(R, G, B, o);\n    };\n    /*\\\n     * Raphael.rgb2hsb\n     [ method ]\n     **\n     * Converts RGB values to HSB object.\n     > Parameters\n     - r (number) red\n     - g (number) green\n     - b (number) blue\n     = (object) HSB object in format:\n     o {\n     o     h (number) hue\n     o     s (number) saturation\n     o     b (number) brightness\n     o }\n    \\*/\n    R.rgb2hsb = function (r, g, b) {\n        b = prepareRGB(r, g, b);\n        r = b[0];\n        g = b[1];\n        b = b[2];\n\n        var H, S, V, C;\n        V = mmax(r, g, b);\n        C = V - mmin(r, g, b);\n        H = (C == 0 ? null :\n             V == r ? (g - b) / C :\n             V == g ? (b - r) / C + 2 :\n                      (r - g) / C + 4\n            );\n        H = ((H + 360) % 6) * 60 / 360;\n        S = C == 0 ? 0 : C / V;\n        return {h: H, s: S, b: V, toString: hsbtoString};\n    };\n    /*\\\n     * Raphael.rgb2hsl\n     [ method ]\n     **\n     * Converts RGB values to HSL object.\n     > Parameters\n     - r (number) red\n     - g (number) green\n     - b (number) blue\n     = (object) HSL object in format:\n     o {\n     o     h (number) hue\n     o     s (number) saturation\n     o     l (number) luminosity\n     o }\n    \\*/\n    R.rgb2hsl = function (r, g, b) {\n        b = prepareRGB(r, g, b);\n        r = b[0];\n        g = b[1];\n        b = b[2];\n\n        var H, S, L, M, m, C;\n        M = mmax(r, g, b);\n        m = mmin(r, g, b);\n        C = M - m;\n        H = (C == 0 ? null :\n             M == r ? (g - b) / C :\n             M == g ? (b - r) / C + 2 :\n                      (r - g) / C + 4);\n        H = ((H + 360) % 6) * 60 / 360;\n        L = (M + m) / 2;\n        S = (C == 0 ? 0 :\n             L < .5 ? C / (2 * L) :\n                      C / (2 - 2 * L));\n        return {h: H, s: S, l: L, toString: hsltoString};\n    };\n    R._path2string = function () {\n        return this.join(",").replace(p2s, "$1");\n    };\n    function repush(array, item) {\n        for (var i = 0, ii = array.length; i < ii; i++) if (array[i] === item) {\n            return array.push(array.splice(i, 1)[0]);\n        }\n    }\n    function cacher(f, scope, postprocessor) {\n        function newf() {\n            var arg = Array.prototype.slice.call(arguments, 0),\n                args = arg.join("\\u2400"),\n                cache = newf.cache = newf.cache || {},\n                count = newf.count = newf.count || [];\n            if (cache[has](args)) {\n                repush(count, args);\n                return postprocessor ? postprocessor(cache[args]) : cache[args];\n            }\n            count.length >= 1e3 && delete cache[count.shift()];\n            count.push(args);\n            cache[args] = f[apply](scope, arg);\n            return postprocessor ? postprocessor(cache[args]) : cache[args];\n        }\n        return newf;\n    }\n\n    var preload = R._preload = function (src, f) {\n        var img = g.doc.createElement("img");\n        img.style.cssText = "position:absolute;left:-9999em;top:-9999em";\n        img.onload = function () {\n            f.call(this);\n            this.onload = null;\n            g.doc.body.removeChild(this);\n        };\n        img.onerror = function () {\n            g.doc.body.removeChild(this);\n        };\n        g.doc.body.appendChild(img);\n        img.src = src;\n    };\n\n    function clrToString() {\n        return this.hex;\n    }\n\n    /*\\\n     * Raphael.getRGB\n     [ method ]\n     **\n     * Parses colour string as RGB object\n     > Parameters\n     - colour (string) colour string in one of formats:\n     # <ul>\n     #     <li>Colour name (“<code>red</code>”, “<code>green</code>”, “<code>cornflowerblue</code>”, etc)</li>\n     #     <li>#••• — shortened HTML colour: (“<code>#000</code>”, “<code>#fc0</code>”, etc)</li>\n     #     <li>#•••••• — full length HTML colour: (“<code>#000000</code>”, “<code>#bd2300</code>”)</li>\n     #     <li>rgb(•••, •••, •••) — red, green and blue channels’ values: (“<code>rgb(200,&nbsp;100,&nbsp;0)</code>”)</li>\n     #     <li>rgb(•••%, •••%, •••%) — same as above, but in %: (“<code>rgb(100%,&nbsp;175%,&nbsp;0%)</code>”)</li>\n     #     <li>hsb(•••, •••, •••) — hue, saturation and brightness values: (“<code>hsb(0.5,&nbsp;0.25,&nbsp;1)</code>”)</li>\n     #     <li>hsb(•••%, •••%, •••%) — same as above, but in %</li>\n     #     <li>hsl(•••, •••, •••) — same as hsb</li>\n     #     <li>hsl(•••%, •••%, •••%) — same as hsb</li>\n     # </ul>\n     = (object) RGB object in format:\n     o {\n     o     r (number) red,\n     o     g (number) green,\n     o     b (number) blue\n     o     hex (string) color in HTML/CSS format: #••••••,\n     o     error (boolean) true if string can’t be parsed\n     o }\n    \\*/\n    R.getRGB = cacher(function (colour) {\n        if (!colour || !!((colour = Str(colour)).indexOf("-") + 1)) {\n            return {r: -1, g: -1, b: -1, hex: "none", error: 1, toString: clrToString};\n        }\n        if (colour == "none") {\n            return {r: -1, g: -1, b: -1, hex: "none", toString: clrToString};\n        }\n        !(hsrg[has](colour.toLowerCase().substring(0, 2)) || colour.charAt() == "#") && (colour = toHex(colour));\n        var res,\n            red,\n            green,\n            blue,\n            opacity,\n            t,\n            values,\n            rgb = colour.match(colourRegExp);\n        if (rgb) {\n            if (rgb[2]) {\n                blue = toInt(rgb[2].substring(5), 16);\n                green = toInt(rgb[2].substring(3, 5), 16);\n                red = toInt(rgb[2].substring(1, 3), 16);\n            }\n            if (rgb[3]) {\n                blue = toInt((t = rgb[3].charAt(3)) + t, 16);\n                green = toInt((t = rgb[3].charAt(2)) + t, 16);\n                red = toInt((t = rgb[3].charAt(1)) + t, 16);\n            }\n            if (rgb[4]) {\n                values = rgb[4][split](commaSpaces);\n                red = toFloat(values[0]);\n                values[0].slice(-1) == "%" && (red *= 2.55);\n                green = toFloat(values[1]);\n                values[1].slice(-1) == "%" && (green *= 2.55);\n                blue = toFloat(values[2]);\n                values[2].slice(-1) == "%" && (blue *= 2.55);\n                rgb[1].toLowerCase().slice(0, 4) == "rgba" && (opacity = toFloat(values[3]));\n                values[3] && values[3].slice(-1) == "%" && (opacity /= 100);\n            }\n            if (rgb[5]) {\n                values = rgb[5][split](commaSpaces);\n                red = toFloat(values[0]);\n                values[0].slice(-1) == "%" && (red *= 2.55);\n                green = toFloat(values[1]);\n                values[1].slice(-1) == "%" && (green *= 2.55);\n                blue = toFloat(values[2]);\n                values[2].slice(-1) == "%" && (blue *= 2.55);\n                (values[0].slice(-3) == "deg" || values[0].slice(-1) == "\\xb0") && (red /= 360);\n                rgb[1].toLowerCase().slice(0, 4) == "hsba" && (opacity = toFloat(values[3]));\n                values[3] && values[3].slice(-1) == "%" && (opacity /= 100);\n                return R.hsb2rgb(red, green, blue, opacity);\n            }\n            if (rgb[6]) {\n                values = rgb[6][split](commaSpaces);\n                red = toFloat(values[0]);\n                values[0].slice(-1) == "%" && (red *= 2.55);\n                green = toFloat(values[1]);\n                values[1].slice(-1) == "%" && (green *= 2.55);\n                blue = toFloat(values[2]);\n                values[2].slice(-1) == "%" && (blue *= 2.55);\n                (values[0].slice(-3) == "deg" || values[0].slice(-1) == "\\xb0") && (red /= 360);\n                rgb[1].toLowerCase().slice(0, 4) == "hsla" && (opacity = toFloat(values[3]));\n                values[3] && values[3].slice(-1) == "%" && (opacity /= 100);\n                return R.hsl2rgb(red, green, blue, opacity);\n            }\n            rgb = {r: red, g: green, b: blue, toString: clrToString};\n            rgb.hex = "#" + (16777216 | blue | (green << 8) | (red << 16)).toString(16).slice(1);\n            R.is(opacity, "finite") && (rgb.opacity = opacity);\n            return rgb;\n        }\n        return {r: -1, g: -1, b: -1, hex: "none", error: 1, toString: clrToString};\n    }, R);\n    /*\\\n     * Raphael.hsb\n     [ method ]\n     **\n     * Converts HSB values to hex representation of the colour.\n     > Parameters\n     - h (number) hue\n     - s (number) saturation\n     - b (number) value or brightness\n     = (string) hex representation of the colour.\n    \\*/\n    R.hsb = cacher(function (h, s, b) {\n        return R.hsb2rgb(h, s, b).hex;\n    });\n    /*\\\n     * Raphael.hsl\n     [ method ]\n     **\n     * Converts HSL values to hex representation of the colour.\n     > Parameters\n     - h (number) hue\n     - s (number) saturation\n     - l (number) luminosity\n     = (string) hex representation of the colour.\n    \\*/\n    R.hsl = cacher(function (h, s, l) {\n        return R.hsl2rgb(h, s, l).hex;\n    });\n    /*\\\n     * Raphael.rgb\n     [ method ]\n     **\n     * Converts RGB values to hex representation of the colour.\n     > Parameters\n     - r (number) red\n     - g (number) green\n     - b (number) blue\n     = (string) hex representation of the colour.\n    \\*/\n    R.rgb = cacher(function (r, g, b) {\n        function round(x) { return (x + 0.5) | 0; }\n        return "#" + (16777216 | round(b) | (round(g) << 8) | (round(r) << 16)).toString(16).slice(1);\n    });\n    /*\\\n     * Raphael.getColor\n     [ method ]\n     **\n     * On each call returns next colour in the spectrum. To reset it back to red call @Raphael.getColor.reset\n     > Parameters\n     - value (number) #optional brightness, default is `0.75`\n     = (string) hex representation of the colour.\n    \\*/\n    R.getColor = function (value) {\n        var start = this.getColor.start = this.getColor.start || {h: 0, s: 1, b: value || .75},\n            rgb = this.hsb2rgb(start.h, start.s, start.b);\n        start.h += .075;\n        if (start.h > 1) {\n            start.h = 0;\n            start.s -= .2;\n            start.s <= 0 && (this.getColor.start = {h: 0, s: 1, b: start.b});\n        }\n        return rgb.hex;\n    };\n    /*\\\n     * Raphael.getColor.reset\n     [ method ]\n     **\n     * Resets spectrum position for @Raphael.getColor back to red.\n    \\*/\n    R.getColor.reset = function () {\n        delete this.start;\n    };\n\n    // http://schepers.cc/getting-to-the-point\n    function catmullRom2bezier(crp, z) {\n        var d = [];\n        for (var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {\n            var p = [\n                        {x: +crp[i - 2], y: +crp[i - 1]},\n                        {x: +crp[i],     y: +crp[i + 1]},\n                        {x: +crp[i + 2], y: +crp[i + 3]},\n                        {x: +crp[i + 4], y: +crp[i + 5]}\n                    ];\n            if (z) {\n                if (!i) {\n                    p[0] = {x: +crp[iLen - 2], y: +crp[iLen - 1]};\n                } else if (iLen - 4 == i) {\n                    p[3] = {x: +crp[0], y: +crp[1]};\n                } else if (iLen - 2 == i) {\n                    p[2] = {x: +crp[0], y: +crp[1]};\n                    p[3] = {x: +crp[2], y: +crp[3]};\n                }\n            } else {\n                if (iLen - 4 == i) {\n                    p[3] = p[2];\n                } else if (!i) {\n                    p[0] = {x: +crp[i], y: +crp[i + 1]};\n                }\n            }\n            d.push(["C",\n                  (-p[0].x + 6 * p[1].x + p[2].x) / 6,\n                  (-p[0].y + 6 * p[1].y + p[2].y) / 6,\n                  (p[1].x + 6 * p[2].x - p[3].x) / 6,\n                  (p[1].y + 6*p[2].y - p[3].y) / 6,\n                  p[2].x,\n                  p[2].y\n            ]);\n        }\n\n        return d;\n    }\n    /*\\\n     * Raphael.parsePathString\n     [ method ]\n     **\n     * Utility method\n     **\n     * Parses given path string into an array of arrays of path segments.\n     > Parameters\n     - pathString (string|array) path string or array of segments (in the last case it will be returned straight away)\n     = (array) array of segments.\n    \\*/\n    R.parsePathString = function (pathString) {\n        if (!pathString) {\n            return null;\n        }\n        var pth = paths(pathString);\n        if (pth.arr) {\n            return pathClone(pth.arr);\n        }\n\n        var paramCounts = {a: 7, c: 6, h: 1, l: 2, m: 2, r: 4, q: 4, s: 4, t: 2, v: 1, z: 0},\n            data = [];\n        if (R.is(pathString, array) && R.is(pathString[0], array)) { // rough assumption\n            data = pathClone(pathString);\n        }\n        if (!data.length) {\n            Str(pathString).replace(pathCommand, function (a, b, c) {\n                var params = [],\n                    name = b.toLowerCase();\n                c.replace(pathValues, function (a, b) {\n                    b && params.push(+b);\n                });\n                if (name == "m" && params.length > 2) {\n                    data.push([b][concat](params.splice(0, 2)));\n                    name = "l";\n                    b = b == "m" ? "l" : "L";\n                }\n                if (name == "r") {\n                    data.push([b][concat](params));\n                } else while (params.length >= paramCounts[name]) {\n                    data.push([b][concat](params.splice(0, paramCounts[name])));\n                    if (!paramCounts[name]) {\n                        break;\n                    }\n                }\n            });\n        }\n        data.toString = R._path2string;\n        pth.arr = pathClone(data);\n        return data;\n    };\n    /*\\\n     * Raphael.parseTransformString\n     [ method ]\n     **\n     * Utility method\n     **\n     * Parses given path string into an array of transformations.\n     > Parameters\n     - TString (string|array) transform string or array of transformations (in the last case it will be returned straight away)\n     = (array) array of transformations.\n    \\*/\n    R.parseTransformString = cacher(function (TString) {\n        if (!TString) {\n            return null;\n        }\n        var paramCounts = {r: 3, s: 4, t: 2, m: 6},\n            data = [];\n        if (R.is(TString, array) && R.is(TString[0], array)) { // rough assumption\n            data = pathClone(TString);\n        }\n        if (!data.length) {\n            Str(TString).replace(tCommand, function (a, b, c) {\n                var params = [],\n                    name = lowerCase.call(b);\n                c.replace(pathValues, function (a, b) {\n                    b && params.push(+b);\n                });\n                data.push([b][concat](params));\n            });\n        }\n        data.toString = R._path2string;\n        return data;\n    }, this, function(elem) {\n        if (!elem) return elem;\n        var newData = [];\n        for (var i = 0; i < elem.length; i++) {\n            var newLevel = [];\n            for (var j = 0; j < elem[i].length; j++) {\n                newLevel.push(elem[i][j]);\n            }\n            newData.push(newLevel);\n        }\n      return newData; } );\n    // PATHS\n    var paths = function (ps) {\n        var p = paths.ps = paths.ps || {};\n        if (p[ps]) {\n            p[ps].sleep = 100;\n        } else {\n            p[ps] = {\n                sleep: 100\n            };\n        }\n        setTimeout(function () {\n            for (var key in p) if (p[has](key) && key != ps) {\n                p[key].sleep--;\n                !p[key].sleep && delete p[key];\n            }\n        });\n        return p[ps];\n    };\n    /*\\\n     * Raphael.findDotsAtSegment\n     [ method ]\n     **\n     * Utility method\n     **\n     * Find dot coordinates on the given cubic bezier curve at the given t.\n     > Parameters\n     - p1x (number) x of the first point of the curve\n     - p1y (number) y of the first point of the curve\n     - c1x (number) x of the first anchor of the curve\n     - c1y (number) y of the first anchor of the curve\n     - c2x (number) x of the second anchor of the curve\n     - c2y (number) y of the second anchor of the curve\n     - p2x (number) x of the second point of the curve\n     - p2y (number) y of the second point of the curve\n     - t (number) position on the curve (0..1)\n     = (object) point information in format:\n     o {\n     o     x: (number) x coordinate of the point\n     o     y: (number) y coordinate of the point\n     o     m: {\n     o         x: (number) x coordinate of the left anchor\n     o         y: (number) y coordinate of the left anchor\n     o     }\n     o     n: {\n     o         x: (number) x coordinate of the right anchor\n     o         y: (number) y coordinate of the right anchor\n     o     }\n     o     start: {\n     o         x: (number) x coordinate of the start of the curve\n     o         y: (number) y coordinate of the start of the curve\n     o     }\n     o     end: {\n     o         x: (number) x coordinate of the end of the curve\n     o         y: (number) y coordinate of the end of the curve\n     o     }\n     o     alpha: (number) angle of the curve derivative at the point\n     o }\n    \\*/\n    R.findDotsAtSegment = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n        var t1 = 1 - t,\n            t13 = pow(t1, 3),\n            t12 = pow(t1, 2),\n            t2 = t * t,\n            t3 = t2 * t,\n            x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x,\n            y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y,\n            mx = p1x + 2 * t * (c1x - p1x) + t2 * (c2x - 2 * c1x + p1x),\n            my = p1y + 2 * t * (c1y - p1y) + t2 * (c2y - 2 * c1y + p1y),\n            nx = c1x + 2 * t * (c2x - c1x) + t2 * (p2x - 2 * c2x + c1x),\n            ny = c1y + 2 * t * (c2y - c1y) + t2 * (p2y - 2 * c2y + c1y),\n            ax = t1 * p1x + t * c1x,\n            ay = t1 * p1y + t * c1y,\n            cx = t1 * c2x + t * p2x,\n            cy = t1 * c2y + t * p2y,\n            alpha = (90 - math.atan2(mx - nx, my - ny) * 180 / PI);\n        (mx > nx || my < ny) && (alpha += 180);\n        return {\n            x: x,\n            y: y,\n            m: {x: mx, y: my},\n            n: {x: nx, y: ny},\n            start: {x: ax, y: ay},\n            end: {x: cx, y: cy},\n            alpha: alpha\n        };\n    };\n    /*\\\n     * Raphael.bezierBBox\n     [ method ]\n     **\n     * Utility method\n     **\n     * Return bounding box of a given cubic bezier curve\n     > Parameters\n     - p1x (number) x of the first point of the curve\n     - p1y (number) y of the first point of the curve\n     - c1x (number) x of the first anchor of the curve\n     - c1y (number) y of the first anchor of the curve\n     - c2x (number) x of the second anchor of the curve\n     - c2y (number) y of the second anchor of the curve\n     - p2x (number) x of the second point of the curve\n     - p2y (number) y of the second point of the curve\n     * or\n     - bez (array) array of six points for bezier curve\n     = (object) point information in format:\n     o {\n     o     min: {\n     o         x: (number) x coordinate of the left point\n     o         y: (number) y coordinate of the top point\n     o     }\n     o     max: {\n     o         x: (number) x coordinate of the right point\n     o         y: (number) y coordinate of the bottom point\n     o     }\n     o }\n    \\*/\n    R.bezierBBox = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {\n        if (!R.is(p1x, "array")) {\n            p1x = [p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y];\n        }\n        var bbox = curveDim.apply(null, p1x);\n        return {\n            x: bbox.min.x,\n            y: bbox.min.y,\n            x2: bbox.max.x,\n            y2: bbox.max.y,\n            width: bbox.max.x - bbox.min.x,\n            height: bbox.max.y - bbox.min.y\n        };\n    };\n    /*\\\n     * Raphael.isPointInsideBBox\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns `true` if given point is inside bounding boxes.\n     > Parameters\n     - bbox (string) bounding box\n     - x (string) x coordinate of the point\n     - y (string) y coordinate of the point\n     = (boolean) `true` if point inside\n    \\*/\n    R.isPointInsideBBox = function (bbox, x, y) {\n        return x >= bbox.x && x <= bbox.x2 && y >= bbox.y && y <= bbox.y2;\n    };\n    /*\\\n     * Raphael.isBBoxIntersect\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns `true` if two bounding boxes intersect\n     > Parameters\n     - bbox1 (string) first bounding box\n     - bbox2 (string) second bounding box\n     = (boolean) `true` if they intersect\n    \\*/\n    R.isBBoxIntersect = function (bbox1, bbox2) {\n        var i = R.isPointInsideBBox;\n        return i(bbox2, bbox1.x, bbox1.y)\n            || i(bbox2, bbox1.x2, bbox1.y)\n            || i(bbox2, bbox1.x, bbox1.y2)\n            || i(bbox2, bbox1.x2, bbox1.y2)\n            || i(bbox1, bbox2.x, bbox2.y)\n            || i(bbox1, bbox2.x2, bbox2.y)\n            || i(bbox1, bbox2.x, bbox2.y2)\n            || i(bbox1, bbox2.x2, bbox2.y2)\n            || (bbox1.x < bbox2.x2 && bbox1.x > bbox2.x || bbox2.x < bbox1.x2 && bbox2.x > bbox1.x)\n            && (bbox1.y < bbox2.y2 && bbox1.y > bbox2.y || bbox2.y < bbox1.y2 && bbox2.y > bbox1.y);\n    };\n    function base3(t, p1, p2, p3, p4) {\n        var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4,\n            t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;\n        return t * t2 - 3 * p1 + 3 * p2;\n    }\n    function bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {\n        if (z == null) {\n            z = 1;\n        }\n        z = z > 1 ? 1 : z < 0 ? 0 : z;\n        var z2 = z / 2,\n            n = 12,\n            Tvalues = [-0.1252,0.1252,-0.3678,0.3678,-0.5873,0.5873,-0.7699,0.7699,-0.9041,0.9041,-0.9816,0.9816],\n            Cvalues = [0.2491,0.2491,0.2335,0.2335,0.2032,0.2032,0.1601,0.1601,0.1069,0.1069,0.0472,0.0472],\n            sum = 0;\n        for (var i = 0; i < n; i++) {\n            var ct = z2 * Tvalues[i] + z2,\n                xbase = base3(ct, x1, x2, x3, x4),\n                ybase = base3(ct, y1, y2, y3, y4),\n                comb = xbase * xbase + ybase * ybase;\n            sum += Cvalues[i] * math.sqrt(comb);\n        }\n        return z2 * sum;\n    }\n    function getTatLen(x1, y1, x2, y2, x3, y3, x4, y4, ll) {\n        if (ll < 0 || bezlen(x1, y1, x2, y2, x3, y3, x4, y4) < ll) {\n            return;\n        }\n        var t = 1,\n            step = t / 2,\n            t2 = t - step,\n            l,\n            e = .01;\n        l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n        while (abs(l - ll) > e) {\n            step /= 2;\n            t2 += (l < ll ? 1 : -1) * step;\n            l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n        }\n        return t2;\n    }\n    function intersect(x1, y1, x2, y2, x3, y3, x4, y4) {\n        if (\n            mmax(x1, x2) < mmin(x3, x4) ||\n            mmin(x1, x2) > mmax(x3, x4) ||\n            mmax(y1, y2) < mmin(y3, y4) ||\n            mmin(y1, y2) > mmax(y3, y4)\n        ) {\n            return;\n        }\n        var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),\n            ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),\n            denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n\n        if (!denominator) {\n            return;\n        }\n        var px = nx / denominator,\n            py = ny / denominator,\n            px2 = +px.toFixed(2),\n            py2 = +py.toFixed(2);\n        if (\n            px2 < +mmin(x1, x2).toFixed(2) ||\n            px2 > +mmax(x1, x2).toFixed(2) ||\n            px2 < +mmin(x3, x4).toFixed(2) ||\n            px2 > +mmax(x3, x4).toFixed(2) ||\n            py2 < +mmin(y1, y2).toFixed(2) ||\n            py2 > +mmax(y1, y2).toFixed(2) ||\n            py2 < +mmin(y3, y4).toFixed(2) ||\n            py2 > +mmax(y3, y4).toFixed(2)\n        ) {\n            return;\n        }\n        return {x: px, y: py};\n    }\n    function inter(bez1, bez2) {\n        return interHelper(bez1, bez2);\n    }\n    function interCount(bez1, bez2) {\n        return interHelper(bez1, bez2, 1);\n    }\n    function interHelper(bez1, bez2, justCount) {\n        var bbox1 = R.bezierBBox(bez1),\n            bbox2 = R.bezierBBox(bez2);\n        if (!R.isBBoxIntersect(bbox1, bbox2)) {\n            return justCount ? 0 : [];\n        }\n        var l1 = bezlen.apply(0, bez1),\n            l2 = bezlen.apply(0, bez2),\n            n1 = mmax(~~(l1 / 5), 1),\n            n2 = mmax(~~(l2 / 5), 1),\n            dots1 = [],\n            dots2 = [],\n            xy = {},\n            res = justCount ? 0 : [];\n        for (var i = 0; i < n1 + 1; i++) {\n            var p = R.findDotsAtSegment.apply(R, bez1.concat(i / n1));\n            dots1.push({x: p.x, y: p.y, t: i / n1});\n        }\n        for (i = 0; i < n2 + 1; i++) {\n            p = R.findDotsAtSegment.apply(R, bez2.concat(i / n2));\n            dots2.push({x: p.x, y: p.y, t: i / n2});\n        }\n        for (i = 0; i < n1; i++) {\n            for (var j = 0; j < n2; j++) {\n                var di = dots1[i],\n                    di1 = dots1[i + 1],\n                    dj = dots2[j],\n                    dj1 = dots2[j + 1],\n                    ci = abs(di1.x - di.x) < .001 ? "y" : "x",\n                    cj = abs(dj1.x - dj.x) < .001 ? "y" : "x",\n                    is = intersect(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y);\n                if (is) {\n                    if (xy[is.x.toFixed(4)] == is.y.toFixed(4)) {\n                        continue;\n                    }\n                    xy[is.x.toFixed(4)] = is.y.toFixed(4);\n                    var t1 = di.t + abs((is[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t),\n                        t2 = dj.t + abs((is[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);\n                    if (t1 >= 0 && t1 <= 1.001 && t2 >= 0 && t2 <= 1.001) {\n                        if (justCount) {\n                            res++;\n                        } else {\n                            res.push({\n                                x: is.x,\n                                y: is.y,\n                                t1: mmin(t1, 1),\n                                t2: mmin(t2, 1)\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        return res;\n    }\n    /*\\\n     * Raphael.pathIntersection\n     [ method ]\n     **\n     * Utility method\n     **\n     * Finds intersections of two paths\n     > Parameters\n     - path1 (string) path string\n     - path2 (string) path string\n     = (array) dots of intersection\n     o [\n     o     {\n     o         x: (number) x coordinate of the point\n     o         y: (number) y coordinate of the point\n     o         t1: (number) t value for segment of path1\n     o         t2: (number) t value for segment of path2\n     o         segment1: (number) order number for segment of path1\n     o         segment2: (number) order number for segment of path2\n     o         bez1: (array) eight coordinates representing beziér curve for the segment of path1\n     o         bez2: (array) eight coordinates representing beziér curve for the segment of path2\n     o     }\n     o ]\n    \\*/\n    R.pathIntersection = function (path1, path2) {\n        return interPathHelper(path1, path2);\n    };\n    R.pathIntersectionNumber = function (path1, path2) {\n        return interPathHelper(path1, path2, 1);\n    };\n    function interPathHelper(path1, path2, justCount) {\n        path1 = R._path2curve(path1);\n        path2 = R._path2curve(path2);\n        var x1, y1, x2, y2, x1m, y1m, x2m, y2m, bez1, bez2,\n            res = justCount ? 0 : [];\n        for (var i = 0, ii = path1.length; i < ii; i++) {\n            var pi = path1[i];\n            if (pi[0] == "M") {\n                x1 = x1m = pi[1];\n                y1 = y1m = pi[2];\n            } else {\n                if (pi[0] == "C") {\n                    bez1 = [x1, y1].concat(pi.slice(1));\n                    x1 = bez1[6];\n                    y1 = bez1[7];\n                } else {\n                    bez1 = [x1, y1, x1, y1, x1m, y1m, x1m, y1m];\n                    x1 = x1m;\n                    y1 = y1m;\n                }\n                for (var j = 0, jj = path2.length; j < jj; j++) {\n                    var pj = path2[j];\n                    if (pj[0] == "M") {\n                        x2 = x2m = pj[1];\n                        y2 = y2m = pj[2];\n                    } else {\n                        if (pj[0] == "C") {\n                            bez2 = [x2, y2].concat(pj.slice(1));\n                            x2 = bez2[6];\n                            y2 = bez2[7];\n                        } else {\n                            bez2 = [x2, y2, x2, y2, x2m, y2m, x2m, y2m];\n                            x2 = x2m;\n                            y2 = y2m;\n                        }\n                        var intr = interHelper(bez1, bez2, justCount);\n                        if (justCount) {\n                            res += intr;\n                        } else {\n                            for (var k = 0, kk = intr.length; k < kk; k++) {\n                                intr[k].segment1 = i;\n                                intr[k].segment2 = j;\n                                intr[k].bez1 = bez1;\n                                intr[k].bez2 = bez2;\n                            }\n                            res = res.concat(intr);\n                        }\n                    }\n                }\n            }\n        }\n        return res;\n    }\n    /*\\\n     * Raphael.isPointInsidePath\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns `true` if given point is inside a given closed path.\n     > Parameters\n     - path (string) path string\n     - x (number) x of the point\n     - y (number) y of the point\n     = (boolean) true, if point is inside the path\n    \\*/\n    R.isPointInsidePath = function (path, x, y) {\n        var bbox = R.pathBBox(path);\n        return R.isPointInsideBBox(bbox, x, y) &&\n               interPathHelper(path, [["M", x, y], ["H", bbox.x2 + 10]], 1) % 2 == 1;\n    };\n    R._removedFactory = function (methodname) {\n        return function () {\n            eve("raphael.log", null, "Rapha\\xebl: you are calling to method \\u201c" + methodname + "\\u201d of removed object", methodname);\n        };\n    };\n    /*\\\n     * Raphael.pathBBox\n     [ method ]\n     **\n     * Utility method\n     **\n     * Return bounding box of a given path\n     > Parameters\n     - path (string) path string\n     = (object) bounding box\n     o {\n     o     x: (number) x coordinate of the left top point of the box\n     o     y: (number) y coordinate of the left top point of the box\n     o     x2: (number) x coordinate of the right bottom point of the box\n     o     y2: (number) y coordinate of the right bottom point of the box\n     o     width: (number) width of the box\n     o     height: (number) height of the box\n     o     cx: (number) x coordinate of the center of the box\n     o     cy: (number) y coordinate of the center of the box\n     o }\n    \\*/\n    var pathDimensions = R.pathBBox = function (path) {\n        var pth = paths(path);\n        if (pth.bbox) {\n            return clone(pth.bbox);\n        }\n        if (!path) {\n            return {x: 0, y: 0, width: 0, height: 0, x2: 0, y2: 0};\n        }\n        path = path2curve(path);\n        var x = 0,\n            y = 0,\n            X = [],\n            Y = [],\n            p;\n        for (var i = 0, ii = path.length; i < ii; i++) {\n            p = path[i];\n            if (p[0] == "M") {\n                x = p[1];\n                y = p[2];\n                X.push(x);\n                Y.push(y);\n            } else {\n                var dim = curveDim(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n                X = X[concat](dim.min.x, dim.max.x);\n                Y = Y[concat](dim.min.y, dim.max.y);\n                x = p[5];\n                y = p[6];\n            }\n        }\n        var xmin = mmin[apply](0, X),\n            ymin = mmin[apply](0, Y),\n            xmax = mmax[apply](0, X),\n            ymax = mmax[apply](0, Y),\n            width = xmax - xmin,\n            height = ymax - ymin,\n                bb = {\n                x: xmin,\n                y: ymin,\n                x2: xmax,\n                y2: ymax,\n                width: width,\n                height: height,\n                cx: xmin + width / 2,\n                cy: ymin + height / 2\n            };\n        pth.bbox = clone(bb);\n        return bb;\n    },\n        pathClone = function (pathArray) {\n            var res = clone(pathArray);\n            res.toString = R._path2string;\n            return res;\n        },\n        pathToRelative = R._pathToRelative = function (pathArray) {\n            var pth = paths(pathArray);\n            if (pth.rel) {\n                return pathClone(pth.rel);\n            }\n            if (!R.is(pathArray, array) || !R.is(pathArray && pathArray[0], array)) { // rough assumption\n                pathArray = R.parsePathString(pathArray);\n            }\n            var res = [],\n                x = 0,\n                y = 0,\n                mx = 0,\n                my = 0,\n                start = 0;\n            if (pathArray[0][0] == "M") {\n                x = pathArray[0][1];\n                y = pathArray[0][2];\n                mx = x;\n                my = y;\n                start++;\n                res.push(["M", x, y]);\n            }\n            for (var i = start, ii = pathArray.length; i < ii; i++) {\n                var r = res[i] = [],\n                    pa = pathArray[i];\n                if (pa[0] != lowerCase.call(pa[0])) {\n                    r[0] = lowerCase.call(pa[0]);\n                    switch (r[0]) {\n                        case "a":\n                            r[1] = pa[1];\n                            r[2] = pa[2];\n                            r[3] = pa[3];\n                            r[4] = pa[4];\n                            r[5] = pa[5];\n                            r[6] = +(pa[6] - x).toFixed(3);\n                            r[7] = +(pa[7] - y).toFixed(3);\n                            break;\n                        case "v":\n                            r[1] = +(pa[1] - y).toFixed(3);\n                            break;\n                        case "m":\n                            mx = pa[1];\n                            my = pa[2];\n                        default:\n                            for (var j = 1, jj = pa.length; j < jj; j++) {\n                                r[j] = +(pa[j] - ((j % 2) ? x : y)).toFixed(3);\n                            }\n                    }\n                } else {\n                    r = res[i] = [];\n                    if (pa[0] == "m") {\n                        mx = pa[1] + x;\n                        my = pa[2] + y;\n                    }\n                    for (var k = 0, kk = pa.length; k < kk; k++) {\n                        res[i][k] = pa[k];\n                    }\n                }\n                var len = res[i].length;\n                switch (res[i][0]) {\n                    case "z":\n                        x = mx;\n                        y = my;\n                        break;\n                    case "h":\n                        x += +res[i][len - 1];\n                        break;\n                    case "v":\n                        y += +res[i][len - 1];\n                        break;\n                    default:\n                        x += +res[i][len - 2];\n                        y += +res[i][len - 1];\n                }\n            }\n            res.toString = R._path2string;\n            pth.rel = pathClone(res);\n            return res;\n        },\n        pathToAbsolute = R._pathToAbsolute = function (pathArray) {\n            var pth = paths(pathArray);\n            if (pth.abs) {\n                return pathClone(pth.abs);\n            }\n            if (!R.is(pathArray, array) || !R.is(pathArray && pathArray[0], array)) { // rough assumption\n                pathArray = R.parsePathString(pathArray);\n            }\n            if (!pathArray || !pathArray.length) {\n                return [["M", 0, 0]];\n            }\n            var res = [],\n                x = 0,\n                y = 0,\n                mx = 0,\n                my = 0,\n                start = 0;\n            if (pathArray[0][0] == "M") {\n                x = +pathArray[0][1];\n                y = +pathArray[0][2];\n                mx = x;\n                my = y;\n                start++;\n                res[0] = ["M", x, y];\n            }\n            var crz = pathArray.length == 3 && pathArray[0][0] == "M" && pathArray[1][0].toUpperCase() == "R" && pathArray[2][0].toUpperCase() == "Z";\n            for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {\n                res.push(r = []);\n                pa = pathArray[i];\n                if (pa[0] != upperCase.call(pa[0])) {\n                    r[0] = upperCase.call(pa[0]);\n                    switch (r[0]) {\n                        case "A":\n                            r[1] = pa[1];\n                            r[2] = pa[2];\n                            r[3] = pa[3];\n                            r[4] = pa[4];\n                            r[5] = pa[5];\n                            r[6] = +(pa[6] + x);\n                            r[7] = +(pa[7] + y);\n                            break;\n                        case "V":\n                            r[1] = +pa[1] + y;\n                            break;\n                        case "H":\n                            r[1] = +pa[1] + x;\n                            break;\n                        case "R":\n                            var dots = [x, y][concat](pa.slice(1));\n                            for (var j = 2, jj = dots.length; j < jj; j++) {\n                                dots[j] = +dots[j] + x;\n                                dots[++j] = +dots[j] + y;\n                            }\n                            res.pop();\n                            res = res[concat](catmullRom2bezier(dots, crz));\n                            break;\n                        case "M":\n                            mx = +pa[1] + x;\n                            my = +pa[2] + y;\n                        default:\n                            for (j = 1, jj = pa.length; j < jj; j++) {\n                                r[j] = +pa[j] + ((j % 2) ? x : y);\n                            }\n                    }\n                } else if (pa[0] == "R") {\n                    dots = [x, y][concat](pa.slice(1));\n                    res.pop();\n                    res = res[concat](catmullRom2bezier(dots, crz));\n                    r = ["R"][concat](pa.slice(-2));\n                } else {\n                    for (var k = 0, kk = pa.length; k < kk; k++) {\n                        r[k] = pa[k];\n                    }\n                }\n                switch (r[0]) {\n                    case "Z":\n                        x = mx;\n                        y = my;\n                        break;\n                    case "H":\n                        x = r[1];\n                        break;\n                    case "V":\n                        y = r[1];\n                        break;\n                    case "M":\n                        mx = r[r.length - 2];\n                        my = r[r.length - 1];\n                    default:\n                        x = r[r.length - 2];\n                        y = r[r.length - 1];\n                }\n            }\n            res.toString = R._path2string;\n            pth.abs = pathClone(res);\n            return res;\n        },\n        l2c = function (x1, y1, x2, y2) {\n            return [x1, y1, x2, y2, x2, y2];\n        },\n        q2c = function (x1, y1, ax, ay, x2, y2) {\n            var _13 = 1 / 3,\n                _23 = 2 / 3;\n            return [\n                    _13 * x1 + _23 * ax,\n                    _13 * y1 + _23 * ay,\n                    _13 * x2 + _23 * ax,\n                    _13 * y2 + _23 * ay,\n                    x2,\n                    y2\n                ];\n        },\n        a2c = function (x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {\n            // for more information of where this math came from visit:\n            // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n            var _120 = PI * 120 / 180,\n                rad = PI / 180 * (+angle || 0),\n                res = [],\n                xy,\n                rotate = cacher(function (x, y, rad) {\n                    var X = x * math.cos(rad) - y * math.sin(rad),\n                        Y = x * math.sin(rad) + y * math.cos(rad);\n                    return {x: X, y: Y};\n                });\n            if (!recursive) {\n                xy = rotate(x1, y1, -rad);\n                x1 = xy.x;\n                y1 = xy.y;\n                xy = rotate(x2, y2, -rad);\n                x2 = xy.x;\n                y2 = xy.y;\n                var cos = math.cos(PI / 180 * angle),\n                    sin = math.sin(PI / 180 * angle),\n                    x = (x1 - x2) / 2,\n                    y = (y1 - y2) / 2;\n                var h = (x * x) / (rx * rx) + (y * y) / (ry * ry);\n                if (h > 1) {\n                    h = math.sqrt(h);\n                    rx = h * rx;\n                    ry = h * ry;\n                }\n                var rx2 = rx * rx,\n                    ry2 = ry * ry,\n                    k = (large_arc_flag == sweep_flag ? -1 : 1) *\n                        math.sqrt(abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x))),\n                    cx = k * rx * y / ry + (x1 + x2) / 2,\n                    cy = k * -ry * x / rx + (y1 + y2) / 2,\n                    f1 = math.asin(((y1 - cy) / ry).toFixed(9)),\n                    f2 = math.asin(((y2 - cy) / ry).toFixed(9));\n\n                f1 = x1 < cx ? PI - f1 : f1;\n                f2 = x2 < cx ? PI - f2 : f2;\n                f1 < 0 && (f1 = PI * 2 + f1);\n                f2 < 0 && (f2 = PI * 2 + f2);\n                if (sweep_flag && f1 > f2) {\n                    f1 = f1 - PI * 2;\n                }\n                if (!sweep_flag && f2 > f1) {\n                    f2 = f2 - PI * 2;\n                }\n            } else {\n                f1 = recursive[0];\n                f2 = recursive[1];\n                cx = recursive[2];\n                cy = recursive[3];\n            }\n            var df = f2 - f1;\n            if (abs(df) > _120) {\n                var f2old = f2,\n                    x2old = x2,\n                    y2old = y2;\n                f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);\n                x2 = cx + rx * math.cos(f2);\n                y2 = cy + ry * math.sin(f2);\n                res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);\n            }\n            df = f2 - f1;\n            var c1 = math.cos(f1),\n                s1 = math.sin(f1),\n                c2 = math.cos(f2),\n                s2 = math.sin(f2),\n                t = math.tan(df / 4),\n                hx = 4 / 3 * rx * t,\n                hy = 4 / 3 * ry * t,\n                m1 = [x1, y1],\n                m2 = [x1 + hx * s1, y1 - hy * c1],\n                m3 = [x2 + hx * s2, y2 - hy * c2],\n                m4 = [x2, y2];\n            m2[0] = 2 * m1[0] - m2[0];\n            m2[1] = 2 * m1[1] - m2[1];\n            if (recursive) {\n                return [m2, m3, m4][concat](res);\n            } else {\n                res = [m2, m3, m4][concat](res).join()[split](",");\n                var newres = [];\n                for (var i = 0, ii = res.length; i < ii; i++) {\n                    newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;\n                }\n                return newres;\n            }\n        },\n        findDotAtSegment = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n            var t1 = 1 - t;\n            return {\n                x: pow(t1, 3) * p1x + pow(t1, 2) * 3 * t * c1x + t1 * 3 * t * t * c2x + pow(t, 3) * p2x,\n                y: pow(t1, 3) * p1y + pow(t1, 2) * 3 * t * c1y + t1 * 3 * t * t * c2y + pow(t, 3) * p2y\n            };\n        },\n        curveDim = cacher(function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {\n            var a = (c2x - 2 * c1x + p1x) - (p2x - 2 * c2x + c1x),\n                b = 2 * (c1x - p1x) - 2 * (c2x - c1x),\n                c = p1x - c1x,\n                t1 = (-b + math.sqrt(b * b - 4 * a * c)) / 2 / a,\n                t2 = (-b - math.sqrt(b * b - 4 * a * c)) / 2 / a,\n                y = [p1y, p2y],\n                x = [p1x, p2x],\n                dot;\n            abs(t1) > "1e12" && (t1 = .5);\n            abs(t2) > "1e12" && (t2 = .5);\n            if (t1 > 0 && t1 < 1) {\n                dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t1);\n                x.push(dot.x);\n                y.push(dot.y);\n            }\n            if (t2 > 0 && t2 < 1) {\n                dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t2);\n                x.push(dot.x);\n                y.push(dot.y);\n            }\n            a = (c2y - 2 * c1y + p1y) - (p2y - 2 * c2y + c1y);\n            b = 2 * (c1y - p1y) - 2 * (c2y - c1y);\n            c = p1y - c1y;\n            t1 = (-b + math.sqrt(b * b - 4 * a * c)) / 2 / a;\n            t2 = (-b - math.sqrt(b * b - 4 * a * c)) / 2 / a;\n            abs(t1) > "1e12" && (t1 = .5);\n            abs(t2) > "1e12" && (t2 = .5);\n            if (t1 > 0 && t1 < 1) {\n                dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t1);\n                x.push(dot.x);\n                y.push(dot.y);\n            }\n            if (t2 > 0 && t2 < 1) {\n                dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t2);\n                x.push(dot.x);\n                y.push(dot.y);\n            }\n            return {\n                min: {x: mmin[apply](0, x), y: mmin[apply](0, y)},\n                max: {x: mmax[apply](0, x), y: mmax[apply](0, y)}\n            };\n        }),\n        path2curve = R._path2curve = cacher(function (path, path2) {\n            var pth = !path2 && paths(path);\n            if (!path2 && pth.curve) {\n                return pathClone(pth.curve);\n            }\n            var p = pathToAbsolute(path),\n                p2 = path2 && pathToAbsolute(path2),\n                attrs = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n                attrs2 = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n                processPath = function (path, d, pcom) {\n                    var nx, ny, tq = {T:1, Q:1};\n                    if (!path) {\n                        return ["C", d.x, d.y, d.x, d.y, d.x, d.y];\n                    }\n                    !(path[0] in tq) && (d.qx = d.qy = null);\n                    switch (path[0]) {\n                        case "M":\n                            d.X = path[1];\n                            d.Y = path[2];\n                            break;\n                        case "A":\n                            path = ["C"][concat](a2c[apply](0, [d.x, d.y][concat](path.slice(1))));\n                            break;\n                        case "S":\n                            if (pcom == "C" || pcom == "S") { // In "S" case we have to take into account, if the previous command is C/S.\n                                nx = d.x * 2 - d.bx;          // And reflect the previous\n                                ny = d.y * 2 - d.by;          // command\'s control point relative to the current point.\n                            }\n                            else {                            // or some else or nothing\n                                nx = d.x;\n                                ny = d.y;\n                            }\n                            path = ["C", nx, ny][concat](path.slice(1));\n                            break;\n                        case "T":\n                            if (pcom == "Q" || pcom == "T") { // In "T" case we have to take into account, if the previous command is Q/T.\n                                d.qx = d.x * 2 - d.qx;        // And make a reflection similar\n                                d.qy = d.y * 2 - d.qy;        // to case "S".\n                            }\n                            else {                            // or something else or nothing\n                                d.qx = d.x;\n                                d.qy = d.y;\n                            }\n                            path = ["C"][concat](q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));\n                            break;\n                        case "Q":\n                            d.qx = path[1];\n                            d.qy = path[2];\n                            path = ["C"][concat](q2c(d.x, d.y, path[1], path[2], path[3], path[4]));\n                            break;\n                        case "L":\n                            path = ["C"][concat](l2c(d.x, d.y, path[1], path[2]));\n                            break;\n                        case "H":\n                            path = ["C"][concat](l2c(d.x, d.y, path[1], d.y));\n                            break;\n                        case "V":\n                            path = ["C"][concat](l2c(d.x, d.y, d.x, path[1]));\n                            break;\n                        case "Z":\n                            path = ["C"][concat](l2c(d.x, d.y, d.X, d.Y));\n                            break;\n                    }\n                    return path;\n                },\n                fixArc = function (pp, i) {\n                    if (pp[i].length > 7) {\n                        pp[i].shift();\n                        var pi = pp[i];\n                        while (pi.length) {\n                            pcoms1[i]="A"; // if created multiple C:s, their original seg is saved\n                            p2 && (pcoms2[i]="A"); // the same as above\n                            pp.splice(i++, 0, ["C"][concat](pi.splice(0, 6)));\n                        }\n                        pp.splice(i, 1);\n                        ii = mmax(p.length, p2 && p2.length || 0);\n                    }\n                },\n                fixM = function (path1, path2, a1, a2, i) {\n                    if (path1 && path2 && path1[i][0] == "M" && path2[i][0] != "M") {\n                        path2.splice(i, 0, ["M", a2.x, a2.y]);\n                        a1.bx = 0;\n                        a1.by = 0;\n                        a1.x = path1[i][1];\n                        a1.y = path1[i][2];\n                        ii = mmax(p.length, p2 && p2.length || 0);\n                    }\n                },\n                pcoms1 = [], // path commands of original path p\n                pcoms2 = [], // path commands of original path p2\n                pfirst = "", // temporary holder for original path command\n                pcom = ""; // holder for previous path command of original path\n            for (var i = 0, ii = mmax(p.length, p2 && p2.length || 0); i < ii; i++) {\n                p[i] && (pfirst = p[i][0]); // save current path command\n\n                if (pfirst != "C") // C is not saved yet, because it may be result of conversion\n                {\n                    pcoms1[i] = pfirst; // Save current path command\n                    i && ( pcom = pcoms1[i-1]); // Get previous path command pcom\n                }\n                p[i] = processPath(p[i], attrs, pcom); // Previous path command is inputted to processPath\n\n                if (pcoms1[i] != "A" && pfirst == "C") pcoms1[i] = "C"; // A is the only command\n                // which may produce multiple C:s\n                // so we have to make sure that C is also C in original path\n\n                fixArc(p, i); // fixArc adds also the right amount of A:s to pcoms1\n\n                if (p2) { // the same procedures is done to p2\n                    p2[i] && (pfirst = p2[i][0]);\n                    if (pfirst != "C")\n                    {\n                        pcoms2[i] = pfirst;\n                        i && (pcom = pcoms2[i-1]);\n                    }\n                    p2[i] = processPath(p2[i], attrs2, pcom);\n\n                    if (pcoms2[i]!="A" && pfirst=="C") pcoms2[i]="C";\n\n                    fixArc(p2, i);\n                }\n                fixM(p, p2, attrs, attrs2, i);\n                fixM(p2, p, attrs2, attrs, i);\n                var seg = p[i],\n                    seg2 = p2 && p2[i],\n                    seglen = seg.length,\n                    seg2len = p2 && seg2.length;\n                attrs.x = seg[seglen - 2];\n                attrs.y = seg[seglen - 1];\n                attrs.bx = toFloat(seg[seglen - 4]) || attrs.x;\n                attrs.by = toFloat(seg[seglen - 3]) || attrs.y;\n                attrs2.bx = p2 && (toFloat(seg2[seg2len - 4]) || attrs2.x);\n                attrs2.by = p2 && (toFloat(seg2[seg2len - 3]) || attrs2.y);\n                attrs2.x = p2 && seg2[seg2len - 2];\n                attrs2.y = p2 && seg2[seg2len - 1];\n            }\n            if (!p2) {\n                pth.curve = pathClone(p);\n            }\n            return p2 ? [p, p2] : p;\n        }, null, pathClone),\n        parseDots = R._parseDots = cacher(function (gradient) {\n            var dots = [];\n            for (var i = 0, ii = gradient.length; i < ii; i++) {\n                var dot = {},\n                    par = gradient[i].match(/^([^:]*):?([\\d\\.]*)/);\n                dot.color = R.getRGB(par[1]);\n                if (dot.color.error) {\n                    return null;\n                }\n                dot.opacity = dot.color.opacity;\n                dot.color = dot.color.hex;\n                par[2] && (dot.offset = par[2] + "%");\n                dots.push(dot);\n            }\n            for (i = 1, ii = dots.length - 1; i < ii; i++) {\n                if (!dots[i].offset) {\n                    var start = toFloat(dots[i - 1].offset || 0),\n                        end = 0;\n                    for (var j = i + 1; j < ii; j++) {\n                        if (dots[j].offset) {\n                            end = dots[j].offset;\n                            break;\n                        }\n                    }\n                    if (!end) {\n                        end = 100;\n                        j = ii;\n                    }\n                    end = toFloat(end);\n                    var d = (end - start) / (j - i + 1);\n                    for (; i < j; i++) {\n                        start += d;\n                        dots[i].offset = start + "%";\n                    }\n                }\n            }\n            return dots;\n        }),\n        tear = R._tear = function (el, paper) {\n            el == paper.top && (paper.top = el.prev);\n            el == paper.bottom && (paper.bottom = el.next);\n            el.next && (el.next.prev = el.prev);\n            el.prev && (el.prev.next = el.next);\n        },\n        tofront = R._tofront = function (el, paper) {\n            if (paper.top === el) {\n                return;\n            }\n            tear(el, paper);\n            el.next = null;\n            el.prev = paper.top;\n            paper.top.next = el;\n            paper.top = el;\n        },\n        toback = R._toback = function (el, paper) {\n            if (paper.bottom === el) {\n                return;\n            }\n            tear(el, paper);\n            el.next = paper.bottom;\n            el.prev = null;\n            paper.bottom.prev = el;\n            paper.bottom = el;\n        },\n        insertafter = R._insertafter = function (el, el2, paper) {\n            tear(el, paper);\n            el2 == paper.top && (paper.top = el);\n            el2.next && (el2.next.prev = el);\n            el.next = el2.next;\n            el.prev = el2;\n            el2.next = el;\n        },\n        insertbefore = R._insertbefore = function (el, el2, paper) {\n            tear(el, paper);\n            el2 == paper.bottom && (paper.bottom = el);\n            el2.prev && (el2.prev.next = el);\n            el.prev = el2.prev;\n            el2.prev = el;\n            el.next = el2;\n        },\n        /*\\\n         * Raphael.toMatrix\n         [ method ]\n         **\n         * Utility method\n         **\n         * Returns matrix of transformations applied to a given path\n         > Parameters\n         - path (string) path string\n         - transform (string|array) transformation string\n         = (object) @Matrix\n        \\*/\n        toMatrix = R.toMatrix = function (path, transform) {\n            var bb = pathDimensions(path),\n                el = {\n                    _: {\n                        transform: E\n                    },\n                    getBBox: function () {\n                        return bb;\n                    }\n                };\n            extractTransform(el, transform);\n            return el.matrix;\n        },\n        /*\\\n         * Raphael.transformPath\n         [ method ]\n         **\n         * Utility method\n         **\n         * Returns path transformed by a given transformation\n         > Parameters\n         - path (string) path string\n         - transform (string|array) transformation string\n         = (string) path\n        \\*/\n        transformPath = R.transformPath = function (path, transform) {\n            return mapPath(path, toMatrix(path, transform));\n        },\n        extractTransform = R._extractTransform = function (el, tstr) {\n            if (tstr == null) {\n                return el._.transform;\n            }\n            tstr = Str(tstr).replace(/\\.{3}|\\u2026/g, el._.transform || E);\n            var tdata = R.parseTransformString(tstr),\n                deg = 0,\n                dx = 0,\n                dy = 0,\n                sx = 1,\n                sy = 1,\n                _ = el._,\n                m = new Matrix;\n            _.transform = tdata || [];\n            if (tdata) {\n                for (var i = 0, ii = tdata.length; i < ii; i++) {\n                    var t = tdata[i],\n                        tlen = t.length,\n                        command = Str(t[0]).toLowerCase(),\n                        absolute = t[0] != command,\n                        inver = absolute ? m.invert() : 0,\n                        x1,\n                        y1,\n                        x2,\n                        y2,\n                        bb;\n                    if (command == "t" && tlen == 3) {\n                        if (absolute) {\n                            x1 = inver.x(0, 0);\n                            y1 = inver.y(0, 0);\n                            x2 = inver.x(t[1], t[2]);\n                            y2 = inver.y(t[1], t[2]);\n                            m.translate(x2 - x1, y2 - y1);\n                        } else {\n                            m.translate(t[1], t[2]);\n                        }\n                    } else if (command == "r") {\n                        if (tlen == 2) {\n                            bb = bb || el.getBBox(1);\n                            m.rotate(t[1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n                            deg += t[1];\n                        } else if (tlen == 4) {\n                            if (absolute) {\n                                x2 = inver.x(t[2], t[3]);\n                                y2 = inver.y(t[2], t[3]);\n                                m.rotate(t[1], x2, y2);\n                            } else {\n                                m.rotate(t[1], t[2], t[3]);\n                            }\n                            deg += t[1];\n                        }\n                    } else if (command == "s") {\n                        if (tlen == 2 || tlen == 3) {\n                            bb = bb || el.getBBox(1);\n                            m.scale(t[1], t[tlen - 1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n                            sx *= t[1];\n                            sy *= t[tlen - 1];\n                        } else if (tlen == 5) {\n                            if (absolute) {\n                                x2 = inver.x(t[3], t[4]);\n                                y2 = inver.y(t[3], t[4]);\n                                m.scale(t[1], t[2], x2, y2);\n                            } else {\n                                m.scale(t[1], t[2], t[3], t[4]);\n                            }\n                            sx *= t[1];\n                            sy *= t[2];\n                        }\n                    } else if (command == "m" && tlen == 7) {\n                        m.add(t[1], t[2], t[3], t[4], t[5], t[6]);\n                    }\n                    _.dirtyT = 1;\n                    el.matrix = m;\n                }\n            }\n\n            /*\\\n             * Element.matrix\n             [ property (object) ]\n             **\n             * Keeps @Matrix object, which represents element transformation\n            \\*/\n            el.matrix = m;\n\n            _.sx = sx;\n            _.sy = sy;\n            _.deg = deg;\n            _.dx = dx = m.e;\n            _.dy = dy = m.f;\n\n            if (sx == 1 && sy == 1 && !deg && _.bbox) {\n                _.bbox.x += +dx;\n                _.bbox.y += +dy;\n            } else {\n                _.dirtyT = 1;\n            }\n        },\n        getEmpty = function (item) {\n            var l = item[0];\n            switch (l.toLowerCase()) {\n                case "t": return [l, 0, 0];\n                case "m": return [l, 1, 0, 0, 1, 0, 0];\n                case "r": if (item.length == 4) {\n                    return [l, 0, item[2], item[3]];\n                } else {\n                    return [l, 0];\n                }\n                case "s": if (item.length == 5) {\n                    return [l, 1, 1, item[3], item[4]];\n                } else if (item.length == 3) {\n                    return [l, 1, 1];\n                } else {\n                    return [l, 1];\n                }\n            }\n        },\n        equaliseTransform = R._equaliseTransform = function (t1, t2) {\n            t2 = Str(t2).replace(/\\.{3}|\\u2026/g, t1);\n            t1 = R.parseTransformString(t1) || [];\n            t2 = R.parseTransformString(t2) || [];\n            var maxlength = mmax(t1.length, t2.length),\n                from = [],\n                to = [],\n                i = 0, j, jj,\n                tt1, tt2;\n            for (; i < maxlength; i++) {\n                tt1 = t1[i] || getEmpty(t2[i]);\n                tt2 = t2[i] || getEmpty(tt1);\n                if ((tt1[0] != tt2[0]) ||\n                    (tt1[0].toLowerCase() == "r" && (tt1[2] != tt2[2] || tt1[3] != tt2[3])) ||\n                    (tt1[0].toLowerCase() == "s" && (tt1[3] != tt2[3] || tt1[4] != tt2[4]))\n                    ) {\n                    return;\n                }\n                from[i] = [];\n                to[i] = [];\n                for (j = 0, jj = mmax(tt1.length, tt2.length); j < jj; j++) {\n                    j in tt1 && (from[i][j] = tt1[j]);\n                    j in tt2 && (to[i][j] = tt2[j]);\n                }\n            }\n            return {\n                from: from,\n                to: to\n            };\n        };\n    R._getContainer = function (x, y, w, h) {\n        var container;\n        container = h == null && !R.is(x, "object") ? g.doc.getElementById(x) : x;\n        if (container == null) {\n            return;\n        }\n        if (container.tagName) {\n            if (y == null) {\n                return {\n                    container: container,\n                    width: container.style.pixelWidth || container.offsetWidth,\n                    height: container.style.pixelHeight || container.offsetHeight\n                };\n            } else {\n                return {\n                    container: container,\n                    width: y,\n                    height: w\n                };\n            }\n        }\n        return {\n            container: 1,\n            x: x,\n            y: y,\n            width: w,\n            height: h\n        };\n    };\n    /*\\\n     * Raphael.pathToRelative\n     [ method ]\n     **\n     * Utility method\n     **\n     * Converts path to relative form\n     > Parameters\n     - pathString (string|array) path string or array of segments\n     = (array) array of segments.\n    \\*/\n    R.pathToRelative = pathToRelative;\n    R._engine = {};\n    /*\\\n     * Raphael.path2curve\n     [ method ]\n     **\n     * Utility method\n     **\n     * Converts path to a new path where all segments are cubic bezier curves.\n     > Parameters\n     - pathString (string|array) path string or array of segments\n     = (array) array of segments.\n    \\*/\n    R.path2curve = path2curve;\n    /*\\\n     * Raphael.matrix\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns matrix based on given parameters.\n     > Parameters\n     - a (number)\n     - b (number)\n     - c (number)\n     - d (number)\n     - e (number)\n     - f (number)\n     = (object) @Matrix\n    \\*/\n    R.matrix = function (a, b, c, d, e, f) {\n        return new Matrix(a, b, c, d, e, f);\n    };\n    function Matrix(a, b, c, d, e, f) {\n        if (a != null) {\n            this.a = +a;\n            this.b = +b;\n            this.c = +c;\n            this.d = +d;\n            this.e = +e;\n            this.f = +f;\n        } else {\n            this.a = 1;\n            this.b = 0;\n            this.c = 0;\n            this.d = 1;\n            this.e = 0;\n            this.f = 0;\n        }\n    }\n    (function (matrixproto) {\n        /*\\\n         * Matrix.add\n         [ method ]\n         **\n         * Adds given matrix to existing one.\n         > Parameters\n         - a (number)\n         - b (number)\n         - c (number)\n         - d (number)\n         - e (number)\n         - f (number)\n         or\n         - matrix (object) @Matrix\n        \\*/\n        matrixproto.add = function (a, b, c, d, e, f) {\n            var out = [[], [], []],\n                m = [[this.a, this.c, this.e], [this.b, this.d, this.f], [0, 0, 1]],\n                matrix = [[a, c, e], [b, d, f], [0, 0, 1]],\n                x, y, z, res;\n\n            if (a && a instanceof Matrix) {\n                matrix = [[a.a, a.c, a.e], [a.b, a.d, a.f], [0, 0, 1]];\n            }\n\n            for (x = 0; x < 3; x++) {\n                for (y = 0; y < 3; y++) {\n                    res = 0;\n                    for (z = 0; z < 3; z++) {\n                        res += m[x][z] * matrix[z][y];\n                    }\n                    out[x][y] = res;\n                }\n            }\n            this.a = out[0][0];\n            this.b = out[1][0];\n            this.c = out[0][1];\n            this.d = out[1][1];\n            this.e = out[0][2];\n            this.f = out[1][2];\n        };\n        /*\\\n         * Matrix.invert\n         [ method ]\n         **\n         * Returns inverted version of the matrix\n         = (object) @Matrix\n        \\*/\n        matrixproto.invert = function () {\n            var me = this,\n                x = me.a * me.d - me.b * me.c;\n            return new Matrix(me.d / x, -me.b / x, -me.c / x, me.a / x, (me.c * me.f - me.d * me.e) / x, (me.b * me.e - me.a * me.f) / x);\n        };\n        /*\\\n         * Matrix.clone\n         [ method ]\n         **\n         * Returns copy of the matrix\n         = (object) @Matrix\n        \\*/\n        matrixproto.clone = function () {\n            return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);\n        };\n        /*\\\n         * Matrix.translate\n         [ method ]\n         **\n         * Translate the matrix\n         > Parameters\n         - x (number)\n         - y (number)\n        \\*/\n        matrixproto.translate = function (x, y) {\n            this.add(1, 0, 0, 1, x, y);\n        };\n        /*\\\n         * Matrix.scale\n         [ method ]\n         **\n         * Scales the matrix\n         > Parameters\n         - x (number)\n         - y (number) #optional\n         - cx (number) #optional\n         - cy (number) #optional\n        \\*/\n        matrixproto.scale = function (x, y, cx, cy) {\n            y == null && (y = x);\n            (cx || cy) && this.add(1, 0, 0, 1, cx, cy);\n            this.add(x, 0, 0, y, 0, 0);\n            (cx || cy) && this.add(1, 0, 0, 1, -cx, -cy);\n        };\n        /*\\\n         * Matrix.rotate\n         [ method ]\n         **\n         * Rotates the matrix\n         > Parameters\n         - a (number)\n         - x (number)\n         - y (number)\n        \\*/\n        matrixproto.rotate = function (a, x, y) {\n            a = R.rad(a);\n            x = x || 0;\n            y = y || 0;\n            var cos = +math.cos(a).toFixed(9),\n                sin = +math.sin(a).toFixed(9);\n            this.add(cos, sin, -sin, cos, x, y);\n            this.add(1, 0, 0, 1, -x, -y);\n        };\n        /*\\\n         * Matrix.x\n         [ method ]\n         **\n         * Return x coordinate for given point after transformation described by the matrix. See also @Matrix.y\n         > Parameters\n         - x (number)\n         - y (number)\n         = (number) x\n        \\*/\n        matrixproto.x = function (x, y) {\n            return x * this.a + y * this.c + this.e;\n        };\n        /*\\\n         * Matrix.y\n         [ method ]\n         **\n         * Return y coordinate for given point after transformation described by the matrix. See also @Matrix.x\n         > Parameters\n         - x (number)\n         - y (number)\n         = (number) y\n        \\*/\n        matrixproto.y = function (x, y) {\n            return x * this.b + y * this.d + this.f;\n        };\n        matrixproto.get = function (i) {\n            return +this[Str.fromCharCode(97 + i)].toFixed(4);\n        };\n        matrixproto.toString = function () {\n            return R.svg ?\n                "matrix(" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)].join() + ")" :\n                [this.get(0), this.get(2), this.get(1), this.get(3), 0, 0].join();\n        };\n        matrixproto.toFilter = function () {\n            return "progid:DXImageTransform.Microsoft.Matrix(M11=" + this.get(0) +\n                ", M12=" + this.get(2) + ", M21=" + this.get(1) + ", M22=" + this.get(3) +\n                ", Dx=" + this.get(4) + ", Dy=" + this.get(5) + ", sizingmethod=\'auto expand\')";\n        };\n        matrixproto.offset = function () {\n            return [this.e.toFixed(4), this.f.toFixed(4)];\n        };\n        function norm(a) {\n            return a[0] * a[0] + a[1] * a[1];\n        }\n        function normalize(a) {\n            var mag = math.sqrt(norm(a));\n            a[0] && (a[0] /= mag);\n            a[1] && (a[1] /= mag);\n        }\n        /*\\\n         * Matrix.split\n         [ method ]\n         **\n         * Splits matrix into primitive transformations\n         = (object) in format:\n         o dx (number) translation by x\n         o dy (number) translation by y\n         o scalex (number) scale by x\n         o scaley (number) scale by y\n         o shear (number) shear\n         o rotate (number) rotation in deg\n         o isSimple (boolean) could it be represented via simple transformations\n        \\*/\n        matrixproto.split = function () {\n            var out = {};\n            // translation\n            out.dx = this.e;\n            out.dy = this.f;\n\n            // scale and shear\n            var row = [[this.a, this.c], [this.b, this.d]];\n            out.scalex = math.sqrt(norm(row[0]));\n            normalize(row[0]);\n\n            out.shear = row[0][0] * row[1][0] + row[0][1] * row[1][1];\n            row[1] = [row[1][0] - row[0][0] * out.shear, row[1][1] - row[0][1] * out.shear];\n\n            out.scaley = math.sqrt(norm(row[1]));\n            normalize(row[1]);\n            out.shear /= out.scaley;\n\n            // rotation\n            var sin = -row[0][1],\n                cos = row[1][1];\n            if (cos < 0) {\n                out.rotate = R.deg(math.acos(cos));\n                if (sin < 0) {\n                    out.rotate = 360 - out.rotate;\n                }\n            } else {\n                out.rotate = R.deg(math.asin(sin));\n            }\n\n            out.isSimple = !+out.shear.toFixed(9) && (out.scalex.toFixed(9) == out.scaley.toFixed(9) || !out.rotate);\n            out.isSuperSimple = !+out.shear.toFixed(9) && out.scalex.toFixed(9) == out.scaley.toFixed(9) && !out.rotate;\n            out.noRotation = !+out.shear.toFixed(9) && !out.rotate;\n            return out;\n        };\n        /*\\\n         * Matrix.toTransformString\n         [ method ]\n         **\n         * Return transform string that represents given matrix\n         = (string) transform string\n        \\*/\n        matrixproto.toTransformString = function (shorter) {\n            var s = shorter || this[split]();\n            if (s.isSimple) {\n                s.scalex = +s.scalex.toFixed(4);\n                s.scaley = +s.scaley.toFixed(4);\n                s.rotate = +s.rotate.toFixed(4);\n                return  (s.dx || s.dy ? "t" + [s.dx, s.dy] : E) +\n                        (s.scalex != 1 || s.scaley != 1 ? "s" + [s.scalex, s.scaley, 0, 0] : E) +\n                        (s.rotate ? "r" + [s.rotate, 0, 0] : E);\n            } else {\n                return "m" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)];\n            }\n        };\n    })(Matrix.prototype);\n\n    var preventDefault = function () {\n        this.returnValue = false;\n    },\n    preventTouch = function () {\n        return this.originalEvent.preventDefault();\n    },\n    stopPropagation = function () {\n        this.cancelBubble = true;\n    },\n    stopTouch = function () {\n        return this.originalEvent.stopPropagation();\n    },\n    getEventPosition = function (e) {\n        var scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,\n            scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft;\n\n        return {\n            x: e.clientX + scrollX,\n            y: e.clientY + scrollY\n        };\n    },\n    addEvent = (function () {\n        if (g.doc.addEventListener) {\n            return function (obj, type, fn, element) {\n                var f = function (e) {\n                    var pos = getEventPosition(e);\n                    return fn.call(element, e, pos.x, pos.y);\n                };\n                obj.addEventListener(type, f, false);\n\n                if (supportsTouch && touchMap[type]) {\n                    var _f = function (e) {\n                        var pos = getEventPosition(e),\n                            olde = e;\n\n                        for (var i = 0, ii = e.targetTouches && e.targetTouches.length; i < ii; i++) {\n                            if (e.targetTouches[i].target == obj) {\n                                e = e.targetTouches[i];\n                                e.originalEvent = olde;\n                                e.preventDefault = preventTouch;\n                                e.stopPropagation = stopTouch;\n                                break;\n                            }\n                        }\n\n                        return fn.call(element, e, pos.x, pos.y);\n                    };\n                    obj.addEventListener(touchMap[type], _f, false);\n                }\n\n                return function () {\n                    obj.removeEventListener(type, f, false);\n\n                    if (supportsTouch && touchMap[type])\n                        obj.removeEventListener(touchMap[type], _f, false);\n\n                    return true;\n                };\n            };\n        } else if (g.doc.attachEvent) {\n            return function (obj, type, fn, element) {\n                var f = function (e) {\n                    e = e || g.win.event;\n                    var scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,\n                        scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft,\n                        x = e.clientX + scrollX,\n                        y = e.clientY + scrollY;\n                    e.preventDefault = e.preventDefault || preventDefault;\n                    e.stopPropagation = e.stopPropagation || stopPropagation;\n                    return fn.call(element, e, x, y);\n                };\n                obj.attachEvent("on" + type, f);\n                var detacher = function () {\n                    obj.detachEvent("on" + type, f);\n                    return true;\n                };\n                return detacher;\n            };\n        }\n    })(),\n    drag = [],\n    dragMove = function (e) {\n        var x = e.clientX,\n            y = e.clientY,\n            scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,\n            scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft,\n            dragi,\n            j = drag.length;\n        while (j--) {\n            dragi = drag[j];\n            if (supportsTouch && e.touches) {\n                var i = e.touches.length,\n                    touch;\n                while (i--) {\n                    touch = e.touches[i];\n                    if (touch.identifier == dragi.el._drag.id) {\n                        x = touch.clientX;\n                        y = touch.clientY;\n                        (e.originalEvent ? e.originalEvent : e).preventDefault();\n                        break;\n                    }\n                }\n            } else {\n                e.preventDefault();\n            }\n            var node = dragi.el.node,\n                o,\n                next = node.nextSibling,\n                parent = node.parentNode,\n                display = node.style.display;\n            g.win.opera && parent.removeChild(node);\n            node.style.display = "none";\n            o = dragi.el.paper.getElementByPoint(x, y);\n            node.style.display = display;\n            g.win.opera && (next ? parent.insertBefore(node, next) : parent.appendChild(node));\n            o && eve("raphael.drag.over." + dragi.el.id, dragi.el, o);\n            x += scrollX;\n            y += scrollY;\n            eve("raphael.drag.move." + dragi.el.id, dragi.move_scope || dragi.el, x - dragi.el._drag.x, y - dragi.el._drag.y, x, y, e);\n        }\n    },\n    dragUp = function (e) {\n        R.unmousemove(dragMove).unmouseup(dragUp);\n        var i = drag.length,\n            dragi;\n        while (i--) {\n            dragi = drag[i];\n            dragi.el._drag = {};\n            eve("raphael.drag.end." + dragi.el.id, dragi.end_scope || dragi.start_scope || dragi.move_scope || dragi.el, e);\n        }\n        drag = [];\n    },\n    /*\\\n     * Raphael.el\n     [ property (object) ]\n     **\n     * You can add your own method to elements. This is useful when you want to hack default functionality or\n     * want to wrap some common transformation or attributes in one method. In difference to canvas methods,\n     * you can redefine element method at any time. Expending element methods wouldn’t affect set.\n     > Usage\n     | Raphael.el.red = function () {\n     |     this.attr({fill: "#f00"});\n     | };\n     | // then use it\n     | paper.circle(100, 100, 20).red();\n    \\*/\n    elproto = R.el = {};\n    /*\\\n     * Element.click\n     [ method ]\n     **\n     * Adds event handler for click for the element.\n     > Parameters\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unclick\n     [ method ]\n     **\n     * Removes event handler for click for the element.\n     > Parameters\n     - handler (function) #optional handler for the event\n     = (object) @Element\n    \\*/\n\n    /*\\\n     * Element.dblclick\n     [ method ]\n     **\n     * Adds event handler for double click for the element.\n     > Parameters\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.undblclick\n     [ method ]\n     **\n     * Removes event handler for double click for the element.\n     > Parameters\n     - handler (function) #optional handler for the event\n     = (object) @Element\n    \\*/\n\n    /*\\\n     * Element.mousedown\n     [ method ]\n     **\n     * Adds event handler for mousedown for the element.\n     > Parameters\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmousedown\n     [ method ]\n     **\n     * Removes event handler for mousedown for the element.\n     > Parameters\n     - handler (function) #optional handler for the event\n     = (object) @Element\n    \\*/\n\n    /*\\\n     * Element.mousemove\n     [ method ]\n     **\n     * Adds event handler for mousemove for the element.\n     > Parameters\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmousemove\n     [ method ]\n     **\n     * Removes event handler for mousemove for the element.\n     > Parameters\n     - handler (function) #optional handler for the event\n     = (object) @Element\n    \\*/\n\n    /*\\\n     * Element.mouseout\n     [ method ]\n     **\n     * Adds event handler for mouseout for the element.\n     > Parameters\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmouseout\n     [ method ]\n     **\n     * Removes event handler for mouseout for the element.\n     > Parameters\n     - handler (function) #optional handler for the event\n     = (object) @Element\n    \\*/\n\n    /*\\\n     * Element.mouseover\n     [ method ]\n     **\n     * Adds event handler for mouseover for the element.\n     > Parameters\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmouseover\n     [ method ]\n     **\n     * Removes event handler for mouseover for the element.\n     > Parameters\n     - handler (function) #optional handler for the event\n     = (object) @Element\n    \\*/\n\n    /*\\\n     * Element.mouseup\n     [ method ]\n     **\n     * Adds event handler for mouseup for the element.\n     > Parameters\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmouseup\n     [ method ]\n     **\n     * Removes event handler for mouseup for the element.\n     > Parameters\n     - handler (function) #optional handler for the event\n     = (object) @Element\n    \\*/\n\n    /*\\\n     * Element.touchstart\n     [ method ]\n     **\n     * Adds event handler for touchstart for the element.\n     > Parameters\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchstart\n     [ method ]\n     **\n     * Removes event handler for touchstart for the element.\n     > Parameters\n     - handler (function) #optional handler for the event\n     = (object) @Element\n    \\*/\n\n    /*\\\n     * Element.touchmove\n     [ method ]\n     **\n     * Adds event handler for touchmove for the element.\n     > Parameters\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchmove\n     [ method ]\n     **\n     * Removes event handler for touchmove for the element.\n     > Parameters\n     - handler (function) #optional handler for the event\n     = (object) @Element\n    \\*/\n\n    /*\\\n     * Element.touchend\n     [ method ]\n     **\n     * Adds event handler for touchend for the element.\n     > Parameters\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchend\n     [ method ]\n     **\n     * Removes event handler for touchend for the element.\n     > Parameters\n     - handler (function) #optional handler for the event\n     = (object) @Element\n    \\*/\n\n    /*\\\n     * Element.touchcancel\n     [ method ]\n     **\n     * Adds event handler for touchcancel for the element.\n     > Parameters\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchcancel\n     [ method ]\n     **\n     * Removes event handler for touchcancel for the element.\n     > Parameters\n     - handler (function) #optional handler for the event\n     = (object) @Element\n    \\*/\n    for (var i = events.length; i--;) {\n        (function (eventName) {\n            R[eventName] = elproto[eventName] = function (fn, scope) {\n                if (R.is(fn, "function")) {\n                    this.events = this.events || [];\n                    this.events.push({name: eventName, f: fn, unbind: addEvent(this.shape || this.node || g.doc, eventName, fn, scope || this)});\n                }\n                return this;\n            };\n            R["un" + eventName] = elproto["un" + eventName] = function (fn) {\n                var events = this.events || [],\n                    l = events.length;\n                while (l--){\n                    if (events[l].name == eventName && (R.is(fn, "undefined") || events[l].f == fn)) {\n                        events[l].unbind();\n                        events.splice(l, 1);\n                        !events.length && delete this.events;\n                    }\n                }\n                return this;\n            };\n        })(events[i]);\n    }\n\n    /*\\\n     * Element.data\n     [ method ]\n     **\n     * Adds or retrieves given value associated with given key.\n     **\n     * See also @Element.removeData\n     > Parameters\n     - key (string) key to store data\n     - value (any) #optional value to store\n     = (object) @Element\n     * or, if value is not specified:\n     = (any) value\n     * or, if key and value are not specified:\n     = (object) Key/value pairs for all the data associated with the element.\n     > Usage\n     | for (var i = 0, i < 5, i++) {\n     |     paper.circle(10 + 15 * i, 10, 10)\n     |          .attr({fill: "#000"})\n     |          .data("i", i)\n     |          .click(function () {\n     |             alert(this.data("i"));\n     |          });\n     | }\n    \\*/\n    elproto.data = function (key, value) {\n        var data = eldata[this.id] = eldata[this.id] || {};\n        if (arguments.length == 0) {\n            return data;\n        }\n        if (arguments.length == 1) {\n            if (R.is(key, "object")) {\n                for (var i in key) if (key[has](i)) {\n                    this.data(i, key[i]);\n                }\n                return this;\n            }\n            eve("raphael.data.get." + this.id, this, data[key], key);\n            return data[key];\n        }\n        data[key] = value;\n        eve("raphael.data.set." + this.id, this, value, key);\n        return this;\n    };\n    /*\\\n     * Element.removeData\n     [ method ]\n     **\n     * Removes value associated with an element by given key.\n     * If key is not provided, removes all the data of the element.\n     > Parameters\n     - key (string) #optional key\n     = (object) @Element\n    \\*/\n    elproto.removeData = function (key) {\n        if (key == null) {\n            delete eldata[this.id];\n        } else {\n            eldata[this.id] && delete eldata[this.id][key];\n        }\n        return this;\n    };\n     /*\\\n     * Element.getData\n     [ method ]\n     **\n     * Retrieves the element data\n     = (object) data\n    \\*/\n    elproto.getData = function () {\n        return clone(eldata[this.id] || {});\n    };\n    /*\\\n     * Element.hover\n     [ method ]\n     **\n     * Adds event handlers for hover for the element.\n     > Parameters\n     - f_in (function) handler for hover in\n     - f_out (function) handler for hover out\n     - icontext (object) #optional context for hover in handler\n     - ocontext (object) #optional context for hover out handler\n     = (object) @Element\n    \\*/\n    elproto.hover = function (f_in, f_out, scope_in, scope_out) {\n        return this.mouseover(f_in, scope_in).mouseout(f_out, scope_out || scope_in);\n    };\n    /*\\\n     * Element.unhover\n     [ method ]\n     **\n     * Removes event handlers for hover for the element.\n     > Parameters\n     - f_in (function) handler for hover in\n     - f_out (function) handler for hover out\n     = (object) @Element\n    \\*/\n    elproto.unhover = function (f_in, f_out) {\n        return this.unmouseover(f_in).unmouseout(f_out);\n    };\n    var draggable = [];\n    /*\\\n     * Element.drag\n     [ method ]\n     **\n     * Adds event handlers for drag of the element.\n     > Parameters\n     - onmove (function) handler for moving\n     - onstart (function) handler for drag start\n     - onend (function) handler for drag end\n     - mcontext (object) #optional context for moving handler\n     - scontext (object) #optional context for drag start handler\n     - econtext (object) #optional context for drag end handler\n     * Additionally following `drag` events will be triggered: `drag.start.<id>` on start,\n     * `drag.end.<id>` on end and `drag.move.<id>` on every move. When element will be dragged over another element\n     * `drag.over.<id>` will be fired as well.\n     *\n     * Start event and start handler will be called in specified context or in context of the element with following parameters:\n     o x (number) x position of the mouse\n     o y (number) y position of the mouse\n     o event (object) DOM event object\n     * Move event and move handler will be called in specified context or in context of the element with following parameters:\n     o dx (number) shift by x from the start point\n     o dy (number) shift by y from the start point\n     o x (number) x position of the mouse\n     o y (number) y position of the mouse\n     o event (object) DOM event object\n     * End event and end handler will be called in specified context or in context of the element with following parameters:\n     o event (object) DOM event object\n     = (object) @Element\n    \\*/\n    elproto.drag = function (onmove, onstart, onend, move_scope, start_scope, end_scope) {\n        function start(e) {\n            (e.originalEvent || e).preventDefault();\n            var x = e.clientX,\n                y = e.clientY,\n                scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,\n                scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft;\n            this._drag.id = e.identifier;\n            if (supportsTouch && e.touches) {\n                var i = e.touches.length, touch;\n                while (i--) {\n                    touch = e.touches[i];\n                    this._drag.id = touch.identifier;\n                    if (touch.identifier == this._drag.id) {\n                        x = touch.clientX;\n                        y = touch.clientY;\n                        break;\n                    }\n                }\n            }\n            this._drag.x = x + scrollX;\n            this._drag.y = y + scrollY;\n            !drag.length && R.mousemove(dragMove).mouseup(dragUp);\n            drag.push({el: this, move_scope: move_scope, start_scope: start_scope, end_scope: end_scope});\n            onstart && eve.on("raphael.drag.start." + this.id, onstart);\n            onmove && eve.on("raphael.drag.move." + this.id, onmove);\n            onend && eve.on("raphael.drag.end." + this.id, onend);\n            eve("raphael.drag.start." + this.id, start_scope || move_scope || this, this._drag.x, this._drag.y, e);\n        }\n        this._drag = {};\n        draggable.push({el: this, start: start});\n        this.mousedown(start);\n        return this;\n    };\n    /*\\\n     * Element.onDragOver\n     [ method ]\n     **\n     * Shortcut for assigning event handler for `drag.over.<id>` event, where id is id of the element (see @Element.id).\n     > Parameters\n     - f (function) handler for event, first argument would be the element you are dragging over\n    \\*/\n    elproto.onDragOver = function (f) {\n        f ? eve.on("raphael.drag.over." + this.id, f) : eve.unbind("raphael.drag.over." + this.id);\n    };\n    /*\\\n     * Element.undrag\n     [ method ]\n     **\n     * Removes all drag event handlers from given element.\n    \\*/\n    elproto.undrag = function () {\n        var i = draggable.length;\n        while (i--) if (draggable[i].el == this) {\n            this.unmousedown(draggable[i].start);\n            draggable.splice(i, 1);\n            eve.unbind("raphael.drag.*." + this.id);\n        }\n        !draggable.length && R.unmousemove(dragMove).unmouseup(dragUp);\n        drag = [];\n    };\n    /*\\\n     * Paper.circle\n     [ method ]\n     **\n     * Draws a circle.\n     **\n     > Parameters\n     **\n     - x (number) x coordinate of the centre\n     - y (number) y coordinate of the centre\n     - r (number) radius\n     = (object) Raphaël element object with type “circle”\n     **\n     > Usage\n     | var c = paper.circle(50, 50, 40);\n    \\*/\n    paperproto.circle = function (x, y, r) {\n        var out = R._engine.circle(this, x || 0, y || 0, r || 0);\n        this.__set__ && this.__set__.push(out);\n        return out;\n    };\n    /*\\\n     * Paper.rect\n     [ method ]\n     *\n     * Draws a rectangle.\n     **\n     > Parameters\n     **\n     - x (number) x coordinate of the top left corner\n     - y (number) y coordinate of the top left corner\n     - width (number) width\n     - height (number) height\n     - r (number) #optional radius for rounded corners, default is 0\n     = (object) Raphaël element object with type “rect”\n     **\n     > Usage\n     | // regular rectangle\n     | var c = paper.rect(10, 10, 50, 50);\n     | // rectangle with rounded corners\n     | var c = paper.rect(40, 40, 50, 50, 10);\n    \\*/\n    paperproto.rect = function (x, y, w, h, r) {\n        var out = R._engine.rect(this, x || 0, y || 0, w || 0, h || 0, r || 0);\n        this.__set__ && this.__set__.push(out);\n        return out;\n    };\n    /*\\\n     * Paper.ellipse\n     [ method ]\n     **\n     * Draws an ellipse.\n     **\n     > Parameters\n     **\n     - x (number) x coordinate of the centre\n     - y (number) y coordinate of the centre\n     - rx (number) horizontal radius\n     - ry (number) vertical radius\n     = (object) Raphaël element object with type “ellipse”\n     **\n     > Usage\n     | var c = paper.ellipse(50, 50, 40, 20);\n    \\*/\n    paperproto.ellipse = function (x, y, rx, ry) {\n        var out = R._engine.ellipse(this, x || 0, y || 0, rx || 0, ry || 0);\n        this.__set__ && this.__set__.push(out);\n        return out;\n    };\n    /*\\\n     * Paper.path\n     [ method ]\n     **\n     * Creates a path element by given path data string.\n     > Parameters\n     - pathString (string) #optional path string in SVG format.\n     * Path string consists of one-letter commands, followed by comma seprarated arguments in numercal form. Example:\n     | "M10,20L30,40"\n     * Here we can see two commands: “M”, with arguments `(10, 20)` and “L” with arguments `(30, 40)`. Upper case letter mean command is absolute, lower case—relative.\n     *\n     # <p>Here is short list of commands available, for more details see <a href="http://www.w3.org/TR/SVG/paths.html#PathData" title="Details of a path\'s data attribute\'s format are described in the SVG specification.">SVG path string format</a>.</p>\n     # <table><thead><tr><th>Command</th><th>Name</th><th>Parameters</th></tr></thead><tbody>\n     # <tr><td>M</td><td>moveto</td><td>(x y)+</td></tr>\n     # <tr><td>Z</td><td>closepath</td><td>(none)</td></tr>\n     # <tr><td>L</td><td>lineto</td><td>(x y)+</td></tr>\n     # <tr><td>H</td><td>horizontal lineto</td><td>x+</td></tr>\n     # <tr><td>V</td><td>vertical lineto</td><td>y+</td></tr>\n     # <tr><td>C</td><td>curveto</td><td>(x1 y1 x2 y2 x y)+</td></tr>\n     # <tr><td>S</td><td>smooth curveto</td><td>(x2 y2 x y)+</td></tr>\n     # <tr><td>Q</td><td>quadratic Bézier curveto</td><td>(x1 y1 x y)+</td></tr>\n     # <tr><td>T</td><td>smooth quadratic Bézier curveto</td><td>(x y)+</td></tr>\n     # <tr><td>A</td><td>elliptical arc</td><td>(rx ry x-axis-rotation large-arc-flag sweep-flag x y)+</td></tr>\n     # <tr><td>R</td><td><a href="http://en.wikipedia.org/wiki/Catmull–Rom_spline#Catmull.E2.80.93Rom_spline">Catmull-Rom curveto</a>*</td><td>x1 y1 (x y)+</td></tr></tbody></table>\n     * * “Catmull-Rom curveto” is a not standard SVG command and added in 2.0 to make life easier.\n     * Note: there is a special case when path consist of just three commands: “M10,10R…z”. In this case path will smoothly connects to its beginning.\n     > Usage\n     | var c = paper.path("M10 10L90 90");\n     | // draw a diagonal line:\n     | // move to 10,10, line to 90,90\n     * For example of path strings, check out these icons: http://raphaeljs.com/icons/\n    \\*/\n    paperproto.path = function (pathString) {\n        pathString && !R.is(pathString, string) && !R.is(pathString[0], array) && (pathString += E);\n        var out = R._engine.path(R.format[apply](R, arguments), this);\n        this.__set__ && this.__set__.push(out);\n        return out;\n    };\n    /*\\\n     * Paper.image\n     [ method ]\n     **\n     * Embeds an image into the surface.\n     **\n     > Parameters\n     **\n     - src (string) URI of the source image\n     - x (number) x coordinate position\n     - y (number) y coordinate position\n     - width (number) width of the image\n     - height (number) height of the image\n     = (object) Raphaël element object with type “image”\n     **\n     > Usage\n     | var c = paper.image("apple.png", 10, 10, 80, 80);\n    \\*/\n    paperproto.image = function (src, x, y, w, h) {\n        var out = R._engine.image(this, src || "about:blank", x || 0, y || 0, w || 0, h || 0);\n        this.__set__ && this.__set__.push(out);\n        return out;\n    };\n    /*\\\n     * Paper.text\n     [ method ]\n     **\n     * Draws a text string. If you need line breaks, put “\\n” in the string.\n     **\n     > Parameters\n     **\n     - x (number) x coordinate position\n     - y (number) y coordinate position\n     - text (string) The text string to draw\n     = (object) Raphaël element object with type “text”\n     **\n     > Usage\n     | var t = paper.text(50, 50, "Raphaël\\nkicks\\nbutt!");\n    \\*/\n    paperproto.text = function (x, y, text) {\n        var out = R._engine.text(this, x || 0, y || 0, Str(text));\n        this.__set__ && this.__set__.push(out);\n        return out;\n    };\n    /*\\\n     * Paper.set\n     [ method ]\n     **\n     * Creates array-like object to keep and operate several elements at once.\n     * Warning: it doesn’t create any elements for itself in the page, it just groups existing elements.\n     * Sets act as pseudo elements — all methods available to an element can be used on a set.\n     = (object) array-like object that represents set of elements\n     **\n     > Usage\n     | var st = paper.set();\n     | st.push(\n     |     paper.circle(10, 10, 5),\n     |     paper.circle(30, 10, 5)\n     | );\n     | st.attr({fill: "red"}); // changes the fill of both circles\n    \\*/\n    paperproto.set = function (itemsArray) {\n        !R.is(itemsArray, "array") && (itemsArray = Array.prototype.splice.call(arguments, 0, arguments.length));\n        var out = new Set(itemsArray);\n        this.__set__ && this.__set__.push(out);\n        out["paper"] = this;\n        out["type"] = "set";\n        return out;\n    };\n    /*\\\n     * Paper.setStart\n     [ method ]\n     **\n     * Creates @Paper.set. All elements that will be created after calling this method and before calling\n     * @Paper.setFinish will be added to the set.\n     **\n     > Usage\n     | paper.setStart();\n     | paper.circle(10, 10, 5),\n     | paper.circle(30, 10, 5)\n     | var st = paper.setFinish();\n     | st.attr({fill: "red"}); // changes the fill of both circles\n    \\*/\n    paperproto.setStart = function (set) {\n        this.__set__ = set || this.set();\n    };\n    /*\\\n     * Paper.setFinish\n     [ method ]\n     **\n     * See @Paper.setStart. This method finishes catching and returns resulting set.\n     **\n     = (object) set\n    \\*/\n    paperproto.setFinish = function (set) {\n        var out = this.__set__;\n        delete this.__set__;\n        return out;\n    };\n    /*\\\n     * Paper.getSize\n     [ method ]\n     **\n     * Obtains current paper actual size.\n     **\n     = (object)\n     \\*/\n    paperproto.getSize = function () {\n        var container = this.canvas.parentNode;\n        return {\n            width: container.offsetWidth,\n            height: container.offsetHeight\n                };\n        };\n    /*\\\n     * Paper.setSize\n     [ method ]\n     **\n     * If you need to change dimensions of the canvas call this method\n     **\n     > Parameters\n     **\n     - width (number) new width of the canvas\n     - height (number) new height of the canvas\n    \\*/\n    paperproto.setSize = function (width, height) {\n        return R._engine.setSize.call(this, width, height);\n    };\n    /*\\\n     * Paper.setViewBox\n     [ method ]\n     **\n     * Sets the view box of the paper. Practically it gives you ability to zoom and pan whole paper surface by\n     * specifying new boundaries.\n     **\n     > Parameters\n     **\n     - x (number) new x position, default is `0`\n     - y (number) new y position, default is `0`\n     - w (number) new width of the canvas\n     - h (number) new height of the canvas\n     - fit (boolean) `true` if you want graphics to fit into new boundary box\n    \\*/\n    paperproto.setViewBox = function (x, y, w, h, fit) {\n        return R._engine.setViewBox.call(this, x, y, w, h, fit);\n    };\n    /*\\\n     * Paper.top\n     [ property ]\n     **\n     * Points to the topmost element on the paper\n    \\*/\n    /*\\\n     * Paper.bottom\n     [ property ]\n     **\n     * Points to the bottom element on the paper\n    \\*/\n    paperproto.top = paperproto.bottom = null;\n    /*\\\n     * Paper.raphael\n     [ property ]\n     **\n     * Points to the @Raphael object/function\n    \\*/\n    paperproto.raphael = R;\n    var getOffset = function (elem) {\n        var box = elem.getBoundingClientRect(),\n            doc = elem.ownerDocument,\n            body = doc.body,\n            docElem = doc.documentElement,\n            clientTop = docElem.clientTop || body.clientTop || 0, clientLeft = docElem.clientLeft || body.clientLeft || 0,\n            top  = box.top  + (g.win.pageYOffset || docElem.scrollTop || body.scrollTop ) - clientTop,\n            left = box.left + (g.win.pageXOffset || docElem.scrollLeft || body.scrollLeft) - clientLeft;\n        return {\n            y: top,\n            x: left\n        };\n    };\n    /*\\\n     * Paper.getElementByPoint\n     [ method ]\n     **\n     * Returns you topmost element under given point.\n     **\n     = (object) Raphaël element object\n     > Parameters\n     **\n     - x (number) x coordinate from the top left corner of the window\n     - y (number) y coordinate from the top left corner of the window\n     > Usage\n     | paper.getElementByPoint(mouseX, mouseY).attr({stroke: "#f00"});\n    \\*/\n    paperproto.getElementByPoint = function (x, y) {\n        var paper = this,\n            svg = paper.canvas,\n            target = g.doc.elementFromPoint(x, y);\n        if (g.win.opera && target.tagName == "svg") {\n            var so = getOffset(svg),\n                sr = svg.createSVGRect();\n            sr.x = x - so.x;\n            sr.y = y - so.y;\n            sr.width = sr.height = 1;\n            var hits = svg.getIntersectionList(sr, null);\n            if (hits.length) {\n                target = hits[hits.length - 1];\n            }\n        }\n        if (!target) {\n            return null;\n        }\n        while (target.parentNode && target != svg.parentNode && !target.raphael) {\n            target = target.parentNode;\n        }\n        target == paper.canvas.parentNode && (target = svg);\n        target = target && target.raphael ? paper.getById(target.raphaelid) : null;\n        return target;\n    };\n\n    /*\\\n     * Paper.getElementsByBBox\n     [ method ]\n     **\n     * Returns set of elements that have an intersecting bounding box\n     **\n     > Parameters\n     **\n     - bbox (object) bbox to check with\n     = (object) @Set\n     \\*/\n    paperproto.getElementsByBBox = function (bbox) {\n        var set = this.set();\n        this.forEach(function (el) {\n            if (R.isBBoxIntersect(el.getBBox(), bbox)) {\n                set.push(el);\n            }\n        });\n        return set;\n    };\n\n    /*\\\n     * Paper.getById\n     [ method ]\n     **\n     * Returns you element by its internal ID.\n     **\n     > Parameters\n     **\n     - id (number) id\n     = (object) Raphaël element object\n    \\*/\n    paperproto.getById = function (id) {\n        var bot = this.bottom;\n        while (bot) {\n            if (bot.id == id) {\n                return bot;\n            }\n            bot = bot.next;\n        }\n        return null;\n    };\n    /*\\\n     * Paper.forEach\n     [ method ]\n     **\n     * Executes given function for each element on the paper\n     *\n     * If callback function returns `false` it will stop loop running.\n     **\n     > Parameters\n     **\n     - callback (function) function to run\n     - thisArg (object) context object for the callback\n     = (object) Paper object\n     > Usage\n     | paper.forEach(function (el) {\n     |     el.attr({ stroke: "blue" });\n     | });\n    \\*/\n    paperproto.forEach = function (callback, thisArg) {\n        var bot = this.bottom;\n        while (bot) {\n            if (callback.call(thisArg, bot) === false) {\n                return this;\n            }\n            bot = bot.next;\n        }\n        return this;\n    };\n    /*\\\n     * Paper.getElementsByPoint\n     [ method ]\n     **\n     * Returns set of elements that have common point inside\n     **\n     > Parameters\n     **\n     - x (number) x coordinate of the point\n     - y (number) y coordinate of the point\n     = (object) @Set\n    \\*/\n    paperproto.getElementsByPoint = function (x, y) {\n        var set = this.set();\n        this.forEach(function (el) {\n            if (el.isPointInside(x, y)) {\n                set.push(el);\n            }\n        });\n        return set;\n    };\n    function x_y() {\n        return this.x + S + this.y;\n    }\n    function x_y_w_h() {\n        return this.x + S + this.y + S + this.width + " \\xd7 " + this.height;\n    }\n    /*\\\n     * Element.isPointInside\n     [ method ]\n     **\n     * Determine if given point is inside this element’s shape\n     **\n     > Parameters\n     **\n     - x (number) x coordinate of the point\n     - y (number) y coordinate of the point\n     = (boolean) `true` if point inside the shape\n    \\*/\n    elproto.isPointInside = function (x, y) {\n        var rp = this.realPath = getPath[this.type](this);\n        if (this.attr(\'transform\') && this.attr(\'transform\').length) {\n            rp = R.transformPath(rp, this.attr(\'transform\'));\n        }\n        return R.isPointInsidePath(rp, x, y);\n    };\n    /*\\\n     * Element.getBBox\n     [ method ]\n     **\n     * Return bounding box for a given element\n     **\n     > Parameters\n     **\n     - isWithoutTransform (boolean) flag, `true` if you want to have bounding box before transformations. Default is `false`.\n     = (object) Bounding box object:\n     o {\n     o     x: (number) top left corner x\n     o     y: (number) top left corner y\n     o     x2: (number) bottom right corner x\n     o     y2: (number) bottom right corner y\n     o     width: (number) width\n     o     height: (number) height\n     o }\n    \\*/\n    elproto.getBBox = function (isWithoutTransform) {\n        if (this.removed) {\n            return {};\n        }\n        var _ = this._;\n        if (isWithoutTransform) {\n            if (_.dirty || !_.bboxwt) {\n                this.realPath = getPath[this.type](this);\n                _.bboxwt = pathDimensions(this.realPath);\n                _.bboxwt.toString = x_y_w_h;\n                _.dirty = 0;\n            }\n            return _.bboxwt;\n        }\n        if (_.dirty || _.dirtyT || !_.bbox) {\n            if (_.dirty || !this.realPath) {\n                _.bboxwt = 0;\n                this.realPath = getPath[this.type](this);\n            }\n            _.bbox = pathDimensions(mapPath(this.realPath, this.matrix));\n            _.bbox.toString = x_y_w_h;\n            _.dirty = _.dirtyT = 0;\n        }\n        return _.bbox;\n    };\n    /*\\\n     * Element.clone\n     [ method ]\n     **\n     = (object) clone of a given element\n     **\n    \\*/\n    elproto.clone = function () {\n        if (this.removed) {\n            return null;\n        }\n        var out = this.paper[this.type]().attr(this.attr());\n        this.__set__ && this.__set__.push(out);\n        return out;\n    };\n    /*\\\n     * Element.glow\n     [ method ]\n     **\n     * Return set of elements that create glow-like effect around given element. See @Paper.set.\n     *\n     * Note: Glow is not connected to the element. If you change element attributes it won’t adjust itself.\n     **\n     > Parameters\n     **\n     - glow (object) #optional parameters object with all properties optional:\n     o {\n     o     width (number) size of the glow, default is `10`\n     o     fill (boolean) will it be filled, default is `false`\n     o     opacity (number) opacity, default is `0.5`\n     o     offsetx (number) horizontal offset, default is `0`\n     o     offsety (number) vertical offset, default is `0`\n     o     color (string) glow colour, default is `black`\n     o }\n     = (object) @Paper.set of elements that represents glow\n    \\*/\n    elproto.glow = function (glow) {\n        if (this.type == "text") {\n            return null;\n        }\n        glow = glow || {};\n        var s = {\n            width: (glow.width || 10) + (+this.attr("stroke-width") || 1),\n            fill: glow.fill || false,\n            opacity: glow.opacity == null ? .5 : glow.opacity,\n            offsetx: glow.offsetx || 0,\n            offsety: glow.offsety || 0,\n            color: glow.color || "#000"\n        },\n            c = s.width / 2,\n            r = this.paper,\n            out = r.set(),\n            path = this.realPath || getPath[this.type](this);\n        path = this.matrix ? mapPath(path, this.matrix) : path;\n        for (var i = 1; i < c + 1; i++) {\n            out.push(r.path(path).attr({\n                stroke: s.color,\n                fill: s.fill ? s.color : "none",\n                "stroke-linejoin": "round",\n                "stroke-linecap": "round",\n                "stroke-width": +(s.width / c * i).toFixed(3),\n                opacity: +(s.opacity / c).toFixed(3)\n            }));\n        }\n        return out.insertBefore(this).translate(s.offsetx, s.offsety);\n    };\n    var curveslengths = {},\n    getPointAtSegmentLength = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length) {\n        if (length == null) {\n            return bezlen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y);\n        } else {\n            return R.findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, getTatLen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length));\n        }\n    },\n    getLengthFactory = function (istotal, subpath) {\n        return function (path, length, onlystart) {\n            path = path2curve(path);\n            var x, y, p, l, sp = "", subpaths = {}, point,\n                len = 0;\n            for (var i = 0, ii = path.length; i < ii; i++) {\n                p = path[i];\n                if (p[0] == "M") {\n                    x = +p[1];\n                    y = +p[2];\n                } else {\n                    l = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n                    if (len + l > length) {\n                        if (subpath && !subpaths.start) {\n                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n                            sp += ["C" + point.start.x, point.start.y, point.m.x, point.m.y, point.x, point.y];\n                            if (onlystart) {return sp;}\n                            subpaths.start = sp;\n                            sp = ["M" + point.x, point.y + "C" + point.n.x, point.n.y, point.end.x, point.end.y, p[5], p[6]].join();\n                            len += l;\n                            x = +p[5];\n                            y = +p[6];\n                            continue;\n                        }\n                        if (!istotal && !subpath) {\n                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n                            return {x: point.x, y: point.y, alpha: point.alpha};\n                        }\n                    }\n                    len += l;\n                    x = +p[5];\n                    y = +p[6];\n                }\n                sp += p.shift() + p;\n            }\n            subpaths.end = sp;\n            point = istotal ? len : subpath ? subpaths : R.findDotsAtSegment(x, y, p[0], p[1], p[2], p[3], p[4], p[5], 1);\n            point.alpha && (point = {x: point.x, y: point.y, alpha: point.alpha});\n            return point;\n        };\n    };\n    var getTotalLength = getLengthFactory(1),\n        getPointAtLength = getLengthFactory(),\n        getSubpathsAtLength = getLengthFactory(0, 1);\n    /*\\\n     * Raphael.getTotalLength\n     [ method ]\n     **\n     * Returns length of the given path in pixels.\n     **\n     > Parameters\n     **\n     - path (string) SVG path string.\n     **\n     = (number) length.\n    \\*/\n    R.getTotalLength = getTotalLength;\n    /*\\\n     * Raphael.getPointAtLength\n     [ method ]\n     **\n     * Return coordinates of the point located at the given length on the given path.\n     **\n     > Parameters\n     **\n     - path (string) SVG path string\n     - length (number)\n     **\n     = (object) representation of the point:\n     o {\n     o     x: (number) x coordinate\n     o     y: (number) y coordinate\n     o     alpha: (number) angle of derivative\n     o }\n    \\*/\n    R.getPointAtLength = getPointAtLength;\n    /*\\\n     * Raphael.getSubpath\n     [ method ]\n     **\n     * Return subpath of a given path from given length to given length.\n     **\n     > Parameters\n     **\n     - path (string) SVG path string\n     - from (number) position of the start of the segment\n     - to (number) position of the end of the segment\n     **\n     = (string) pathstring for the segment\n    \\*/\n    R.getSubpath = function (path, from, to) {\n        if (this.getTotalLength(path) - to < 1e-6) {\n            return getSubpathsAtLength(path, from).end;\n        }\n        var a = getSubpathsAtLength(path, to, 1);\n        return from ? getSubpathsAtLength(a, from).end : a;\n    };\n    /*\\\n     * Element.getTotalLength\n     [ method ]\n     **\n     * Returns length of the path in pixels. Only works for element of “path” type.\n     = (number) length.\n    \\*/\n    elproto.getTotalLength = function () {\n        var path = this.getPath();\n        if (!path) {\n            return;\n        }\n\n        if (this.node.getTotalLength) {\n            return this.node.getTotalLength();\n        }\n\n        return getTotalLength(path);\n    };\n    /*\\\n     * Element.getPointAtLength\n     [ method ]\n     **\n     * Return coordinates of the point located at the given length on the given path. Only works for element of “path” type.\n     **\n     > Parameters\n     **\n     - length (number)\n     **\n     = (object) representation of the point:\n     o {\n     o     x: (number) x coordinate\n     o     y: (number) y coordinate\n     o     alpha: (number) angle of derivative\n     o }\n    \\*/\n    elproto.getPointAtLength = function (length) {\n        var path = this.getPath();\n        if (!path) {\n            return;\n        }\n\n        return getPointAtLength(path, length);\n    };\n    /*\\\n     * Element.getPath\n     [ method ]\n     **\n     * Returns path of the element. Only works for elements of “path” type and simple elements like circle.\n     = (object) path\n     **\n    \\*/\n    elproto.getPath = function () {\n        var path,\n            getPath = R._getPath[this.type];\n\n        if (this.type == "text" || this.type == "set") {\n            return;\n        }\n\n        if (getPath) {\n            path = getPath(this);\n        }\n\n        return path;\n    };\n    /*\\\n     * Element.getSubpath\n     [ method ]\n     **\n     * Return subpath of a given element from given length to given length. Only works for element of “path” type.\n     **\n     > Parameters\n     **\n     - from (number) position of the start of the segment\n     - to (number) position of the end of the segment\n     **\n     = (string) pathstring for the segment\n    \\*/\n    elproto.getSubpath = function (from, to) {\n        var path = this.getPath();\n        if (!path) {\n            return;\n        }\n\n        return R.getSubpath(path, from, to);\n    };\n    /*\\\n     * Raphael.easing_formulas\n     [ property ]\n     **\n     * Object that contains easing formulas for animation. You could extend it with your own. By default it has following list of easing:\n     # <ul>\n     #     <li>“linear”</li>\n     #     <li>“&lt;” or “easeIn” or “ease-in”</li>\n     #     <li>“>” or “easeOut” or “ease-out”</li>\n     #     <li>“&lt;>” or “easeInOut” or “ease-in-out”</li>\n     #     <li>“backIn” or “back-in”</li>\n     #     <li>“backOut” or “back-out”</li>\n     #     <li>“elastic”</li>\n     #     <li>“bounce”</li>\n     # </ul>\n     # <p>See also <a href="http://raphaeljs.com/easing.html">Easing demo</a>.</p>\n    \\*/\n    var ef = R.easing_formulas = {\n        linear: function (n) {\n            return n;\n        },\n        "<": function (n) {\n            return pow(n, 1.7);\n        },\n        ">": function (n) {\n            return pow(n, .48);\n        },\n        "<>": function (n) {\n            var q = .48 - n / 1.04,\n                Q = math.sqrt(.1734 + q * q),\n                x = Q - q,\n                X = pow(abs(x), 1 / 3) * (x < 0 ? -1 : 1),\n                y = -Q - q,\n                Y = pow(abs(y), 1 / 3) * (y < 0 ? -1 : 1),\n                t = X + Y + .5;\n            return (1 - t) * 3 * t * t + t * t * t;\n        },\n        backIn: function (n) {\n            var s = 1.70158;\n            return n * n * ((s + 1) * n - s);\n        },\n        backOut: function (n) {\n            n = n - 1;\n            var s = 1.70158;\n            return n * n * ((s + 1) * n + s) + 1;\n        },\n        elastic: function (n) {\n            if (n == !!n) {\n                return n;\n            }\n            return pow(2, -10 * n) * math.sin((n - .075) * (2 * PI) / .3) + 1;\n        },\n        bounce: function (n) {\n            var s = 7.5625,\n                p = 2.75,\n                l;\n            if (n < (1 / p)) {\n                l = s * n * n;\n            } else {\n                if (n < (2 / p)) {\n                    n -= (1.5 / p);\n                    l = s * n * n + .75;\n                } else {\n                    if (n < (2.5 / p)) {\n                        n -= (2.25 / p);\n                        l = s * n * n + .9375;\n                    } else {\n                        n -= (2.625 / p);\n                        l = s * n * n + .984375;\n                    }\n                }\n            }\n            return l;\n        }\n    };\n    ef.easeIn = ef["ease-in"] = ef["<"];\n    ef.easeOut = ef["ease-out"] = ef[">"];\n    ef.easeInOut = ef["ease-in-out"] = ef["<>"];\n    ef["back-in"] = ef.backIn;\n    ef["back-out"] = ef.backOut;\n\n    var animationElements = [],\n        requestAnimFrame = window.requestAnimationFrame       ||\n                           window.webkitRequestAnimationFrame ||\n                           window.mozRequestAnimationFrame    ||\n                           window.oRequestAnimationFrame      ||\n                           window.msRequestAnimationFrame     ||\n                           function (callback) {\n                               setTimeout(callback, 16);\n                           },\n        animation = function () {\n            var Now = +new Date,\n                l = 0;\n            for (; l < animationElements.length; l++) {\n                var e = animationElements[l];\n                if (e.el.removed || e.paused) {\n                    continue;\n                }\n                var time = Now - e.start,\n                    ms = e.ms,\n                    easing = e.easing,\n                    from = e.from,\n                    diff = e.diff,\n                    to = e.to,\n                    t = e.t,\n                    that = e.el,\n                    set = {},\n                    now,\n                    init = {},\n                    key;\n                if (e.initstatus) {\n                    time = (e.initstatus * e.anim.top - e.prev) / (e.percent - e.prev) * ms;\n                    e.status = e.initstatus;\n                    delete e.initstatus;\n                    e.stop && animationElements.splice(l--, 1);\n                } else {\n                    e.status = (e.prev + (e.percent - e.prev) * (time / ms)) / e.anim.top;\n                }\n                if (time < 0) {\n                    continue;\n                }\n                if (time < ms) {\n                    var pos = easing(time / ms);\n                    for (var attr in from) if (from[has](attr)) {\n                        switch (availableAnimAttrs[attr]) {\n                            case nu:\n                                now = +from[attr] + pos * ms * diff[attr];\n                                break;\n                            case "colour":\n                                now = "rgb(" + [\n                                    upto255(round(from[attr].r + pos * ms * diff[attr].r)),\n                                    upto255(round(from[attr].g + pos * ms * diff[attr].g)),\n                                    upto255(round(from[attr].b + pos * ms * diff[attr].b))\n                                ].join(",") + ")";\n                                break;\n                            case "path":\n                                now = [];\n                                for (var i = 0, ii = from[attr].length; i < ii; i++) {\n                                    now[i] = [from[attr][i][0]];\n                                    for (var j = 1, jj = from[attr][i].length; j < jj; j++) {\n                                        now[i][j] = +from[attr][i][j] + pos * ms * diff[attr][i][j];\n                                    }\n                                    now[i] = now[i].join(S);\n                                }\n                                now = now.join(S);\n                                break;\n                            case "transform":\n                                if (diff[attr].real) {\n                                    now = [];\n                                    for (i = 0, ii = from[attr].length; i < ii; i++) {\n                                        now[i] = [from[attr][i][0]];\n                                        for (j = 1, jj = from[attr][i].length; j < jj; j++) {\n                                            now[i][j] = from[attr][i][j] + pos * ms * diff[attr][i][j];\n                                        }\n                                    }\n                                } else {\n                                    var get = function (i) {\n                                        return +from[attr][i] + pos * ms * diff[attr][i];\n                                    };\n                                    // now = [["r", get(2), 0, 0], ["t", get(3), get(4)], ["s", get(0), get(1), 0, 0]];\n                                    now = [["m", get(0), get(1), get(2), get(3), get(4), get(5)]];\n                                }\n                                break;\n                            case "csv":\n                                if (attr == "clip-rect") {\n                                    now = [];\n                                    i = 4;\n                                    while (i--) {\n                                        now[i] = +from[attr][i] + pos * ms * diff[attr][i];\n                                    }\n                                }\n                                break;\n                            default:\n                                var from2 = [][concat](from[attr]);\n                                now = [];\n                                i = that.paper.customAttributes[attr].length;\n                                while (i--) {\n                                    now[i] = +from2[i] + pos * ms * diff[attr][i];\n                                }\n                                break;\n                        }\n                        set[attr] = now;\n                    }\n                    that.attr(set);\n                    (function (id, that, anim) {\n                        setTimeout(function () {\n                            eve("raphael.anim.frame." + id, that, anim);\n                        });\n                    })(that.id, that, e.anim);\n                } else {\n                    (function(f, el, a) {\n                        setTimeout(function() {\n                            eve("raphael.anim.frame." + el.id, el, a);\n                            eve("raphael.anim.finish." + el.id, el, a);\n                            R.is(f, "function") && f.call(el);\n                        });\n                    })(e.callback, that, e.anim);\n                    that.attr(to);\n                    animationElements.splice(l--, 1);\n                    if (e.repeat > 1 && !e.next) {\n                        for (key in to) if (to[has](key)) {\n                            init[key] = e.totalOrigin[key];\n                        }\n                        e.el.attr(init);\n                        runAnimation(e.anim, e.el, e.anim.percents[0], null, e.totalOrigin, e.repeat - 1);\n                    }\n                    if (e.next && !e.stop) {\n                        runAnimation(e.anim, e.el, e.next, null, e.totalOrigin, e.repeat);\n                    }\n                }\n            }\n            animationElements.length && requestAnimFrame(animation);\n        },\n        upto255 = function (color) {\n            return color > 255 ? 255 : color < 0 ? 0 : color;\n        };\n    /*\\\n     * Element.animateWith\n     [ method ]\n     **\n     * Acts similar to @Element.animate, but ensure that given animation runs in sync with another given element.\n     **\n     > Parameters\n     **\n     - el (object) element to sync with\n     - anim (object) animation to sync with\n     - params (object) #optional final attributes for the element, see also @Element.attr\n     - ms (number) #optional number of milliseconds for animation to run\n     - easing (string) #optional easing type. Accept on of @Raphael.easing_formulas or CSS format: `cubic&#x2010;bezier(XX,&#160;XX,&#160;XX,&#160;XX)`\n     - callback (function) #optional callback function. Will be called at the end of animation.\n     * or\n     - element (object) element to sync with\n     - anim (object) animation to sync with\n     - animation (object) #optional animation object, see @Raphael.animation\n     **\n     = (object) original element\n    \\*/\n    elproto.animateWith = function (el, anim, params, ms, easing, callback) {\n        var element = this;\n        if (element.removed) {\n            callback && callback.call(element);\n            return element;\n        }\n        var a = params instanceof Animation ? params : R.animation(params, ms, easing, callback),\n            x, y;\n        runAnimation(a, element, a.percents[0], null, element.attr());\n        for (var i = 0, ii = animationElements.length; i < ii; i++) {\n            if (animationElements[i].anim == anim && animationElements[i].el == el) {\n                animationElements[ii - 1].start = animationElements[i].start;\n                break;\n            }\n        }\n        return element;\n        //\n        //\n        // var a = params ? R.animation(params, ms, easing, callback) : anim,\n        //     status = element.status(anim);\n        // return this.animate(a).status(a, status * anim.ms / a.ms);\n    };\n    function CubicBezierAtTime(t, p1x, p1y, p2x, p2y, duration) {\n        var cx = 3 * p1x,\n            bx = 3 * (p2x - p1x) - cx,\n            ax = 1 - cx - bx,\n            cy = 3 * p1y,\n            by = 3 * (p2y - p1y) - cy,\n            ay = 1 - cy - by;\n        function sampleCurveX(t) {\n            return ((ax * t + bx) * t + cx) * t;\n        }\n        function solve(x, epsilon) {\n            var t = solveCurveX(x, epsilon);\n            return ((ay * t + by) * t + cy) * t;\n        }\n        function solveCurveX(x, epsilon) {\n            var t0, t1, t2, x2, d2, i;\n            for(t2 = x, i = 0; i < 8; i++) {\n                x2 = sampleCurveX(t2) - x;\n                if (abs(x2) < epsilon) {\n                    return t2;\n                }\n                d2 = (3 * ax * t2 + 2 * bx) * t2 + cx;\n                if (abs(d2) < 1e-6) {\n                    break;\n                }\n                t2 = t2 - x2 / d2;\n            }\n            t0 = 0;\n            t1 = 1;\n            t2 = x;\n            if (t2 < t0) {\n                return t0;\n            }\n            if (t2 > t1) {\n                return t1;\n            }\n            while (t0 < t1) {\n                x2 = sampleCurveX(t2);\n                if (abs(x2 - x) < epsilon) {\n                    return t2;\n                }\n                if (x > x2) {\n                    t0 = t2;\n                } else {\n                    t1 = t2;\n                }\n                t2 = (t1 - t0) / 2 + t0;\n            }\n            return t2;\n        }\n        return solve(t, 1 / (200 * duration));\n    }\n    elproto.onAnimation = function (f) {\n        f ? eve.on("raphael.anim.frame." + this.id, f) : eve.unbind("raphael.anim.frame." + this.id);\n        return this;\n    };\n    function Animation(anim, ms) {\n        var percents = [],\n            newAnim = {};\n        this.ms = ms;\n        this.times = 1;\n        if (anim) {\n            for (var attr in anim) if (anim[has](attr)) {\n                newAnim[toFloat(attr)] = anim[attr];\n                percents.push(toFloat(attr));\n            }\n            percents.sort(sortByNumber);\n        }\n        this.anim = newAnim;\n        this.top = percents[percents.length - 1];\n        this.percents = percents;\n    }\n    /*\\\n     * Animation.delay\n     [ method ]\n     **\n     * Creates a copy of existing animation object with given delay.\n     **\n     > Parameters\n     **\n     - delay (number) number of ms to pass between animation start and actual animation\n     **\n     = (object) new altered Animation object\n     | var anim = Raphael.animation({cx: 10, cy: 20}, 2e3);\n     | circle1.animate(anim); // run the given animation immediately\n     | circle2.animate(anim.delay(500)); // run the given animation after 500 ms\n    \\*/\n    Animation.prototype.delay = function (delay) {\n        var a = new Animation(this.anim, this.ms);\n        a.times = this.times;\n        a.del = +delay || 0;\n        return a;\n    };\n    /*\\\n     * Animation.repeat\n     [ method ]\n     **\n     * Creates a copy of existing animation object with given repetition.\n     **\n     > Parameters\n     **\n     - repeat (number) number iterations of animation. For infinite animation pass `Infinity`\n     **\n     = (object) new altered Animation object\n    \\*/\n    Animation.prototype.repeat = function (times) {\n        var a = new Animation(this.anim, this.ms);\n        a.del = this.del;\n        a.times = math.floor(mmax(times, 0)) || 1;\n        return a;\n    };\n    function runAnimation(anim, element, percent, status, totalOrigin, times) {\n        percent = toFloat(percent);\n        var params,\n            isInAnim,\n            isInAnimSet,\n            percents = [],\n            next,\n            prev,\n            timestamp,\n            ms = anim.ms,\n            from = {},\n            to = {},\n            diff = {};\n        if (status) {\n            for (i = 0, ii = animationElements.length; i < ii; i++) {\n                var e = animationElements[i];\n                if (e.el.id == element.id && e.anim == anim) {\n                    if (e.percent != percent) {\n                        animationElements.splice(i, 1);\n                        isInAnimSet = 1;\n                    } else {\n                        isInAnim = e;\n                    }\n                    element.attr(e.totalOrigin);\n                    break;\n                }\n            }\n        } else {\n            status = +to; // NaN\n        }\n        for (var i = 0, ii = anim.percents.length; i < ii; i++) {\n            if (anim.percents[i] == percent || anim.percents[i] > status * anim.top) {\n                percent = anim.percents[i];\n                prev = anim.percents[i - 1] || 0;\n                ms = ms / anim.top * (percent - prev);\n                next = anim.percents[i + 1];\n                params = anim.anim[percent];\n                break;\n            } else if (status) {\n                element.attr(anim.anim[anim.percents[i]]);\n            }\n        }\n        if (!params) {\n            return;\n        }\n        if (!isInAnim) {\n            for (var attr in params) if (params[has](attr)) {\n                if (availableAnimAttrs[has](attr) || element.paper.customAttributes[has](attr)) {\n                    from[attr] = element.attr(attr);\n                    (from[attr] == null) && (from[attr] = availableAttrs[attr]);\n                    to[attr] = params[attr];\n                    switch (availableAnimAttrs[attr]) {\n                        case nu:\n                            diff[attr] = (to[attr] - from[attr]) / ms;\n                            break;\n                        case "colour":\n                            from[attr] = R.getRGB(from[attr]);\n                            var toColour = R.getRGB(to[attr]);\n                            diff[attr] = {\n                                r: (toColour.r - from[attr].r) / ms,\n                                g: (toColour.g - from[attr].g) / ms,\n                                b: (toColour.b - from[attr].b) / ms\n                            };\n                            break;\n                        case "path":\n                            var pathes = path2curve(from[attr], to[attr]),\n                                toPath = pathes[1];\n                            from[attr] = pathes[0];\n                            diff[attr] = [];\n                            for (i = 0, ii = from[attr].length; i < ii; i++) {\n                                diff[attr][i] = [0];\n                                for (var j = 1, jj = from[attr][i].length; j < jj; j++) {\n                                    diff[attr][i][j] = (toPath[i][j] - from[attr][i][j]) / ms;\n                                }\n                            }\n                            break;\n                        case "transform":\n                            var _ = element._,\n                                eq = equaliseTransform(_[attr], to[attr]);\n                            if (eq) {\n                                from[attr] = eq.from;\n                                to[attr] = eq.to;\n                                diff[attr] = [];\n                                diff[attr].real = true;\n                                for (i = 0, ii = from[attr].length; i < ii; i++) {\n                                    diff[attr][i] = [from[attr][i][0]];\n                                    for (j = 1, jj = from[attr][i].length; j < jj; j++) {\n                                        diff[attr][i][j] = (to[attr][i][j] - from[attr][i][j]) / ms;\n                                    }\n                                }\n                            } else {\n                                var m = (element.matrix || new Matrix),\n                                    to2 = {\n                                        _: {transform: _.transform},\n                                        getBBox: function () {\n                                            return element.getBBox(1);\n                                        }\n                                    };\n                                from[attr] = [\n                                    m.a,\n                                    m.b,\n                                    m.c,\n                                    m.d,\n                                    m.e,\n                                    m.f\n                                ];\n                                extractTransform(to2, to[attr]);\n                                to[attr] = to2._.transform;\n                                diff[attr] = [\n                                    (to2.matrix.a - m.a) / ms,\n                                    (to2.matrix.b - m.b) / ms,\n                                    (to2.matrix.c - m.c) / ms,\n                                    (to2.matrix.d - m.d) / ms,\n                                    (to2.matrix.e - m.e) / ms,\n                                    (to2.matrix.f - m.f) / ms\n                                ];\n                                // from[attr] = [_.sx, _.sy, _.deg, _.dx, _.dy];\n                                // var to2 = {_:{}, getBBox: function () { return element.getBBox(); }};\n                                // extractTransform(to2, to[attr]);\n                                // diff[attr] = [\n                                //     (to2._.sx - _.sx) / ms,\n                                //     (to2._.sy - _.sy) / ms,\n                                //     (to2._.deg - _.deg) / ms,\n                                //     (to2._.dx - _.dx) / ms,\n                                //     (to2._.dy - _.dy) / ms\n                                // ];\n                            }\n                            break;\n                        case "csv":\n                            var values = Str(params[attr])[split](separator),\n                                from2 = Str(from[attr])[split](separator);\n                            if (attr == "clip-rect") {\n                                from[attr] = from2;\n                                diff[attr] = [];\n                                i = from2.length;\n                                while (i--) {\n                                    diff[attr][i] = (values[i] - from[attr][i]) / ms;\n                                }\n                            }\n                            to[attr] = values;\n                            break;\n                        default:\n                            values = [][concat](params[attr]);\n                            from2 = [][concat](from[attr]);\n                            diff[attr] = [];\n                            i = element.paper.customAttributes[attr].length;\n                            while (i--) {\n                                diff[attr][i] = ((values[i] || 0) - (from2[i] || 0)) / ms;\n                            }\n                            break;\n                    }\n                }\n            }\n            var easing = params.easing,\n                easyeasy = R.easing_formulas[easing];\n            if (!easyeasy) {\n                easyeasy = Str(easing).match(bezierrg);\n                if (easyeasy && easyeasy.length == 5) {\n                    var curve = easyeasy;\n                    easyeasy = function (t) {\n                        return CubicBezierAtTime(t, +curve[1], +curve[2], +curve[3], +curve[4], ms);\n                    };\n                } else {\n                    easyeasy = pipe;\n                }\n            }\n            timestamp = params.start || anim.start || +new Date;\n            e = {\n                anim: anim,\n                percent: percent,\n                timestamp: timestamp,\n                start: timestamp + (anim.del || 0),\n                status: 0,\n                initstatus: status || 0,\n                stop: false,\n                ms: ms,\n                easing: easyeasy,\n                from: from,\n                diff: diff,\n                to: to,\n                el: element,\n                callback: params.callback,\n                prev: prev,\n                next: next,\n                repeat: times || anim.times,\n                origin: element.attr(),\n                totalOrigin: totalOrigin\n            };\n            animationElements.push(e);\n            if (status && !isInAnim && !isInAnimSet) {\n                e.stop = true;\n                e.start = new Date - ms * status;\n                if (animationElements.length == 1) {\n                    return animation();\n                }\n            }\n            if (isInAnimSet) {\n                e.start = new Date - e.ms * status;\n            }\n            animationElements.length == 1 && requestAnimFrame(animation);\n        } else {\n            isInAnim.initstatus = status;\n            isInAnim.start = new Date - isInAnim.ms * status;\n        }\n        eve("raphael.anim.start." + element.id, element, anim);\n    }\n    /*\\\n     * Raphael.animation\n     [ method ]\n     **\n     * Creates an animation object that can be passed to the @Element.animate or @Element.animateWith methods.\n     * See also @Animation.delay and @Animation.repeat methods.\n     **\n     > Parameters\n     **\n     - params (object) final attributes for the element, see also @Element.attr\n     - ms (number) number of milliseconds for animation to run\n     - easing (string) #optional easing type. Accept one of @Raphael.easing_formulas or CSS format: `cubic&#x2010;bezier(XX,&#160;XX,&#160;XX,&#160;XX)`\n     - callback (function) #optional callback function. Will be called at the end of animation.\n     **\n     = (object) @Animation\n    \\*/\n    R.animation = function (params, ms, easing, callback) {\n        if (params instanceof Animation) {\n            return params;\n        }\n        if (R.is(easing, "function") || !easing) {\n            callback = callback || easing || null;\n            easing = null;\n        }\n        params = Object(params);\n        ms = +ms || 0;\n        var p = {},\n            json,\n            attr;\n        for (attr in params) if (params[has](attr) && toFloat(attr) != attr && toFloat(attr) + "%" != attr) {\n            json = true;\n            p[attr] = params[attr];\n        }\n        if (!json) {\n            // if percent-like syntax is used and end-of-all animation callback used\n            if(callback){\n                // find the last one\n                var lastKey = 0;\n                for(var i in params){\n                    var percent = toInt(i);\n                    if(params[has](i) && percent > lastKey){\n                        lastKey = percent;\n                    }\n                }\n                lastKey += \'%\';\n                // if already defined callback in the last keyframe, skip\n                !params[lastKey].callback && (params[lastKey].callback = callback);\n            }\n          return new Animation(params, ms);\n        } else {\n            easing && (p.easing = easing);\n            callback && (p.callback = callback);\n            return new Animation({100: p}, ms);\n        }\n    };\n    /*\\\n     * Element.animate\n     [ method ]\n     **\n     * Creates and starts animation for given element.\n     **\n     > Parameters\n     **\n     - params (object) final attributes for the element, see also @Element.attr\n     - ms (number) number of milliseconds for animation to run\n     - easing (string) #optional easing type. Accept one of @Raphael.easing_formulas or CSS format: `cubic&#x2010;bezier(XX,&#160;XX,&#160;XX,&#160;XX)`\n     - callback (function) #optional callback function. Will be called at the end of animation.\n     * or\n     - animation (object) animation object, see @Raphael.animation\n     **\n     = (object) original element\n    \\*/\n    elproto.animate = function (params, ms, easing, callback) {\n        var element = this;\n        if (element.removed) {\n            callback && callback.call(element);\n            return element;\n        }\n        var anim = params instanceof Animation ? params : R.animation(params, ms, easing, callback);\n        runAnimation(anim, element, anim.percents[0], null, element.attr());\n        return element;\n    };\n    /*\\\n     * Element.setTime\n     [ method ]\n     **\n     * Sets the status of animation of the element in milliseconds. Similar to @Element.status method.\n     **\n     > Parameters\n     **\n     - anim (object) animation object\n     - value (number) number of milliseconds from the beginning of the animation\n     **\n     = (object) original element if `value` is specified\n     * Note, that during animation following events are triggered:\n     *\n     * On each animation frame event `anim.frame.<id>`, on start `anim.start.<id>` and on end `anim.finish.<id>`.\n    \\*/\n    elproto.setTime = function (anim, value) {\n        if (anim && value != null) {\n            this.status(anim, mmin(value, anim.ms) / anim.ms);\n        }\n        return this;\n    };\n    /*\\\n     * Element.status\n     [ method ]\n     **\n     * Gets or sets the status of animation of the element.\n     **\n     > Parameters\n     **\n     - anim (object) #optional animation object\n     - value (number) #optional 0 – 1. If specified, method works like a setter and sets the status of a given animation to the value. This will cause animation to jump to the given position.\n     **\n     = (number) status\n     * or\n     = (array) status if `anim` is not specified. Array of objects in format:\n     o {\n     o     anim: (object) animation object\n     o     status: (number) status\n     o }\n     * or\n     = (object) original element if `value` is specified\n    \\*/\n    elproto.status = function (anim, value) {\n        var out = [],\n            i = 0,\n            len,\n            e;\n        if (value != null) {\n            runAnimation(anim, this, -1, mmin(value, 1));\n            return this;\n        } else {\n            len = animationElements.length;\n            for (; i < len; i++) {\n                e = animationElements[i];\n                if (e.el.id == this.id && (!anim || e.anim == anim)) {\n                    if (anim) {\n                        return e.status;\n                    }\n                    out.push({\n                        anim: e.anim,\n                        status: e.status\n                    });\n                }\n            }\n            if (anim) {\n                return 0;\n            }\n            return out;\n        }\n    };\n    /*\\\n     * Element.pause\n     [ method ]\n     **\n     * Stops animation of the element with ability to resume it later on.\n     **\n     > Parameters\n     **\n     - anim (object) #optional animation object\n     **\n     = (object) original element\n    \\*/\n    elproto.pause = function (anim) {\n        for (var i = 0; i < animationElements.length; i++) if (animationElements[i].el.id == this.id && (!anim || animationElements[i].anim == anim)) {\n            if (eve("raphael.anim.pause." + this.id, this, animationElements[i].anim) !== false) {\n                animationElements[i].paused = true;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Element.resume\n     [ method ]\n     **\n     * Resumes animation if it was paused with @Element.pause method.\n     **\n     > Parameters\n     **\n     - anim (object) #optional animation object\n     **\n     = (object) original element\n    \\*/\n    elproto.resume = function (anim) {\n        for (var i = 0; i < animationElements.length; i++) if (animationElements[i].el.id == this.id && (!anim || animationElements[i].anim == anim)) {\n            var e = animationElements[i];\n            if (eve("raphael.anim.resume." + this.id, this, e.anim) !== false) {\n                delete e.paused;\n                this.status(e.anim, e.status);\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Element.stop\n     [ method ]\n     **\n     * Stops animation of the element.\n     **\n     > Parameters\n     **\n     - anim (object) #optional animation object\n     **\n     = (object) original element\n    \\*/\n    elproto.stop = function (anim) {\n        for (var i = 0; i < animationElements.length; i++) if (animationElements[i].el.id == this.id && (!anim || animationElements[i].anim == anim)) {\n            if (eve("raphael.anim.stop." + this.id, this, animationElements[i].anim) !== false) {\n                animationElements.splice(i--, 1);\n            }\n        }\n        return this;\n    };\n    function stopAnimation(paper) {\n        for (var i = 0; i < animationElements.length; i++) if (animationElements[i].el.paper == paper) {\n            animationElements.splice(i--, 1);\n        }\n    }\n    eve.on("raphael.remove", stopAnimation);\n    eve.on("raphael.clear", stopAnimation);\n    elproto.toString = function () {\n        return "Rapha\\xebl\\u2019s object";\n    };\n\n    // Set\n    var Set = function (items) {\n        this.items = [];\n        this.length = 0;\n        this.type = "set";\n        if (items) {\n            for (var i = 0, ii = items.length; i < ii; i++) {\n                if (items[i] && (items[i].constructor == elproto.constructor || items[i].constructor == Set)) {\n                    this[this.items.length] = this.items[this.items.length] = items[i];\n                    this.length++;\n                }\n            }\n        }\n    },\n    setproto = Set.prototype;\n    /*\\\n     * Set.push\n     [ method ]\n     **\n     * Adds each argument to the current set.\n     = (object) original element\n    \\*/\n    setproto.push = function () {\n        var item,\n            len;\n        for (var i = 0, ii = arguments.length; i < ii; i++) {\n            item = arguments[i];\n            if (item && (item.constructor == elproto.constructor || item.constructor == Set)) {\n                len = this.items.length;\n                this[len] = this.items[len] = item;\n                this.length++;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Set.pop\n     [ method ]\n     **\n     * Removes last element and returns it.\n     = (object) element\n    \\*/\n    setproto.pop = function () {\n        this.length && delete this[this.length--];\n        return this.items.pop();\n    };\n    /*\\\n     * Set.forEach\n     [ method ]\n     **\n     * Executes given function for each element in the set.\n     *\n     * If function returns `false` it will stop loop running.\n     **\n     > Parameters\n     **\n     - callback (function) function to run\n     - thisArg (object) context object for the callback\n     = (object) Set object\n    \\*/\n    setproto.forEach = function (callback, thisArg) {\n        for (var i = 0, ii = this.items.length; i < ii; i++) {\n            if (callback.call(thisArg, this.items[i], i) === false) {\n                return this;\n            }\n        }\n        return this;\n    };\n    for (var method in elproto) if (elproto[has](method)) {\n        setproto[method] = (function (methodname) {\n            return function () {\n                var arg = arguments;\n                return this.forEach(function (el) {\n                    el[methodname][apply](el, arg);\n                });\n            };\n        })(method);\n    }\n    setproto.attr = function (name, value) {\n        if (name && R.is(name, array) && R.is(name[0], "object")) {\n            for (var j = 0, jj = name.length; j < jj; j++) {\n                this.items[j].attr(name[j]);\n            }\n        } else {\n            for (var i = 0, ii = this.items.length; i < ii; i++) {\n                this.items[i].attr(name, value);\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Set.clear\n     [ method ]\n     **\n     * Removes all elements from the set\n    \\*/\n    setproto.clear = function () {\n        while (this.length) {\n            this.pop();\n        }\n    };\n    /*\\\n     * Set.splice\n     [ method ]\n     **\n     * Removes given element from the set\n     **\n     > Parameters\n     **\n     - index (number) position of the deletion\n     - count (number) number of element to remove\n     - insertion… (object) #optional elements to insert\n     = (object) set elements that were deleted\n    \\*/\n    setproto.splice = function (index, count, insertion) {\n        index = index < 0 ? mmax(this.length + index, 0) : index;\n        count = mmax(0, mmin(this.length - index, count));\n        var tail = [],\n            todel = [],\n            args = [],\n            i;\n        for (i = 2; i < arguments.length; i++) {\n            args.push(arguments[i]);\n        }\n        for (i = 0; i < count; i++) {\n            todel.push(this[index + i]);\n        }\n        for (; i < this.length - index; i++) {\n            tail.push(this[index + i]);\n        }\n        var arglen = args.length;\n        for (i = 0; i < arglen + tail.length; i++) {\n            this.items[index + i] = this[index + i] = i < arglen ? args[i] : tail[i - arglen];\n        }\n        i = this.items.length = this.length -= count - arglen;\n        while (this[i]) {\n            delete this[i++];\n        }\n        return new Set(todel);\n    };\n    /*\\\n     * Set.exclude\n     [ method ]\n     **\n     * Removes given element from the set\n     **\n     > Parameters\n     **\n     - element (object) element to remove\n     = (boolean) `true` if object was found & removed from the set\n    \\*/\n    setproto.exclude = function (el) {\n        for (var i = 0, ii = this.length; i < ii; i++) if (this[i] == el) {\n            this.splice(i, 1);\n            return true;\n        }\n    };\n    setproto.animate = function (params, ms, easing, callback) {\n        (R.is(easing, "function") || !easing) && (callback = easing || null);\n        var len = this.items.length,\n            i = len,\n            item,\n            set = this,\n            collector;\n        if (!len) {\n            return this;\n        }\n        callback && (collector = function () {\n            !--len && callback.call(set);\n        });\n        easing = R.is(easing, string) ? easing : collector;\n        var anim = R.animation(params, ms, easing, collector);\n        item = this.items[--i].animate(anim);\n        while (i--) {\n            this.items[i] && !this.items[i].removed && this.items[i].animateWith(item, anim, anim);\n            (this.items[i] && !this.items[i].removed) || len--;\n        }\n        return this;\n    };\n    setproto.insertAfter = function (el) {\n        var i = this.items.length;\n        while (i--) {\n            this.items[i].insertAfter(el);\n        }\n        return this;\n    };\n    setproto.getBBox = function () {\n        var x = [],\n            y = [],\n            x2 = [],\n            y2 = [];\n        for (var i = this.items.length; i--;) if (!this.items[i].removed) {\n            var box = this.items[i].getBBox();\n            x.push(box.x);\n            y.push(box.y);\n            x2.push(box.x + box.width);\n            y2.push(box.y + box.height);\n        }\n        x = mmin[apply](0, x);\n        y = mmin[apply](0, y);\n        x2 = mmax[apply](0, x2);\n        y2 = mmax[apply](0, y2);\n        return {\n            x: x,\n            y: y,\n            x2: x2,\n            y2: y2,\n            width: x2 - x,\n            height: y2 - y\n        };\n    };\n    setproto.clone = function (s) {\n        s = this.paper.set();\n        for (var i = 0, ii = this.items.length; i < ii; i++) {\n            s.push(this.items[i].clone());\n        }\n        return s;\n    };\n    setproto.toString = function () {\n        return "Rapha\\xebl\\u2018s set";\n    };\n\n    setproto.glow = function(glowConfig) {\n        var ret = this.paper.set();\n        this.forEach(function(shape, index){\n            var g = shape.glow(glowConfig);\n            if(g != null){\n                g.forEach(function(shape2, index2){\n                    ret.push(shape2);\n                });\n            }\n        });\n        return ret;\n    };\n\n\n    /*\\\n     * Set.isPointInside\n     [ method ]\n     **\n     * Determine if given point is inside this set’s elements\n     **\n     > Parameters\n     **\n     - x (number) x coordinate of the point\n     - y (number) y coordinate of the point\n     = (boolean) `true` if point is inside any of the set\'s elements\n     \\*/\n    setproto.isPointInside = function (x, y) {\n        var isPointInside = false;\n        this.forEach(function (el) {\n            if (el.isPointInside(x, y)) {\n                isPointInside = true;\n                return false; // stop loop\n            }\n        });\n        return isPointInside;\n    };\n\n    /*\\\n     * Raphael.registerFont\n     [ method ]\n     **\n     * Adds given font to the registered set of fonts for Raphaël. Should be used as an internal call from within Cufón’s font file.\n     * Returns original parameter, so it could be used with chaining.\n     # <a href="http://wiki.github.com/sorccu/cufon/about">More about Cufón and how to convert your font form TTF, OTF, etc to JavaScript file.</a>\n     **\n     > Parameters\n     **\n     - font (object) the font to register\n     = (object) the font you passed in\n     > Usage\n     | Cufon.registerFont(Raphael.registerFont({…}));\n    \\*/\n    R.registerFont = function (font) {\n        if (!font.face) {\n            return font;\n        }\n        this.fonts = this.fonts || {};\n        var fontcopy = {\n                w: font.w,\n                face: {},\n                glyphs: {}\n            },\n            family = font.face["font-family"];\n        for (var prop in font.face) if (font.face[has](prop)) {\n            fontcopy.face[prop] = font.face[prop];\n        }\n        if (this.fonts[family]) {\n            this.fonts[family].push(fontcopy);\n        } else {\n            this.fonts[family] = [fontcopy];\n        }\n        if (!font.svg) {\n            fontcopy.face["units-per-em"] = toInt(font.face["units-per-em"], 10);\n            for (var glyph in font.glyphs) if (font.glyphs[has](glyph)) {\n                var path = font.glyphs[glyph];\n                fontcopy.glyphs[glyph] = {\n                    w: path.w,\n                    k: {},\n                    d: path.d && "M" + path.d.replace(/[mlcxtrv]/g, function (command) {\n                            return {l: "L", c: "C", x: "z", t: "m", r: "l", v: "c"}[command] || "M";\n                        }) + "z"\n                };\n                if (path.k) {\n                    for (var k in path.k) if (path[has](k)) {\n                        fontcopy.glyphs[glyph].k[k] = path.k[k];\n                    }\n                }\n            }\n        }\n        return font;\n    };\n    /*\\\n     * Paper.getFont\n     [ method ]\n     **\n     * Finds font object in the registered fonts by given parameters. You could specify only one word from the font name, like “Myriad” for “Myriad Pro”.\n     **\n     > Parameters\n     **\n     - family (string) font family name or any word from it\n     - weight (string) #optional font weight\n     - style (string) #optional font style\n     - stretch (string) #optional font stretch\n     = (object) the font object\n     > Usage\n     | paper.print(100, 100, "Test string", paper.getFont("Times", 800), 30);\n    \\*/\n    paperproto.getFont = function (family, weight, style, stretch) {\n        stretch = stretch || "normal";\n        style = style || "normal";\n        weight = +weight || {normal: 400, bold: 700, lighter: 300, bolder: 800}[weight] || 400;\n        if (!R.fonts) {\n            return;\n        }\n        var font = R.fonts[family];\n        if (!font) {\n            var name = new RegExp("(^|\\\\s)" + family.replace(/[^\\w\\d\\s+!~.:_-]/g, E) + "(\\\\s|$)", "i");\n            for (var fontName in R.fonts) if (R.fonts[has](fontName)) {\n                if (name.test(fontName)) {\n                    font = R.fonts[fontName];\n                    break;\n                }\n            }\n        }\n        var thefont;\n        if (font) {\n            for (var i = 0, ii = font.length; i < ii; i++) {\n                thefont = font[i];\n                if (thefont.face["font-weight"] == weight && (thefont.face["font-style"] == style || !thefont.face["font-style"]) && thefont.face["font-stretch"] == stretch) {\n                    break;\n                }\n            }\n        }\n        return thefont;\n    };\n    /*\\\n     * Paper.print\n     [ method ]\n     **\n     * Creates path that represent given text written using given font at given position with given size.\n     * Result of the method is path element that contains whole text as a separate path.\n     **\n     > Parameters\n     **\n     - x (number) x position of the text\n     - y (number) y position of the text\n     - string (string) text to print\n     - font (object) font object, see @Paper.getFont\n     - size (number) #optional size of the font, default is `16`\n     - origin (string) #optional could be `"baseline"` or `"middle"`, default is `"middle"`\n     - letter_spacing (number) #optional number in range `-1..1`, default is `0`\n     - line_spacing (number) #optional number in range `1..3`, default is `1`\n     = (object) resulting path element, which consist of all letters\n     > Usage\n     | var txt = r.print(10, 50, "print", r.getFont("Museo"), 30).attr({fill: "#fff"});\n    \\*/\n    paperproto.print = function (x, y, string, font, size, origin, letter_spacing, line_spacing) {\n        origin = origin || "middle"; // baseline|middle\n        letter_spacing = mmax(mmin(letter_spacing || 0, 1), -1);\n        line_spacing = mmax(mmin(line_spacing || 1, 3), 1);\n        var letters = Str(string)[split](E),\n            shift = 0,\n            notfirst = 0,\n            path = E,\n            scale;\n        R.is(font, "string") && (font = this.getFont(font));\n        if (font) {\n            scale = (size || 16) / font.face["units-per-em"];\n            var bb = font.face.bbox[split](separator),\n                top = +bb[0],\n                lineHeight = bb[3] - bb[1],\n                shifty = 0,\n                height = +bb[1] + (origin == "baseline" ? lineHeight + (+font.face.descent) : lineHeight / 2);\n            for (var i = 0, ii = letters.length; i < ii; i++) {\n                if (letters[i] == "\\n") {\n                    shift = 0;\n                    curr = 0;\n                    notfirst = 0;\n                    shifty += lineHeight * line_spacing;\n                } else {\n                    var prev = notfirst && font.glyphs[letters[i - 1]] || {},\n                        curr = font.glyphs[letters[i]];\n                    shift += notfirst ? (prev.w || font.w) + (prev.k && prev.k[letters[i]] || 0) + (font.w * letter_spacing) : 0;\n                    notfirst = 1;\n                }\n                if (curr && curr.d) {\n                    path += R.transformPath(curr.d, ["t", shift * scale, shifty * scale, "s", scale, scale, top, height, "t", (x - top) / scale, (y - height) / scale]);\n                }\n            }\n        }\n        return this.path(path).attr({\n            fill: "#000",\n            stroke: "none"\n        });\n    };\n\n    /*\\\n     * Paper.add\n     [ method ]\n     **\n     * Imports elements in JSON array in format `{type: type, <attributes>}`\n     **\n     > Parameters\n     **\n     - json (array)\n     = (object) resulting set of imported elements\n     > Usage\n     | paper.add([\n     |     {\n     |         type: "circle",\n     |         cx: 10,\n     |         cy: 10,\n     |         r: 5\n     |     },\n     |     {\n     |         type: "rect",\n     |         x: 10,\n     |         y: 10,\n     |         width: 10,\n     |         height: 10,\n     |         fill: "#fc0"\n     |     }\n     | ]);\n    \\*/\n    paperproto.add = function (json) {\n        if (R.is(json, "array")) {\n            var res = this.set(),\n                i = 0,\n                ii = json.length,\n                j;\n            for (; i < ii; i++) {\n                j = json[i] || {};\n                elements[has](j.type) && res.push(this[j.type]().attr(j));\n            }\n        }\n        return res;\n    };\n\n    /*\\\n     * Raphael.format\n     [ method ]\n     **\n     * Simple format function. Replaces construction of type “`{<number>}`” to the corresponding argument.\n     **\n     > Parameters\n     **\n     - token (string) string to format\n     - … (string) rest of arguments will be treated as parameters for replacement\n     = (string) formated string\n     > Usage\n     | var x = 10,\n     |     y = 20,\n     |     width = 40,\n     |     height = 50;\n     | // this will draw a rectangular shape equivalent to "M10,20h40v50h-40z"\n     | paper.path(Raphael.format("M{0},{1}h{2}v{3}h{4}z", x, y, width, height, -width));\n    \\*/\n    R.format = function (token, params) {\n        var args = R.is(params, array) ? [0][concat](params) : arguments;\n        token && R.is(token, string) && args.length - 1 && (token = token.replace(formatrg, function (str, i) {\n            return args[++i] == null ? E : args[i];\n        }));\n        return token || E;\n    };\n    /*\\\n     * Raphael.fullfill\n     [ method ]\n     **\n     * A little bit more advanced format function than @Raphael.format. Replaces construction of type “`{<name>}`” to the corresponding argument.\n     **\n     > Parameters\n     **\n     - token (string) string to format\n     - json (object) object which properties will be used as a replacement\n     = (string) formated string\n     > Usage\n     | // this will draw a rectangular shape equivalent to "M10,20h40v50h-40z"\n     | paper.path(Raphael.fullfill("M{x},{y}h{dim.width}v{dim.height}h{dim[\'negative width\']}z", {\n     |     x: 10,\n     |     y: 20,\n     |     dim: {\n     |         width: 40,\n     |         height: 50,\n     |         "negative width": -40\n     |     }\n     | }));\n    \\*/\n    R.fullfill = (function () {\n        var tokenRegex = /\\{([^\\}]+)\\}/g,\n            objNotationRegex = /(?:(?:^|\\.)(.+?)(?=\\[|\\.|$|\\()|\\[(\'|")(.+?)\\2\\])(\\(\\))?/g, // matches .xxxxx or ["xxxxx"] to run over object properties\n            replacer = function (all, key, obj) {\n                var res = obj;\n                key.replace(objNotationRegex, function (all, name, quote, quotedName, isFunc) {\n                    name = name || quotedName;\n                    if (res) {\n                        if (name in res) {\n                            res = res[name];\n                        }\n                        typeof res == "function" && isFunc && (res = res());\n                    }\n                });\n                res = (res == null || res == obj ? all : res) + "";\n                return res;\n            };\n        return function (str, obj) {\n            return String(str).replace(tokenRegex, function (all, key) {\n                return replacer(all, key, obj);\n            });\n        };\n    })();\n    /*\\\n     * Raphael.ninja\n     [ method ]\n     **\n     * If you want to leave no trace of Raphaël (Well, Raphaël creates only one global variable `Raphael`, but anyway.) You can use `ninja` method.\n     * Beware, that in this case plugins could stop working, because they are depending on global variable existence.\n     **\n     = (object) Raphael object\n     > Usage\n     | (function (local_raphael) {\n     |     var paper = local_raphael(10, 10, 320, 200);\n     |     …\n     | })(Raphael.ninja());\n    \\*/\n    R.ninja = function () {\n        if (oldRaphael.was) {\n            g.win.Raphael = oldRaphael.is;\n        } else {\n            // IE8 raises an error when deleting window property\n            window.Raphael = undefined;\n            try {\n                delete window.Raphael;\n            } catch(e) {}\n        }\n        return R;\n    };\n    /*\\\n     * Raphael.st\n     [ property (object) ]\n     **\n     * You can add your own method to elements and sets. It is wise to add a set method for each element method\n     * you added, so you will be able to call the same method on sets too.\n     **\n     * See also @Raphael.el.\n     > Usage\n     | Raphael.el.red = function () {\n     |     this.attr({fill: "#f00"});\n     | };\n     | Raphael.st.red = function () {\n     |     this.forEach(function (el) {\n     |         el.red();\n     |     });\n     | };\n     | // then use it\n     | paper.set(paper.circle(100, 100, 20), paper.circle(110, 100, 20)).red();\n    \\*/\n    R.st = setproto;\n\n    eve.on("raphael.DOMload", function () {\n        loaded = true;\n    });\n\n    // Firefox <3.6 fix: http://webreflection.blogspot.com/2009/11/195-chars-to-help-lazy-loading.html\n    (function (doc, loaded, f) {\n        if (doc.readyState == null && doc.addEventListener){\n            doc.addEventListener(loaded, f = function () {\n                doc.removeEventListener(loaded, f, false);\n                doc.readyState = "complete";\n            }, false);\n            doc.readyState = "loading";\n        }\n        function isLoaded() {\n            (/in/).test(doc.readyState) ? setTimeout(isLoaded, 9) : R.eve("raphael.DOMload");\n        }\n        isLoaded();\n    })(document, "DOMContentLoaded");\n\n    return R;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./dev/raphael.core.js\n')},"./dev/raphael.svg.js":
/*!****************************!*\
  !*** ./dev/raphael.svg.js ***!
  \****************************/
/*! no static exports found */function devRaphaelSvgJs(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./raphael.core */ "./dev/raphael.core.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function(R) {\n    if (R && !R.svg) {\n        return;\n    }\n\n    var has = "hasOwnProperty",\n        Str = String,\n        toFloat = parseFloat,\n        toInt = parseInt,\n        math = Math,\n        mmax = math.max,\n        abs = math.abs,\n        pow = math.pow,\n        separator = /[, ]+/,\n        eve = R.eve,\n        E = "",\n        S = " ";\n    var xlink = "http://www.w3.org/1999/xlink",\n        markers = {\n            block: "M5,0 0,2.5 5,5z",\n            classic: "M5,0 0,2.5 5,5 3.5,3 3.5,2z",\n            diamond: "M2.5,0 5,2.5 2.5,5 0,2.5z",\n            open: "M6,1 1,3.5 6,6",\n            oval: "M2.5,0A2.5,2.5,0,0,1,2.5,5 2.5,2.5,0,0,1,2.5,0z"\n        },\n        markerCounter = {};\n    R.toString = function () {\n        return  "Your browser supports SVG.\\nYou are running Rapha\\xebl " + this.version;\n    };\n    var $ = function (el, attr) {\n        if (attr) {\n            if (typeof el == "string") {\n                el = $(el);\n            }\n            for (var key in attr) if (attr[has](key)) {\n                if (key.substring(0, 6) == "xlink:") {\n                    el.setAttributeNS(xlink, key.substring(6), Str(attr[key]));\n                } else {\n                    el.setAttribute(key, Str(attr[key]));\n                }\n            }\n        } else {\n            el = R._g.doc.createElementNS("http://www.w3.org/2000/svg", el);\n            el.style && (el.style.webkitTapHighlightColor = "rgba(0,0,0,0)");\n        }\n        return el;\n    },\n    addGradientFill = function (element, gradient) {\n        var type = "linear",\n            id = element.id + gradient,\n            fx = .5, fy = .5,\n            o = element.node,\n            SVG = element.paper,\n            s = o.style,\n            el = R._g.doc.getElementById(id);\n        if (!el) {\n            gradient = Str(gradient).replace(R._radial_gradient, function (all, _fx, _fy) {\n                type = "radial";\n                if (_fx && _fy) {\n                    fx = toFloat(_fx);\n                    fy = toFloat(_fy);\n                    var dir = ((fy > .5) * 2 - 1);\n                    pow(fx - .5, 2) + pow(fy - .5, 2) > .25 &&\n                        (fy = math.sqrt(.25 - pow(fx - .5, 2)) * dir + .5) &&\n                        fy != .5 &&\n                        (fy = fy.toFixed(5) - 1e-5 * dir);\n                }\n                return E;\n            });\n            gradient = gradient.split(/\\s*\\-\\s*/);\n            if (type == "linear") {\n                var angle = gradient.shift();\n                angle = -toFloat(angle);\n                if (isNaN(angle)) {\n                    return null;\n                }\n                var vector = [0, 0, math.cos(R.rad(angle)), math.sin(R.rad(angle))],\n                    max = 1 / (mmax(abs(vector[2]), abs(vector[3])) || 1);\n                vector[2] *= max;\n                vector[3] *= max;\n                if (vector[2] < 0) {\n                    vector[0] = -vector[2];\n                    vector[2] = 0;\n                }\n                if (vector[3] < 0) {\n                    vector[1] = -vector[3];\n                    vector[3] = 0;\n                }\n            }\n            var dots = R._parseDots(gradient);\n            if (!dots) {\n                return null;\n            }\n            id = id.replace(/[\\(\\)\\s,\\xb0#]/g, "_");\n\n            if (element.gradient && id != element.gradient.id) {\n                SVG.defs.removeChild(element.gradient);\n                delete element.gradient;\n            }\n\n            if (!element.gradient) {\n                el = $(type + "Gradient", {id: id});\n                element.gradient = el;\n                $(el, type == "radial" ? {\n                    fx: fx,\n                    fy: fy\n                } : {\n                    x1: vector[0],\n                    y1: vector[1],\n                    x2: vector[2],\n                    y2: vector[3],\n                    gradientTransform: element.matrix.invert()\n                });\n                SVG.defs.appendChild(el);\n                for (var i = 0, ii = dots.length; i < ii; i++) {\n                    el.appendChild($("stop", {\n                        offset: dots[i].offset ? dots[i].offset : i ? "100%" : "0%",\n                        "stop-color": dots[i].color || "#fff",\n                        "stop-opacity": isFinite(dots[i].opacity) ? dots[i].opacity : 1\n                    }));\n                }\n            }\n        }\n        $(o, {\n            fill: fillurl(id),\n            opacity: 1,\n            "fill-opacity": 1\n        });\n        s.fill = E;\n        s.opacity = 1;\n        s.fillOpacity = 1;\n        return 1;\n    },\n    isIE9or10 = function () {\n      var mode = document.documentMode;\n      return mode && (mode === 9 || mode === 10);\n    },\n    fillurl = function (id) {\n      if (isIE9or10()) {\n          return "url(\'#" + id + "\')";\n      }\n      var location = document.location;\n      var locationString = (\n          location.protocol + \'//\' +\n          location.host +\n          location.pathname +\n          location.search\n      );\n      return "url(\'" + locationString + "#" + id + "\')";\n    },\n    updatePosition = function (o) {\n        var bbox = o.getBBox(1);\n        $(o.pattern, {patternTransform: o.matrix.invert() + " translate(" + bbox.x + "," + bbox.y + ")"});\n    },\n    addArrow = function (o, value, isEnd) {\n        if (o.type == "path") {\n            var values = Str(value).toLowerCase().split("-"),\n                p = o.paper,\n                se = isEnd ? "end" : "start",\n                node = o.node,\n                attrs = o.attrs,\n                stroke = attrs["stroke-width"],\n                i = values.length,\n                type = "classic",\n                from,\n                to,\n                dx,\n                refX,\n                attr,\n                w = 3,\n                h = 3,\n                t = 5;\n            while (i--) {\n                switch (values[i]) {\n                    case "block":\n                    case "classic":\n                    case "oval":\n                    case "diamond":\n                    case "open":\n                    case "none":\n                        type = values[i];\n                        break;\n                    case "wide": h = 5; break;\n                    case "narrow": h = 2; break;\n                    case "long": w = 5; break;\n                    case "short": w = 2; break;\n                }\n            }\n            if (type == "open") {\n                w += 2;\n                h += 2;\n                t += 2;\n                dx = 1;\n                refX = isEnd ? 4 : 1;\n                attr = {\n                    fill: "none",\n                    stroke: attrs.stroke\n                };\n            } else {\n                refX = dx = w / 2;\n                attr = {\n                    fill: attrs.stroke,\n                    stroke: "none"\n                };\n            }\n            if (o._.arrows) {\n                if (isEnd) {\n                    o._.arrows.endPath && markerCounter[o._.arrows.endPath]--;\n                    o._.arrows.endMarker && markerCounter[o._.arrows.endMarker]--;\n                } else {\n                    o._.arrows.startPath && markerCounter[o._.arrows.startPath]--;\n                    o._.arrows.startMarker && markerCounter[o._.arrows.startMarker]--;\n                }\n            } else {\n                o._.arrows = {};\n            }\n            if (type != "none") {\n                var pathId = "raphael-marker-" + type,\n                    markerId = "raphael-marker-" + se + type + w + h + "-obj" + o.id;\n                if (!R._g.doc.getElementById(pathId)) {\n                    p.defs.appendChild($($("path"), {\n                        "stroke-linecap": "round",\n                        d: markers[type],\n                        id: pathId\n                    }));\n                    markerCounter[pathId] = 1;\n                } else {\n                    markerCounter[pathId]++;\n                }\n                var marker = R._g.doc.getElementById(markerId),\n                    use;\n                if (!marker) {\n                    marker = $($("marker"), {\n                        id: markerId,\n                        markerHeight: h,\n                        markerWidth: w,\n                        orient: "auto",\n                        refX: refX,\n                        refY: h / 2\n                    });\n                    use = $($("use"), {\n                        "xlink:href": "#" + pathId,\n                        transform: (isEnd ? "rotate(180 " + w / 2 + " " + h / 2 + ") " : E) + "scale(" + w / t + "," + h / t + ")",\n                        "stroke-width": (1 / ((w / t + h / t) / 2)).toFixed(4)\n                    });\n                    marker.appendChild(use);\n                    p.defs.appendChild(marker);\n                    markerCounter[markerId] = 1;\n                } else {\n                    markerCounter[markerId]++;\n                    use = marker.getElementsByTagName("use")[0];\n                }\n                $(use, attr);\n                var delta = dx * (type != "diamond" && type != "oval");\n                if (isEnd) {\n                    from = o._.arrows.startdx * stroke || 0;\n                    to = R.getTotalLength(attrs.path) - delta * stroke;\n                } else {\n                    from = delta * stroke;\n                    to = R.getTotalLength(attrs.path) - (o._.arrows.enddx * stroke || 0);\n                }\n                attr = {};\n                attr["marker-" + se] = "url(#" + markerId + ")";\n                if (to || from) {\n                    attr.d = R.getSubpath(attrs.path, from, to);\n                }\n                $(node, attr);\n                o._.arrows[se + "Path"] = pathId;\n                o._.arrows[se + "Marker"] = markerId;\n                o._.arrows[se + "dx"] = delta;\n                o._.arrows[se + "Type"] = type;\n                o._.arrows[se + "String"] = value;\n            } else {\n                if (isEnd) {\n                    from = o._.arrows.startdx * stroke || 0;\n                    to = R.getTotalLength(attrs.path) - from;\n                } else {\n                    from = 0;\n                    to = R.getTotalLength(attrs.path) - (o._.arrows.enddx * stroke || 0);\n                }\n                o._.arrows[se + "Path"] && $(node, {d: R.getSubpath(attrs.path, from, to)});\n                delete o._.arrows[se + "Path"];\n                delete o._.arrows[se + "Marker"];\n                delete o._.arrows[se + "dx"];\n                delete o._.arrows[se + "Type"];\n                delete o._.arrows[se + "String"];\n            }\n            for (attr in markerCounter) if (markerCounter[has](attr) && !markerCounter[attr]) {\n                var item = R._g.doc.getElementById(attr);\n                item && item.parentNode.removeChild(item);\n            }\n        }\n    },\n    dasharray = {\n        "-": [3, 1],\n        ".": [1, 1],\n        "-.": [3, 1, 1, 1],\n        "-..": [3, 1, 1, 1, 1, 1],\n        ". ": [1, 3],\n        "- ": [4, 3],\n        "--": [8, 3],\n        "- .": [4, 3, 1, 3],\n        "--.": [8, 3, 1, 3],\n        "--..": [8, 3, 1, 3, 1, 3]\n    },\n    addDashes = function (o, value, params) {\n        value = dasharray[Str(value).toLowerCase()];\n        if (value) {\n            var width = o.attrs["stroke-width"] || "1",\n                butt = {round: width, square: width, butt: 0}[o.attrs["stroke-linecap"] || params["stroke-linecap"]] || 0,\n                dashes = [],\n                i = value.length;\n            while (i--) {\n                dashes[i] = value[i] * width + ((i % 2) ? 1 : -1) * butt;\n            }\n            $(o.node, {"stroke-dasharray": dashes.join(",")});\n        }\n        else {\n          $(o.node, {"stroke-dasharray": "none"});\n        }\n    },\n    setFillAndStroke = function (o, params) {\n        var node = o.node,\n            attrs = o.attrs,\n            vis = node.style.visibility;\n        node.style.visibility = "hidden";\n        for (var att in params) {\n            if (params[has](att)) {\n                if (!R._availableAttrs[has](att)) {\n                    continue;\n                }\n                var value = params[att];\n                attrs[att] = value;\n                switch (att) {\n                    case "blur":\n                        o.blur(value);\n                        break;\n                    case "title":\n                        var title = node.getElementsByTagName("title");\n\n                        // Use the existing <title>.\n                        if (title.length && (title = title[0])) {\n                          title.firstChild.nodeValue = value;\n                        } else {\n                          title = $("title");\n                          var val = R._g.doc.createTextNode(value);\n                          title.appendChild(val);\n                          node.appendChild(title);\n                        }\n                        break;\n                    case "href":\n                    case "target":\n                        var pn = node.parentNode;\n                        if (pn.tagName.toLowerCase() != "a") {\n                            var hl = $("a");\n                            pn.insertBefore(hl, node);\n                            hl.appendChild(node);\n                            pn = hl;\n                        }\n                        if (att == "target") {\n                            pn.setAttributeNS(xlink, "show", value == "blank" ? "new" : value);\n                        } else {\n                            pn.setAttributeNS(xlink, att, value);\n                        }\n                        break;\n                    case "cursor":\n                        node.style.cursor = value;\n                        break;\n                    case "transform":\n                        o.transform(value);\n                        break;\n                    case "arrow-start":\n                        addArrow(o, value);\n                        break;\n                    case "arrow-end":\n                        addArrow(o, value, 1);\n                        break;\n                    case "clip-rect":\n                        var rect = Str(value).split(separator);\n                        if (rect.length == 4) {\n                            o.clip && o.clip.parentNode.parentNode.removeChild(o.clip.parentNode);\n                            var el = $("clipPath"),\n                                rc = $("rect");\n                            el.id = R.createUUID();\n                            $(rc, {\n                                x: rect[0],\n                                y: rect[1],\n                                width: rect[2],\n                                height: rect[3]\n                            });\n                            el.appendChild(rc);\n                            o.paper.defs.appendChild(el);\n                            $(node, {"clip-path": "url(#" + el.id + ")"});\n                            o.clip = rc;\n                        }\n                        if (!value) {\n                            var path = node.getAttribute("clip-path");\n                            if (path) {\n                                var clip = R._g.doc.getElementById(path.replace(/(^url\\(#|\\)$)/g, E));\n                                clip && clip.parentNode.removeChild(clip);\n                                $(node, {"clip-path": E});\n                                delete o.clip;\n                            }\n                        }\n                    break;\n                    case "path":\n                        if (o.type == "path") {\n                            $(node, {d: value ? attrs.path = R._pathToAbsolute(value) : "M0,0"});\n                            o._.dirty = 1;\n                            if (o._.arrows) {\n                                "startString" in o._.arrows && addArrow(o, o._.arrows.startString);\n                                "endString" in o._.arrows && addArrow(o, o._.arrows.endString, 1);\n                            }\n                        }\n                        break;\n                    case "width":\n                        node.setAttribute(att, value);\n                        o._.dirty = 1;\n                        if (attrs.fx) {\n                            att = "x";\n                            value = attrs.x;\n                        } else {\n                            break;\n                        }\n                    case "x":\n                        if (attrs.fx) {\n                            value = -attrs.x - (attrs.width || 0);\n                        }\n                    case "rx":\n                        if (att == "rx" && o.type == "rect") {\n                            break;\n                        }\n                    case "cx":\n                        node.setAttribute(att, value);\n                        o.pattern && updatePosition(o);\n                        o._.dirty = 1;\n                        break;\n                    case "height":\n                        node.setAttribute(att, value);\n                        o._.dirty = 1;\n                        if (attrs.fy) {\n                            att = "y";\n                            value = attrs.y;\n                        } else {\n                            break;\n                        }\n                    case "y":\n                        if (attrs.fy) {\n                            value = -attrs.y - (attrs.height || 0);\n                        }\n                    case "ry":\n                        if (att == "ry" && o.type == "rect") {\n                            break;\n                        }\n                    case "cy":\n                        node.setAttribute(att, value);\n                        o.pattern && updatePosition(o);\n                        o._.dirty = 1;\n                        break;\n                    case "r":\n                        if (o.type == "rect") {\n                            $(node, {rx: value, ry: value});\n                        } else {\n                            node.setAttribute(att, value);\n                        }\n                        o._.dirty = 1;\n                        break;\n                    case "src":\n                        if (o.type == "image") {\n                            node.setAttributeNS(xlink, "href", value);\n                        }\n                        break;\n                    case "stroke-width":\n                        if (o._.sx != 1 || o._.sy != 1) {\n                            value /= mmax(abs(o._.sx), abs(o._.sy)) || 1;\n                        }\n                        node.setAttribute(att, value);\n                        if (attrs["stroke-dasharray"]) {\n                            addDashes(o, attrs["stroke-dasharray"], params);\n                        }\n                        if (o._.arrows) {\n                            "startString" in o._.arrows && addArrow(o, o._.arrows.startString);\n                            "endString" in o._.arrows && addArrow(o, o._.arrows.endString, 1);\n                        }\n                        break;\n                    case "stroke-dasharray":\n                        addDashes(o, value, params);\n                        break;\n                    case "fill":\n                        var isURL = Str(value).match(R._ISURL);\n                        if (isURL) {\n                            el = $("pattern");\n                            var ig = $("image");\n                            el.id = R.createUUID();\n                            $(el, {x: 0, y: 0, patternUnits: "userSpaceOnUse", height: 1, width: 1});\n                            $(ig, {x: 0, y: 0, "xlink:href": isURL[1]});\n                            el.appendChild(ig);\n\n                            (function (el) {\n                                R._preload(isURL[1], function () {\n                                    var w = this.offsetWidth,\n                                        h = this.offsetHeight;\n                                    $(el, {width: w, height: h});\n                                    $(ig, {width: w, height: h});\n                                });\n                            })(el);\n                            o.paper.defs.appendChild(el);\n                            $(node, {fill: "url(#" + el.id + ")"});\n                            o.pattern = el;\n                            o.pattern && updatePosition(o);\n                            break;\n                        }\n                        var clr = R.getRGB(value);\n                        if (!clr.error) {\n                            delete params.gradient;\n                            delete attrs.gradient;\n                            !R.is(attrs.opacity, "undefined") &&\n                                R.is(params.opacity, "undefined") &&\n                                $(node, {opacity: attrs.opacity});\n                            !R.is(attrs["fill-opacity"], "undefined") &&\n                                R.is(params["fill-opacity"], "undefined") &&\n                                $(node, {"fill-opacity": attrs["fill-opacity"]});\n                        } else if ((o.type == "circle" || o.type == "ellipse" || Str(value).charAt() != "r") && addGradientFill(o, value)) {\n                            if ("opacity" in attrs || "fill-opacity" in attrs) {\n                                var gradient = R._g.doc.getElementById(node.getAttribute("fill").replace(/^url\\(#|\\)$/g, E));\n                                if (gradient) {\n                                    var stops = gradient.getElementsByTagName("stop");\n                                    $(stops[stops.length - 1], {"stop-opacity": ("opacity" in attrs ? attrs.opacity : 1) * ("fill-opacity" in attrs ? attrs["fill-opacity"] : 1)});\n                                }\n                            }\n                            attrs.gradient = value;\n                            attrs.fill = "none";\n                            break;\n                        }\n                        clr[has]("opacity") && $(node, {"fill-opacity": clr.opacity > 1 ? clr.opacity / 100 : clr.opacity});\n                    case "stroke":\n                        clr = R.getRGB(value);\n                        node.setAttribute(att, clr.hex);\n                        att == "stroke" && clr[has]("opacity") && $(node, {"stroke-opacity": clr.opacity > 1 ? clr.opacity / 100 : clr.opacity});\n                        if (att == "stroke" && o._.arrows) {\n                            "startString" in o._.arrows && addArrow(o, o._.arrows.startString);\n                            "endString" in o._.arrows && addArrow(o, o._.arrows.endString, 1);\n                        }\n                        break;\n                    case "gradient":\n                        (o.type == "circle" || o.type == "ellipse" || Str(value).charAt() != "r") && addGradientFill(o, value);\n                        break;\n                    case "opacity":\n                        if (attrs.gradient && !attrs[has]("stroke-opacity")) {\n                            $(node, {"stroke-opacity": value > 1 ? value / 100 : value});\n                        }\n                        // fall\n                    case "fill-opacity":\n                        if (attrs.gradient) {\n                            gradient = R._g.doc.getElementById(node.getAttribute("fill").replace(/^url\\(#|\\)$/g, E));\n                            if (gradient) {\n                                stops = gradient.getElementsByTagName("stop");\n                                $(stops[stops.length - 1], {"stop-opacity": value});\n                            }\n                            break;\n                        }\n                    default:\n                        att == "font-size" && (value = toInt(value, 10) + "px");\n                        var cssrule = att.replace(/(\\-.)/g, function (w) {\n                            return w.substring(1).toUpperCase();\n                        });\n                        node.style[cssrule] = value;\n                        o._.dirty = 1;\n                        node.setAttribute(att, value);\n                        break;\n                }\n            }\n        }\n\n        tuneText(o, params);\n        node.style.visibility = vis;\n    },\n    leading = 1.2,\n    tuneText = function (el, params) {\n        if (el.type != "text" || !(params[has]("text") || params[has]("font") || params[has]("font-size") || params[has]("x") || params[has]("y"))) {\n            return;\n        }\n        var a = el.attrs,\n            node = el.node,\n            fontSize = node.firstChild ? toInt(R._g.doc.defaultView.getComputedStyle(node.firstChild, E).getPropertyValue("font-size"), 10) : 10;\n\n        if (params[has]("text")) {\n            a.text = params.text;\n            while (node.firstChild) {\n                node.removeChild(node.firstChild);\n            }\n            var texts = Str(params.text).split("\\n"),\n                tspans = [],\n                tspan;\n            for (var i = 0, ii = texts.length; i < ii; i++) {\n                tspan = $("tspan");\n                i && $(tspan, {dy: fontSize * leading, x: a.x});\n                tspan.appendChild(R._g.doc.createTextNode(texts[i]));\n                node.appendChild(tspan);\n                tspans[i] = tspan;\n            }\n        } else {\n            tspans = node.getElementsByTagName("tspan");\n            for (i = 0, ii = tspans.length; i < ii; i++) if (i) {\n                $(tspans[i], {dy: fontSize * leading, x: a.x});\n            } else {\n                $(tspans[0], {dy: 0});\n            }\n        }\n        $(node, {x: a.x, y: a.y});\n        el._.dirty = 1;\n        var bb = el._getBBox(),\n            dif = a.y - (bb.y + bb.height / 2);\n        dif && R.is(dif, "finite") && $(tspans[0], {dy: dif});\n    },\n    getRealNode = function (node) {\n        if (node.parentNode && node.parentNode.tagName.toLowerCase() === "a") {\n            return node.parentNode;\n        } else {\n            return node;\n        }\n    },\n    Element = function (node, svg) {\n        var X = 0,\n            Y = 0;\n        /*\\\n         * Element.node\n         [ property (object) ]\n         **\n         * Gives you a reference to the DOM object, so you can assign event handlers or just mess around.\n         **\n         * Note: Don’t mess with it.\n         > Usage\n         | // draw a circle at coordinate 10,10 with radius of 10\n         | var c = paper.circle(10, 10, 10);\n         | c.node.onclick = function () {\n         |     c.attr("fill", "red");\n         | };\n        \\*/\n        this[0] = this.node = node;\n        /*\\\n         * Element.raphael\n         [ property (object) ]\n         **\n         * Internal reference to @Raphael object. In case it is not available.\n         > Usage\n         | Raphael.el.red = function () {\n         |     var hsb = this.paper.raphael.rgb2hsb(this.attr("fill"));\n         |     hsb.h = 1;\n         |     this.attr({fill: this.paper.raphael.hsb2rgb(hsb).hex});\n         | }\n        \\*/\n        node.raphael = true;\n        /*\\\n         * Element.id\n         [ property (number) ]\n         **\n         * Unique id of the element. Especially useful when you want to listen to events of the element,\n         * because all events are fired in format `<module>.<action>.<id>`. Also useful for @Paper.getById method.\n        \\*/\n        this.id = guid();\n        node.raphaelid = this.id;\n\n        /**\n        * Method that returns a 5 letter/digit id, enough for 36^5 = 60466176 elements\n        * @returns {string} id\n        */\n        function guid() {\n            return ("0000" + (Math.random()*Math.pow(36,5) << 0).toString(36)).slice(-5);\n        }\n\n        this.matrix = R.matrix();\n        this.realPath = null;\n        /*\\\n         * Element.paper\n         [ property (object) ]\n         **\n         * Internal reference to “paper” where object drawn. Mainly for use in plugins and element extensions.\n         > Usage\n         | Raphael.el.cross = function () {\n         |     this.attr({fill: "red"});\n         |     this.paper.path("M10,10L50,50M50,10L10,50")\n         |         .attr({stroke: "red"});\n         | }\n        \\*/\n        this.paper = svg;\n        this.attrs = this.attrs || {};\n        this._ = {\n            transform: [],\n            sx: 1,\n            sy: 1,\n            deg: 0,\n            dx: 0,\n            dy: 0,\n            dirty: 1\n        };\n        !svg.bottom && (svg.bottom = this);\n        /*\\\n         * Element.prev\n         [ property (object) ]\n         **\n         * Reference to the previous element in the hierarchy.\n        \\*/\n        this.prev = svg.top;\n        svg.top && (svg.top.next = this);\n        svg.top = this;\n        /*\\\n         * Element.next\n         [ property (object) ]\n         **\n         * Reference to the next element in the hierarchy.\n        \\*/\n        this.next = null;\n    },\n    elproto = R.el;\n\n    Element.prototype = elproto;\n    elproto.constructor = Element;\n\n    R._engine.path = function (pathString, SVG) {\n        var el = $("path");\n        SVG.canvas && SVG.canvas.appendChild(el);\n        var p = new Element(el, SVG);\n        p.type = "path";\n        setFillAndStroke(p, {\n            fill: "none",\n            stroke: "#000",\n            path: pathString\n        });\n        return p;\n    };\n    /*\\\n     * Element.rotate\n     [ method ]\n     **\n     * Deprecated! Use @Element.transform instead.\n     * Adds rotation by given angle around given point to the list of\n     * transformations of the element.\n     > Parameters\n     - deg (number) angle in degrees\n     - cx (number) #optional x coordinate of the centre of rotation\n     - cy (number) #optional y coordinate of the centre of rotation\n     * If cx & cy aren’t specified centre of the shape is used as a point of rotation.\n     = (object) @Element\n    \\*/\n    elproto.rotate = function (deg, cx, cy) {\n        if (this.removed) {\n            return this;\n        }\n        deg = Str(deg).split(separator);\n        if (deg.length - 1) {\n            cx = toFloat(deg[1]);\n            cy = toFloat(deg[2]);\n        }\n        deg = toFloat(deg[0]);\n        (cy == null) && (cx = cy);\n        if (cx == null || cy == null) {\n            var bbox = this.getBBox(1);\n            cx = bbox.x + bbox.width / 2;\n            cy = bbox.y + bbox.height / 2;\n        }\n        this.transform(this._.transform.concat([["r", deg, cx, cy]]));\n        return this;\n    };\n    /*\\\n     * Element.scale\n     [ method ]\n     **\n     * Deprecated! Use @Element.transform instead.\n     * Adds scale by given amount relative to given point to the list of\n     * transformations of the element.\n     > Parameters\n     - sx (number) horisontal scale amount\n     - sy (number) vertical scale amount\n     - cx (number) #optional x coordinate of the centre of scale\n     - cy (number) #optional y coordinate of the centre of scale\n     * If cx & cy aren’t specified centre of the shape is used instead.\n     = (object) @Element\n    \\*/\n    elproto.scale = function (sx, sy, cx, cy) {\n        if (this.removed) {\n            return this;\n        }\n        sx = Str(sx).split(separator);\n        if (sx.length - 1) {\n            sy = toFloat(sx[1]);\n            cx = toFloat(sx[2]);\n            cy = toFloat(sx[3]);\n        }\n        sx = toFloat(sx[0]);\n        (sy == null) && (sy = sx);\n        (cy == null) && (cx = cy);\n        if (cx == null || cy == null) {\n            var bbox = this.getBBox(1);\n        }\n        cx = cx == null ? bbox.x + bbox.width / 2 : cx;\n        cy = cy == null ? bbox.y + bbox.height / 2 : cy;\n        this.transform(this._.transform.concat([["s", sx, sy, cx, cy]]));\n        return this;\n    };\n    /*\\\n     * Element.translate\n     [ method ]\n     **\n     * Deprecated! Use @Element.transform instead.\n     * Adds translation by given amount to the list of transformations of the element.\n     > Parameters\n     - dx (number) horisontal shift\n     - dy (number) vertical shift\n     = (object) @Element\n    \\*/\n    elproto.translate = function (dx, dy) {\n        if (this.removed) {\n            return this;\n        }\n        dx = Str(dx).split(separator);\n        if (dx.length - 1) {\n            dy = toFloat(dx[1]);\n        }\n        dx = toFloat(dx[0]) || 0;\n        dy = +dy || 0;\n        this.transform(this._.transform.concat([["t", dx, dy]]));\n        return this;\n    };\n    /*\\\n     * Element.transform\n     [ method ]\n     **\n     * Adds transformation to the element which is separate to other attributes,\n     * i.e. translation doesn’t change `x` or `y` of the rectange. The format\n     * of transformation string is similar to the path string syntax:\n     | "t100,100r30,100,100s2,2,100,100r45s1.5"\n     * Each letter is a command. There are four commands: `t` is for translate, `r` is for rotate, `s` is for\n     * scale and `m` is for matrix.\n     *\n     * There are also alternative “absolute” translation, rotation and scale: `T`, `R` and `S`. They will not take previous transformation into account. For example, `...T100,0` will always move element 100 px horisontally, while `...t100,0` could move it vertically if there is `r90` before. Just compare results of `r90t100,0` and `r90T100,0`.\n     *\n     * So, the example line above could be read like “translate by 100, 100; rotate 30° around 100, 100; scale twice around 100, 100;\n     * rotate 45° around centre; scale 1.5 times relative to centre”. As you can see rotate and scale commands have origin\n     * coordinates as optional parameters, the default is the centre point of the element.\n     * Matrix accepts six parameters.\n     > Usage\n     | var el = paper.rect(10, 20, 300, 200);\n     | // translate 100, 100, rotate 45°, translate -100, 0\n     | el.transform("t100,100r45t-100,0");\n     | // if you want you can append or prepend transformations\n     | el.transform("...t50,50");\n     | el.transform("s2...");\n     | // or even wrap\n     | el.transform("t50,50...t-50-50");\n     | // to reset transformation call method with empty string\n     | el.transform("");\n     | // to get current value call it without parameters\n     | console.log(el.transform());\n     > Parameters\n     - tstr (string) #optional transformation string\n     * If tstr isn’t specified\n     = (string) current transformation string\n     * else\n     = (object) @Element\n    \\*/\n    elproto.transform = function (tstr) {\n        var _ = this._;\n        if (tstr == null) {\n            return _.transform;\n        }\n        R._extractTransform(this, tstr);\n\n        this.clip && $(this.clip, {transform: this.matrix.invert()});\n        this.pattern && updatePosition(this);\n        this.node && $(this.node, {transform: this.matrix});\n\n        if (_.sx != 1 || _.sy != 1) {\n            var sw = this.attrs[has]("stroke-width") ? this.attrs["stroke-width"] : 1;\n            this.attr({"stroke-width": sw});\n        }\n\n        return this;\n    };\n    /*\\\n     * Element.hide\n     [ method ]\n     **\n     * Makes element invisible. See @Element.show.\n     = (object) @Element\n    \\*/\n    elproto.hide = function () {\n        if(!this.removed) this.node.style.display = "none";\n        return this;\n    };\n    /*\\\n     * Element.show\n     [ method ]\n     **\n     * Makes element visible. See @Element.hide.\n     = (object) @Element\n    \\*/\n    elproto.show = function () {\n        if(!this.removed) this.node.style.display = "";\n        return this;\n    };\n    /*\\\n     * Element.remove\n     [ method ]\n     **\n     * Removes element from the paper.\n    \\*/\n    elproto.remove = function () {\n        var node = getRealNode(this.node);\n        if (this.removed || !node.parentNode) {\n            return;\n        }\n        var paper = this.paper;\n        paper.__set__ && paper.__set__.exclude(this);\n        eve.unbind("raphael.*.*." + this.id);\n        if (this.gradient) {\n            paper.defs.removeChild(this.gradient);\n        }\n        R._tear(this, paper);\n\n        node.parentNode.removeChild(node);\n\n        // Remove custom data for element\n        this.removeData();\n\n        for (var i in this) {\n            this[i] = typeof this[i] == "function" ? R._removedFactory(i) : null;\n        }\n        this.removed = true;\n    };\n    elproto._getBBox = function () {\n        if (this.node.style.display == "none") {\n            this.show();\n            var hide = true;\n        }\n        var canvasHidden = false,\n            containerStyle;\n        if (this.paper.canvas.parentElement) {\n          containerStyle = this.paper.canvas.parentElement.style;\n        } //IE10+ can\'t find parentElement\n        else if (this.paper.canvas.parentNode) {\n          containerStyle = this.paper.canvas.parentNode.style;\n        }\n\n        if(containerStyle && containerStyle.display == "none") {\n          canvasHidden = true;\n          containerStyle.display = "";\n        }\n        var bbox = {};\n        try {\n            bbox = this.node.getBBox();\n        } catch(e) {\n            // Firefox 3.0.x, 25.0.1 (probably more versions affected) play badly here - possible fix\n            bbox = {\n                x: this.node.clientLeft,\n                y: this.node.clientTop,\n                width: this.node.clientWidth,\n                height: this.node.clientHeight\n            }\n        } finally {\n            bbox = bbox || {};\n            if(canvasHidden){\n              containerStyle.display = "none";\n            }\n        }\n        hide && this.hide();\n        return bbox;\n    };\n    /*\\\n     * Element.attr\n     [ method ]\n     **\n     * Sets the attributes of the element.\n     > Parameters\n     - attrName (string) attribute’s name\n     - value (string) value\n     * or\n     - params (object) object of name/value pairs\n     * or\n     - attrName (string) attribute’s name\n     * or\n     - attrNames (array) in this case method returns array of current values for given attribute names\n     = (object) @Element if attrsName & value or params are passed in.\n     = (...) value of the attribute if only attrsName is passed in.\n     = (array) array of values of the attribute if attrsNames is passed in.\n     = (object) object of attributes if nothing is passed in.\n     > Possible parameters\n     # <p>Please refer to the <a href="http://www.w3.org/TR/SVG/" title="The W3C Recommendation for the SVG language describes these properties in detail.">SVG specification</a> for an explanation of these parameters.</p>\n     o arrow-end (string) arrowhead on the end of the path. The format for string is `<type>[-<width>[-<length>]]`. Possible types: `classic`, `block`, `open`, `oval`, `diamond`, `none`, width: `wide`, `narrow`, `medium`, length: `long`, `short`, `midium`.\n     o clip-rect (string) comma or space separated values: x, y, width and height\n     o cursor (string) CSS type of the cursor\n     o cx (number) the x-axis coordinate of the center of the circle, or ellipse\n     o cy (number) the y-axis coordinate of the center of the circle, or ellipse\n     o fill (string) colour, gradient or image\n     o fill-opacity (number)\n     o font (string)\n     o font-family (string)\n     o font-size (number) font size in pixels\n     o font-weight (string)\n     o height (number)\n     o href (string) URL, if specified element behaves as hyperlink\n     o opacity (number)\n     o path (string) SVG path string format\n     o r (number) radius of the circle, ellipse or rounded corner on the rect\n     o rx (number) horisontal radius of the ellipse\n     o ry (number) vertical radius of the ellipse\n     o src (string) image URL, only works for @Element.image element\n     o stroke (string) stroke colour\n     o stroke-dasharray (string) [“”, “none”, “`-`”, “`.`”, “`-.`”, “`-..`”, “`. `”, “`- `”, “`--`”, “`- .`”, “`--.`”, “`--..`”]\n     o stroke-linecap (string) [“`butt`”, “`square`”, “`round`”]\n     o stroke-linejoin (string) [“`bevel`”, “`round`”, “`miter`”]\n     o stroke-miterlimit (number)\n     o stroke-opacity (number)\n     o stroke-width (number) stroke width in pixels, default is \'1\'\n     o target (string) used with href\n     o text (string) contents of the text element. Use `\\n` for multiline text\n     o text-anchor (string) [“`start`”, “`middle`”, “`end`”], default is “`middle`”\n     o title (string) will create tooltip with a given text\n     o transform (string) see @Element.transform\n     o width (number)\n     o x (number)\n     o y (number)\n     > Gradients\n     * Linear gradient format: “`‹angle›-‹colour›[-‹colour›[:‹offset›]]*-‹colour›`”, example: “`90-#fff-#000`” – 90°\n     * gradient from white to black or “`0-#fff-#f00:20-#000`” – 0° gradient from white via red (at 20%) to black.\n     *\n     * radial gradient: “`r[(‹fx›, ‹fy›)]‹colour›[-‹colour›[:‹offset›]]*-‹colour›`”, example: “`r#fff-#000`” –\n     * gradient from white to black or “`r(0.25, 0.75)#fff-#000`” – gradient from white to black with focus point\n     * at 0.25, 0.75. Focus point coordinates are in 0..1 range. Radial gradients can only be applied to circles and ellipses.\n     > Path String\n     # <p>Please refer to <a href="http://www.w3.org/TR/SVG/paths.html#PathData" title="Details of a path’s data attribute’s format are described in the SVG specification.">SVG documentation regarding path string</a>. Raphaël fully supports it.</p>\n     > Colour Parsing\n     # <ul>\n     #     <li>Colour name (“<code>red</code>”, “<code>green</code>”, “<code>cornflowerblue</code>”, etc)</li>\n     #     <li>#••• — shortened HTML colour: (“<code>#000</code>”, “<code>#fc0</code>”, etc)</li>\n     #     <li>#•••••• — full length HTML colour: (“<code>#000000</code>”, “<code>#bd2300</code>”)</li>\n     #     <li>rgb(•••, •••, •••) — red, green and blue channels’ values: (“<code>rgb(200,&nbsp;100,&nbsp;0)</code>”)</li>\n     #     <li>rgb(•••%, •••%, •••%) — same as above, but in %: (“<code>rgb(100%,&nbsp;175%,&nbsp;0%)</code>”)</li>\n     #     <li>rgba(•••, •••, •••, •••) — red, green and blue channels’ values: (“<code>rgba(200,&nbsp;100,&nbsp;0, .5)</code>”)</li>\n     #     <li>rgba(•••%, •••%, •••%, •••%) — same as above, but in %: (“<code>rgba(100%,&nbsp;175%,&nbsp;0%, 50%)</code>”)</li>\n     #     <li>hsb(•••, •••, •••) — hue, saturation and brightness values: (“<code>hsb(0.5,&nbsp;0.25,&nbsp;1)</code>”)</li>\n     #     <li>hsb(•••%, •••%, •••%) — same as above, but in %</li>\n     #     <li>hsba(•••, •••, •••, •••) — same as above, but with opacity</li>\n     #     <li>hsl(•••, •••, •••) — almost the same as hsb, see <a href="http://en.wikipedia.org/wiki/HSL_and_HSV" title="HSL and HSV - Wikipedia, the free encyclopedia">Wikipedia page</a></li>\n     #     <li>hsl(•••%, •••%, •••%) — same as above, but in %</li>\n     #     <li>hsla(•••, •••, •••, •••) — same as above, but with opacity</li>\n     #     <li>Optionally for hsb and hsl you could specify hue as a degree: “<code>hsl(240deg,&nbsp;1,&nbsp;.5)</code>” or, if you want to go fancy, “<code>hsl(240°,&nbsp;1,&nbsp;.5)</code>”</li>\n     # </ul>\n    \\*/\n    elproto.attr = function (name, value) {\n        if (this.removed) {\n            return this;\n        }\n        if (name == null) {\n            var res = {};\n            for (var a in this.attrs) if (this.attrs[has](a)) {\n                res[a] = this.attrs[a];\n            }\n            res.gradient && res.fill == "none" && (res.fill = res.gradient) && delete res.gradient;\n            res.transform = this._.transform;\n            return res;\n        }\n        if (value == null && R.is(name, "string")) {\n            if (name == "fill" && this.attrs.fill == "none" && this.attrs.gradient) {\n                return this.attrs.gradient;\n            }\n            if (name == "transform") {\n                return this._.transform;\n            }\n            var names = name.split(separator),\n                out = {};\n            for (var i = 0, ii = names.length; i < ii; i++) {\n                name = names[i];\n                if (name in this.attrs) {\n                    out[name] = this.attrs[name];\n                } else if (R.is(this.paper.customAttributes[name], "function")) {\n                    out[name] = this.paper.customAttributes[name].def;\n                } else {\n                    out[name] = R._availableAttrs[name];\n                }\n            }\n            return ii - 1 ? out : out[names[0]];\n        }\n        if (value == null && R.is(name, "array")) {\n            out = {};\n            for (i = 0, ii = name.length; i < ii; i++) {\n                out[name[i]] = this.attr(name[i]);\n            }\n            return out;\n        }\n        if (value != null) {\n            var params = {};\n            params[name] = value;\n        } else if (name != null && R.is(name, "object")) {\n            params = name;\n        }\n        for (var key in params) {\n            eve("raphael.attr." + key + "." + this.id, this, params[key]);\n        }\n        for (key in this.paper.customAttributes) if (this.paper.customAttributes[has](key) && params[has](key) && R.is(this.paper.customAttributes[key], "function")) {\n            var par = this.paper.customAttributes[key].apply(this, [].concat(params[key]));\n            this.attrs[key] = params[key];\n            for (var subkey in par) if (par[has](subkey)) {\n                params[subkey] = par[subkey];\n            }\n        }\n        setFillAndStroke(this, params);\n        return this;\n    };\n    /*\\\n     * Element.toFront\n     [ method ]\n     **\n     * Moves the element so it is the closest to the viewer’s eyes, on top of other elements.\n     = (object) @Element\n    \\*/\n    elproto.toFront = function () {\n        if (this.removed) {\n            return this;\n        }\n        var node = getRealNode(this.node);\n        node.parentNode.appendChild(node);\n        var svg = this.paper;\n        svg.top != this && R._tofront(this, svg);\n        return this;\n    };\n    /*\\\n     * Element.toBack\n     [ method ]\n     **\n     * Moves the element so it is the furthest from the viewer’s eyes, behind other elements.\n     = (object) @Element\n    \\*/\n    elproto.toBack = function () {\n        if (this.removed) {\n            return this;\n        }\n        var node = getRealNode(this.node);\n        var parentNode = node.parentNode;\n        parentNode.insertBefore(node, parentNode.firstChild);\n        R._toback(this, this.paper);\n        var svg = this.paper;\n        return this;\n    };\n    /*\\\n     * Element.insertAfter\n     [ method ]\n     **\n     * Inserts current object after the given one.\n     = (object) @Element\n    \\*/\n    elproto.insertAfter = function (element) {\n        if (this.removed || !element) {\n            return this;\n        }\n\n        var node = getRealNode(this.node);\n        var afterNode = getRealNode(element.node || element[element.length - 1].node);\n        if (afterNode.nextSibling) {\n            afterNode.parentNode.insertBefore(node, afterNode.nextSibling);\n        } else {\n            afterNode.parentNode.appendChild(node);\n        }\n        R._insertafter(this, element, this.paper);\n        return this;\n    };\n    /*\\\n     * Element.insertBefore\n     [ method ]\n     **\n     * Inserts current object before the given one.\n     = (object) @Element\n    \\*/\n    elproto.insertBefore = function (element) {\n        if (this.removed || !element) {\n            return this;\n        }\n\n        var node = getRealNode(this.node);\n        var beforeNode = getRealNode(element.node || element[0].node);\n        beforeNode.parentNode.insertBefore(node, beforeNode);\n        R._insertbefore(this, element, this.paper);\n        return this;\n    };\n    elproto.blur = function (size) {\n        // Experimental. No Safari support. Use it on your own risk.\n        var t = this;\n        if (+size !== 0) {\n            var fltr = $("filter"),\n                blur = $("feGaussianBlur");\n            t.attrs.blur = size;\n            fltr.id = R.createUUID();\n            $(blur, {stdDeviation: +size || 1.5});\n            fltr.appendChild(blur);\n            t.paper.defs.appendChild(fltr);\n            t._blur = fltr;\n            $(t.node, {filter: "url(#" + fltr.id + ")"});\n        } else {\n            if (t._blur) {\n                t._blur.parentNode.removeChild(t._blur);\n                delete t._blur;\n                delete t.attrs.blur;\n            }\n            t.node.removeAttribute("filter");\n        }\n        return t;\n    };\n    R._engine.circle = function (svg, x, y, r) {\n        var el = $("circle");\n        svg.canvas && svg.canvas.appendChild(el);\n        var res = new Element(el, svg);\n        res.attrs = {cx: x, cy: y, r: r, fill: "none", stroke: "#000"};\n        res.type = "circle";\n        $(el, res.attrs);\n        return res;\n    };\n    R._engine.rect = function (svg, x, y, w, h, r) {\n        var el = $("rect");\n        svg.canvas && svg.canvas.appendChild(el);\n        var res = new Element(el, svg);\n        res.attrs = {x: x, y: y, width: w, height: h, rx: r || 0, ry: r || 0, fill: "none", stroke: "#000"};\n        res.type = "rect";\n        $(el, res.attrs);\n        return res;\n    };\n    R._engine.ellipse = function (svg, x, y, rx, ry) {\n        var el = $("ellipse");\n        svg.canvas && svg.canvas.appendChild(el);\n        var res = new Element(el, svg);\n        res.attrs = {cx: x, cy: y, rx: rx, ry: ry, fill: "none", stroke: "#000"};\n        res.type = "ellipse";\n        $(el, res.attrs);\n        return res;\n    };\n    R._engine.image = function (svg, src, x, y, w, h) {\n        var el = $("image");\n        $(el, {x: x, y: y, width: w, height: h, preserveAspectRatio: "none"});\n        el.setAttributeNS(xlink, "href", src);\n        svg.canvas && svg.canvas.appendChild(el);\n        var res = new Element(el, svg);\n        res.attrs = {x: x, y: y, width: w, height: h, src: src};\n        res.type = "image";\n        return res;\n    };\n    R._engine.text = function (svg, x, y, text) {\n        var el = $("text");\n        svg.canvas && svg.canvas.appendChild(el);\n        var res = new Element(el, svg);\n        res.attrs = {\n            x: x,\n            y: y,\n            "text-anchor": "middle",\n            text: text,\n            "font-family": R._availableAttrs["font-family"],\n            "font-size": R._availableAttrs["font-size"],\n            stroke: "none",\n            fill: "#000"\n        };\n        res.type = "text";\n        setFillAndStroke(res, res.attrs);\n        return res;\n    };\n    R._engine.setSize = function (width, height) {\n        this.width = width || this.width;\n        this.height = height || this.height;\n        this.canvas.setAttribute("width", this.width);\n        this.canvas.setAttribute("height", this.height);\n        if (this._viewBox) {\n            this.setViewBox.apply(this, this._viewBox);\n        }\n        return this;\n    };\n    R._engine.create = function () {\n        var con = R._getContainer.apply(0, arguments),\n            container = con && con.container;\n        if (!container) {\n            throw new Error("SVG container not found.");\n        }\n        var x = con.x,\n            y = con.y,\n            width = con.width,\n            height = con.height,\n            cnvs = $("svg"),\n            css = "overflow:hidden;",\n            isFloating;\n        x = x || 0;\n        y = y || 0;\n        width = width || 512;\n        height = height || 342;\n        $(cnvs, {\n            height: height,\n            version: 1.1,\n            width: width,\n            xmlns: "http://www.w3.org/2000/svg",\n            "xmlns:xlink": "http://www.w3.org/1999/xlink"\n        });\n        if (container == 1) {\n            cnvs.style.cssText = css + "position:absolute;left:" + x + "px;top:" + y + "px";\n            R._g.doc.body.appendChild(cnvs);\n            isFloating = 1;\n        } else {\n            cnvs.style.cssText = css + "position:relative";\n            if (container.firstChild) {\n                container.insertBefore(cnvs, container.firstChild);\n            } else {\n                container.appendChild(cnvs);\n            }\n        }\n        container = new R._Paper;\n        container.width = width;\n        container.height = height;\n        container.canvas = cnvs;\n        container.clear();\n        container._left = container._top = 0;\n        isFloating && (container.renderfix = function () {});\n        container.renderfix();\n        return container;\n    };\n    R._engine.setViewBox = function (x, y, w, h, fit) {\n        eve("raphael.setViewBox", this, this._viewBox, [x, y, w, h, fit]);\n        var paperSize = this.getSize(),\n            size = mmax(w / paperSize.width, h / paperSize.height),\n            top = this.top,\n            aspectRatio = fit ? "xMidYMid meet" : "xMinYMin",\n            vb,\n            sw;\n        if (x == null) {\n            if (this._vbSize) {\n                size = 1;\n            }\n            delete this._vbSize;\n            vb = "0 0 " + this.width + S + this.height;\n        } else {\n            this._vbSize = size;\n            vb = x + S + y + S + w + S + h;\n        }\n        $(this.canvas, {\n            viewBox: vb,\n            preserveAspectRatio: aspectRatio\n        });\n        while (size && top) {\n            sw = "stroke-width" in top.attrs ? top.attrs["stroke-width"] : 1;\n            top.attr({"stroke-width": sw});\n            top._.dirty = 1;\n            top._.dirtyT = 1;\n            top = top.prev;\n        }\n        this._viewBox = [x, y, w, h, !!fit];\n        return this;\n    };\n    /*\\\n     * Paper.renderfix\n     [ method ]\n     **\n     * Fixes the issue of Firefox and IE9 regarding subpixel rendering. If paper is dependent\n     * on other elements after reflow it could shift half pixel which cause for lines to lost their crispness.\n     * This method fixes the issue.\n     **\n       Special thanks to Mariusz Nowak (http://www.medikoo.com/) for this method.\n    \\*/\n    R.prototype.renderfix = function () {\n        var cnvs = this.canvas,\n            s = cnvs.style,\n            pos;\n        try {\n            pos = cnvs.getScreenCTM() || cnvs.createSVGMatrix();\n        } catch (e) {\n            pos = cnvs.createSVGMatrix();\n        }\n        var left = -pos.e % 1,\n            top = -pos.f % 1;\n        if (left || top) {\n            if (left) {\n                this._left = (this._left + left) % 1;\n                s.left = this._left + "px";\n            }\n            if (top) {\n                this._top = (this._top + top) % 1;\n                s.top = this._top + "px";\n            }\n        }\n    };\n    /*\\\n     * Paper.clear\n     [ method ]\n     **\n     * Clears the paper, i.e. removes all the elements.\n    \\*/\n    R.prototype.clear = function () {\n        R.eve("raphael.clear", this);\n        var c = this.canvas;\n        while (c.firstChild) {\n            c.removeChild(c.firstChild);\n        }\n        this.bottom = this.top = null;\n        (this.desc = $("desc")).appendChild(R._g.doc.createTextNode("Created with Rapha\\xebl " + R.version));\n        c.appendChild(this.desc);\n        c.appendChild(this.defs = $("defs"));\n    };\n    /*\\\n     * Paper.remove\n     [ method ]\n     **\n     * Removes the paper from the DOM.\n    \\*/\n    R.prototype.remove = function () {\n        eve("raphael.remove", this);\n        this.canvas.parentNode && this.canvas.parentNode.removeChild(this.canvas);\n        for (var i in this) {\n            this[i] = typeof this[i] == "function" ? R._removedFactory(i) : null;\n        }\n    };\n    var setproto = R.st;\n    for (var method in elproto) if (elproto[has](method) && !setproto[has](method)) {\n        setproto[method] = (function (methodname) {\n            return function () {\n                var arg = arguments;\n                return this.forEach(function (el) {\n                    el[methodname].apply(el, arg);\n                });\n            };\n        })(method);\n    }\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./dev/raphael.svg.js\n')},"./dev/raphael.vml.js":
/*!****************************!*\
  !*** ./dev/raphael.vml.js ***!
  \****************************/
/*! no static exports found */function devRaphaelVmlJs(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./raphael.core */ "./dev/raphael.core.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function(R) {\n    if (R && !R.vml) {\n        return;\n    }\n\n    var has = "hasOwnProperty",\n        Str = String,\n        toFloat = parseFloat,\n        math = Math,\n        round = math.round,\n        mmax = math.max,\n        mmin = math.min,\n        abs = math.abs,\n        fillString = "fill",\n        separator = /[, ]+/,\n        eve = R.eve,\n        ms = " progid:DXImageTransform.Microsoft",\n        S = " ",\n        E = "",\n        map = {M: "m", L: "l", C: "c", Z: "x", m: "t", l: "r", c: "v", z: "x"},\n        bites = /([clmz]),?([^clmz]*)/gi,\n        blurregexp = / progid:\\S+Blur\\([^\\)]+\\)/g,\n        val = /-?[^,\\s-]+/g,\n        cssDot = "position:absolute;left:0;top:0;width:1px;height:1px;behavior:url(#default#VML)",\n        zoom = 21600,\n        pathTypes = {path: 1, rect: 1, image: 1},\n        ovalTypes = {circle: 1, ellipse: 1},\n        path2vml = function (path) {\n            var total =  /[ahqstv]/ig,\n                command = R._pathToAbsolute;\n            Str(path).match(total) && (command = R._path2curve);\n            total = /[clmz]/g;\n            if (command == R._pathToAbsolute && !Str(path).match(total)) {\n                var res = Str(path).replace(bites, function (all, command, args) {\n                    var vals = [],\n                        isMove = command.toLowerCase() == "m",\n                        res = map[command];\n                    args.replace(val, function (value) {\n                        if (isMove && vals.length == 2) {\n                            res += vals + map[command == "m" ? "l" : "L"];\n                            vals = [];\n                        }\n                        vals.push(round(value * zoom));\n                    });\n                    return res + vals;\n                });\n                return res;\n            }\n            var pa = command(path), p, r;\n            res = [];\n            for (var i = 0, ii = pa.length; i < ii; i++) {\n                p = pa[i];\n                r = pa[i][0].toLowerCase();\n                r == "z" && (r = "x");\n                for (var j = 1, jj = p.length; j < jj; j++) {\n                    r += round(p[j] * zoom) + (j != jj - 1 ? "," : E);\n                }\n                res.push(r);\n            }\n            return res.join(S);\n        },\n        compensation = function (deg, dx, dy) {\n            var m = R.matrix();\n            m.rotate(-deg, .5, .5);\n            return {\n                dx: m.x(dx, dy),\n                dy: m.y(dx, dy)\n            };\n        },\n        setCoords = function (p, sx, sy, dx, dy, deg) {\n            var _ = p._,\n                m = p.matrix,\n                fillpos = _.fillpos,\n                o = p.node,\n                s = o.style,\n                y = 1,\n                flip = "",\n                dxdy,\n                kx = zoom / sx,\n                ky = zoom / sy;\n            s.visibility = "hidden";\n            if (!sx || !sy) {\n                return;\n            }\n            o.coordsize = abs(kx) + S + abs(ky);\n            s.rotation = deg * (sx * sy < 0 ? -1 : 1);\n            if (deg) {\n                var c = compensation(deg, dx, dy);\n                dx = c.dx;\n                dy = c.dy;\n            }\n            sx < 0 && (flip += "x");\n            sy < 0 && (flip += " y") && (y = -1);\n            s.flip = flip;\n            o.coordorigin = (dx * -kx) + S + (dy * -ky);\n            if (fillpos || _.fillsize) {\n                var fill = o.getElementsByTagName(fillString);\n                fill = fill && fill[0];\n                o.removeChild(fill);\n                if (fillpos) {\n                    c = compensation(deg, m.x(fillpos[0], fillpos[1]), m.y(fillpos[0], fillpos[1]));\n                    fill.position = c.dx * y + S + c.dy * y;\n                }\n                if (_.fillsize) {\n                    fill.size = _.fillsize[0] * abs(sx) + S + _.fillsize[1] * abs(sy);\n                }\n                o.appendChild(fill);\n            }\n            s.visibility = "visible";\n        };\n    R.toString = function () {\n        return  "Your browser doesn\\u2019t support SVG. Falling down to VML.\\nYou are running Rapha\\xebl " + this.version;\n    };\n    var addArrow = function (o, value, isEnd) {\n        var values = Str(value).toLowerCase().split("-"),\n            se = isEnd ? "end" : "start",\n            i = values.length,\n            type = "classic",\n            w = "medium",\n            h = "medium";\n        while (i--) {\n            switch (values[i]) {\n                case "block":\n                case "classic":\n                case "oval":\n                case "diamond":\n                case "open":\n                case "none":\n                    type = values[i];\n                    break;\n                case "wide":\n                case "narrow": h = values[i]; break;\n                case "long":\n                case "short": w = values[i]; break;\n            }\n        }\n        var stroke = o.node.getElementsByTagName("stroke")[0];\n        stroke[se + "arrow"] = type;\n        stroke[se + "arrowlength"] = w;\n        stroke[se + "arrowwidth"] = h;\n    },\n    setFillAndStroke = function (o, params) {\n        // o.paper.canvas.style.display = "none";\n        o.attrs = o.attrs || {};\n        var node = o.node,\n            a = o.attrs,\n            s = node.style,\n            xy,\n            newpath = pathTypes[o.type] && (params.x != a.x || params.y != a.y || params.width != a.width || params.height != a.height || params.cx != a.cx || params.cy != a.cy || params.rx != a.rx || params.ry != a.ry || params.r != a.r),\n            isOval = ovalTypes[o.type] && (a.cx != params.cx || a.cy != params.cy || a.r != params.r || a.rx != params.rx || a.ry != params.ry),\n            res = o;\n\n\n        for (var par in params) if (params[has](par)) {\n            a[par] = params[par];\n        }\n        if (newpath) {\n            a.path = R._getPath[o.type](o);\n            o._.dirty = 1;\n        }\n        params.href && (node.href = params.href);\n        params.title && (node.title = params.title);\n        params.target && (node.target = params.target);\n        params.cursor && (s.cursor = params.cursor);\n        "blur" in params && o.blur(params.blur);\n        if (params.path && o.type == "path" || newpath) {\n            node.path = path2vml(~Str(a.path).toLowerCase().indexOf("r") ? R._pathToAbsolute(a.path) : a.path);\n            o._.dirty = 1;\n            if (o.type == "image") {\n                o._.fillpos = [a.x, a.y];\n                o._.fillsize = [a.width, a.height];\n                setCoords(o, 1, 1, 0, 0, 0);\n            }\n        }\n        "transform" in params && o.transform(params.transform);\n        if (isOval) {\n            var cx = +a.cx,\n                cy = +a.cy,\n                rx = +a.rx || +a.r || 0,\n                ry = +a.ry || +a.r || 0;\n            node.path = R.format("ar{0},{1},{2},{3},{4},{1},{4},{1}x", round((cx - rx) * zoom), round((cy - ry) * zoom), round((cx + rx) * zoom), round((cy + ry) * zoom), round(cx * zoom));\n            o._.dirty = 1;\n        }\n        if ("clip-rect" in params) {\n            var rect = Str(params["clip-rect"]).split(separator);\n            if (rect.length == 4) {\n                rect[2] = +rect[2] + (+rect[0]);\n                rect[3] = +rect[3] + (+rect[1]);\n                var div = node.clipRect || R._g.doc.createElement("div"),\n                    dstyle = div.style;\n                dstyle.clip = R.format("rect({1}px {2}px {3}px {0}px)", rect);\n                if (!node.clipRect) {\n                    dstyle.position = "absolute";\n                    dstyle.top = 0;\n                    dstyle.left = 0;\n                    dstyle.width = o.paper.width + "px";\n                    dstyle.height = o.paper.height + "px";\n                    node.parentNode.insertBefore(div, node);\n                    div.appendChild(node);\n                    node.clipRect = div;\n                }\n            }\n            if (!params["clip-rect"]) {\n                node.clipRect && (node.clipRect.style.clip = "auto");\n            }\n        }\n        if (o.textpath) {\n            var textpathStyle = o.textpath.style;\n            params.font && (textpathStyle.font = params.font);\n            params["font-family"] && (textpathStyle.fontFamily = \'"\' + params["font-family"].split(",")[0].replace(/^[\'"]+|[\'"]+$/g, E) + \'"\');\n            params["font-size"] && (textpathStyle.fontSize = params["font-size"]);\n            params["font-weight"] && (textpathStyle.fontWeight = params["font-weight"]);\n            params["font-style"] && (textpathStyle.fontStyle = params["font-style"]);\n        }\n        if ("arrow-start" in params) {\n            addArrow(res, params["arrow-start"]);\n        }\n        if ("arrow-end" in params) {\n            addArrow(res, params["arrow-end"], 1);\n        }\n        if (params.opacity != null ||\n            params.fill != null ||\n            params.src != null ||\n            params.stroke != null ||\n            params["stroke-width"] != null ||\n            params["stroke-opacity"] != null ||\n            params["fill-opacity"] != null ||\n            params["stroke-dasharray"] != null ||\n            params["stroke-miterlimit"] != null ||\n            params["stroke-linejoin"] != null ||\n            params["stroke-linecap"] != null) {\n            var fill = node.getElementsByTagName(fillString),\n                newfill = false;\n            fill = fill && fill[0];\n            !fill && (newfill = fill = createNode(fillString));\n            if (o.type == "image" && params.src) {\n                fill.src = params.src;\n            }\n            params.fill && (fill.on = true);\n            if (fill.on == null || params.fill == "none" || params.fill === null) {\n                fill.on = false;\n            }\n            if (fill.on && params.fill) {\n                var isURL = Str(params.fill).match(R._ISURL);\n                if (isURL) {\n                    fill.parentNode == node && node.removeChild(fill);\n                    fill.rotate = true;\n                    fill.src = isURL[1];\n                    fill.type = "tile";\n                    var bbox = o.getBBox(1);\n                    fill.position = bbox.x + S + bbox.y;\n                    o._.fillpos = [bbox.x, bbox.y];\n\n                    R._preload(isURL[1], function () {\n                        o._.fillsize = [this.offsetWidth, this.offsetHeight];\n                    });\n                } else {\n                    fill.color = R.getRGB(params.fill).hex;\n                    fill.src = E;\n                    fill.type = "solid";\n                    if (R.getRGB(params.fill).error && (res.type in {circle: 1, ellipse: 1} || Str(params.fill).charAt() != "r") && addGradientFill(res, params.fill, fill)) {\n                        a.fill = "none";\n                        a.gradient = params.fill;\n                        fill.rotate = false;\n                    }\n                }\n            }\n            if ("fill-opacity" in params || "opacity" in params) {\n                var opacity = ((+a["fill-opacity"] + 1 || 2) - 1) * ((+a.opacity + 1 || 2) - 1) * ((+R.getRGB(params.fill).o + 1 || 2) - 1);\n                opacity = mmin(mmax(opacity, 0), 1);\n                fill.opacity = opacity;\n                if (fill.src) {\n                    fill.color = "none";\n                }\n            }\n            node.appendChild(fill);\n            var stroke = (node.getElementsByTagName("stroke") && node.getElementsByTagName("stroke")[0]),\n            newstroke = false;\n            !stroke && (newstroke = stroke = createNode("stroke"));\n            if ((params.stroke && params.stroke != "none") ||\n                params["stroke-width"] ||\n                params["stroke-opacity"] != null ||\n                params["stroke-dasharray"] ||\n                params["stroke-miterlimit"] ||\n                params["stroke-linejoin"] ||\n                params["stroke-linecap"]) {\n                stroke.on = true;\n            }\n            (params.stroke == "none" || params.stroke === null || stroke.on == null || params.stroke == 0 || params["stroke-width"] == 0) && (stroke.on = false);\n            var strokeColor = R.getRGB(params.stroke);\n            stroke.on && params.stroke && (stroke.color = strokeColor.hex);\n            opacity = ((+a["stroke-opacity"] + 1 || 2) - 1) * ((+a.opacity + 1 || 2) - 1) * ((+strokeColor.o + 1 || 2) - 1);\n            var width = (toFloat(params["stroke-width"]) || 1) * .75;\n            opacity = mmin(mmax(opacity, 0), 1);\n            params["stroke-width"] == null && (width = a["stroke-width"]);\n            params["stroke-width"] && (stroke.weight = width);\n            width && width < 1 && (opacity *= width) && (stroke.weight = 1);\n            stroke.opacity = opacity;\n\n            params["stroke-linejoin"] && (stroke.joinstyle = params["stroke-linejoin"] || "miter");\n            stroke.miterlimit = params["stroke-miterlimit"] || 8;\n            params["stroke-linecap"] && (stroke.endcap = params["stroke-linecap"] == "butt" ? "flat" : params["stroke-linecap"] == "square" ? "square" : "round");\n            if ("stroke-dasharray" in params) {\n                var dasharray = {\n                    "-": "shortdash",\n                    ".": "shortdot",\n                    "-.": "shortdashdot",\n                    "-..": "shortdashdotdot",\n                    ". ": "dot",\n                    "- ": "dash",\n                    "--": "longdash",\n                    "- .": "dashdot",\n                    "--.": "longdashdot",\n                    "--..": "longdashdotdot"\n                };\n                stroke.dashstyle = dasharray[has](params["stroke-dasharray"]) ? dasharray[params["stroke-dasharray"]] : E;\n            }\n            newstroke && node.appendChild(stroke);\n        }\n        if (res.type == "text") {\n            res.paper.canvas.style.display = E;\n            var span = res.paper.span,\n                m = 100,\n                fontSize = a.font && a.font.match(/\\d+(?:\\.\\d*)?(?=px)/);\n            s = span.style;\n            a.font && (s.font = a.font);\n            a["font-family"] && (s.fontFamily = a["font-family"]);\n            a["font-weight"] && (s.fontWeight = a["font-weight"]);\n            a["font-style"] && (s.fontStyle = a["font-style"]);\n            fontSize = toFloat(a["font-size"] || fontSize && fontSize[0]) || 10;\n            s.fontSize = fontSize * m + "px";\n            res.textpath.string && (span.innerHTML = Str(res.textpath.string).replace(/</g, "&#60;").replace(/&/g, "&#38;").replace(/\\n/g, "<br>"));\n            var brect = span.getBoundingClientRect();\n            res.W = a.w = (brect.right - brect.left) / m;\n            res.H = a.h = (brect.bottom - brect.top) / m;\n            // res.paper.canvas.style.display = "none";\n            res.X = a.x;\n            res.Y = a.y + res.H / 2;\n\n            ("x" in params || "y" in params) && (res.path.v = R.format("m{0},{1}l{2},{1}", round(a.x * zoom), round(a.y * zoom), round(a.x * zoom) + 1));\n            var dirtyattrs = ["x", "y", "text", "font", "font-family", "font-weight", "font-style", "font-size"];\n            for (var d = 0, dd = dirtyattrs.length; d < dd; d++) if (dirtyattrs[d] in params) {\n                res._.dirty = 1;\n                break;\n            }\n\n            // text-anchor emulation\n            switch (a["text-anchor"]) {\n                case "start":\n                    res.textpath.style["v-text-align"] = "left";\n                    res.bbx = res.W / 2;\n                break;\n                case "end":\n                    res.textpath.style["v-text-align"] = "right";\n                    res.bbx = -res.W / 2;\n                break;\n                default:\n                    res.textpath.style["v-text-align"] = "center";\n                    res.bbx = 0;\n                break;\n            }\n            res.textpath.style["v-text-kern"] = true;\n        }\n        // res.paper.canvas.style.display = E;\n    },\n    addGradientFill = function (o, gradient, fill) {\n        o.attrs = o.attrs || {};\n        var attrs = o.attrs,\n            pow = Math.pow,\n            opacity,\n            oindex,\n            type = "linear",\n            fxfy = ".5 .5";\n        o.attrs.gradient = gradient;\n        gradient = Str(gradient).replace(R._radial_gradient, function (all, fx, fy) {\n            type = "radial";\n            if (fx && fy) {\n                fx = toFloat(fx);\n                fy = toFloat(fy);\n                pow(fx - .5, 2) + pow(fy - .5, 2) > .25 && (fy = math.sqrt(.25 - pow(fx - .5, 2)) * ((fy > .5) * 2 - 1) + .5);\n                fxfy = fx + S + fy;\n            }\n            return E;\n        });\n        gradient = gradient.split(/\\s*\\-\\s*/);\n        if (type == "linear") {\n            var angle = gradient.shift();\n            angle = -toFloat(angle);\n            if (isNaN(angle)) {\n                return null;\n            }\n        }\n        var dots = R._parseDots(gradient);\n        if (!dots) {\n            return null;\n        }\n        o = o.shape || o.node;\n        if (dots.length) {\n            o.removeChild(fill);\n            fill.on = true;\n            fill.method = "none";\n            fill.color = dots[0].color;\n            fill.color2 = dots[dots.length - 1].color;\n            var clrs = [];\n            for (var i = 0, ii = dots.length; i < ii; i++) {\n                dots[i].offset && clrs.push(dots[i].offset + S + dots[i].color);\n            }\n            fill.colors = clrs.length ? clrs.join() : "0% " + fill.color;\n            if (type == "radial") {\n                fill.type = "gradientTitle";\n                fill.focus = "100%";\n                fill.focussize = "0 0";\n                fill.focusposition = fxfy;\n                fill.angle = 0;\n            } else {\n                // fill.rotate= true;\n                fill.type = "gradient";\n                fill.angle = (270 - angle) % 360;\n            }\n            o.appendChild(fill);\n        }\n        return 1;\n    },\n    Element = function (node, vml) {\n        this[0] = this.node = node;\n        node.raphael = true;\n        this.id = R._oid++;\n        node.raphaelid = this.id;\n        this.X = 0;\n        this.Y = 0;\n        this.attrs = {};\n        this.paper = vml;\n        this.matrix = R.matrix();\n        this._ = {\n            transform: [],\n            sx: 1,\n            sy: 1,\n            dx: 0,\n            dy: 0,\n            deg: 0,\n            dirty: 1,\n            dirtyT: 1\n        };\n        !vml.bottom && (vml.bottom = this);\n        this.prev = vml.top;\n        vml.top && (vml.top.next = this);\n        vml.top = this;\n        this.next = null;\n    };\n    var elproto = R.el;\n\n    Element.prototype = elproto;\n    elproto.constructor = Element;\n    elproto.transform = function (tstr) {\n        if (tstr == null) {\n            return this._.transform;\n        }\n        var vbs = this.paper._viewBoxShift,\n            vbt = vbs ? "s" + [vbs.scale, vbs.scale] + "-1-1t" + [vbs.dx, vbs.dy] : E,\n            oldt;\n        if (vbs) {\n            oldt = tstr = Str(tstr).replace(/\\.{3}|\\u2026/g, this._.transform || E);\n        }\n        R._extractTransform(this, vbt + tstr);\n        var matrix = this.matrix.clone(),\n            skew = this.skew,\n            o = this.node,\n            split,\n            isGrad = ~Str(this.attrs.fill).indexOf("-"),\n            isPatt = !Str(this.attrs.fill).indexOf("url(");\n        matrix.translate(1, 1);\n        if (isPatt || isGrad || this.type == "image") {\n            skew.matrix = "1 0 0 1";\n            skew.offset = "0 0";\n            split = matrix.split();\n            if ((isGrad && split.noRotation) || !split.isSimple) {\n                o.style.filter = matrix.toFilter();\n                var bb = this.getBBox(),\n                    bbt = this.getBBox(1),\n                    dx = bb.x - bbt.x,\n                    dy = bb.y - bbt.y;\n                o.coordorigin = (dx * -zoom) + S + (dy * -zoom);\n                setCoords(this, 1, 1, dx, dy, 0);\n            } else {\n                o.style.filter = E;\n                setCoords(this, split.scalex, split.scaley, split.dx, split.dy, split.rotate);\n            }\n        } else {\n            o.style.filter = E;\n            skew.matrix = Str(matrix);\n            skew.offset = matrix.offset();\n        }\n        if (oldt !== null) { // empty string value is true as well\n            this._.transform = oldt;\n            R._extractTransform(this, oldt);\n        }\n        return this;\n    };\n    elproto.rotate = function (deg, cx, cy) {\n        if (this.removed) {\n            return this;\n        }\n        if (deg == null) {\n            return;\n        }\n        deg = Str(deg).split(separator);\n        if (deg.length - 1) {\n            cx = toFloat(deg[1]);\n            cy = toFloat(deg[2]);\n        }\n        deg = toFloat(deg[0]);\n        (cy == null) && (cx = cy);\n        if (cx == null || cy == null) {\n            var bbox = this.getBBox(1);\n            cx = bbox.x + bbox.width / 2;\n            cy = bbox.y + bbox.height / 2;\n        }\n        this._.dirtyT = 1;\n        this.transform(this._.transform.concat([["r", deg, cx, cy]]));\n        return this;\n    };\n    elproto.translate = function (dx, dy) {\n        if (this.removed) {\n            return this;\n        }\n        dx = Str(dx).split(separator);\n        if (dx.length - 1) {\n            dy = toFloat(dx[1]);\n        }\n        dx = toFloat(dx[0]) || 0;\n        dy = +dy || 0;\n        if (this._.bbox) {\n            this._.bbox.x += dx;\n            this._.bbox.y += dy;\n        }\n        this.transform(this._.transform.concat([["t", dx, dy]]));\n        return this;\n    };\n    elproto.scale = function (sx, sy, cx, cy) {\n        if (this.removed) {\n            return this;\n        }\n        sx = Str(sx).split(separator);\n        if (sx.length - 1) {\n            sy = toFloat(sx[1]);\n            cx = toFloat(sx[2]);\n            cy = toFloat(sx[3]);\n            isNaN(cx) && (cx = null);\n            isNaN(cy) && (cy = null);\n        }\n        sx = toFloat(sx[0]);\n        (sy == null) && (sy = sx);\n        (cy == null) && (cx = cy);\n        if (cx == null || cy == null) {\n            var bbox = this.getBBox(1);\n        }\n        cx = cx == null ? bbox.x + bbox.width / 2 : cx;\n        cy = cy == null ? bbox.y + bbox.height / 2 : cy;\n\n        this.transform(this._.transform.concat([["s", sx, sy, cx, cy]]));\n        this._.dirtyT = 1;\n        return this;\n    };\n    elproto.hide = function () {\n        !this.removed && (this.node.style.display = "none");\n        return this;\n    };\n    elproto.show = function () {\n        !this.removed && (this.node.style.display = E);\n        return this;\n    };\n    // Needed to fix the vml setViewBox issues\n    elproto.auxGetBBox = R.el.getBBox;\n    elproto.getBBox = function(){\n      var b = this.auxGetBBox();\n      if (this.paper && this.paper._viewBoxShift)\n      {\n        var c = {};\n        var z = 1/this.paper._viewBoxShift.scale;\n        c.x = b.x - this.paper._viewBoxShift.dx;\n        c.x *= z;\n        c.y = b.y - this.paper._viewBoxShift.dy;\n        c.y *= z;\n        c.width  = b.width  * z;\n        c.height = b.height * z;\n        c.x2 = c.x + c.width;\n        c.y2 = c.y + c.height;\n        return c;\n      }\n      return b;\n    };\n    elproto._getBBox = function () {\n        if (this.removed) {\n            return {};\n        }\n        return {\n            x: this.X + (this.bbx || 0) - this.W / 2,\n            y: this.Y - this.H,\n            width: this.W,\n            height: this.H\n        };\n    };\n    elproto.remove = function () {\n        if (this.removed || !this.node.parentNode) {\n            return;\n        }\n        this.paper.__set__ && this.paper.__set__.exclude(this);\n        R.eve.unbind("raphael.*.*." + this.id);\n        R._tear(this, this.paper);\n        this.node.parentNode.removeChild(this.node);\n        this.shape && this.shape.parentNode.removeChild(this.shape);\n        for (var i in this) {\n            this[i] = typeof this[i] == "function" ? R._removedFactory(i) : null;\n        }\n        this.removed = true;\n    };\n    elproto.attr = function (name, value) {\n        if (this.removed) {\n            return this;\n        }\n        if (name == null) {\n            var res = {};\n            for (var a in this.attrs) if (this.attrs[has](a)) {\n                res[a] = this.attrs[a];\n            }\n            res.gradient && res.fill == "none" && (res.fill = res.gradient) && delete res.gradient;\n            res.transform = this._.transform;\n            return res;\n        }\n        if (value == null && R.is(name, "string")) {\n            if (name == fillString && this.attrs.fill == "none" && this.attrs.gradient) {\n                return this.attrs.gradient;\n            }\n            var names = name.split(separator),\n                out = {};\n            for (var i = 0, ii = names.length; i < ii; i++) {\n                name = names[i];\n                if (name in this.attrs) {\n                    out[name] = this.attrs[name];\n                } else if (R.is(this.paper.customAttributes[name], "function")) {\n                    out[name] = this.paper.customAttributes[name].def;\n                } else {\n                    out[name] = R._availableAttrs[name];\n                }\n            }\n            return ii - 1 ? out : out[names[0]];\n        }\n        if (this.attrs && value == null && R.is(name, "array")) {\n            out = {};\n            for (i = 0, ii = name.length; i < ii; i++) {\n                out[name[i]] = this.attr(name[i]);\n            }\n            return out;\n        }\n        var params;\n        if (value != null) {\n            params = {};\n            params[name] = value;\n        }\n        value == null && R.is(name, "object") && (params = name);\n        for (var key in params) {\n            eve("raphael.attr." + key + "." + this.id, this, params[key]);\n        }\n        if (params) {\n            for (key in this.paper.customAttributes) if (this.paper.customAttributes[has](key) && params[has](key) && R.is(this.paper.customAttributes[key], "function")) {\n                var par = this.paper.customAttributes[key].apply(this, [].concat(params[key]));\n                this.attrs[key] = params[key];\n                for (var subkey in par) if (par[has](subkey)) {\n                    params[subkey] = par[subkey];\n                }\n            }\n            // this.paper.canvas.style.display = "none";\n            if (params.text && this.type == "text") {\n                this.textpath.string = params.text;\n            }\n            setFillAndStroke(this, params);\n            // this.paper.canvas.style.display = E;\n        }\n        return this;\n    };\n    elproto.toFront = function () {\n        !this.removed && this.node.parentNode.appendChild(this.node);\n        this.paper && this.paper.top != this && R._tofront(this, this.paper);\n        return this;\n    };\n    elproto.toBack = function () {\n        if (this.removed) {\n            return this;\n        }\n        if (this.node.parentNode.firstChild != this.node) {\n            this.node.parentNode.insertBefore(this.node, this.node.parentNode.firstChild);\n            R._toback(this, this.paper);\n        }\n        return this;\n    };\n    elproto.insertAfter = function (element) {\n        if (this.removed) {\n            return this;\n        }\n        if (element.constructor == R.st.constructor) {\n            element = element[element.length - 1];\n        }\n        if (element.node.nextSibling) {\n            element.node.parentNode.insertBefore(this.node, element.node.nextSibling);\n        } else {\n            element.node.parentNode.appendChild(this.node);\n        }\n        R._insertafter(this, element, this.paper);\n        return this;\n    };\n    elproto.insertBefore = function (element) {\n        if (this.removed) {\n            return this;\n        }\n        if (element.constructor == R.st.constructor) {\n            element = element[0];\n        }\n        element.node.parentNode.insertBefore(this.node, element.node);\n        R._insertbefore(this, element, this.paper);\n        return this;\n    };\n    elproto.blur = function (size) {\n        var s = this.node.runtimeStyle,\n            f = s.filter;\n        f = f.replace(blurregexp, E);\n        if (+size !== 0) {\n            this.attrs.blur = size;\n            s.filter = f + S + ms + ".Blur(pixelradius=" + (+size || 1.5) + ")";\n            s.margin = R.format("-{0}px 0 0 -{0}px", round(+size || 1.5));\n        } else {\n            s.filter = f;\n            s.margin = 0;\n            delete this.attrs.blur;\n        }\n        return this;\n    };\n\n    R._engine.path = function (pathString, vml) {\n        var el = createNode("shape");\n        el.style.cssText = cssDot;\n        el.coordsize = zoom + S + zoom;\n        el.coordorigin = vml.coordorigin;\n        var p = new Element(el, vml),\n            attr = {fill: "none", stroke: "#000"};\n        pathString && (attr.path = pathString);\n        p.type = "path";\n        p.path = [];\n        p.Path = E;\n        setFillAndStroke(p, attr);\n        vml.canvas && vml.canvas.appendChild(el);\n        var skew = createNode("skew");\n        skew.on = true;\n        el.appendChild(skew);\n        p.skew = skew;\n        p.transform(E);\n        return p;\n    };\n    R._engine.rect = function (vml, x, y, w, h, r) {\n        var path = R._rectPath(x, y, w, h, r),\n            res = vml.path(path),\n            a = res.attrs;\n        res.X = a.x = x;\n        res.Y = a.y = y;\n        res.W = a.width = w;\n        res.H = a.height = h;\n        a.r = r;\n        a.path = path;\n        res.type = "rect";\n        return res;\n    };\n    R._engine.ellipse = function (vml, x, y, rx, ry) {\n        var res = vml.path(),\n            a = res.attrs;\n        res.X = x - rx;\n        res.Y = y - ry;\n        res.W = rx * 2;\n        res.H = ry * 2;\n        res.type = "ellipse";\n        setFillAndStroke(res, {\n            cx: x,\n            cy: y,\n            rx: rx,\n            ry: ry\n        });\n        return res;\n    };\n    R._engine.circle = function (vml, x, y, r) {\n        var res = vml.path(),\n            a = res.attrs;\n        res.X = x - r;\n        res.Y = y - r;\n        res.W = res.H = r * 2;\n        res.type = "circle";\n        setFillAndStroke(res, {\n            cx: x,\n            cy: y,\n            r: r\n        });\n        return res;\n    };\n    R._engine.image = function (vml, src, x, y, w, h) {\n        var path = R._rectPath(x, y, w, h),\n            res = vml.path(path).attr({stroke: "none"}),\n            a = res.attrs,\n            node = res.node,\n            fill = node.getElementsByTagName(fillString)[0];\n        a.src = src;\n        res.X = a.x = x;\n        res.Y = a.y = y;\n        res.W = a.width = w;\n        res.H = a.height = h;\n        a.path = path;\n        res.type = "image";\n        fill.parentNode == node && node.removeChild(fill);\n        fill.rotate = true;\n        fill.src = src;\n        fill.type = "tile";\n        res._.fillpos = [x, y];\n        res._.fillsize = [w, h];\n        node.appendChild(fill);\n        setCoords(res, 1, 1, 0, 0, 0);\n        return res;\n    };\n    R._engine.text = function (vml, x, y, text) {\n        var el = createNode("shape"),\n            path = createNode("path"),\n            o = createNode("textpath");\n        x = x || 0;\n        y = y || 0;\n        text = text || "";\n        path.v = R.format("m{0},{1}l{2},{1}", round(x * zoom), round(y * zoom), round(x * zoom) + 1);\n        path.textpathok = true;\n        o.string = Str(text);\n        o.on = true;\n        el.style.cssText = cssDot;\n        el.coordsize = zoom + S + zoom;\n        el.coordorigin = "0 0";\n        var p = new Element(el, vml),\n            attr = {\n                fill: "#000",\n                stroke: "none",\n                font: R._availableAttrs.font,\n                text: text\n            };\n        p.shape = el;\n        p.path = path;\n        p.textpath = o;\n        p.type = "text";\n        p.attrs.text = Str(text);\n        p.attrs.x = x;\n        p.attrs.y = y;\n        p.attrs.w = 1;\n        p.attrs.h = 1;\n        setFillAndStroke(p, attr);\n        el.appendChild(o);\n        el.appendChild(path);\n        vml.canvas.appendChild(el);\n        var skew = createNode("skew");\n        skew.on = true;\n        el.appendChild(skew);\n        p.skew = skew;\n        p.transform(E);\n        return p;\n    };\n    R._engine.setSize = function (width, height) {\n        var cs = this.canvas.style;\n        this.width = width;\n        this.height = height;\n        width == +width && (width += "px");\n        height == +height && (height += "px");\n        cs.width = width;\n        cs.height = height;\n        cs.clip = "rect(0 " + width + " " + height + " 0)";\n        if (this._viewBox) {\n            R._engine.setViewBox.apply(this, this._viewBox);\n        }\n        return this;\n    };\n    R._engine.setViewBox = function (x, y, w, h, fit) {\n        R.eve("raphael.setViewBox", this, this._viewBox, [x, y, w, h, fit]);\n        var paperSize = this.getSize(),\n            width = paperSize.width,\n            height = paperSize.height,\n            H, W;\n        if (fit) {\n            H = height / h;\n            W = width / w;\n            if (w * H < width) {\n                x -= (width - w * H) / 2 / H;\n            }\n            if (h * W < height) {\n                y -= (height - h * W) / 2 / W;\n            }\n        }\n        this._viewBox = [x, y, w, h, !!fit];\n        this._viewBoxShift = {\n            dx: -x,\n            dy: -y,\n            scale: paperSize\n        };\n        this.forEach(function (el) {\n            el.transform("...");\n        });\n        return this;\n    };\n    var createNode;\n    R._engine.initWin = function (win) {\n            var doc = win.document;\n            if (doc.styleSheets.length < 31) {\n                doc.createStyleSheet().addRule(".rvml", "behavior:url(#default#VML)");\n            } else {\n                // no more room, add to the existing one\n                // http://msdn.microsoft.com/en-us/library/ms531194%28VS.85%29.aspx\n                doc.styleSheets[0].addRule(".rvml", "behavior:url(#default#VML)");\n            }\n            try {\n                !doc.namespaces.rvml && doc.namespaces.add("rvml", "urn:schemas-microsoft-com:vml");\n                createNode = function (tagName) {\n                    return doc.createElement(\'<rvml:\' + tagName + \' class="rvml">\');\n                };\n            } catch (e) {\n                createNode = function (tagName) {\n                    return doc.createElement(\'<\' + tagName + \' xmlns="urn:schemas-microsoft.com:vml" class="rvml">\');\n                };\n            }\n        };\n    R._engine.initWin(R._g.win);\n    R._engine.create = function () {\n        var con = R._getContainer.apply(0, arguments),\n            container = con.container,\n            height = con.height,\n            s,\n            width = con.width,\n            x = con.x,\n            y = con.y;\n        if (!container) {\n            throw new Error("VML container not found.");\n        }\n        var res = new R._Paper,\n            c = res.canvas = R._g.doc.createElement("div"),\n            cs = c.style;\n        x = x || 0;\n        y = y || 0;\n        width = width || 512;\n        height = height || 342;\n        res.width = width;\n        res.height = height;\n        width == +width && (width += "px");\n        height == +height && (height += "px");\n        res.coordsize = zoom * 1e3 + S + zoom * 1e3;\n        res.coordorigin = "0 0";\n        res.span = R._g.doc.createElement("span");\n        res.span.style.cssText = "position:absolute;left:-9999em;top:-9999em;padding:0;margin:0;line-height:1;";\n        c.appendChild(res.span);\n        cs.cssText = R.format("top:0;left:0;width:{0};height:{1};display:inline-block;position:relative;clip:rect(0 {0} {1} 0);overflow:hidden", width, height);\n        if (container == 1) {\n            R._g.doc.body.appendChild(c);\n            cs.left = x + "px";\n            cs.top = y + "px";\n            cs.position = "absolute";\n        } else {\n            if (container.firstChild) {\n                container.insertBefore(c, container.firstChild);\n            } else {\n                container.appendChild(c);\n            }\n        }\n        res.renderfix = function () {};\n        return res;\n    };\n    R.prototype.clear = function () {\n        R.eve("raphael.clear", this);\n        this.canvas.innerHTML = E;\n        this.span = R._g.doc.createElement("span");\n        this.span.style.cssText = "position:absolute;left:-9999em;top:-9999em;padding:0;margin:0;line-height:1;display:inline;";\n        this.canvas.appendChild(this.span);\n        this.bottom = this.top = null;\n    };\n    R.prototype.remove = function () {\n        R.eve("raphael.remove", this);\n        this.canvas.parentNode.removeChild(this.canvas);\n        for (var i in this) {\n            this[i] = typeof this[i] == "function" ? R._removedFactory(i) : null;\n        }\n        return true;\n    };\n\n    var setproto = R.st;\n    for (var method in elproto) if (elproto[has](method) && !setproto[has](method)) {\n        setproto[method] = (function (methodname) {\n            return function () {\n                var arg = arguments;\n                return this.forEach(function (el) {\n                    el[methodname].apply(el, arg);\n                });\n            };\n        })(method);\n    }\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./dev/raphael.vml.js\n')},"./node_modules/eve-raphael/eve.js":
/*!*****************************************!*\
  !*** ./node_modules/eve-raphael/eve.js ***!
  \*****************************************/
/*! no static exports found */function node_modulesEveRaphaelEveJs(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n// ┌────────────────────────────────────────────────────────────┐ \\\\\n// │ Eve 0.5.0 - JavaScript Events Library                      │ \\\\\n// ├────────────────────────────────────────────────────────────┤ \\\\\n// │ Author Dmitry Baranovskiy (http://dmitry.baranovskiy.com/) │ \\\\\n// └────────────────────────────────────────────────────────────┘ \\\\\n\n(function (glob) {\n    var version = "0.5.0",\n        has = "hasOwnProperty",\n        separator = /[\\.\\/]/,\n        comaseparator = /\\s*,\\s*/,\n        wildcard = "*",\n        fun = function () {},\n        numsort = function (a, b) {\n            return a - b;\n        },\n        current_event,\n        stop,\n        events = {n: {}},\n        firstDefined = function () {\n            for (var i = 0, ii = this.length; i < ii; i++) {\n                if (typeof this[i] != "undefined") {\n                    return this[i];\n                }\n            }\n        },\n        lastDefined = function () {\n            var i = this.length;\n            while (--i) {\n                if (typeof this[i] != "undefined") {\n                    return this[i];\n                }\n            }\n        },\n        objtos = Object.prototype.toString,\n        Str = String,\n        isArray = Array.isArray || function (ar) {\n            return ar instanceof Array || objtos.call(ar) == "[object Array]";\n        };\n    /*\\\n     * eve\n     [ method ]\n\n     * Fires event with given `name`, given scope and other parameters.\n\n     > Arguments\n\n     - name (string) name of the *event*, dot (`.`) or slash (`/`) separated\n     - scope (object) context for the event handlers\n     - varargs (...) the rest of arguments will be sent to event handlers\n\n     = (object) array of returned values from the listeners. Array has two methods `.firstDefined()` and `.lastDefined()` to get first or last not `undefined` value.\n    \\*/\n        var eve = function (name, scope) {\n            var e = events,\n                oldstop = stop,\n                args = Array.prototype.slice.call(arguments, 2),\n                listeners = eve.listeners(name),\n                z = 0,\n                f = false,\n                l,\n                indexed = [],\n                queue = {},\n                out = [],\n                ce = current_event,\n                errors = [];\n            out.firstDefined = firstDefined;\n            out.lastDefined = lastDefined;\n            current_event = name;\n            stop = 0;\n            for (var i = 0, ii = listeners.length; i < ii; i++) if ("zIndex" in listeners[i]) {\n                indexed.push(listeners[i].zIndex);\n                if (listeners[i].zIndex < 0) {\n                    queue[listeners[i].zIndex] = listeners[i];\n                }\n            }\n            indexed.sort(numsort);\n            while (indexed[z] < 0) {\n                l = queue[indexed[z++]];\n                out.push(l.apply(scope, args));\n                if (stop) {\n                    stop = oldstop;\n                    return out;\n                }\n            }\n            for (i = 0; i < ii; i++) {\n                l = listeners[i];\n                if ("zIndex" in l) {\n                    if (l.zIndex == indexed[z]) {\n                        out.push(l.apply(scope, args));\n                        if (stop) {\n                            break;\n                        }\n                        do {\n                            z++;\n                            l = queue[indexed[z]];\n                            l && out.push(l.apply(scope, args));\n                            if (stop) {\n                                break;\n                            }\n                        } while (l)\n                    } else {\n                        queue[l.zIndex] = l;\n                    }\n                } else {\n                    out.push(l.apply(scope, args));\n                    if (stop) {\n                        break;\n                    }\n                }\n            }\n            stop = oldstop;\n            current_event = ce;\n            return out;\n        };\n        // Undocumented. Debug only.\n        eve._events = events;\n    /*\\\n     * eve.listeners\n     [ method ]\n\n     * Internal method which gives you array of all event handlers that will be triggered by the given `name`.\n\n     > Arguments\n\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated\n\n     = (array) array of event handlers\n    \\*/\n    eve.listeners = function (name) {\n        var names = isArray(name) ? name : name.split(separator),\n            e = events,\n            item,\n            items,\n            k,\n            i,\n            ii,\n            j,\n            jj,\n            nes,\n            es = [e],\n            out = [];\n        for (i = 0, ii = names.length; i < ii; i++) {\n            nes = [];\n            for (j = 0, jj = es.length; j < jj; j++) {\n                e = es[j].n;\n                items = [e[names[i]], e[wildcard]];\n                k = 2;\n                while (k--) {\n                    item = items[k];\n                    if (item) {\n                        nes.push(item);\n                        out = out.concat(item.f || []);\n                    }\n                }\n            }\n            es = nes;\n        }\n        return out;\n    };\n    /*\\\n     * eve.separator\n     [ method ]\n\n     * If for some reasons you don’t like default separators (`.` or `/`) you can specify yours\n     * here. Be aware that if you pass a string longer than one character it will be treated as\n     * a list of characters.\n\n     - separator (string) new separator. Empty string resets to default: `.` or `/`.\n    \\*/\n    eve.separator = function (sep) {\n        if (sep) {\n            sep = Str(sep).replace(/(?=[\\.\\^\\]\\[\\-])/g, "\\\\");\n            sep = "[" + sep + "]";\n            separator = new RegExp(sep);\n        } else {\n            separator = /[\\.\\/]/;\n        }\n    };\n    /*\\\n     * eve.on\n     [ method ]\n     **\n     * Binds given event handler with a given name. You can use wildcards “`*`” for the names:\n     | eve.on("*.under.*", f);\n     | eve("mouse.under.floor"); // triggers f\n     * Use @eve to trigger the listener.\n     **\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n     - f (function) event handler function\n     **\n     - name (array) if you don’t want to use separators, you can use array of strings\n     - f (function) event handler function\n     **\n     = (function) returned function accepts a single numeric parameter that represents z-index of the handler. It is an optional feature and only used when you need to ensure that some subset of handlers will be invoked in a given order, despite of the order of assignment. \n     > Example:\n     | eve.on("mouse", eatIt)(2);\n     | eve.on("mouse", scream);\n     | eve.on("mouse", catchIt)(1);\n     * This will ensure that `catchIt` function will be called before `eatIt`.\n     *\n     * If you want to put your handler before non-indexed handlers, specify a negative value.\n     * Note: I assume most of the time you don’t need to worry about z-index, but it’s nice to have this feature “just in case”.\n    \\*/\n    eve.on = function (name, f) {\n        if (typeof f != "function") {\n            return function () {};\n        }\n        var names = isArray(name) ? (isArray(name[0]) ? name : [name]) : Str(name).split(comaseparator);\n        for (var i = 0, ii = names.length; i < ii; i++) {\n            (function (name) {\n                var names = isArray(name) ? name : Str(name).split(separator),\n                    e = events,\n                    exist;\n                for (var i = 0, ii = names.length; i < ii; i++) {\n                    e = e.n;\n                    e = e.hasOwnProperty(names[i]) && e[names[i]] || (e[names[i]] = {n: {}});\n                }\n                e.f = e.f || [];\n                for (i = 0, ii = e.f.length; i < ii; i++) if (e.f[i] == f) {\n                    exist = true;\n                    break;\n                }\n                !exist && e.f.push(f);\n            }(names[i]));\n        }\n        return function (zIndex) {\n            if (+zIndex == +zIndex) {\n                f.zIndex = +zIndex;\n            }\n        };\n    };\n    /*\\\n     * eve.f\n     [ method ]\n     **\n     * Returns function that will fire given event with optional arguments.\n     * Arguments that will be passed to the result function will be also\n     * concated to the list of final arguments.\n     | el.onclick = eve.f("click", 1, 2);\n     | eve.on("click", function (a, b, c) {\n     |     console.log(a, b, c); // 1, 2, [event object]\n     | });\n     > Arguments\n     - event (string) event name\n     - varargs (…) and any other arguments\n     = (function) possible event handler function\n    \\*/\n    eve.f = function (event) {\n        var attrs = [].slice.call(arguments, 1);\n        return function () {\n            eve.apply(null, [event, null].concat(attrs).concat([].slice.call(arguments, 0)));\n        };\n    };\n    /*\\\n     * eve.stop\n     [ method ]\n     **\n     * Is used inside an event handler to stop the event, preventing any subsequent listeners from firing.\n    \\*/\n    eve.stop = function () {\n        stop = 1;\n    };\n    /*\\\n     * eve.nt\n     [ method ]\n     **\n     * Could be used inside event handler to figure out actual name of the event.\n     **\n     > Arguments\n     **\n     - subname (string) #optional subname of the event\n     **\n     = (string) name of the event, if `subname` is not specified\n     * or\n     = (boolean) `true`, if current event’s name contains `subname`\n    \\*/\n    eve.nt = function (subname) {\n        var cur = isArray(current_event) ? current_event.join(".") : current_event;\n        if (subname) {\n            return new RegExp("(?:\\\\.|\\\\/|^)" + subname + "(?:\\\\.|\\\\/|$)").test(cur);\n        }\n        return cur;\n    };\n    /*\\\n     * eve.nts\n     [ method ]\n     **\n     * Could be used inside event handler to figure out actual name of the event.\n     **\n     **\n     = (array) names of the event\n    \\*/\n    eve.nts = function () {\n        return isArray(current_event) ? current_event : current_event.split(separator);\n    };\n    /*\\\n     * eve.off\n     [ method ]\n     **\n     * Removes given function from the list of event listeners assigned to given name.\n     * If no arguments specified all the events will be cleared.\n     **\n     > Arguments\n     **\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n     - f (function) event handler function\n    \\*/\n    /*\\\n     * eve.unbind\n     [ method ]\n     **\n     * See @eve.off\n    \\*/\n    eve.off = eve.unbind = function (name, f) {\n        if (!name) {\n            eve._events = events = {n: {}};\n            return;\n        }\n        var names = isArray(name) ? (isArray(name[0]) ? name : [name]) : Str(name).split(comaseparator);\n        if (names.length > 1) {\n            for (var i = 0, ii = names.length; i < ii; i++) {\n                eve.off(names[i], f);\n            }\n            return;\n        }\n        names = isArray(name) ? name : Str(name).split(separator);\n        var e,\n            key,\n            splice,\n            i, ii, j, jj,\n            cur = [events];\n        for (i = 0, ii = names.length; i < ii; i++) {\n            for (j = 0; j < cur.length; j += splice.length - 2) {\n                splice = [j, 1];\n                e = cur[j].n;\n                if (names[i] != wildcard) {\n                    if (e[names[i]]) {\n                        splice.push(e[names[i]]);\n                    }\n                } else {\n                    for (key in e) if (e[has](key)) {\n                        splice.push(e[key]);\n                    }\n                }\n                cur.splice.apply(cur, splice);\n            }\n        }\n        for (i = 0, ii = cur.length; i < ii; i++) {\n            e = cur[i];\n            while (e.n) {\n                if (f) {\n                    if (e.f) {\n                        for (j = 0, jj = e.f.length; j < jj; j++) if (e.f[j] == f) {\n                            e.f.splice(j, 1);\n                            break;\n                        }\n                        !e.f.length && delete e.f;\n                    }\n                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n                        var funcs = e.n[key].f;\n                        for (j = 0, jj = funcs.length; j < jj; j++) if (funcs[j] == f) {\n                            funcs.splice(j, 1);\n                            break;\n                        }\n                        !funcs.length && delete e.n[key].f;\n                    }\n                } else {\n                    delete e.f;\n                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n                        delete e.n[key].f;\n                    }\n                }\n                e = e.n;\n            }\n        }\n    };\n    /*\\\n     * eve.once\n     [ method ]\n     **\n     * Binds given event handler with a given name to only run once then unbind itself.\n     | eve.once("login", f);\n     | eve("login"); // triggers f\n     | eve("login"); // no listeners\n     * Use @eve to trigger the listener.\n     **\n     > Arguments\n     **\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n     - f (function) event handler function\n     **\n     = (function) same return function as @eve.on\n    \\*/\n    eve.once = function (name, f) {\n        var f2 = function () {\n            eve.off(name, f2);\n            return f.apply(this, arguments);\n        };\n        return eve.on(name, f2);\n    };\n    /*\\\n     * eve.version\n     [ property (string) ]\n     **\n     * Current version of the library.\n    \\*/\n    eve.version = version;\n    eve.toString = function () {\n        return "You are running Eve " + version;\n    };\n    ( true && module.exports) ? (module.exports = eve) : ( true ? (!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() { return eve; }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))) : (undefined));\n})(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/eve-raphael/eve.js\n')}})},"object"===_typeof(exports)&&"object"===_typeof(module)?module.exports=factory():(__WEBPACK_AMD_DEFINE_ARRAY__=[],void 0===(__WEBPACK_AMD_DEFINE_RESULT__="function"==typeof(__WEBPACK_AMD_DEFINE_FACTORY__=factory)?__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__):__WEBPACK_AMD_DEFINE_FACTORY__)||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__))}).call(this,__webpack_require__(3)(module))},function(g,I,C){g.exports=C(2)},function(g,I,C){"use strict";C.r(I);var A=C(0),n=C.n(A);function t(g,I){for(var C=0;C<I.length;C++){var A=I[C];A.enumerable=A.enumerable||!1,A.configurable=!0,"value"in A&&(A.writable=!0),Object.defineProperty(g,A.key,A)}}var B=function(){function g(I){!function(g,I){if(!(g instanceof I))throw new TypeError("Cannot call a class as a function")}(this,g),this.label=I,this.children=[]}var I,C,A;return I=g,(C=[{key:"addChild",value:function(g){this.children.push(g)}}])&&t(I.prototype,C),A&&t(I,A),g}(),i=new B("Root");i.addChild(new B("child-1")),i.addChild(new B("child-2")),i.addChild(new B("child-3")),i.addChild(new B("child-4")),i.addChild(new B("child-5")),i.addChild(new B("child-6")),i.addChild(new B("child-7"));var e=[i];console.log("Hi"),function g(I){var C=n()(0,0,400,400),A=0;I.forEach(function(I){C.circle(A+50,A+50,20),A+=5,g(I.children)})}(e)},function(g,I){g.exports=function(g){return g.webpackPolyfill||(g.deprecate=function(){},g.paths=[],g.children||(g.children=[]),Object.defineProperty(g,"loaded",{enumerable:!0,get:function(){return g.l}}),Object.defineProperty(g,"id",{enumerable:!0,get:function(){return g.i}}),g.webpackPolyfill=1),g}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JhcGhhZWwvcmFwaGFlbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImZhY3RvcnkiLCJ3aW5kb3ciLCJfdHlwZW9mIiwiLi9kZXYvcmFwaGFlbC5hbWQuanMiLCJkZXZSYXBoYWVsQW1kSnMiLCJldmFsIiwiLi9kZXYvcmFwaGFlbC5jb3JlLmpzIiwiZGV2UmFwaGFlbENvcmVKcyIsIi4vZGV2L3JhcGhhZWwuc3ZnLmpzIiwiZGV2UmFwaGFlbFN2Z0pzIiwiLi9kZXYvcmFwaGFlbC52bWwuanMiLCJkZXZSYXBoYWVsVm1sSnMiLCIuL25vZGVfbW9kdWxlcy9ldmUtcmFwaGFlbC9ldmUuanMiLCJub2RlX21vZHVsZXNFdmVSYXBoYWVsRXZlSnMiLCJkZWZpbmUiLCJ1bmRlZmluZWQiLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyIsIl9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyIsImFwcGx5IiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXyIsIk5vZGUiLCJsYWJlbCIsIl9jbGFzc0NhbGxDaGVjayIsInRoaXMiLCJjaGlsZHJlbiIsIm5vZGUiLCJwdXNoIiwicm9vdCIsImFkZENoaWxkIiwidHJlZSIsImNvbnNvbGUiLCJsb2ciLCJkcmF3VHJlZSIsIlJhcGhhZWwiLCJmb3JFYWNoIiwiY2lyY2xlIiwid2VicGFja1BvbHlmaWxsIiwiZGVwcmVjYXRlIiwicGF0aHMiXSwibWFwcGluZ3MiOiJhQUNBLElBQUFBLEVBQUEsR0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxHQUFBLENBQ0FHLEVBQUFILEVBQ0FJLEdBQUEsRUFDQUgsUUFBQSxJQVVBLE9BTkFJLEVBQUFMLEdBQUFNLEtBQUFKLEVBQUFELFFBQUFDLElBQUFELFFBQUFGLEdBR0FHLEVBQUFFLEdBQUEsRUFHQUYsRUFBQUQsUUFLQUYsRUFBQVEsRUFBQUYsRUFHQU4sRUFBQVMsRUFBQVYsRUFHQUMsRUFBQVUsRUFBQSxTQUFBUixFQUFBUyxFQUFBQyxHQUNBWixFQUFBYSxFQUFBWCxFQUFBUyxJQUNBRyxPQUFBQyxlQUFBYixFQUFBUyxFQUFBLENBQTBDSyxZQUFBLEVBQUFDLElBQUFMLEtBSzFDWixFQUFBa0IsRUFBQSxTQUFBaEIsR0FDQSxvQkFBQWlCLGVBQUFDLGFBQ0FOLE9BQUFDLGVBQUFiLEVBQUFpQixPQUFBQyxZQUFBLENBQXdEQyxNQUFBLFdBRXhEUCxPQUFBQyxlQUFBYixFQUFBLGNBQWlEbUIsT0FBQSxLQVFqRHJCLEVBQUFzQixFQUFBLFNBQUFELEVBQUFFLEdBRUEsR0FEQSxFQUFBQSxJQUFBRixFQUFBckIsRUFBQXFCLElBQ0EsRUFBQUUsRUFBQSxPQUFBRixFQUNBLEtBQUFFLEdBQUEsaUJBQUFGLFFBQUFHLFdBQUEsT0FBQUgsRUFDQSxJQUFBSSxFQUFBWCxPQUFBWSxPQUFBLE1BR0EsR0FGQTFCLEVBQUFrQixFQUFBTyxHQUNBWCxPQUFBQyxlQUFBVSxFQUFBLFdBQXlDVCxZQUFBLEVBQUFLLFVBQ3pDLEVBQUFFLEdBQUEsaUJBQUFGLEVBQUEsUUFBQU0sS0FBQU4sRUFBQXJCLEVBQUFVLEVBQUFlLEVBQUFFLEVBQUEsU0FBQUEsR0FBZ0gsT0FBQU4sRUFBQU0sSUFBcUJDLEtBQUEsS0FBQUQsSUFDckksT0FBQUYsR0FJQXpCLEVBQUE2QixFQUFBLFNBQUExQixHQUNBLElBQUFTLEVBQUFULEtBQUFxQixXQUNBLFdBQTJCLE9BQUFyQixFQUFBLFNBQzNCLFdBQWlDLE9BQUFBLEdBRWpDLE9BREFILEVBQUFVLEVBQUFFLEVBQUEsSUFBQUEsR0FDQUEsR0FJQVosRUFBQWEsRUFBQSxTQUFBaUIsRUFBQUMsR0FBc0QsT0FBQWpCLE9BQUFrQixVQUFBQyxlQUFBMUIsS0FBQXVCLEVBQUFDLElBR3REL0IsRUFBQWtDLEVBQUEsR0FJQWxDLElBQUFtQyxFQUFBLGtLQ3pFaURDLHlQQVM5Q0MsT0FUOENELFFBU3RDLFdBQ1gsT0FBaUIsU0FBUzlCLEdBRWhCLElBQUlQLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQTBEZixPQXJEQUYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVosRUFBb0JrQixFQUFJLFNBQVNoQixHQUNYLG9CQUFYaUIsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFPQyxlQUFlYixFQUFTaUIsT0FBT0MsWUFBYSxDQUFFQyxNQUFPLFdBRTdEUCxPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sS0FRdkRyQixFQUFvQnNCLEVBQUksU0FBU0QsRUFBT0UsR0FFdkMsR0FEVSxFQUFQQSxJQUFVRixFQUFRckIsRUFBb0JxQixJQUMvQixFQUFQRSxFQUFVLE9BQU9GLEVBQ3BCLEdBQVcsRUFBUEUsR0FBOEIsV0FBakJlLFFBQU9qQixJQUFzQkEsR0FBU0EsRUFBTUcsV0FBWSxPQUFPSCxFQUNoRixJQUFJSSxFQUFLWCxPQUFPWSxPQUFPLE1BR3ZCLEdBRkExQixFQUFvQmtCLEVBQUVPLEdBQ3RCWCxPQUFPQyxlQUFlVSxFQUFJLFVBQVcsQ0FBRVQsWUFBWSxFQUFNSyxNQUFPQSxJQUN0RCxFQUFQRSxHQUE0QixpQkFBVEYsRUFBbUIsSUFBSSxJQUFJTSxLQUFPTixFQUFPckIsRUFBb0JVLEVBQUVlLEVBQUlFLEVBQUssU0FBU0EsR0FBTyxPQUFPTixFQUFNTSxJQUFRQyxLQUFLLEtBQU1ELElBQzlJLE9BQU9GLEdBSVJ6QixFQUFvQjZCLEVBQUksU0FBUzFCLEdBQ2hDLElBQUlTLEVBQVNULEdBQVVBLEVBQU9xQixXQUM3QixXQUF3QixPQUFPckIsRUFBTSxTQUNyQyxXQUE4QixPQUFPQSxHQUV0QyxPQURBSCxFQUFvQlUsRUFBRUUsRUFBUSxJQUFLQSxHQUM1QkEsR0FJUlosRUFBb0JhLEVBQUksU0FBU2lCLEVBQVFDLEdBQVksT0FBT2pCLE9BQU9rQixVQUFVQyxlQUFlMUIsS0FBS3VCLEVBQVFDLElBR3pHL0IsRUFBb0JrQyxFQUFJLEdBSWpCbEMsRUFBb0JBLEVBQW9CbUMsRUFBSSx3QkFuRnRELENBc0ZHLENBRUpJOzs7OzhCQUtDLFNBQUFDLGdCQUFTckMsT0FBUUQsUUFBU0YscUJBRWpDeUMsS0FBSyxvaUNBSUNDOzs7OzhCQUtDLFNBQUFDLGlCQUFTeEMsT0FBUUQsUUFBU0YscUJBRWpDeUMsS0FBSyxpMzNlQUlDRzs7Ozs4QkFLQyxTQUFBQyxnQkFBUzFDLE9BQVFELFFBQVNGLHFCQUVqQ3lDLEtBQUsscWc3SUFJQ0s7Ozs7OEJBS0MsU0FBQUMsZ0JBQVM1QyxPQUFRRCxRQUFTRixxQkFFakN5QyxLQUFLLG13K0ZBSUNPOzs7OzhCQUtDLFNBQUFDLDRCQUFTOUMsT0FBUUQsUUFBU0YscUJBRWpDeUMsS0FBSyw2NHNDQXBKa0IsV0FBbkJILFFBQU9wQyxVQUEwQyxXQUFsQm9DLFFBQU9uQyxRQUN4Q0EsT0FBT0QsUUFBVWtDLFdBRWpCYyw2QkFBTyxRQUFEQyxLQUFBQyw4QkFBQSxtQkFBQUMsK0JBQUEsU0FBQUEsK0JBQUFDLE1BQUFwRCxRQUFBcUQsOEJBQUFGLGtDQUFBbEQsT0FBQUQsUUFBQWtELCtVQ1hGSSxhQUNKLFNBQUFBLEVBQVlDLGdHQUFPQyxDQUFBQyxLQUFBSCxHQUNqQkcsS0FBS0YsTUFBUUEsRUFDYkUsS0FBS0MsU0FBVywyREFHVEMsR0FDUEYsS0FBS0MsU0FBU0UsS0FBS0Qsd0NBSWpCRSxFQUFPLElBQUlQLEVBQUssUUFDdEJPLEVBQUtDLFNBQVMsSUFBSVIsRUFBSyxZQUN2Qk8sRUFBS0MsU0FBUyxJQUFJUixFQUFLLFlBQ3ZCTyxFQUFLQyxTQUFTLElBQUlSLEVBQUssWUFDdkJPLEVBQUtDLFNBQVMsSUFBSVIsRUFBSyxZQUN2Qk8sRUFBS0MsU0FBUyxJQUFJUixFQUFLLFlBQ3ZCTyxFQUFLQyxTQUFTLElBQUlSLEVBQUssWUFDdkJPLEVBQUtDLFNBQVMsSUFBSVIsRUFBSyxZQUV2QixJQUFNUyxFQUFRLENBQ1pGLEdBWUZHLFFBQVFDLElBQUksTUFUWixTQUFTQyxFQUFTSCxHQUNoQixJQUFNL0IsRUFBSW1DLElBQVEsRUFBRSxFQUFHLElBQUssS0FDeEJqRSxFQUFJLEVBQ1I2RCxFQUFLSyxRQUFRLFNBQUFULEdBQ1gzQixFQUFFcUMsT0FBT25FLEVBQUksR0FBSUEsRUFBSSxHQUFJLElBQ3pCQSxHQUFLLEVBQ0xnRSxFQUFTUCxFQUFLRCxZQUlsQlEsQ0FBU0gsa0JDcENUOUQsRUFBQUQsUUFBQSxTQUFBQyxHQW9CQSxPQW5CQUEsRUFBQXFFLGtCQUNBckUsRUFBQXNFLFVBQUEsYUFDQXRFLEVBQUF1RSxNQUFBLEdBRUF2RSxFQUFBeUQsV0FBQXpELEVBQUF5RCxTQUFBLElBQ0E5QyxPQUFBQyxlQUFBWixFQUFBLFVBQ0FhLFlBQUEsRUFDQUMsSUFBQSxXQUNBLE9BQUFkLEVBQUFFLEtBR0FTLE9BQUFDLGVBQUFaLEVBQUEsTUFDQWEsWUFBQSxFQUNBQyxJQUFBLFdBQ0EsT0FBQWQsRUFBQUMsS0FHQUQsRUFBQXFFLGdCQUFBLEdBRUFyRSIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDEpO1xuIiwiLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQIFxcXFxcbi8vIOKUgiBSYXBoYcOrbCAyLjIuOCAtIEphdmFTY3JpcHQgVmVjdG9yIExpYnJhcnkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg4pSCIFxcXFxcbi8vIOKUnOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUpCBcXFxcXG4vLyDilIIgQ29weXJpZ2h0IMKpIDIwMDgtMjAxNiBEbWl0cnkgQmFyYW5vdnNraXkgKGh0dHA6Ly9yYXBoYWVsanMuY29tKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIOKUgiBcXFxcXG4vLyDilIIgQ29weXJpZ2h0IMKpIDIwMDgtMjAxNiBTZW5jaGEgTGFicyAoaHR0cDovL3NlbmNoYS5jb20pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIOKUgiBcXFxcXG4vLyDilJzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilKQgXFxcXFxuLy8g4pSCIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS9EbWl0cnlCYXJhbm92c2tpeS9yYXBoYWVsL2Jsb2IvbWFzdGVyL2xpY2Vuc2UudHh0KSBsaWNlbnNlLuKUgiBcXFxcXG4vLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJggXFxcXFxuXG4oZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJSYXBoYWVsXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIlJhcGhhZWxcIl0gPSBmYWN0b3J5KCk7XG59KSh3aW5kb3csIGZ1bmN0aW9uKCkge1xucmV0dXJuIC8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0aTogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubCA9IHRydWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4vKioqKioqLyBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4vKioqKioqLyBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuLyoqKioqKi8gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbi8qKioqKiovIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4vKioqKioqLyBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuLyoqKioqKi8gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4vKioqKioqLyBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4vKioqKioqLyBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbi8qKioqKiovIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuLyoqKioqKi8gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbi8qKioqKiovIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4vKioqKioqLyBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuLyoqKioqKi8gXHRcdHJldHVybiBucztcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuLyoqKioqKi8gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuLyoqKioqKi8gXHRcdHJldHVybiBnZXR0ZXI7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gXCIuL2Rldi9yYXBoYWVsLmFtZC5qc1wiKTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKHtcblxuLyoqKi8gXCIuL2Rldi9yYXBoYWVsLmFtZC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL2Rldi9yYXBoYWVsLmFtZC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5ldmFsKFwidmFyIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18sIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fOyEoX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXyA9IFtfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3JhcGhhZWwuY29yZSAqLyBcXFwiLi9kZXYvcmFwaGFlbC5jb3JlLmpzXFxcIiksIF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vcmFwaGFlbC5zdmcgKi8gXFxcIi4vZGV2L3JhcGhhZWwuc3ZnLmpzXFxcIiksIF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vcmFwaGFlbC52bWwgKi8gXFxcIi4vZGV2L3JhcGhhZWwudm1sLmpzXFxcIildLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyA9IChmdW5jdGlvbihSKSB7XFxuXFxuICAgIHJldHVybiBSO1xcblxcbn0pLmFwcGx5KGV4cG9ydHMsIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18pLFxcblxcdFxcdFxcdFxcdF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fICE9PSB1bmRlZmluZWQgJiYgKG1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18pKTsvLyMgc291cmNlVVJMPVttb2R1bGVdXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lMaTlrWlhZdmNtRndhR0ZsYkM1aGJXUXVhbk11YW5NaUxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTlTWVhCb1lXVnNMeTR2WkdWMkwzSmhjR2hoWld3dVlXMWtMbXB6UHpNMU5qUWlYU3dpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpWkdWbWFXNWxLRnRjSWk0dmNtRndhR0ZsYkM1amIzSmxYQ0lzSUZ3aUxpOXlZWEJvWVdWc0xuTjJaMXdpTENCY0lpNHZjbUZ3YUdGbGJDNTJiV3hjSWwwc0lHWjFibU4wYVc5dUtGSXBJSHRjYmx4dUlDQWdJSEpsZEhWeWJpQlNPMXh1WEc1OUtUc2lYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTSXNJbk52ZFhKalpWSnZiM1FpT2lJaWZRPT1cXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vLi9kZXYvcmFwaGFlbC5hbWQuanNcXG5cIik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vZGV2L3JhcGhhZWwuY29yZS5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9kZXYvcmFwaGFlbC5jb3JlLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5ldmFsKFwidmFyIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18sIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fOyEoX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXyA9IFtfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBldmUgKi8gXFxcIi4vbm9kZV9tb2R1bGVzL2V2ZS1yYXBoYWVsL2V2ZS5qc1xcXCIpXSwgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gPSAoZnVuY3Rpb24oZXZlKSB7XFxuXFxuICAgIC8qXFxcXFxcbiAgICAgKiBSYXBoYWVsXFxuICAgICBbIG1ldGhvZCBdXFxuICAgICAqKlxcbiAgICAgKiBDcmVhdGVzIGEgY2FudmFzIG9iamVjdCBvbiB3aGljaCB0byBkcmF3LlxcbiAgICAgKiBZb3UgbXVzdCBkbyB0aGlzIGZpcnN0LCBhcyBhbGwgZnV0dXJlIGNhbGxzIHRvIGRyYXdpbmcgbWV0aG9kc1xcbiAgICAgKiBmcm9tIHRoaXMgaW5zdGFuY2Ugd2lsbCBiZSBib3VuZCB0byB0aGlzIGNhbnZhcy5cXG4gICAgID4gUGFyYW1ldGVyc1xcbiAgICAgKipcXG4gICAgIC0gY29udGFpbmVyIChIVE1MRWxlbWVudHxzdHJpbmcpIERPTSBlbGVtZW50IG9yIGl0cyBJRCB3aGljaCBpcyBnb2luZyB0byBiZSBhIHBhcmVudCBmb3IgZHJhd2luZyBzdXJmYWNlXFxuICAgICAtIHdpZHRoIChudW1iZXIpXFxuICAgICAtIGhlaWdodCAobnVtYmVyKVxcbiAgICAgLSBjYWxsYmFjayAoZnVuY3Rpb24pICNvcHRpb25hbCBjYWxsYmFjayBmdW5jdGlvbiB3aGljaCBpcyBnb2luZyB0byBiZSBleGVjdXRlZCBpbiB0aGUgY29udGV4dCBvZiBuZXdseSBjcmVhdGVkIHBhcGVyXFxuICAgICAqIG9yXFxuICAgICAtIHggKG51bWJlcilcXG4gICAgIC0geSAobnVtYmVyKVxcbiAgICAgLSB3aWR0aCAobnVtYmVyKVxcbiAgICAgLSBoZWlnaHQgKG51bWJlcilcXG4gICAgIC0gY2FsbGJhY2sgKGZ1bmN0aW9uKSAjb3B0aW9uYWwgY2FsbGJhY2sgZnVuY3Rpb24gd2hpY2ggaXMgZ29pbmcgdG8gYmUgZXhlY3V0ZWQgaW4gdGhlIGNvbnRleHQgb2YgbmV3bHkgY3JlYXRlZCBwYXBlclxcbiAgICAgKiBvclxcbiAgICAgLSBhbGwgKGFycmF5KSAoZmlyc3QgMyBvciA0IGVsZW1lbnRzIGluIHRoZSBhcnJheSBhcmUgZXF1YWwgdG8gW2NvbnRhaW5lcklELCB3aWR0aCwgaGVpZ2h0XSBvciBbeCwgeSwgd2lkdGgsIGhlaWdodF0uIFRoZSByZXN0IGFyZSBlbGVtZW50IGRlc2NyaXB0aW9ucyBpbiBmb3JtYXQge3R5cGU6IHR5cGUsIDxhdHRyaWJ1dGVzPn0pLiBTZWUgQFBhcGVyLmFkZC5cXG4gICAgIC0gY2FsbGJhY2sgKGZ1bmN0aW9uKSAjb3B0aW9uYWwgY2FsbGJhY2sgZnVuY3Rpb24gd2hpY2ggaXMgZ29pbmcgdG8gYmUgZXhlY3V0ZWQgaW4gdGhlIGNvbnRleHQgb2YgbmV3bHkgY3JlYXRlZCBwYXBlclxcbiAgICAgKiBvclxcbiAgICAgLSBvblJlYWR5Q2FsbGJhY2sgKGZ1bmN0aW9uKSBmdW5jdGlvbiB0aGF0IGlzIGdvaW5nIHRvIGJlIGNhbGxlZCBvbiBET00gcmVhZHkgZXZlbnQuIFlvdSBjYW4gYWxzbyBzdWJzY3JpYmUgdG8gdGhpcyBldmVudCB2aWEgRXZl4oCZcyDigJxET01Mb2Fk4oCdIGV2ZW50LiBJbiB0aGlzIGNhc2UgbWV0aG9kIHJldHVybnMgYHVuZGVmaW5lZGAuXFxuICAgICA9IChvYmplY3QpIEBQYXBlclxcbiAgICAgPiBVc2FnZVxcbiAgICAgfCAvLyBFYWNoIG9mIHRoZSBmb2xsb3dpbmcgZXhhbXBsZXMgY3JlYXRlIGEgY2FudmFzXFxuICAgICB8IC8vIHRoYXQgaXMgMzIwcHggd2lkZSBieSAyMDBweCBoaWdoLlxcbiAgICAgfCAvLyBDYW52YXMgaXMgY3JlYXRlZCBhdCB0aGUgdmlld3BvcnTigJlzIDEwLDUwIGNvb3JkaW5hdGUuXFxuICAgICB8IHZhciBwYXBlciA9IFJhcGhhZWwoMTAsIDUwLCAzMjAsIDIwMCk7XFxuICAgICB8IC8vIENhbnZhcyBpcyBjcmVhdGVkIGF0IHRoZSB0b3AgbGVmdCBjb3JuZXIgb2YgdGhlICNub3RlcGFkIGVsZW1lbnRcXG4gICAgIHwgLy8gKG9yIGl0cyB0b3AgcmlnaHQgY29ybmVyIGluIGRpcj1cXFwicnRsXFxcIiBlbGVtZW50cylcXG4gICAgIHwgdmFyIHBhcGVyID0gUmFwaGFlbChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcXFwibm90ZXBhZFxcXCIpLCAzMjAsIDIwMCk7XFxuICAgICB8IC8vIFNhbWUgYXMgYWJvdmVcXG4gICAgIHwgdmFyIHBhcGVyID0gUmFwaGFlbChcXFwibm90ZXBhZFxcXCIsIDMyMCwgMjAwKTtcXG4gICAgIHwgLy8gSW1hZ2UgZHVtcFxcbiAgICAgfCB2YXIgc2V0ID0gUmFwaGFlbChbXFxcIm5vdGVwYWRcXFwiLCAzMjAsIDIwMCwge1xcbiAgICAgfCAgICAgdHlwZTogXFxcInJlY3RcXFwiLFxcbiAgICAgfCAgICAgeDogMTAsXFxuICAgICB8ICAgICB5OiAxMCxcXG4gICAgIHwgICAgIHdpZHRoOiAyNSxcXG4gICAgIHwgICAgIGhlaWdodDogMjUsXFxuICAgICB8ICAgICBzdHJva2U6IFxcXCIjZjAwXFxcIlxcbiAgICAgfCB9LCB7XFxuICAgICB8ICAgICB0eXBlOiBcXFwidGV4dFxcXCIsXFxuICAgICB8ICAgICB4OiAzMCxcXG4gICAgIHwgICAgIHk6IDQwLFxcbiAgICAgfCAgICAgdGV4dDogXFxcIkR1bXBcXFwiXFxuICAgICB8IH1dKTtcXG4gICAgXFxcXCovXFxuICAgIGZ1bmN0aW9uIFIoZmlyc3QpIHtcXG4gICAgICAgIGlmIChSLmlzKGZpcnN0LCBcXFwiZnVuY3Rpb25cXFwiKSkge1xcbiAgICAgICAgICAgIHJldHVybiBsb2FkZWQgPyBmaXJzdCgpIDogZXZlLm9uKFxcXCJyYXBoYWVsLkRPTWxvYWRcXFwiLCBmaXJzdCk7XFxuICAgICAgICB9IGVsc2UgaWYgKFIuaXMoZmlyc3QsIGFycmF5KSkge1xcbiAgICAgICAgICAgIHJldHVybiBSLl9lbmdpbmUuY3JlYXRlW2FwcGx5XShSLCBmaXJzdC5zcGxpY2UoMCwgMyArIFIuaXMoZmlyc3RbMF0sIG51KSkpLmFkZChmaXJzdCk7XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcXG4gICAgICAgICAgICBpZiAoUi5pcyhhcmdzW2FyZ3MubGVuZ3RoIC0gMV0sIFxcXCJmdW5jdGlvblxcXCIpKSB7XFxuICAgICAgICAgICAgICAgIHZhciBmID0gYXJncy5wb3AoKTtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvYWRlZCA/IGYuY2FsbChSLl9lbmdpbmUuY3JlYXRlW2FwcGx5XShSLCBhcmdzKSkgOiBldmUub24oXFxcInJhcGhhZWwuRE9NbG9hZFxcXCIsIGZ1bmN0aW9uICgpIHtcXG4gICAgICAgICAgICAgICAgICAgIGYuY2FsbChSLl9lbmdpbmUuY3JlYXRlW2FwcGx5XShSLCBhcmdzKSk7XFxuICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgIHJldHVybiBSLl9lbmdpbmUuY3JlYXRlW2FwcGx5XShSLCBhcmd1bWVudHMpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgfVxcbiAgICBSLnZlcnNpb24gPSBcXFwiMi4yLjBcXFwiO1xcbiAgICBSLmV2ZSA9IGV2ZTtcXG4gICAgdmFyIGxvYWRlZCxcXG4gICAgICAgIHNlcGFyYXRvciA9IC9bLCBdKy8sXFxuICAgICAgICBlbGVtZW50cyA9IHtjaXJjbGU6IDEsIHJlY3Q6IDEsIHBhdGg6IDEsIGVsbGlwc2U6IDEsIHRleHQ6IDEsIGltYWdlOiAxfSxcXG4gICAgICAgIGZvcm1hdHJnID0gL1xcXFx7KFxcXFxkKylcXFxcfS9nLFxcbiAgICAgICAgcHJvdG8gPSBcXFwicHJvdG90eXBlXFxcIixcXG4gICAgICAgIGhhcyA9IFxcXCJoYXNPd25Qcm9wZXJ0eVxcXCIsXFxuICAgICAgICBnID0ge1xcbiAgICAgICAgICAgIGRvYzogZG9jdW1lbnQsXFxuICAgICAgICAgICAgd2luOiB3aW5kb3dcXG4gICAgICAgIH0sXFxuICAgICAgICBvbGRSYXBoYWVsID0ge1xcbiAgICAgICAgICAgIHdhczogT2JqZWN0LnByb3RvdHlwZVtoYXNdLmNhbGwoZy53aW4sIFxcXCJSYXBoYWVsXFxcIiksXFxuICAgICAgICAgICAgaXM6IGcud2luLlJhcGhhZWxcXG4gICAgICAgIH0sXFxuICAgICAgICBQYXBlciA9IGZ1bmN0aW9uICgpIHtcXG4gICAgICAgICAgICAvKlxcXFxcXG4gICAgICAgICAgICAgKiBQYXBlci5jYVxcbiAgICAgICAgICAgICBbIHByb3BlcnR5IChvYmplY3QpIF1cXG4gICAgICAgICAgICAgKipcXG4gICAgICAgICAgICAgKiBTaG9ydGN1dCBmb3IgQFBhcGVyLmN1c3RvbUF0dHJpYnV0ZXNcXG4gICAgICAgICAgICBcXFxcKi9cXG4gICAgICAgICAgICAvKlxcXFxcXG4gICAgICAgICAgICAgKiBQYXBlci5jdXN0b21BdHRyaWJ1dGVzXFxuICAgICAgICAgICAgIFsgcHJvcGVydHkgKG9iamVjdCkgXVxcbiAgICAgICAgICAgICAqKlxcbiAgICAgICAgICAgICAqIElmIHlvdSBoYXZlIGEgc2V0IG9mIGF0dHJpYnV0ZXMgdGhhdCB5b3Ugd291bGQgbGlrZSB0byByZXByZXNlbnRcXG4gICAgICAgICAgICAgKiBhcyBhIGZ1bmN0aW9uIG9mIHNvbWUgbnVtYmVyIHlvdSBjYW4gZG8gaXQgZWFzaWx5IHdpdGggY3VzdG9tIGF0dHJpYnV0ZXM6XFxuICAgICAgICAgICAgID4gVXNhZ2VcXG4gICAgICAgICAgICAgfCBwYXBlci5jdXN0b21BdHRyaWJ1dGVzLmh1ZSA9IGZ1bmN0aW9uIChudW0pIHtcXG4gICAgICAgICAgICAgfCAgICAgbnVtID0gbnVtICUgMTtcXG4gICAgICAgICAgICAgfCAgICAgcmV0dXJuIHtmaWxsOiBcXFwiaHNiKFxcXCIgKyBudW0gKyBcXFwiLCAwLjc1LCAxKVxcXCJ9O1xcbiAgICAgICAgICAgICB8IH07XFxuICAgICAgICAgICAgIHwgLy8gQ3VzdG9tIGF0dHJpYnV0ZSDigJxodWXigJ0gd2lsbCBjaGFuZ2UgZmlsbFxcbiAgICAgICAgICAgICB8IC8vIHRvIGJlIGdpdmVuIGh1ZSB3aXRoIGZpeGVkIHNhdHVyYXRpb24gYW5kIGJyaWdodG5lc3MuXFxuICAgICAgICAgICAgIHwgLy8gTm93IHlvdSBjYW4gdXNlIGl0IGxpa2UgdGhpczpcXG4gICAgICAgICAgICAgfCB2YXIgYyA9IHBhcGVyLmNpcmNsZSgxMCwgMTAsIDEwKS5hdHRyKHtodWU6IC40NX0pO1xcbiAgICAgICAgICAgICB8IC8vIG9yIGV2ZW4gbGlrZSB0aGlzOlxcbiAgICAgICAgICAgICB8IGMuYW5pbWF0ZSh7aHVlOiAxfSwgMWUzKTtcXG4gICAgICAgICAgICAgfFxcbiAgICAgICAgICAgICB8IC8vIFlvdSBjb3VsZCBhbHNvIGNyZWF0ZSBjdXN0b20gYXR0cmlidXRlXFxuICAgICAgICAgICAgIHwgLy8gd2l0aCBtdWx0aXBsZSBwYXJhbWV0ZXJzOlxcbiAgICAgICAgICAgICB8IHBhcGVyLmN1c3RvbUF0dHJpYnV0ZXMuaHNiID0gZnVuY3Rpb24gKGgsIHMsIGIpIHtcXG4gICAgICAgICAgICAgfCAgICAgcmV0dXJuIHtmaWxsOiBcXFwiaHNiKFxcXCIgKyBbaCwgcywgYl0uam9pbihcXFwiLFxcXCIpICsgXFxcIilcXFwifTtcXG4gICAgICAgICAgICAgfCB9O1xcbiAgICAgICAgICAgICB8IGMuYXR0cih7aHNiOiBcXFwiMC41IC44IDFcXFwifSk7XFxuICAgICAgICAgICAgIHwgYy5hbmltYXRlKHtoc2I6IFsxLCAwLCAwLjVdfSwgMWUzKTtcXG4gICAgICAgICAgICBcXFxcKi9cXG4gICAgICAgICAgICB0aGlzLmNhID0gdGhpcy5jdXN0b21BdHRyaWJ1dGVzID0ge307XFxuICAgICAgICB9LFxcbiAgICAgICAgcGFwZXJwcm90byxcXG4gICAgICAgIGFwcGVuZENoaWxkID0gXFxcImFwcGVuZENoaWxkXFxcIixcXG4gICAgICAgIGFwcGx5ID0gXFxcImFwcGx5XFxcIixcXG4gICAgICAgIGNvbmNhdCA9IFxcXCJjb25jYXRcXFwiLFxcbiAgICAgICAgLy90YWtlbiBmcm9tIE1vZGVybml6ciB0b3VjaCB0ZXN0OiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9mZWF0dXJlLWRldGVjdHMvdG91Y2hldmVudHMuanMjTDQwXFxuICAgICAgICBzdXBwb3J0c1RvdWNoID0gKCdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdykgfHwgd2luZG93LlRvdWNoRXZlbnQgfHwgd2luZG93LkRvY3VtZW50VG91Y2ggJiYgZG9jdW1lbnQgaW5zdGFuY2VvZiBEb2N1bWVudFRvdWNoLFxcbiAgICAgICAgRSA9IFxcXCJcXFwiLFxcbiAgICAgICAgUyA9IFxcXCIgXFxcIixcXG4gICAgICAgIFN0ciA9IFN0cmluZyxcXG4gICAgICAgIHNwbGl0ID0gXFxcInNwbGl0XFxcIixcXG4gICAgICAgIGV2ZW50cyA9IFxcXCJjbGljayBkYmxjbGljayBtb3VzZWRvd24gbW91c2Vtb3ZlIG1vdXNlb3V0IG1vdXNlb3ZlciBtb3VzZXVwIHRvdWNoc3RhcnQgdG91Y2htb3ZlIHRvdWNoZW5kIHRvdWNoY2FuY2VsXFxcIltzcGxpdF0oUyksXFxuICAgICAgICB0b3VjaE1hcCA9IHtcXG4gICAgICAgICAgICBtb3VzZWRvd246IFxcXCJ0b3VjaHN0YXJ0XFxcIixcXG4gICAgICAgICAgICBtb3VzZW1vdmU6IFxcXCJ0b3VjaG1vdmVcXFwiLFxcbiAgICAgICAgICAgIG1vdXNldXA6IFxcXCJ0b3VjaGVuZFxcXCJcXG4gICAgICAgIH0sXFxuICAgICAgICBsb3dlckNhc2UgPSBTdHIucHJvdG90eXBlLnRvTG93ZXJDYXNlLFxcbiAgICAgICAgbWF0aCA9IE1hdGgsXFxuICAgICAgICBtbWF4ID0gbWF0aC5tYXgsXFxuICAgICAgICBtbWluID0gbWF0aC5taW4sXFxuICAgICAgICBhYnMgPSBtYXRoLmFicyxcXG4gICAgICAgIHBvdyA9IG1hdGgucG93LFxcbiAgICAgICAgUEkgPSBtYXRoLlBJLFxcbiAgICAgICAgbnUgPSBcXFwibnVtYmVyXFxcIixcXG4gICAgICAgIHN0cmluZyA9IFxcXCJzdHJpbmdcXFwiLFxcbiAgICAgICAgYXJyYXkgPSBcXFwiYXJyYXlcXFwiLFxcbiAgICAgICAgdG9TdHJpbmcgPSBcXFwidG9TdHJpbmdcXFwiLFxcbiAgICAgICAgZmlsbFN0cmluZyA9IFxcXCJmaWxsXFxcIixcXG4gICAgICAgIG9iamVjdFRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyxcXG4gICAgICAgIHBhcGVyID0ge30sXFxuICAgICAgICBwdXNoID0gXFxcInB1c2hcXFwiLFxcbiAgICAgICAgSVNVUkwgPSBSLl9JU1VSTCA9IC9edXJsXFxcXChbJ1xcXCJdPyguKz8pWydcXFwiXT9cXFxcKSQvaSxcXG4gICAgICAgIGNvbG91clJlZ0V4cCA9IC9eXFxcXHMqKCgjW2EtZlxcXFxkXXs2fSl8KCNbYS1mXFxcXGRdezN9KXxyZ2JhP1xcXFwoXFxcXHMqKFtcXFxcZFxcXFwuXSslP1xcXFxzKixcXFxccypbXFxcXGRcXFxcLl0rJT9cXFxccyosXFxcXHMqW1xcXFxkXFxcXC5dKyU/KD86XFxcXHMqLFxcXFxzKltcXFxcZFxcXFwuXSslPyk/KVxcXFxzKlxcXFwpfGhzYmE/XFxcXChcXFxccyooW1xcXFxkXFxcXC5dKyg/OmRlZ3xcXFxceGIwfCUpP1xcXFxzKixcXFxccypbXFxcXGRcXFxcLl0rJT9cXFxccyosXFxcXHMqW1xcXFxkXFxcXC5dKyg/OiU/XFxcXHMqLFxcXFxzKltcXFxcZFxcXFwuXSspPyklP1xcXFxzKlxcXFwpfGhzbGE/XFxcXChcXFxccyooW1xcXFxkXFxcXC5dKyg/OmRlZ3xcXFxceGIwfCUpP1xcXFxzKixcXFxccypbXFxcXGRcXFxcLl0rJT9cXFxccyosXFxcXHMqW1xcXFxkXFxcXC5dKyg/OiU/XFxcXHMqLFxcXFxzKltcXFxcZFxcXFwuXSspPyklP1xcXFxzKlxcXFwpKVxcXFxzKiQvaSxcXG4gICAgICAgIGlzbmFuID0ge1xcXCJOYU5cXFwiOiAxLCBcXFwiSW5maW5pdHlcXFwiOiAxLCBcXFwiLUluZmluaXR5XFxcIjogMX0sXFxuICAgICAgICBiZXppZXJyZyA9IC9eKD86Y3ViaWMtKT9iZXppZXJcXFxcKChbXixdKyksKFteLF0rKSwoW14sXSspLChbXlxcXFwpXSspXFxcXCkvLFxcbiAgICAgICAgcm91bmQgPSBtYXRoLnJvdW5kLFxcbiAgICAgICAgc2V0QXR0cmlidXRlID0gXFxcInNldEF0dHJpYnV0ZVxcXCIsXFxuICAgICAgICB0b0Zsb2F0ID0gcGFyc2VGbG9hdCxcXG4gICAgICAgIHRvSW50ID0gcGFyc2VJbnQsXFxuICAgICAgICB1cHBlckNhc2UgPSBTdHIucHJvdG90eXBlLnRvVXBwZXJDYXNlLFxcbiAgICAgICAgYXZhaWxhYmxlQXR0cnMgPSBSLl9hdmFpbGFibGVBdHRycyA9IHtcXG4gICAgICAgICAgICBcXFwiYXJyb3ctZW5kXFxcIjogXFxcIm5vbmVcXFwiLFxcbiAgICAgICAgICAgIFxcXCJhcnJvdy1zdGFydFxcXCI6IFxcXCJub25lXFxcIixcXG4gICAgICAgICAgICBibHVyOiAwLFxcbiAgICAgICAgICAgIFxcXCJjbGlwLXJlY3RcXFwiOiBcXFwiMCAwIDFlOSAxZTlcXFwiLFxcbiAgICAgICAgICAgIGN1cnNvcjogXFxcImRlZmF1bHRcXFwiLFxcbiAgICAgICAgICAgIGN4OiAwLFxcbiAgICAgICAgICAgIGN5OiAwLFxcbiAgICAgICAgICAgIGZpbGw6IFxcXCIjZmZmXFxcIixcXG4gICAgICAgICAgICBcXFwiZmlsbC1vcGFjaXR5XFxcIjogMSxcXG4gICAgICAgICAgICBmb250OiAnMTBweCBcXFwiQXJpYWxcXFwiJyxcXG4gICAgICAgICAgICBcXFwiZm9udC1mYW1pbHlcXFwiOiAnXFxcIkFyaWFsXFxcIicsXFxuICAgICAgICAgICAgXFxcImZvbnQtc2l6ZVxcXCI6IFxcXCIxMFxcXCIsXFxuICAgICAgICAgICAgXFxcImZvbnQtc3R5bGVcXFwiOiBcXFwibm9ybWFsXFxcIixcXG4gICAgICAgICAgICBcXFwiZm9udC13ZWlnaHRcXFwiOiA0MDAsXFxuICAgICAgICAgICAgZ3JhZGllbnQ6IDAsXFxuICAgICAgICAgICAgaGVpZ2h0OiAwLFxcbiAgICAgICAgICAgIGhyZWY6IFxcXCJodHRwOi8vcmFwaGFlbGpzLmNvbS9cXFwiLFxcbiAgICAgICAgICAgIFxcXCJsZXR0ZXItc3BhY2luZ1xcXCI6IDAsXFxuICAgICAgICAgICAgb3BhY2l0eTogMSxcXG4gICAgICAgICAgICBwYXRoOiBcXFwiTTAsMFxcXCIsXFxuICAgICAgICAgICAgcjogMCxcXG4gICAgICAgICAgICByeDogMCxcXG4gICAgICAgICAgICByeTogMCxcXG4gICAgICAgICAgICBzcmM6IFxcXCJcXFwiLFxcbiAgICAgICAgICAgIHN0cm9rZTogXFxcIiMwMDBcXFwiLFxcbiAgICAgICAgICAgIFxcXCJzdHJva2UtZGFzaGFycmF5XFxcIjogXFxcIlxcXCIsXFxuICAgICAgICAgICAgXFxcInN0cm9rZS1saW5lY2FwXFxcIjogXFxcImJ1dHRcXFwiLFxcbiAgICAgICAgICAgIFxcXCJzdHJva2UtbGluZWpvaW5cXFwiOiBcXFwiYnV0dFxcXCIsXFxuICAgICAgICAgICAgXFxcInN0cm9rZS1taXRlcmxpbWl0XFxcIjogMCxcXG4gICAgICAgICAgICBcXFwic3Ryb2tlLW9wYWNpdHlcXFwiOiAxLFxcbiAgICAgICAgICAgIFxcXCJzdHJva2Utd2lkdGhcXFwiOiAxLFxcbiAgICAgICAgICAgIHRhcmdldDogXFxcIl9ibGFua1xcXCIsXFxuICAgICAgICAgICAgXFxcInRleHQtYW5jaG9yXFxcIjogXFxcIm1pZGRsZVxcXCIsXFxuICAgICAgICAgICAgdGl0bGU6IFxcXCJSYXBoYWVsXFxcIixcXG4gICAgICAgICAgICB0cmFuc2Zvcm06IFxcXCJcXFwiLFxcbiAgICAgICAgICAgIHdpZHRoOiAwLFxcbiAgICAgICAgICAgIHg6IDAsXFxuICAgICAgICAgICAgeTogMCxcXG4gICAgICAgICAgICBcXFwiY2xhc3NcXFwiOiBcXFwiXFxcIlxcbiAgICAgICAgfSxcXG4gICAgICAgIGF2YWlsYWJsZUFuaW1BdHRycyA9IFIuX2F2YWlsYWJsZUFuaW1BdHRycyA9IHtcXG4gICAgICAgICAgICBibHVyOiBudSxcXG4gICAgICAgICAgICBcXFwiY2xpcC1yZWN0XFxcIjogXFxcImNzdlxcXCIsXFxuICAgICAgICAgICAgY3g6IG51LFxcbiAgICAgICAgICAgIGN5OiBudSxcXG4gICAgICAgICAgICBmaWxsOiBcXFwiY29sb3VyXFxcIixcXG4gICAgICAgICAgICBcXFwiZmlsbC1vcGFjaXR5XFxcIjogbnUsXFxuICAgICAgICAgICAgXFxcImZvbnQtc2l6ZVxcXCI6IG51LFxcbiAgICAgICAgICAgIGhlaWdodDogbnUsXFxuICAgICAgICAgICAgb3BhY2l0eTogbnUsXFxuICAgICAgICAgICAgcGF0aDogXFxcInBhdGhcXFwiLFxcbiAgICAgICAgICAgIHI6IG51LFxcbiAgICAgICAgICAgIHJ4OiBudSxcXG4gICAgICAgICAgICByeTogbnUsXFxuICAgICAgICAgICAgc3Ryb2tlOiBcXFwiY29sb3VyXFxcIixcXG4gICAgICAgICAgICBcXFwic3Ryb2tlLW9wYWNpdHlcXFwiOiBudSxcXG4gICAgICAgICAgICBcXFwic3Ryb2tlLXdpZHRoXFxcIjogbnUsXFxuICAgICAgICAgICAgdHJhbnNmb3JtOiBcXFwidHJhbnNmb3JtXFxcIixcXG4gICAgICAgICAgICB3aWR0aDogbnUsXFxuICAgICAgICAgICAgeDogbnUsXFxuICAgICAgICAgICAgeTogbnVcXG4gICAgICAgIH0sXFxuICAgICAgICB3aGl0ZXNwYWNlID0gL1tcXFxceDA5XFxcXHgwYVxcXFx4MGJcXFxceDBjXFxcXHgwZFxcXFx4MjBcXFxceGEwXFxcXHUxNjgwXFxcXHUxODBlXFxcXHUyMDAwXFxcXHUyMDAxXFxcXHUyMDAyXFxcXHUyMDAzXFxcXHUyMDA0XFxcXHUyMDA1XFxcXHUyMDA2XFxcXHUyMDA3XFxcXHUyMDA4XFxcXHUyMDA5XFxcXHUyMDBhXFxcXHUyMDJmXFxcXHUyMDVmXFxcXHUzMDAwXFxcXHUyMDI4XFxcXHUyMDI5XS9nLFxcbiAgICAgICAgY29tbWFTcGFjZXMgPSAvW1xcXFx4MDlcXFxceDBhXFxcXHgwYlxcXFx4MGNcXFxceDBkXFxcXHgyMFxcXFx4YTBcXFxcdTE2ODBcXFxcdTE4MGVcXFxcdTIwMDBcXFxcdTIwMDFcXFxcdTIwMDJcXFxcdTIwMDNcXFxcdTIwMDRcXFxcdTIwMDVcXFxcdTIwMDZcXFxcdTIwMDdcXFxcdTIwMDhcXFxcdTIwMDlcXFxcdTIwMGFcXFxcdTIwMmZcXFxcdTIwNWZcXFxcdTMwMDBcXFxcdTIwMjhcXFxcdTIwMjldKixbXFxcXHgwOVxcXFx4MGFcXFxceDBiXFxcXHgwY1xcXFx4MGRcXFxceDIwXFxcXHhhMFxcXFx1MTY4MFxcXFx1MTgwZVxcXFx1MjAwMFxcXFx1MjAwMVxcXFx1MjAwMlxcXFx1MjAwM1xcXFx1MjAwNFxcXFx1MjAwNVxcXFx1MjAwNlxcXFx1MjAwN1xcXFx1MjAwOFxcXFx1MjAwOVxcXFx1MjAwYVxcXFx1MjAyZlxcXFx1MjA1ZlxcXFx1MzAwMFxcXFx1MjAyOFxcXFx1MjAyOV0qLyxcXG4gICAgICAgIGhzcmcgPSB7aHM6IDEsIHJnOiAxfSxcXG4gICAgICAgIHAycyA9IC8sPyhbYWNobG1xcnN0dnh6XSksPy9naSxcXG4gICAgICAgIHBhdGhDb21tYW5kID0gLyhbYWNobG1ycXN0dnpdKVtcXFxceDA5XFxcXHgwYVxcXFx4MGJcXFxceDBjXFxcXHgwZFxcXFx4MjBcXFxceGEwXFxcXHUxNjgwXFxcXHUxODBlXFxcXHUyMDAwXFxcXHUyMDAxXFxcXHUyMDAyXFxcXHUyMDAzXFxcXHUyMDA0XFxcXHUyMDA1XFxcXHUyMDA2XFxcXHUyMDA3XFxcXHUyMDA4XFxcXHUyMDA5XFxcXHUyMDBhXFxcXHUyMDJmXFxcXHUyMDVmXFxcXHUzMDAwXFxcXHUyMDI4XFxcXHUyMDI5LF0qKCgtP1xcXFxkKlxcXFwuP1xcXFxkKig/OmVbXFxcXC0rXT9cXFxcZCspP1tcXFxceDA5XFxcXHgwYVxcXFx4MGJcXFxceDBjXFxcXHgwZFxcXFx4MjBcXFxceGEwXFxcXHUxNjgwXFxcXHUxODBlXFxcXHUyMDAwXFxcXHUyMDAxXFxcXHUyMDAyXFxcXHUyMDAzXFxcXHUyMDA0XFxcXHUyMDA1XFxcXHUyMDA2XFxcXHUyMDA3XFxcXHUyMDA4XFxcXHUyMDA5XFxcXHUyMDBhXFxcXHUyMDJmXFxcXHUyMDVmXFxcXHUzMDAwXFxcXHUyMDI4XFxcXHUyMDI5XSosP1tcXFxceDA5XFxcXHgwYVxcXFx4MGJcXFxceDBjXFxcXHgwZFxcXFx4MjBcXFxceGEwXFxcXHUxNjgwXFxcXHUxODBlXFxcXHUyMDAwXFxcXHUyMDAxXFxcXHUyMDAyXFxcXHUyMDAzXFxcXHUyMDA0XFxcXHUyMDA1XFxcXHUyMDA2XFxcXHUyMDA3XFxcXHUyMDA4XFxcXHUyMDA5XFxcXHUyMDBhXFxcXHUyMDJmXFxcXHUyMDVmXFxcXHUzMDAwXFxcXHUyMDI4XFxcXHUyMDI5XSopKykvaWcsXFxuICAgICAgICB0Q29tbWFuZCA9IC8oW3JzdG1dKVtcXFxceDA5XFxcXHgwYVxcXFx4MGJcXFxceDBjXFxcXHgwZFxcXFx4MjBcXFxceGEwXFxcXHUxNjgwXFxcXHUxODBlXFxcXHUyMDAwXFxcXHUyMDAxXFxcXHUyMDAyXFxcXHUyMDAzXFxcXHUyMDA0XFxcXHUyMDA1XFxcXHUyMDA2XFxcXHUyMDA3XFxcXHUyMDA4XFxcXHUyMDA5XFxcXHUyMDBhXFxcXHUyMDJmXFxcXHUyMDVmXFxcXHUzMDAwXFxcXHUyMDI4XFxcXHUyMDI5LF0qKCgtP1xcXFxkKlxcXFwuP1xcXFxkKig/OmVbXFxcXC0rXT9cXFxcZCspP1tcXFxceDA5XFxcXHgwYVxcXFx4MGJcXFxceDBjXFxcXHgwZFxcXFx4MjBcXFxceGEwXFxcXHUxNjgwXFxcXHUxODBlXFxcXHUyMDAwXFxcXHUyMDAxXFxcXHUyMDAyXFxcXHUyMDAzXFxcXHUyMDA0XFxcXHUyMDA1XFxcXHUyMDA2XFxcXHUyMDA3XFxcXHUyMDA4XFxcXHUyMDA5XFxcXHUyMDBhXFxcXHUyMDJmXFxcXHUyMDVmXFxcXHUzMDAwXFxcXHUyMDI4XFxcXHUyMDI5XSosP1tcXFxceDA5XFxcXHgwYVxcXFx4MGJcXFxceDBjXFxcXHgwZFxcXFx4MjBcXFxceGEwXFxcXHUxNjgwXFxcXHUxODBlXFxcXHUyMDAwXFxcXHUyMDAxXFxcXHUyMDAyXFxcXHUyMDAzXFxcXHUyMDA0XFxcXHUyMDA1XFxcXHUyMDA2XFxcXHUyMDA3XFxcXHUyMDA4XFxcXHUyMDA5XFxcXHUyMDBhXFxcXHUyMDJmXFxcXHUyMDVmXFxcXHUzMDAwXFxcXHUyMDI4XFxcXHUyMDI5XSopKykvaWcsXFxuICAgICAgICBwYXRoVmFsdWVzID0gLygtP1xcXFxkKlxcXFwuP1xcXFxkKig/OmVbXFxcXC0rXT9cXFxcZCspPylbXFxcXHgwOVxcXFx4MGFcXFxceDBiXFxcXHgwY1xcXFx4MGRcXFxceDIwXFxcXHhhMFxcXFx1MTY4MFxcXFx1MTgwZVxcXFx1MjAwMFxcXFx1MjAwMVxcXFx1MjAwMlxcXFx1MjAwM1xcXFx1MjAwNFxcXFx1MjAwNVxcXFx1MjAwNlxcXFx1MjAwN1xcXFx1MjAwOFxcXFx1MjAwOVxcXFx1MjAwYVxcXFx1MjAyZlxcXFx1MjA1ZlxcXFx1MzAwMFxcXFx1MjAyOFxcXFx1MjAyOV0qLD9bXFxcXHgwOVxcXFx4MGFcXFxceDBiXFxcXHgwY1xcXFx4MGRcXFxceDIwXFxcXHhhMFxcXFx1MTY4MFxcXFx1MTgwZVxcXFx1MjAwMFxcXFx1MjAwMVxcXFx1MjAwMlxcXFx1MjAwM1xcXFx1MjAwNFxcXFx1MjAwNVxcXFx1MjAwNlxcXFx1MjAwN1xcXFx1MjAwOFxcXFx1MjAwOVxcXFx1MjAwYVxcXFx1MjAyZlxcXFx1MjA1ZlxcXFx1MzAwMFxcXFx1MjAyOFxcXFx1MjAyOV0qL2lnLFxcbiAgICAgICAgcmFkaWFsX2dyYWRpZW50ID0gUi5fcmFkaWFsX2dyYWRpZW50ID0gL15yKD86XFxcXCgoW14sXSs/KVtcXFxceDA5XFxcXHgwYVxcXFx4MGJcXFxceDBjXFxcXHgwZFxcXFx4MjBcXFxceGEwXFxcXHUxNjgwXFxcXHUxODBlXFxcXHUyMDAwXFxcXHUyMDAxXFxcXHUyMDAyXFxcXHUyMDAzXFxcXHUyMDA0XFxcXHUyMDA1XFxcXHUyMDA2XFxcXHUyMDA3XFxcXHUyMDA4XFxcXHUyMDA5XFxcXHUyMDBhXFxcXHUyMDJmXFxcXHUyMDVmXFxcXHUzMDAwXFxcXHUyMDI4XFxcXHUyMDI5XSosW1xcXFx4MDlcXFxceDBhXFxcXHgwYlxcXFx4MGNcXFxceDBkXFxcXHgyMFxcXFx4YTBcXFxcdTE2ODBcXFxcdTE4MGVcXFxcdTIwMDBcXFxcdTIwMDFcXFxcdTIwMDJcXFxcdTIwMDNcXFxcdTIwMDRcXFxcdTIwMDVcXFxcdTIwMDZcXFxcdTIwMDdcXFxcdTIwMDhcXFxcdTIwMDlcXFxcdTIwMGFcXFxcdTIwMmZcXFxcdTIwNWZcXFxcdTMwMDBcXFxcdTIwMjhcXFxcdTIwMjldKihbXlxcXFwpXSs/KVxcXFwpKT8vLFxcbiAgICAgICAgZWxkYXRhID0ge30sXFxuICAgICAgICBzb3J0QnlLZXkgPSBmdW5jdGlvbiAoYSwgYikge1xcbiAgICAgICAgICAgIHJldHVybiBhLmtleSAtIGIua2V5O1xcbiAgICAgICAgfSxcXG4gICAgICAgIHNvcnRCeU51bWJlciA9IGZ1bmN0aW9uIChhLCBiKSB7XFxuICAgICAgICAgICAgcmV0dXJuIHRvRmxvYXQoYSkgLSB0b0Zsb2F0KGIpO1xcbiAgICAgICAgfSxcXG4gICAgICAgIGZ1biA9IGZ1bmN0aW9uICgpIHt9LFxcbiAgICAgICAgcGlwZSA9IGZ1bmN0aW9uICh4KSB7XFxuICAgICAgICAgICAgcmV0dXJuIHg7XFxuICAgICAgICB9LFxcbiAgICAgICAgcmVjdFBhdGggPSBSLl9yZWN0UGF0aCA9IGZ1bmN0aW9uICh4LCB5LCB3LCBoLCByKSB7XFxuICAgICAgICAgICAgaWYgKHIpIHtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtbXFxcIk1cXFwiLCB4ICsgciwgeV0sIFtcXFwibFxcXCIsIHcgLSByICogMiwgMF0sIFtcXFwiYVxcXCIsIHIsIHIsIDAsIDAsIDEsIHIsIHJdLCBbXFxcImxcXFwiLCAwLCBoIC0gciAqIDJdLCBbXFxcImFcXFwiLCByLCByLCAwLCAwLCAxLCAtciwgcl0sIFtcXFwibFxcXCIsIHIgKiAyIC0gdywgMF0sIFtcXFwiYVxcXCIsIHIsIHIsIDAsIDAsIDEsIC1yLCAtcl0sIFtcXFwibFxcXCIsIDAsIHIgKiAyIC0gaF0sIFtcXFwiYVxcXCIsIHIsIHIsIDAsIDAsIDEsIHIsIC1yXSwgW1xcXCJ6XFxcIl1dO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICByZXR1cm4gW1tcXFwiTVxcXCIsIHgsIHldLCBbXFxcImxcXFwiLCB3LCAwXSwgW1xcXCJsXFxcIiwgMCwgaF0sIFtcXFwibFxcXCIsIC13LCAwXSwgW1xcXCJ6XFxcIl1dO1xcbiAgICAgICAgfSxcXG4gICAgICAgIGVsbGlwc2VQYXRoID0gZnVuY3Rpb24gKHgsIHksIHJ4LCByeSkge1xcbiAgICAgICAgICAgIGlmIChyeSA9PSBudWxsKSB7XFxuICAgICAgICAgICAgICAgIHJ5ID0gcng7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIHJldHVybiBbW1xcXCJNXFxcIiwgeCwgeV0sIFtcXFwibVxcXCIsIDAsIC1yeV0sIFtcXFwiYVxcXCIsIHJ4LCByeSwgMCwgMSwgMSwgMCwgMiAqIHJ5XSwgW1xcXCJhXFxcIiwgcngsIHJ5LCAwLCAxLCAxLCAwLCAtMiAqIHJ5XSwgW1xcXCJ6XFxcIl1dO1xcbiAgICAgICAgfSxcXG4gICAgICAgIGdldFBhdGggPSBSLl9nZXRQYXRoID0ge1xcbiAgICAgICAgICAgIHBhdGg6IGZ1bmN0aW9uIChlbCkge1xcbiAgICAgICAgICAgICAgICByZXR1cm4gZWwuYXR0cihcXFwicGF0aFxcXCIpO1xcbiAgICAgICAgICAgIH0sXFxuICAgICAgICAgICAgY2lyY2xlOiBmdW5jdGlvbiAoZWwpIHtcXG4gICAgICAgICAgICAgICAgdmFyIGEgPSBlbC5hdHRycztcXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsbGlwc2VQYXRoKGEuY3gsIGEuY3ksIGEucik7XFxuICAgICAgICAgICAgfSxcXG4gICAgICAgICAgICBlbGxpcHNlOiBmdW5jdGlvbiAoZWwpIHtcXG4gICAgICAgICAgICAgICAgdmFyIGEgPSBlbC5hdHRycztcXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsbGlwc2VQYXRoKGEuY3gsIGEuY3ksIGEucngsIGEucnkpO1xcbiAgICAgICAgICAgIH0sXFxuICAgICAgICAgICAgcmVjdDogZnVuY3Rpb24gKGVsKSB7XFxuICAgICAgICAgICAgICAgIHZhciBhID0gZWwuYXR0cnM7XFxuICAgICAgICAgICAgICAgIHJldHVybiByZWN0UGF0aChhLngsIGEueSwgYS53aWR0aCwgYS5oZWlnaHQsIGEucik7XFxuICAgICAgICAgICAgfSxcXG4gICAgICAgICAgICBpbWFnZTogZnVuY3Rpb24gKGVsKSB7XFxuICAgICAgICAgICAgICAgIHZhciBhID0gZWwuYXR0cnM7XFxuICAgICAgICAgICAgICAgIHJldHVybiByZWN0UGF0aChhLngsIGEueSwgYS53aWR0aCwgYS5oZWlnaHQpO1xcbiAgICAgICAgICAgIH0sXFxuICAgICAgICAgICAgdGV4dDogZnVuY3Rpb24gKGVsKSB7XFxuICAgICAgICAgICAgICAgIHZhciBiYm94ID0gZWwuX2dldEJCb3goKTtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlY3RQYXRoKGJib3gueCwgYmJveC55LCBiYm94LndpZHRoLCBiYm94LmhlaWdodCk7XFxuICAgICAgICAgICAgfSxcXG4gICAgICAgICAgICBzZXQgOiBmdW5jdGlvbihlbCkge1xcbiAgICAgICAgICAgICAgICB2YXIgYmJveCA9IGVsLl9nZXRCQm94KCk7XFxuICAgICAgICAgICAgICAgIHJldHVybiByZWN0UGF0aChiYm94LngsIGJib3gueSwgYmJveC53aWR0aCwgYmJveC5oZWlnaHQpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0sXFxuICAgICAgICAvKlxcXFxcXG4gICAgICAgICAqIFJhcGhhZWwubWFwUGF0aFxcbiAgICAgICAgIFsgbWV0aG9kIF1cXG4gICAgICAgICAqKlxcbiAgICAgICAgICogVHJhbnNmb3JtIHRoZSBwYXRoIHN0cmluZyB3aXRoIGdpdmVuIG1hdHJpeC5cXG4gICAgICAgICA+IFBhcmFtZXRlcnNcXG4gICAgICAgICAtIHBhdGggKHN0cmluZykgcGF0aCBzdHJpbmdcXG4gICAgICAgICAtIG1hdHJpeCAob2JqZWN0KSBzZWUgQE1hdHJpeFxcbiAgICAgICAgID0gKHN0cmluZykgdHJhbnNmb3JtZWQgcGF0aCBzdHJpbmdcXG4gICAgICAgIFxcXFwqL1xcbiAgICAgICAgbWFwUGF0aCA9IFIubWFwUGF0aCA9IGZ1bmN0aW9uIChwYXRoLCBtYXRyaXgpIHtcXG4gICAgICAgICAgICBpZiAoIW1hdHJpeCkge1xcbiAgICAgICAgICAgICAgICByZXR1cm4gcGF0aDtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgdmFyIHgsIHksIGksIGosIGlpLCBqaiwgcGF0aGk7XFxuICAgICAgICAgICAgcGF0aCA9IHBhdGgyY3VydmUocGF0aCk7XFxuICAgICAgICAgICAgZm9yIChpID0gMCwgaWkgPSBwYXRoLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcXG4gICAgICAgICAgICAgICAgcGF0aGkgPSBwYXRoW2ldO1xcbiAgICAgICAgICAgICAgICBmb3IgKGogPSAxLCBqaiA9IHBhdGhpLmxlbmd0aDsgaiA8IGpqOyBqICs9IDIpIHtcXG4gICAgICAgICAgICAgICAgICAgIHggPSBtYXRyaXgueChwYXRoaVtqXSwgcGF0aGlbaiArIDFdKTtcXG4gICAgICAgICAgICAgICAgICAgIHkgPSBtYXRyaXgueShwYXRoaVtqXSwgcGF0aGlbaiArIDFdKTtcXG4gICAgICAgICAgICAgICAgICAgIHBhdGhpW2pdID0geDtcXG4gICAgICAgICAgICAgICAgICAgIHBhdGhpW2ogKyAxXSA9IHk7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgcmV0dXJuIHBhdGg7XFxuICAgICAgICB9O1xcblxcbiAgICBSLl9nID0gZztcXG4gICAgLypcXFxcXFxuICAgICAqIFJhcGhhZWwudHlwZVxcbiAgICAgWyBwcm9wZXJ0eSAoc3RyaW5nKSBdXFxuICAgICAqKlxcbiAgICAgKiBDYW4gYmUg4oCcU1ZH4oCdLCDigJxWTUzigJ0gb3IgZW1wdHksIGRlcGVuZGluZyBvbiBicm93c2VyIHN1cHBvcnQuXFxuICAgIFxcXFwqL1xcbiAgICBSLnR5cGUgPSAoZy53aW4uU1ZHQW5nbGUgfHwgZy5kb2MuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZShcXFwiaHR0cDovL3d3dy53My5vcmcvVFIvU1ZHMTEvZmVhdHVyZSNCYXNpY1N0cnVjdHVyZVxcXCIsIFxcXCIxLjFcXFwiKSA/IFxcXCJTVkdcXFwiIDogXFxcIlZNTFxcXCIpO1xcbiAgICBpZiAoUi50eXBlID09IFxcXCJWTUxcXFwiKSB7XFxuICAgICAgICB2YXIgZCA9IGcuZG9jLmNyZWF0ZUVsZW1lbnQoXFxcImRpdlxcXCIpLFxcbiAgICAgICAgICAgIGI7XFxuICAgICAgICBkLmlubmVySFRNTCA9ICc8djpzaGFwZSBhZGo9XFxcIjFcXFwiLz4nO1xcbiAgICAgICAgYiA9IGQuZmlyc3RDaGlsZDtcXG4gICAgICAgIGIuc3R5bGUuYmVoYXZpb3IgPSBcXFwidXJsKCNkZWZhdWx0I1ZNTClcXFwiO1xcbiAgICAgICAgaWYgKCEoYiAmJiB0eXBlb2YgYi5hZGogPT0gXFxcIm9iamVjdFxcXCIpKSB7XFxuICAgICAgICAgICAgcmV0dXJuIChSLnR5cGUgPSBFKTtcXG4gICAgICAgIH1cXG4gICAgICAgIGQgPSBudWxsO1xcbiAgICB9XFxuICAgIC8qXFxcXFxcbiAgICAgKiBSYXBoYWVsLnN2Z1xcbiAgICAgWyBwcm9wZXJ0eSAoYm9vbGVhbikgXVxcbiAgICAgKipcXG4gICAgICogYHRydWVgIGlmIGJyb3dzZXIgc3VwcG9ydHMgU1ZHLlxcbiAgICBcXFxcKi9cXG4gICAgLypcXFxcXFxuICAgICAqIFJhcGhhZWwudm1sXFxuICAgICBbIHByb3BlcnR5IChib29sZWFuKSBdXFxuICAgICAqKlxcbiAgICAgKiBgdHJ1ZWAgaWYgYnJvd3NlciBzdXBwb3J0cyBWTUwuXFxuICAgIFxcXFwqL1xcbiAgICBSLnN2ZyA9ICEoUi52bWwgPSBSLnR5cGUgPT0gXFxcIlZNTFxcXCIpO1xcbiAgICBSLl9QYXBlciA9IFBhcGVyO1xcbiAgICAvKlxcXFxcXG4gICAgICogUmFwaGFlbC5mblxcbiAgICAgWyBwcm9wZXJ0eSAob2JqZWN0KSBdXFxuICAgICAqKlxcbiAgICAgKiBZb3UgY2FuIGFkZCB5b3VyIG93biBtZXRob2QgdG8gdGhlIGNhbnZhcy4gRm9yIGV4YW1wbGUgaWYgeW91IHdhbnQgdG8gZHJhdyBhIHBpZSBjaGFydCxcXG4gICAgICogeW91IGNhbiBjcmVhdGUgeW91ciBvd24gcGllIGNoYXJ0IGZ1bmN0aW9uIGFuZCBzaGlwIGl0IGFzIGEgUmFwaGHDq2wgcGx1Z2luLiBUbyBkbyB0aGlzXFxuICAgICAqIHlvdSBuZWVkIHRvIGV4dGVuZCB0aGUgYFJhcGhhZWwuZm5gIG9iamVjdC4gWW91IHNob3VsZCBtb2RpZnkgdGhlIGBmbmAgb2JqZWN0IGJlZm9yZSBhXFxuICAgICAqIFJhcGhhw6tsIGluc3RhbmNlIGlzIGNyZWF0ZWQsIG90aGVyd2lzZSBpdCB3aWxsIHRha2Ugbm8gZWZmZWN0LiBQbGVhc2Ugbm90ZSB0aGF0IHRoZVxcbiAgICAgKiBhYmlsaXR5IGZvciBuYW1lc3BhY2VkIHBsdWdpbnMgd2FzIHJlbW92ZWQgaW4gUmFwaGFlbCAyLjAuIEl0IGlzIHVwIHRvIHRoZSBwbHVnaW4gdG9cXG4gICAgICogZW5zdXJlIGFueSBuYW1lc3BhY2luZyBlbnN1cmVzIHByb3BlciBjb250ZXh0LlxcbiAgICAgPiBVc2FnZVxcbiAgICAgfCBSYXBoYWVsLmZuLmFycm93ID0gZnVuY3Rpb24gKHgxLCB5MSwgeDIsIHkyLCBzaXplKSB7XFxuICAgICB8ICAgICByZXR1cm4gdGhpcy5wYXRoKCAuLi4gKTtcXG4gICAgIHwgfTtcXG4gICAgIHwgLy8gb3IgY3JlYXRlIG5hbWVzcGFjZVxcbiAgICAgfCBSYXBoYWVsLmZuLm15c3R1ZmYgPSB7XFxuICAgICB8ICAgICBhcnJvdzogZnVuY3Rpb24gKCkge+KApn0sXFxuICAgICB8ICAgICBzdGFyOiBmdW5jdGlvbiAoKSB74oCmfSxcXG4gICAgIHwgICAgIC8vIGV0Y+KAplxcbiAgICAgfCB9O1xcbiAgICAgfCB2YXIgcGFwZXIgPSBSYXBoYWVsKDEwLCAxMCwgNjMwLCA0ODApO1xcbiAgICAgfCAvLyB0aGVuIHVzZSBpdFxcbiAgICAgfCBwYXBlci5hcnJvdygxMCwgMTAsIDMwLCAzMCwgNSkuYXR0cih7ZmlsbDogXFxcIiNmMDBcXFwifSk7XFxuICAgICB8IHBhcGVyLm15c3R1ZmYuYXJyb3coKTtcXG4gICAgIHwgcGFwZXIubXlzdHVmZi5zdGFyKCk7XFxuICAgIFxcXFwqL1xcbiAgICBSLmZuID0gcGFwZXJwcm90byA9IFBhcGVyLnByb3RvdHlwZSA9IFIucHJvdG90eXBlO1xcbiAgICBSLl9pZCA9IDA7XFxuICAgIC8qXFxcXFxcbiAgICAgKiBSYXBoYWVsLmlzXFxuICAgICBbIG1ldGhvZCBdXFxuICAgICAqKlxcbiAgICAgKiBIYW5kZnVsIG9mIHJlcGxhY2VtZW50cyBmb3IgYHR5cGVvZmAgb3BlcmF0b3IuXFxuICAgICA+IFBhcmFtZXRlcnNcXG4gICAgIC0gbyAo4oCmKSBhbnkgb2JqZWN0IG9yIHByaW1pdGl2ZVxcbiAgICAgLSB0eXBlIChzdHJpbmcpIG5hbWUgb2YgdGhlIHR5cGUsIGkuZS4g4oCcc3RyaW5n4oCdLCDigJxmdW5jdGlvbuKAnSwg4oCcbnVtYmVy4oCdLCBldGMuXFxuICAgICA9IChib29sZWFuKSBpcyBnaXZlbiB2YWx1ZSBpcyBvZiBnaXZlbiB0eXBlXFxuICAgIFxcXFwqL1xcbiAgICBSLmlzID0gZnVuY3Rpb24gKG8sIHR5cGUpIHtcXG4gICAgICAgIHR5cGUgPSBsb3dlckNhc2UuY2FsbCh0eXBlKTtcXG4gICAgICAgIGlmICh0eXBlID09IFxcXCJmaW5pdGVcXFwiKSB7XFxuICAgICAgICAgICAgcmV0dXJuICFpc25hbltoYXNdKCtvKTtcXG4gICAgICAgIH1cXG4gICAgICAgIGlmICh0eXBlID09IFxcXCJhcnJheVxcXCIpIHtcXG4gICAgICAgICAgICByZXR1cm4gbyBpbnN0YW5jZW9mIEFycmF5O1xcbiAgICAgICAgfVxcbiAgICAgICAgcmV0dXJuICAodHlwZSA9PSBcXFwibnVsbFxcXCIgJiYgbyA9PT0gbnVsbCkgfHxcXG4gICAgICAgICAgICAgICAgKHR5cGUgPT0gdHlwZW9mIG8gJiYgbyAhPT0gbnVsbCkgfHxcXG4gICAgICAgICAgICAgICAgKHR5cGUgPT0gXFxcIm9iamVjdFxcXCIgJiYgbyA9PT0gT2JqZWN0KG8pKSB8fFxcbiAgICAgICAgICAgICAgICAodHlwZSA9PSBcXFwiYXJyYXlcXFwiICYmIEFycmF5LmlzQXJyYXkgJiYgQXJyYXkuaXNBcnJheShvKSkgfHxcXG4gICAgICAgICAgICAgICAgb2JqZWN0VG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSkudG9Mb3dlckNhc2UoKSA9PSB0eXBlO1xcbiAgICB9O1xcblxcbiAgICBmdW5jdGlvbiBjbG9uZShvYmopIHtcXG4gICAgICAgIGlmICh0eXBlb2Ygb2JqID09IFxcXCJmdW5jdGlvblxcXCIgfHwgT2JqZWN0KG9iaikgIT09IG9iaikge1xcbiAgICAgICAgICAgIHJldHVybiBvYmo7XFxuICAgICAgICB9XFxuICAgICAgICB2YXIgcmVzID0gbmV3IG9iai5jb25zdHJ1Y3RvcjtcXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIGlmIChvYmpbaGFzXShrZXkpKSB7XFxuICAgICAgICAgICAgcmVzW2tleV0gPSBjbG9uZShvYmpba2V5XSk7XFxuICAgICAgICB9XFxuICAgICAgICByZXR1cm4gcmVzO1xcbiAgICB9XFxuXFxuICAgIC8qXFxcXFxcbiAgICAgKiBSYXBoYWVsLmFuZ2xlXFxuICAgICBbIG1ldGhvZCBdXFxuICAgICAqKlxcbiAgICAgKiBSZXR1cm5zIGFuZ2xlIGJldHdlZW4gdHdvIG9yIHRocmVlIHBvaW50c1xcbiAgICAgPiBQYXJhbWV0ZXJzXFxuICAgICAtIHgxIChudW1iZXIpIHggY29vcmQgb2YgZmlyc3QgcG9pbnRcXG4gICAgIC0geTEgKG51bWJlcikgeSBjb29yZCBvZiBmaXJzdCBwb2ludFxcbiAgICAgLSB4MiAobnVtYmVyKSB4IGNvb3JkIG9mIHNlY29uZCBwb2ludFxcbiAgICAgLSB5MiAobnVtYmVyKSB5IGNvb3JkIG9mIHNlY29uZCBwb2ludFxcbiAgICAgLSB4MyAobnVtYmVyKSAjb3B0aW9uYWwgeCBjb29yZCBvZiB0aGlyZCBwb2ludFxcbiAgICAgLSB5MyAobnVtYmVyKSAjb3B0aW9uYWwgeSBjb29yZCBvZiB0aGlyZCBwb2ludFxcbiAgICAgPSAobnVtYmVyKSBhbmdsZSBpbiBkZWdyZWVzLlxcbiAgICBcXFxcKi9cXG4gICAgUi5hbmdsZSA9IGZ1bmN0aW9uICh4MSwgeTEsIHgyLCB5MiwgeDMsIHkzKSB7XFxuICAgICAgICBpZiAoeDMgPT0gbnVsbCkge1xcbiAgICAgICAgICAgIHZhciB4ID0geDEgLSB4MixcXG4gICAgICAgICAgICAgICAgeSA9IHkxIC0geTI7XFxuICAgICAgICAgICAgaWYgKCF4ICYmICF5KSB7XFxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICByZXR1cm4gKDE4MCArIG1hdGguYXRhbjIoLXksIC14KSAqIDE4MCAvIFBJICsgMzYwKSAlIDM2MDtcXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgcmV0dXJuIFIuYW5nbGUoeDEsIHkxLCB4MywgeTMpIC0gUi5hbmdsZSh4MiwgeTIsIHgzLCB5Myk7XFxuICAgICAgICB9XFxuICAgIH07XFxuICAgIC8qXFxcXFxcbiAgICAgKiBSYXBoYWVsLnJhZFxcbiAgICAgWyBtZXRob2QgXVxcbiAgICAgKipcXG4gICAgICogVHJhbnNmb3JtIGFuZ2xlIHRvIHJhZGlhbnNcXG4gICAgID4gUGFyYW1ldGVyc1xcbiAgICAgLSBkZWcgKG51bWJlcikgYW5nbGUgaW4gZGVncmVlc1xcbiAgICAgPSAobnVtYmVyKSBhbmdsZSBpbiByYWRpYW5zLlxcbiAgICBcXFxcKi9cXG4gICAgUi5yYWQgPSBmdW5jdGlvbiAoZGVnKSB7XFxuICAgICAgICByZXR1cm4gZGVnICUgMzYwICogUEkgLyAxODA7XFxuICAgIH07XFxuICAgIC8qXFxcXFxcbiAgICAgKiBSYXBoYWVsLmRlZ1xcbiAgICAgWyBtZXRob2QgXVxcbiAgICAgKipcXG4gICAgICogVHJhbnNmb3JtIGFuZ2xlIHRvIGRlZ3JlZXNcXG4gICAgID4gUGFyYW1ldGVyc1xcbiAgICAgLSByYWQgKG51bWJlcikgYW5nbGUgaW4gcmFkaWFuc1xcbiAgICAgPSAobnVtYmVyKSBhbmdsZSBpbiBkZWdyZWVzLlxcbiAgICBcXFxcKi9cXG4gICAgUi5kZWcgPSBmdW5jdGlvbiAocmFkKSB7XFxuICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCAoKHJhZCAqIDE4MCAvIFBJJSAzNjApKiAxMDAwKSAvIDEwMDA7XFxuICAgIH07XFxuICAgIC8qXFxcXFxcbiAgICAgKiBSYXBoYWVsLnNuYXBUb1xcbiAgICAgWyBtZXRob2QgXVxcbiAgICAgKipcXG4gICAgICogU25hcHMgZ2l2ZW4gdmFsdWUgdG8gZ2l2ZW4gZ3JpZC5cXG4gICAgID4gUGFyYW1ldGVyc1xcbiAgICAgLSB2YWx1ZXMgKGFycmF5fG51bWJlcikgZ2l2ZW4gYXJyYXkgb2YgdmFsdWVzIG9yIHN0ZXAgb2YgdGhlIGdyaWRcXG4gICAgIC0gdmFsdWUgKG51bWJlcikgdmFsdWUgdG8gYWRqdXN0XFxuICAgICAtIHRvbGVyYW5jZSAobnVtYmVyKSAjb3B0aW9uYWwgdG9sZXJhbmNlIGZvciBzbmFwcGluZy4gRGVmYXVsdCBpcyBgMTBgLlxcbiAgICAgPSAobnVtYmVyKSBhZGp1c3RlZCB2YWx1ZS5cXG4gICAgXFxcXCovXFxuICAgIFIuc25hcFRvID0gZnVuY3Rpb24gKHZhbHVlcywgdmFsdWUsIHRvbGVyYW5jZSkge1xcbiAgICAgICAgdG9sZXJhbmNlID0gUi5pcyh0b2xlcmFuY2UsIFxcXCJmaW5pdGVcXFwiKSA/IHRvbGVyYW5jZSA6IDEwO1xcbiAgICAgICAgaWYgKFIuaXModmFsdWVzLCBhcnJheSkpIHtcXG4gICAgICAgICAgICB2YXIgaSA9IHZhbHVlcy5sZW5ndGg7XFxuICAgICAgICAgICAgd2hpbGUgKGktLSkgaWYgKGFicyh2YWx1ZXNbaV0gLSB2YWx1ZSkgPD0gdG9sZXJhbmNlKSB7XFxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZXNbaV07XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICB2YWx1ZXMgPSArdmFsdWVzO1xcbiAgICAgICAgICAgIHZhciByZW0gPSB2YWx1ZSAlIHZhbHVlcztcXG4gICAgICAgICAgICBpZiAocmVtIDwgdG9sZXJhbmNlKSB7XFxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZSAtIHJlbTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgaWYgKHJlbSA+IHZhbHVlcyAtIHRvbGVyYW5jZSkge1xcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUgLSByZW0gKyB2YWx1ZXM7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xcbiAgICB9O1xcblxcbiAgICAvKlxcXFxcXG4gICAgICogUmFwaGFlbC5jcmVhdGVVVUlEXFxuICAgICBbIG1ldGhvZCBdXFxuICAgICAqKlxcbiAgICAgKiBSZXR1cm5zIFJGQzQxMjIsIHZlcnNpb24gNCBJRFxcbiAgICBcXFxcKi9cXG4gICAgdmFyIGNyZWF0ZVVVSUQgPSBSLmNyZWF0ZVVVSUQgPSAoZnVuY3Rpb24gKHV1aWRSZWdFeCwgdXVpZFJlcGxhY2VyKSB7XFxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xcbiAgICAgICAgICAgIHJldHVybiBcXFwieHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4XFxcIi5yZXBsYWNlKHV1aWRSZWdFeCwgdXVpZFJlcGxhY2VyKS50b1VwcGVyQ2FzZSgpO1xcbiAgICAgICAgfTtcXG4gICAgfSkoL1t4eV0vZywgZnVuY3Rpb24gKGMpIHtcXG4gICAgICAgIHZhciByID0gbWF0aC5yYW5kb20oKSAqIDE2IHwgMCxcXG4gICAgICAgICAgICB2ID0gYyA9PSBcXFwieFxcXCIgPyByIDogKHIgJiAzIHwgOCk7XFxuICAgICAgICByZXR1cm4gdi50b1N0cmluZygxNik7XFxuICAgIH0pO1xcblxcbiAgICAvKlxcXFxcXG4gICAgICogUmFwaGFlbC5zZXRXaW5kb3dcXG4gICAgIFsgbWV0aG9kIF1cXG4gICAgICoqXFxuICAgICAqIFVzZWQgd2hlbiB5b3UgbmVlZCB0byBkcmF3IGluIGAmbHQ7aWZyYW1lPmAuIFN3aXRjaGVkIHdpbmRvdyB0byB0aGUgaWZyYW1lIG9uZS5cXG4gICAgID4gUGFyYW1ldGVyc1xcbiAgICAgLSBuZXd3aW4gKHdpbmRvdykgbmV3IHdpbmRvdyBvYmplY3RcXG4gICAgXFxcXCovXFxuICAgIFIuc2V0V2luZG93ID0gZnVuY3Rpb24gKG5ld3dpbikge1xcbiAgICAgICAgZXZlKFxcXCJyYXBoYWVsLnNldFdpbmRvd1xcXCIsIFIsIGcud2luLCBuZXd3aW4pO1xcbiAgICAgICAgZy53aW4gPSBuZXd3aW47XFxuICAgICAgICBnLmRvYyA9IGcud2luLmRvY3VtZW50O1xcbiAgICAgICAgaWYgKFIuX2VuZ2luZS5pbml0V2luKSB7XFxuICAgICAgICAgICAgUi5fZW5naW5lLmluaXRXaW4oZy53aW4pO1xcbiAgICAgICAgfVxcbiAgICB9O1xcbiAgICB2YXIgdG9IZXggPSBmdW5jdGlvbiAoY29sb3IpIHtcXG4gICAgICAgIGlmIChSLnZtbCkge1xcbiAgICAgICAgICAgIC8vIGh0dHA6Ly9kZWFuLmVkd2FyZHMubmFtZS93ZWJsb2cvMjAwOS8xMC9jb252ZXJ0LWFueS1jb2xvdXItdmFsdWUtdG8taGV4LWluLW1zaWUvXFxuICAgICAgICAgICAgdmFyIHRyaW0gPSAvXlxcXFxzK3xcXFxccyskL2c7XFxuICAgICAgICAgICAgdmFyIGJvZDtcXG4gICAgICAgICAgICB0cnkge1xcbiAgICAgICAgICAgICAgICB2YXIgZG9jdW0gPSBuZXcgQWN0aXZlWE9iamVjdChcXFwiaHRtbGZpbGVcXFwiKTtcXG4gICAgICAgICAgICAgICAgZG9jdW0ud3JpdGUoXFxcIjxib2R5PlxcXCIpO1xcbiAgICAgICAgICAgICAgICBkb2N1bS5jbG9zZSgpO1xcbiAgICAgICAgICAgICAgICBib2QgPSBkb2N1bS5ib2R5O1xcbiAgICAgICAgICAgIH0gY2F0Y2goZSkge1xcbiAgICAgICAgICAgICAgICBib2QgPSBjcmVhdGVQb3B1cCgpLmRvY3VtZW50LmJvZHk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIHZhciByYW5nZSA9IGJvZC5jcmVhdGVUZXh0UmFuZ2UoKTtcXG4gICAgICAgICAgICB0b0hleCA9IGNhY2hlcihmdW5jdGlvbiAoY29sb3IpIHtcXG4gICAgICAgICAgICAgICAgdHJ5IHtcXG4gICAgICAgICAgICAgICAgICAgIGJvZC5zdHlsZS5jb2xvciA9IFN0cihjb2xvcikucmVwbGFjZSh0cmltLCBFKTtcXG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHJhbmdlLnF1ZXJ5Q29tbWFuZFZhbHVlKFxcXCJGb3JlQ29sb3JcXFwiKTtcXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gKCh2YWx1ZSAmIDI1NSkgPDwgMTYpIHwgKHZhbHVlICYgNjUyODApIHwgKCh2YWx1ZSAmIDE2NzExNjgwKSA+Pj4gMTYpO1xcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXCIjXFxcIiArIChcXFwiMDAwMDAwXFxcIiArIHZhbHVlLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTYpO1xcbiAgICAgICAgICAgICAgICB9IGNhdGNoKGUpIHtcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFwibm9uZVxcXCI7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgdmFyIGkgPSBnLmRvYy5jcmVhdGVFbGVtZW50KFxcXCJpXFxcIik7XFxuICAgICAgICAgICAgaS50aXRsZSA9IFxcXCJSYXBoYVxcXFx4ZWJsIENvbG91ciBQaWNrZXJcXFwiO1xcbiAgICAgICAgICAgIGkuc3R5bGUuZGlzcGxheSA9IFxcXCJub25lXFxcIjtcXG4gICAgICAgICAgICBnLmRvYy5ib2R5LmFwcGVuZENoaWxkKGkpO1xcbiAgICAgICAgICAgIHRvSGV4ID0gY2FjaGVyKGZ1bmN0aW9uIChjb2xvcikge1xcbiAgICAgICAgICAgICAgICBpLnN0eWxlLmNvbG9yID0gY29sb3I7XFxuICAgICAgICAgICAgICAgIHJldHVybiBnLmRvYy5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKGksIEUpLmdldFByb3BlcnR5VmFsdWUoXFxcImNvbG9yXFxcIik7XFxuICAgICAgICAgICAgfSk7XFxuICAgICAgICB9XFxuICAgICAgICByZXR1cm4gdG9IZXgoY29sb3IpO1xcbiAgICB9LFxcbiAgICBoc2J0b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcXG4gICAgICAgIHJldHVybiBcXFwiaHNiKFxcXCIgKyBbdGhpcy5oLCB0aGlzLnMsIHRoaXMuYl0gKyBcXFwiKVxcXCI7XFxuICAgIH0sXFxuICAgIGhzbHRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xcbiAgICAgICAgcmV0dXJuIFxcXCJoc2woXFxcIiArIFt0aGlzLmgsIHRoaXMucywgdGhpcy5sXSArIFxcXCIpXFxcIjtcXG4gICAgfSxcXG4gICAgcmdidG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XFxuICAgICAgICByZXR1cm4gdGhpcy5oZXg7XFxuICAgIH0sXFxuICAgIHByZXBhcmVSR0IgPSBmdW5jdGlvbiAociwgZywgYikge1xcbiAgICAgICAgaWYgKGcgPT0gbnVsbCAmJiBSLmlzKHIsIFxcXCJvYmplY3RcXFwiKSAmJiBcXFwiclxcXCIgaW4gciAmJiBcXFwiZ1xcXCIgaW4gciAmJiBcXFwiYlxcXCIgaW4gcikge1xcbiAgICAgICAgICAgIGIgPSByLmI7XFxuICAgICAgICAgICAgZyA9IHIuZztcXG4gICAgICAgICAgICByID0gci5yO1xcbiAgICAgICAgfVxcbiAgICAgICAgaWYgKGcgPT0gbnVsbCAmJiBSLmlzKHIsIHN0cmluZykpIHtcXG4gICAgICAgICAgICB2YXIgY2xyID0gUi5nZXRSR0Iocik7XFxuICAgICAgICAgICAgciA9IGNsci5yO1xcbiAgICAgICAgICAgIGcgPSBjbHIuZztcXG4gICAgICAgICAgICBiID0gY2xyLmI7XFxuICAgICAgICB9XFxuICAgICAgICBpZiAociA+IDEgfHwgZyA+IDEgfHwgYiA+IDEpIHtcXG4gICAgICAgICAgICByIC89IDI1NTtcXG4gICAgICAgICAgICBnIC89IDI1NTtcXG4gICAgICAgICAgICBiIC89IDI1NTtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIHJldHVybiBbciwgZywgYl07XFxuICAgIH0sXFxuICAgIHBhY2thZ2VSR0IgPSBmdW5jdGlvbiAociwgZywgYiwgbykge1xcbiAgICAgICAgciAqPSAyNTU7XFxuICAgICAgICBnICo9IDI1NTtcXG4gICAgICAgIGIgKj0gMjU1O1xcbiAgICAgICAgdmFyIHJnYiA9IHtcXG4gICAgICAgICAgICByOiByLFxcbiAgICAgICAgICAgIGc6IGcsXFxuICAgICAgICAgICAgYjogYixcXG4gICAgICAgICAgICBoZXg6IFIucmdiKHIsIGcsIGIpLFxcbiAgICAgICAgICAgIHRvU3RyaW5nOiByZ2J0b1N0cmluZ1xcbiAgICAgICAgfTtcXG4gICAgICAgIFIuaXMobywgXFxcImZpbml0ZVxcXCIpICYmIChyZ2Iub3BhY2l0eSA9IG8pO1xcbiAgICAgICAgcmV0dXJuIHJnYjtcXG4gICAgfTtcXG5cXG4gICAgLypcXFxcXFxuICAgICAqIFJhcGhhZWwuY29sb3JcXG4gICAgIFsgbWV0aG9kIF1cXG4gICAgICoqXFxuICAgICAqIFBhcnNlcyB0aGUgY29sb3Igc3RyaW5nIGFuZCByZXR1cm5zIG9iamVjdCB3aXRoIGFsbCB2YWx1ZXMgZm9yIHRoZSBnaXZlbiBjb2xvci5cXG4gICAgID4gUGFyYW1ldGVyc1xcbiAgICAgLSBjbHIgKHN0cmluZykgY29sb3Igc3RyaW5nIGluIG9uZSBvZiB0aGUgc3VwcG9ydGVkIGZvcm1hdHMgKHNlZSBAUmFwaGFlbC5nZXRSR0IpXFxuICAgICA9IChvYmplY3QpIENvbWJpbmVkIFJHQiAmIEhTQiBvYmplY3QgaW4gZm9ybWF0OlxcbiAgICAgbyB7XFxuICAgICBvICAgICByIChudW1iZXIpIHJlZCxcXG4gICAgIG8gICAgIGcgKG51bWJlcikgZ3JlZW4sXFxuICAgICBvICAgICBiIChudW1iZXIpIGJsdWUsXFxuICAgICBvICAgICBoZXggKHN0cmluZykgY29sb3IgaW4gSFRNTC9DU1MgZm9ybWF0OiAj4oCi4oCi4oCi4oCi4oCi4oCiLFxcbiAgICAgbyAgICAgZXJyb3IgKGJvb2xlYW4pIGB0cnVlYCBpZiBzdHJpbmcgY2Fu4oCZdCBiZSBwYXJzZWQsXFxuICAgICBvICAgICBoIChudW1iZXIpIGh1ZSxcXG4gICAgIG8gICAgIHMgKG51bWJlcikgc2F0dXJhdGlvbixcXG4gICAgIG8gICAgIHYgKG51bWJlcikgdmFsdWUgKGJyaWdodG5lc3MpLFxcbiAgICAgbyAgICAgbCAobnVtYmVyKSBsaWdodG5lc3NcXG4gICAgIG8gfVxcbiAgICBcXFxcKi9cXG4gICAgUi5jb2xvciA9IGZ1bmN0aW9uIChjbHIpIHtcXG4gICAgICAgIHZhciByZ2I7XFxuICAgICAgICBpZiAoUi5pcyhjbHIsIFxcXCJvYmplY3RcXFwiKSAmJiBcXFwiaFxcXCIgaW4gY2xyICYmIFxcXCJzXFxcIiBpbiBjbHIgJiYgXFxcImJcXFwiIGluIGNscikge1xcbiAgICAgICAgICAgIHJnYiA9IFIuaHNiMnJnYihjbHIpO1xcbiAgICAgICAgICAgIGNsci5yID0gcmdiLnI7XFxuICAgICAgICAgICAgY2xyLmcgPSByZ2IuZztcXG4gICAgICAgICAgICBjbHIuYiA9IHJnYi5iO1xcbiAgICAgICAgICAgIGNsci5oZXggPSByZ2IuaGV4O1xcbiAgICAgICAgfSBlbHNlIGlmIChSLmlzKGNsciwgXFxcIm9iamVjdFxcXCIpICYmIFxcXCJoXFxcIiBpbiBjbHIgJiYgXFxcInNcXFwiIGluIGNsciAmJiBcXFwibFxcXCIgaW4gY2xyKSB7XFxuICAgICAgICAgICAgcmdiID0gUi5oc2wycmdiKGNscik7XFxuICAgICAgICAgICAgY2xyLnIgPSByZ2IucjtcXG4gICAgICAgICAgICBjbHIuZyA9IHJnYi5nO1xcbiAgICAgICAgICAgIGNsci5iID0gcmdiLmI7XFxuICAgICAgICAgICAgY2xyLmhleCA9IHJnYi5oZXg7XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgIGlmIChSLmlzKGNsciwgXFxcInN0cmluZ1xcXCIpKSB7XFxuICAgICAgICAgICAgICAgIGNsciA9IFIuZ2V0UkdCKGNscik7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIGlmIChSLmlzKGNsciwgXFxcIm9iamVjdFxcXCIpICYmIFxcXCJyXFxcIiBpbiBjbHIgJiYgXFxcImdcXFwiIGluIGNsciAmJiBcXFwiYlxcXCIgaW4gY2xyKSB7XFxuICAgICAgICAgICAgICAgIHJnYiA9IFIucmdiMmhzbChjbHIpO1xcbiAgICAgICAgICAgICAgICBjbHIuaCA9IHJnYi5oO1xcbiAgICAgICAgICAgICAgICBjbHIucyA9IHJnYi5zO1xcbiAgICAgICAgICAgICAgICBjbHIubCA9IHJnYi5sO1xcbiAgICAgICAgICAgICAgICByZ2IgPSBSLnJnYjJoc2IoY2xyKTtcXG4gICAgICAgICAgICAgICAgY2xyLnYgPSByZ2IuYjtcXG4gICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICBjbHIgPSB7aGV4OiBcXFwibm9uZVxcXCJ9O1xcbiAgICAgICAgICAgICAgICBjbHIuciA9IGNsci5nID0gY2xyLmIgPSBjbHIuaCA9IGNsci5zID0gY2xyLnYgPSBjbHIubCA9IC0xO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIGNsci50b1N0cmluZyA9IHJnYnRvU3RyaW5nO1xcbiAgICAgICAgcmV0dXJuIGNscjtcXG4gICAgfTtcXG4gICAgLypcXFxcXFxuICAgICAqIFJhcGhhZWwuaHNiMnJnYlxcbiAgICAgWyBtZXRob2QgXVxcbiAgICAgKipcXG4gICAgICogQ29udmVydHMgSFNCIHZhbHVlcyB0byBSR0Igb2JqZWN0LlxcbiAgICAgPiBQYXJhbWV0ZXJzXFxuICAgICAtIGggKG51bWJlcikgaHVlXFxuICAgICAtIHMgKG51bWJlcikgc2F0dXJhdGlvblxcbiAgICAgLSB2IChudW1iZXIpIHZhbHVlIG9yIGJyaWdodG5lc3NcXG4gICAgID0gKG9iamVjdCkgUkdCIG9iamVjdCBpbiBmb3JtYXQ6XFxuICAgICBvIHtcXG4gICAgIG8gICAgIHIgKG51bWJlcikgcmVkLFxcbiAgICAgbyAgICAgZyAobnVtYmVyKSBncmVlbixcXG4gICAgIG8gICAgIGIgKG51bWJlcikgYmx1ZSxcXG4gICAgIG8gICAgIGhleCAoc3RyaW5nKSBjb2xvciBpbiBIVE1ML0NTUyBmb3JtYXQ6ICPigKLigKLigKLigKLigKLigKJcXG4gICAgIG8gfVxcbiAgICBcXFxcKi9cXG4gICAgUi5oc2IycmdiID0gZnVuY3Rpb24gKGgsIHMsIHYsIG8pIHtcXG4gICAgICAgIGlmICh0aGlzLmlzKGgsIFxcXCJvYmplY3RcXFwiKSAmJiBcXFwiaFxcXCIgaW4gaCAmJiBcXFwic1xcXCIgaW4gaCAmJiBcXFwiYlxcXCIgaW4gaCkge1xcbiAgICAgICAgICAgIHYgPSBoLmI7XFxuICAgICAgICAgICAgcyA9IGgucztcXG4gICAgICAgICAgICBvID0gaC5vO1xcbiAgICAgICAgICAgIGggPSBoLmg7XFxuICAgICAgICB9XFxuICAgICAgICBoICo9IDM2MDtcXG4gICAgICAgIHZhciBSLCBHLCBCLCBYLCBDO1xcbiAgICAgICAgaCA9IChoICUgMzYwKSAvIDYwO1xcbiAgICAgICAgQyA9IHYgKiBzO1xcbiAgICAgICAgWCA9IEMgKiAoMSAtIGFicyhoICUgMiAtIDEpKTtcXG4gICAgICAgIFIgPSBHID0gQiA9IHYgLSBDO1xcblxcbiAgICAgICAgaCA9IH5+aDtcXG4gICAgICAgIFIgKz0gW0MsIFgsIDAsIDAsIFgsIENdW2hdO1xcbiAgICAgICAgRyArPSBbWCwgQywgQywgWCwgMCwgMF1baF07XFxuICAgICAgICBCICs9IFswLCAwLCBYLCBDLCBDLCBYXVtoXTtcXG4gICAgICAgIHJldHVybiBwYWNrYWdlUkdCKFIsIEcsIEIsIG8pO1xcbiAgICB9O1xcbiAgICAvKlxcXFxcXG4gICAgICogUmFwaGFlbC5oc2wycmdiXFxuICAgICBbIG1ldGhvZCBdXFxuICAgICAqKlxcbiAgICAgKiBDb252ZXJ0cyBIU0wgdmFsdWVzIHRvIFJHQiBvYmplY3QuXFxuICAgICA+IFBhcmFtZXRlcnNcXG4gICAgIC0gaCAobnVtYmVyKSBodWVcXG4gICAgIC0gcyAobnVtYmVyKSBzYXR1cmF0aW9uXFxuICAgICAtIGwgKG51bWJlcikgbHVtaW5vc2l0eVxcbiAgICAgPSAob2JqZWN0KSBSR0Igb2JqZWN0IGluIGZvcm1hdDpcXG4gICAgIG8ge1xcbiAgICAgbyAgICAgciAobnVtYmVyKSByZWQsXFxuICAgICBvICAgICBnIChudW1iZXIpIGdyZWVuLFxcbiAgICAgbyAgICAgYiAobnVtYmVyKSBibHVlLFxcbiAgICAgbyAgICAgaGV4IChzdHJpbmcpIGNvbG9yIGluIEhUTUwvQ1NTIGZvcm1hdDogI+KAouKAouKAouKAouKAouKAolxcbiAgICAgbyB9XFxuICAgIFxcXFwqL1xcbiAgICBSLmhzbDJyZ2IgPSBmdW5jdGlvbiAoaCwgcywgbCwgbykge1xcbiAgICAgICAgaWYgKHRoaXMuaXMoaCwgXFxcIm9iamVjdFxcXCIpICYmIFxcXCJoXFxcIiBpbiBoICYmIFxcXCJzXFxcIiBpbiBoICYmIFxcXCJsXFxcIiBpbiBoKSB7XFxuICAgICAgICAgICAgbCA9IGgubDtcXG4gICAgICAgICAgICBzID0gaC5zO1xcbiAgICAgICAgICAgIGggPSBoLmg7XFxuICAgICAgICB9XFxuICAgICAgICBpZiAoaCA+IDEgfHwgcyA+IDEgfHwgbCA+IDEpIHtcXG4gICAgICAgICAgICBoIC89IDM2MDtcXG4gICAgICAgICAgICBzIC89IDEwMDtcXG4gICAgICAgICAgICBsIC89IDEwMDtcXG4gICAgICAgIH1cXG4gICAgICAgIGggKj0gMzYwO1xcbiAgICAgICAgdmFyIFIsIEcsIEIsIFgsIEM7XFxuICAgICAgICBoID0gKGggJSAzNjApIC8gNjA7XFxuICAgICAgICBDID0gMiAqIHMgKiAobCA8IC41ID8gbCA6IDEgLSBsKTtcXG4gICAgICAgIFggPSBDICogKDEgLSBhYnMoaCAlIDIgLSAxKSk7XFxuICAgICAgICBSID0gRyA9IEIgPSBsIC0gQyAvIDI7XFxuXFxuICAgICAgICBoID0gfn5oO1xcbiAgICAgICAgUiArPSBbQywgWCwgMCwgMCwgWCwgQ11baF07XFxuICAgICAgICBHICs9IFtYLCBDLCBDLCBYLCAwLCAwXVtoXTtcXG4gICAgICAgIEIgKz0gWzAsIDAsIFgsIEMsIEMsIFhdW2hdO1xcbiAgICAgICAgcmV0dXJuIHBhY2thZ2VSR0IoUiwgRywgQiwgbyk7XFxuICAgIH07XFxuICAgIC8qXFxcXFxcbiAgICAgKiBSYXBoYWVsLnJnYjJoc2JcXG4gICAgIFsgbWV0aG9kIF1cXG4gICAgICoqXFxuICAgICAqIENvbnZlcnRzIFJHQiB2YWx1ZXMgdG8gSFNCIG9iamVjdC5cXG4gICAgID4gUGFyYW1ldGVyc1xcbiAgICAgLSByIChudW1iZXIpIHJlZFxcbiAgICAgLSBnIChudW1iZXIpIGdyZWVuXFxuICAgICAtIGIgKG51bWJlcikgYmx1ZVxcbiAgICAgPSAob2JqZWN0KSBIU0Igb2JqZWN0IGluIGZvcm1hdDpcXG4gICAgIG8ge1xcbiAgICAgbyAgICAgaCAobnVtYmVyKSBodWVcXG4gICAgIG8gICAgIHMgKG51bWJlcikgc2F0dXJhdGlvblxcbiAgICAgbyAgICAgYiAobnVtYmVyKSBicmlnaHRuZXNzXFxuICAgICBvIH1cXG4gICAgXFxcXCovXFxuICAgIFIucmdiMmhzYiA9IGZ1bmN0aW9uIChyLCBnLCBiKSB7XFxuICAgICAgICBiID0gcHJlcGFyZVJHQihyLCBnLCBiKTtcXG4gICAgICAgIHIgPSBiWzBdO1xcbiAgICAgICAgZyA9IGJbMV07XFxuICAgICAgICBiID0gYlsyXTtcXG5cXG4gICAgICAgIHZhciBILCBTLCBWLCBDO1xcbiAgICAgICAgViA9IG1tYXgociwgZywgYik7XFxuICAgICAgICBDID0gViAtIG1taW4ociwgZywgYik7XFxuICAgICAgICBIID0gKEMgPT0gMCA/IG51bGwgOlxcbiAgICAgICAgICAgICBWID09IHIgPyAoZyAtIGIpIC8gQyA6XFxuICAgICAgICAgICAgIFYgPT0gZyA/IChiIC0gcikgLyBDICsgMiA6XFxuICAgICAgICAgICAgICAgICAgICAgIChyIC0gZykgLyBDICsgNFxcbiAgICAgICAgICAgICk7XFxuICAgICAgICBIID0gKChIICsgMzYwKSAlIDYpICogNjAgLyAzNjA7XFxuICAgICAgICBTID0gQyA9PSAwID8gMCA6IEMgLyBWO1xcbiAgICAgICAgcmV0dXJuIHtoOiBILCBzOiBTLCBiOiBWLCB0b1N0cmluZzogaHNidG9TdHJpbmd9O1xcbiAgICB9O1xcbiAgICAvKlxcXFxcXG4gICAgICogUmFwaGFlbC5yZ2IyaHNsXFxuICAgICBbIG1ldGhvZCBdXFxuICAgICAqKlxcbiAgICAgKiBDb252ZXJ0cyBSR0IgdmFsdWVzIHRvIEhTTCBvYmplY3QuXFxuICAgICA+IFBhcmFtZXRlcnNcXG4gICAgIC0gciAobnVtYmVyKSByZWRcXG4gICAgIC0gZyAobnVtYmVyKSBncmVlblxcbiAgICAgLSBiIChudW1iZXIpIGJsdWVcXG4gICAgID0gKG9iamVjdCkgSFNMIG9iamVjdCBpbiBmb3JtYXQ6XFxuICAgICBvIHtcXG4gICAgIG8gICAgIGggKG51bWJlcikgaHVlXFxuICAgICBvICAgICBzIChudW1iZXIpIHNhdHVyYXRpb25cXG4gICAgIG8gICAgIGwgKG51bWJlcikgbHVtaW5vc2l0eVxcbiAgICAgbyB9XFxuICAgIFxcXFwqL1xcbiAgICBSLnJnYjJoc2wgPSBmdW5jdGlvbiAociwgZywgYikge1xcbiAgICAgICAgYiA9IHByZXBhcmVSR0IociwgZywgYik7XFxuICAgICAgICByID0gYlswXTtcXG4gICAgICAgIGcgPSBiWzFdO1xcbiAgICAgICAgYiA9IGJbMl07XFxuXFxuICAgICAgICB2YXIgSCwgUywgTCwgTSwgbSwgQztcXG4gICAgICAgIE0gPSBtbWF4KHIsIGcsIGIpO1xcbiAgICAgICAgbSA9IG1taW4ociwgZywgYik7XFxuICAgICAgICBDID0gTSAtIG07XFxuICAgICAgICBIID0gKEMgPT0gMCA/IG51bGwgOlxcbiAgICAgICAgICAgICBNID09IHIgPyAoZyAtIGIpIC8gQyA6XFxuICAgICAgICAgICAgIE0gPT0gZyA/IChiIC0gcikgLyBDICsgMiA6XFxuICAgICAgICAgICAgICAgICAgICAgIChyIC0gZykgLyBDICsgNCk7XFxuICAgICAgICBIID0gKChIICsgMzYwKSAlIDYpICogNjAgLyAzNjA7XFxuICAgICAgICBMID0gKE0gKyBtKSAvIDI7XFxuICAgICAgICBTID0gKEMgPT0gMCA/IDAgOlxcbiAgICAgICAgICAgICBMIDwgLjUgPyBDIC8gKDIgKiBMKSA6XFxuICAgICAgICAgICAgICAgICAgICAgIEMgLyAoMiAtIDIgKiBMKSk7XFxuICAgICAgICByZXR1cm4ge2g6IEgsIHM6IFMsIGw6IEwsIHRvU3RyaW5nOiBoc2x0b1N0cmluZ307XFxuICAgIH07XFxuICAgIFIuX3BhdGgyc3RyaW5nID0gZnVuY3Rpb24gKCkge1xcbiAgICAgICAgcmV0dXJuIHRoaXMuam9pbihcXFwiLFxcXCIpLnJlcGxhY2UocDJzLCBcXFwiJDFcXFwiKTtcXG4gICAgfTtcXG4gICAgZnVuY3Rpb24gcmVwdXNoKGFycmF5LCBpdGVtKSB7XFxuICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBhcnJheS5sZW5ndGg7IGkgPCBpaTsgaSsrKSBpZiAoYXJyYXlbaV0gPT09IGl0ZW0pIHtcXG4gICAgICAgICAgICByZXR1cm4gYXJyYXkucHVzaChhcnJheS5zcGxpY2UoaSwgMSlbMF0pO1xcbiAgICAgICAgfVxcbiAgICB9XFxuICAgIGZ1bmN0aW9uIGNhY2hlcihmLCBzY29wZSwgcG9zdHByb2Nlc3Nvcikge1xcbiAgICAgICAgZnVuY3Rpb24gbmV3ZigpIHtcXG4gICAgICAgICAgICB2YXIgYXJnID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKSxcXG4gICAgICAgICAgICAgICAgYXJncyA9IGFyZy5qb2luKFxcXCJcXFxcdTI0MDBcXFwiKSxcXG4gICAgICAgICAgICAgICAgY2FjaGUgPSBuZXdmLmNhY2hlID0gbmV3Zi5jYWNoZSB8fCB7fSxcXG4gICAgICAgICAgICAgICAgY291bnQgPSBuZXdmLmNvdW50ID0gbmV3Zi5jb3VudCB8fCBbXTtcXG4gICAgICAgICAgICBpZiAoY2FjaGVbaGFzXShhcmdzKSkge1xcbiAgICAgICAgICAgICAgICByZXB1c2goY291bnQsIGFyZ3MpO1xcbiAgICAgICAgICAgICAgICByZXR1cm4gcG9zdHByb2Nlc3NvciA/IHBvc3Rwcm9jZXNzb3IoY2FjaGVbYXJnc10pIDogY2FjaGVbYXJnc107XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIGNvdW50Lmxlbmd0aCA+PSAxZTMgJiYgZGVsZXRlIGNhY2hlW2NvdW50LnNoaWZ0KCldO1xcbiAgICAgICAgICAgIGNvdW50LnB1c2goYXJncyk7XFxuICAgICAgICAgICAgY2FjaGVbYXJnc10gPSBmW2FwcGx5XShzY29wZSwgYXJnKTtcXG4gICAgICAgICAgICByZXR1cm4gcG9zdHByb2Nlc3NvciA/IHBvc3Rwcm9jZXNzb3IoY2FjaGVbYXJnc10pIDogY2FjaGVbYXJnc107XFxuICAgICAgICB9XFxuICAgICAgICByZXR1cm4gbmV3ZjtcXG4gICAgfVxcblxcbiAgICB2YXIgcHJlbG9hZCA9IFIuX3ByZWxvYWQgPSBmdW5jdGlvbiAoc3JjLCBmKSB7XFxuICAgICAgICB2YXIgaW1nID0gZy5kb2MuY3JlYXRlRWxlbWVudChcXFwiaW1nXFxcIik7XFxuICAgICAgICBpbWcuc3R5bGUuY3NzVGV4dCA9IFxcXCJwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi05OTk5ZW07dG9wOi05OTk5ZW1cXFwiO1xcbiAgICAgICAgaW1nLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcXG4gICAgICAgICAgICBmLmNhbGwodGhpcyk7XFxuICAgICAgICAgICAgdGhpcy5vbmxvYWQgPSBudWxsO1xcbiAgICAgICAgICAgIGcuZG9jLmJvZHkucmVtb3ZlQ2hpbGQodGhpcyk7XFxuICAgICAgICB9O1xcbiAgICAgICAgaW1nLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XFxuICAgICAgICAgICAgZy5kb2MuYm9keS5yZW1vdmVDaGlsZCh0aGlzKTtcXG4gICAgICAgIH07XFxuICAgICAgICBnLmRvYy5ib2R5LmFwcGVuZENoaWxkKGltZyk7XFxuICAgICAgICBpbWcuc3JjID0gc3JjO1xcbiAgICB9O1xcblxcbiAgICBmdW5jdGlvbiBjbHJUb1N0cmluZygpIHtcXG4gICAgICAgIHJldHVybiB0aGlzLmhleDtcXG4gICAgfVxcblxcbiAgICAvKlxcXFxcXG4gICAgICogUmFwaGFlbC5nZXRSR0JcXG4gICAgIFsgbWV0aG9kIF1cXG4gICAgICoqXFxuICAgICAqIFBhcnNlcyBjb2xvdXIgc3RyaW5nIGFzIFJHQiBvYmplY3RcXG4gICAgID4gUGFyYW1ldGVyc1xcbiAgICAgLSBjb2xvdXIgKHN0cmluZykgY29sb3VyIHN0cmluZyBpbiBvbmUgb2YgZm9ybWF0czpcXG4gICAgICMgPHVsPlxcbiAgICAgIyAgICAgPGxpPkNvbG91ciBuYW1lICjigJw8Y29kZT5yZWQ8L2NvZGU+4oCdLCDigJw8Y29kZT5ncmVlbjwvY29kZT7igJ0sIOKAnDxjb2RlPmNvcm5mbG93ZXJibHVlPC9jb2RlPuKAnSwgZXRjKTwvbGk+XFxuICAgICAjICAgICA8bGk+I+KAouKAouKAoiDigJQgc2hvcnRlbmVkIEhUTUwgY29sb3VyOiAo4oCcPGNvZGU+IzAwMDwvY29kZT7igJ0sIOKAnDxjb2RlPiNmYzA8L2NvZGU+4oCdLCBldGMpPC9saT5cXG4gICAgICMgICAgIDxsaT4j4oCi4oCi4oCi4oCi4oCi4oCiIOKAlCBmdWxsIGxlbmd0aCBIVE1MIGNvbG91cjogKOKAnDxjb2RlPiMwMDAwMDA8L2NvZGU+4oCdLCDigJw8Y29kZT4jYmQyMzAwPC9jb2RlPuKAnSk8L2xpPlxcbiAgICAgIyAgICAgPGxpPnJnYijigKLigKLigKIsIOKAouKAouKAoiwg4oCi4oCi4oCiKSDigJQgcmVkLCBncmVlbiBhbmQgYmx1ZSBjaGFubmVsc+KAmSB2YWx1ZXM6ICjigJw8Y29kZT5yZ2IoMjAwLCZuYnNwOzEwMCwmbmJzcDswKTwvY29kZT7igJ0pPC9saT5cXG4gICAgICMgICAgIDxsaT5yZ2Io4oCi4oCi4oCiJSwg4oCi4oCi4oCiJSwg4oCi4oCi4oCiJSkg4oCUIHNhbWUgYXMgYWJvdmUsIGJ1dCBpbiAlOiAo4oCcPGNvZGU+cmdiKDEwMCUsJm5ic3A7MTc1JSwmbmJzcDswJSk8L2NvZGU+4oCdKTwvbGk+XFxuICAgICAjICAgICA8bGk+aHNiKOKAouKAouKAoiwg4oCi4oCi4oCiLCDigKLigKLigKIpIOKAlCBodWUsIHNhdHVyYXRpb24gYW5kIGJyaWdodG5lc3MgdmFsdWVzOiAo4oCcPGNvZGU+aHNiKDAuNSwmbmJzcDswLjI1LCZuYnNwOzEpPC9jb2RlPuKAnSk8L2xpPlxcbiAgICAgIyAgICAgPGxpPmhzYijigKLigKLigKIlLCDigKLigKLigKIlLCDigKLigKLigKIlKSDigJQgc2FtZSBhcyBhYm92ZSwgYnV0IGluICU8L2xpPlxcbiAgICAgIyAgICAgPGxpPmhzbCjigKLigKLigKIsIOKAouKAouKAoiwg4oCi4oCi4oCiKSDigJQgc2FtZSBhcyBoc2I8L2xpPlxcbiAgICAgIyAgICAgPGxpPmhzbCjigKLigKLigKIlLCDigKLigKLigKIlLCDigKLigKLigKIlKSDigJQgc2FtZSBhcyBoc2I8L2xpPlxcbiAgICAgIyA8L3VsPlxcbiAgICAgPSAob2JqZWN0KSBSR0Igb2JqZWN0IGluIGZvcm1hdDpcXG4gICAgIG8ge1xcbiAgICAgbyAgICAgciAobnVtYmVyKSByZWQsXFxuICAgICBvICAgICBnIChudW1iZXIpIGdyZWVuLFxcbiAgICAgbyAgICAgYiAobnVtYmVyKSBibHVlXFxuICAgICBvICAgICBoZXggKHN0cmluZykgY29sb3IgaW4gSFRNTC9DU1MgZm9ybWF0OiAj4oCi4oCi4oCi4oCi4oCi4oCiLFxcbiAgICAgbyAgICAgZXJyb3IgKGJvb2xlYW4pIHRydWUgaWYgc3RyaW5nIGNhbuKAmXQgYmUgcGFyc2VkXFxuICAgICBvIH1cXG4gICAgXFxcXCovXFxuICAgIFIuZ2V0UkdCID0gY2FjaGVyKGZ1bmN0aW9uIChjb2xvdXIpIHtcXG4gICAgICAgIGlmICghY29sb3VyIHx8ICEhKChjb2xvdXIgPSBTdHIoY29sb3VyKSkuaW5kZXhPZihcXFwiLVxcXCIpICsgMSkpIHtcXG4gICAgICAgICAgICByZXR1cm4ge3I6IC0xLCBnOiAtMSwgYjogLTEsIGhleDogXFxcIm5vbmVcXFwiLCBlcnJvcjogMSwgdG9TdHJpbmc6IGNsclRvU3RyaW5nfTtcXG4gICAgICAgIH1cXG4gICAgICAgIGlmIChjb2xvdXIgPT0gXFxcIm5vbmVcXFwiKSB7XFxuICAgICAgICAgICAgcmV0dXJuIHtyOiAtMSwgZzogLTEsIGI6IC0xLCBoZXg6IFxcXCJub25lXFxcIiwgdG9TdHJpbmc6IGNsclRvU3RyaW5nfTtcXG4gICAgICAgIH1cXG4gICAgICAgICEoaHNyZ1toYXNdKGNvbG91ci50b0xvd2VyQ2FzZSgpLnN1YnN0cmluZygwLCAyKSkgfHwgY29sb3VyLmNoYXJBdCgpID09IFxcXCIjXFxcIikgJiYgKGNvbG91ciA9IHRvSGV4KGNvbG91cikpO1xcbiAgICAgICAgdmFyIHJlcyxcXG4gICAgICAgICAgICByZWQsXFxuICAgICAgICAgICAgZ3JlZW4sXFxuICAgICAgICAgICAgYmx1ZSxcXG4gICAgICAgICAgICBvcGFjaXR5LFxcbiAgICAgICAgICAgIHQsXFxuICAgICAgICAgICAgdmFsdWVzLFxcbiAgICAgICAgICAgIHJnYiA9IGNvbG91ci5tYXRjaChjb2xvdXJSZWdFeHApO1xcbiAgICAgICAgaWYgKHJnYikge1xcbiAgICAgICAgICAgIGlmIChyZ2JbMl0pIHtcXG4gICAgICAgICAgICAgICAgYmx1ZSA9IHRvSW50KHJnYlsyXS5zdWJzdHJpbmcoNSksIDE2KTtcXG4gICAgICAgICAgICAgICAgZ3JlZW4gPSB0b0ludChyZ2JbMl0uc3Vic3RyaW5nKDMsIDUpLCAxNik7XFxuICAgICAgICAgICAgICAgIHJlZCA9IHRvSW50KHJnYlsyXS5zdWJzdHJpbmcoMSwgMyksIDE2KTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgaWYgKHJnYlszXSkge1xcbiAgICAgICAgICAgICAgICBibHVlID0gdG9JbnQoKHQgPSByZ2JbM10uY2hhckF0KDMpKSArIHQsIDE2KTtcXG4gICAgICAgICAgICAgICAgZ3JlZW4gPSB0b0ludCgodCA9IHJnYlszXS5jaGFyQXQoMikpICsgdCwgMTYpO1xcbiAgICAgICAgICAgICAgICByZWQgPSB0b0ludCgodCA9IHJnYlszXS5jaGFyQXQoMSkpICsgdCwgMTYpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBpZiAocmdiWzRdKSB7XFxuICAgICAgICAgICAgICAgIHZhbHVlcyA9IHJnYls0XVtzcGxpdF0oY29tbWFTcGFjZXMpO1xcbiAgICAgICAgICAgICAgICByZWQgPSB0b0Zsb2F0KHZhbHVlc1swXSk7XFxuICAgICAgICAgICAgICAgIHZhbHVlc1swXS5zbGljZSgtMSkgPT0gXFxcIiVcXFwiICYmIChyZWQgKj0gMi41NSk7XFxuICAgICAgICAgICAgICAgIGdyZWVuID0gdG9GbG9hdCh2YWx1ZXNbMV0pO1xcbiAgICAgICAgICAgICAgICB2YWx1ZXNbMV0uc2xpY2UoLTEpID09IFxcXCIlXFxcIiAmJiAoZ3JlZW4gKj0gMi41NSk7XFxuICAgICAgICAgICAgICAgIGJsdWUgPSB0b0Zsb2F0KHZhbHVlc1syXSk7XFxuICAgICAgICAgICAgICAgIHZhbHVlc1syXS5zbGljZSgtMSkgPT0gXFxcIiVcXFwiICYmIChibHVlICo9IDIuNTUpO1xcbiAgICAgICAgICAgICAgICByZ2JbMV0udG9Mb3dlckNhc2UoKS5zbGljZSgwLCA0KSA9PSBcXFwicmdiYVxcXCIgJiYgKG9wYWNpdHkgPSB0b0Zsb2F0KHZhbHVlc1szXSkpO1xcbiAgICAgICAgICAgICAgICB2YWx1ZXNbM10gJiYgdmFsdWVzWzNdLnNsaWNlKC0xKSA9PSBcXFwiJVxcXCIgJiYgKG9wYWNpdHkgLz0gMTAwKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgaWYgKHJnYls1XSkge1xcbiAgICAgICAgICAgICAgICB2YWx1ZXMgPSByZ2JbNV1bc3BsaXRdKGNvbW1hU3BhY2VzKTtcXG4gICAgICAgICAgICAgICAgcmVkID0gdG9GbG9hdCh2YWx1ZXNbMF0pO1xcbiAgICAgICAgICAgICAgICB2YWx1ZXNbMF0uc2xpY2UoLTEpID09IFxcXCIlXFxcIiAmJiAocmVkICo9IDIuNTUpO1xcbiAgICAgICAgICAgICAgICBncmVlbiA9IHRvRmxvYXQodmFsdWVzWzFdKTtcXG4gICAgICAgICAgICAgICAgdmFsdWVzWzFdLnNsaWNlKC0xKSA9PSBcXFwiJVxcXCIgJiYgKGdyZWVuICo9IDIuNTUpO1xcbiAgICAgICAgICAgICAgICBibHVlID0gdG9GbG9hdCh2YWx1ZXNbMl0pO1xcbiAgICAgICAgICAgICAgICB2YWx1ZXNbMl0uc2xpY2UoLTEpID09IFxcXCIlXFxcIiAmJiAoYmx1ZSAqPSAyLjU1KTtcXG4gICAgICAgICAgICAgICAgKHZhbHVlc1swXS5zbGljZSgtMykgPT0gXFxcImRlZ1xcXCIgfHwgdmFsdWVzWzBdLnNsaWNlKC0xKSA9PSBcXFwiXFxcXHhiMFxcXCIpICYmIChyZWQgLz0gMzYwKTtcXG4gICAgICAgICAgICAgICAgcmdiWzFdLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCwgNCkgPT0gXFxcImhzYmFcXFwiICYmIChvcGFjaXR5ID0gdG9GbG9hdCh2YWx1ZXNbM10pKTtcXG4gICAgICAgICAgICAgICAgdmFsdWVzWzNdICYmIHZhbHVlc1szXS5zbGljZSgtMSkgPT0gXFxcIiVcXFwiICYmIChvcGFjaXR5IC89IDEwMCk7XFxuICAgICAgICAgICAgICAgIHJldHVybiBSLmhzYjJyZ2IocmVkLCBncmVlbiwgYmx1ZSwgb3BhY2l0eSk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIGlmIChyZ2JbNl0pIHtcXG4gICAgICAgICAgICAgICAgdmFsdWVzID0gcmdiWzZdW3NwbGl0XShjb21tYVNwYWNlcyk7XFxuICAgICAgICAgICAgICAgIHJlZCA9IHRvRmxvYXQodmFsdWVzWzBdKTtcXG4gICAgICAgICAgICAgICAgdmFsdWVzWzBdLnNsaWNlKC0xKSA9PSBcXFwiJVxcXCIgJiYgKHJlZCAqPSAyLjU1KTtcXG4gICAgICAgICAgICAgICAgZ3JlZW4gPSB0b0Zsb2F0KHZhbHVlc1sxXSk7XFxuICAgICAgICAgICAgICAgIHZhbHVlc1sxXS5zbGljZSgtMSkgPT0gXFxcIiVcXFwiICYmIChncmVlbiAqPSAyLjU1KTtcXG4gICAgICAgICAgICAgICAgYmx1ZSA9IHRvRmxvYXQodmFsdWVzWzJdKTtcXG4gICAgICAgICAgICAgICAgdmFsdWVzWzJdLnNsaWNlKC0xKSA9PSBcXFwiJVxcXCIgJiYgKGJsdWUgKj0gMi41NSk7XFxuICAgICAgICAgICAgICAgICh2YWx1ZXNbMF0uc2xpY2UoLTMpID09IFxcXCJkZWdcXFwiIHx8IHZhbHVlc1swXS5zbGljZSgtMSkgPT0gXFxcIlxcXFx4YjBcXFwiKSAmJiAocmVkIC89IDM2MCk7XFxuICAgICAgICAgICAgICAgIHJnYlsxXS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsIDQpID09IFxcXCJoc2xhXFxcIiAmJiAob3BhY2l0eSA9IHRvRmxvYXQodmFsdWVzWzNdKSk7XFxuICAgICAgICAgICAgICAgIHZhbHVlc1szXSAmJiB2YWx1ZXNbM10uc2xpY2UoLTEpID09IFxcXCIlXFxcIiAmJiAob3BhY2l0eSAvPSAxMDApO1xcbiAgICAgICAgICAgICAgICByZXR1cm4gUi5oc2wycmdiKHJlZCwgZ3JlZW4sIGJsdWUsIG9wYWNpdHkpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICByZ2IgPSB7cjogcmVkLCBnOiBncmVlbiwgYjogYmx1ZSwgdG9TdHJpbmc6IGNsclRvU3RyaW5nfTtcXG4gICAgICAgICAgICByZ2IuaGV4ID0gXFxcIiNcXFwiICsgKDE2Nzc3MjE2IHwgYmx1ZSB8IChncmVlbiA8PCA4KSB8IChyZWQgPDwgMTYpKS50b1N0cmluZygxNikuc2xpY2UoMSk7XFxuICAgICAgICAgICAgUi5pcyhvcGFjaXR5LCBcXFwiZmluaXRlXFxcIikgJiYgKHJnYi5vcGFjaXR5ID0gb3BhY2l0eSk7XFxuICAgICAgICAgICAgcmV0dXJuIHJnYjtcXG4gICAgICAgIH1cXG4gICAgICAgIHJldHVybiB7cjogLTEsIGc6IC0xLCBiOiAtMSwgaGV4OiBcXFwibm9uZVxcXCIsIGVycm9yOiAxLCB0b1N0cmluZzogY2xyVG9TdHJpbmd9O1xcbiAgICB9LCBSKTtcXG4gICAgLypcXFxcXFxuICAgICAqIFJhcGhhZWwuaHNiXFxuICAgICBbIG1ldGhvZCBdXFxuICAgICAqKlxcbiAgICAgKiBDb252ZXJ0cyBIU0IgdmFsdWVzIHRvIGhleCByZXByZXNlbnRhdGlvbiBvZiB0aGUgY29sb3VyLlxcbiAgICAgPiBQYXJhbWV0ZXJzXFxuICAgICAtIGggKG51bWJlcikgaHVlXFxuICAgICAtIHMgKG51bWJlcikgc2F0dXJhdGlvblxcbiAgICAgLSBiIChudW1iZXIpIHZhbHVlIG9yIGJyaWdodG5lc3NcXG4gICAgID0gKHN0cmluZykgaGV4IHJlcHJlc2VudGF0aW9uIG9mIHRoZSBjb2xvdXIuXFxuICAgIFxcXFwqL1xcbiAgICBSLmhzYiA9IGNhY2hlcihmdW5jdGlvbiAoaCwgcywgYikge1xcbiAgICAgICAgcmV0dXJuIFIuaHNiMnJnYihoLCBzLCBiKS5oZXg7XFxuICAgIH0pO1xcbiAgICAvKlxcXFxcXG4gICAgICogUmFwaGFlbC5oc2xcXG4gICAgIFsgbWV0aG9kIF1cXG4gICAgICoqXFxuICAgICAqIENvbnZlcnRzIEhTTCB2YWx1ZXMgdG8gaGV4IHJlcHJlc2VudGF0aW9uIG9mIHRoZSBjb2xvdXIuXFxuICAgICA+IFBhcmFtZXRlcnNcXG4gICAgIC0gaCAobnVtYmVyKSBodWVcXG4gICAgIC0gcyAobnVtYmVyKSBzYXR1cmF0aW9uXFxuICAgICAtIGwgKG51bWJlcikgbHVtaW5vc2l0eVxcbiAgICAgPSAoc3RyaW5nKSBoZXggcmVwcmVzZW50YXRpb24gb2YgdGhlIGNvbG91ci5cXG4gICAgXFxcXCovXFxuICAgIFIuaHNsID0gY2FjaGVyKGZ1bmN0aW9uIChoLCBzLCBsKSB7XFxuICAgICAgICByZXR1cm4gUi5oc2wycmdiKGgsIHMsIGwpLmhleDtcXG4gICAgfSk7XFxuICAgIC8qXFxcXFxcbiAgICAgKiBSYXBoYWVsLnJnYlxcbiAgICAgWyBtZXRob2QgXVxcbiAgICAgKipcXG4gICAgICogQ29udmVydHMgUkdCIHZhbHVlcyB0byBoZXggcmVwcmVzZW50YXRpb24gb2YgdGhlIGNvbG91ci5cXG4gICAgID4gUGFyYW1ldGVyc1xcbiAgICAgLSByIChudW1iZXIpIHJlZFxcbiAgICAgLSBnIChudW1iZXIpIGdyZWVuXFxuICAgICAtIGIgKG51bWJlcikgYmx1ZVxcbiAgICAgPSAoc3RyaW5nKSBoZXggcmVwcmVzZW50YXRpb24gb2YgdGhlIGNvbG91ci5cXG4gICAgXFxcXCovXFxuICAgIFIucmdiID0gY2FjaGVyKGZ1bmN0aW9uIChyLCBnLCBiKSB7XFxuICAgICAgICBmdW5jdGlvbiByb3VuZCh4KSB7IHJldHVybiAoeCArIDAuNSkgfCAwOyB9XFxuICAgICAgICByZXR1cm4gXFxcIiNcXFwiICsgKDE2Nzc3MjE2IHwgcm91bmQoYikgfCAocm91bmQoZykgPDwgOCkgfCAocm91bmQocikgPDwgMTYpKS50b1N0cmluZygxNikuc2xpY2UoMSk7XFxuICAgIH0pO1xcbiAgICAvKlxcXFxcXG4gICAgICogUmFwaGFlbC5nZXRDb2xvclxcbiAgICAgWyBtZXRob2QgXVxcbiAgICAgKipcXG4gICAgICogT24gZWFjaCBjYWxsIHJldHVybnMgbmV4dCBjb2xvdXIgaW4gdGhlIHNwZWN0cnVtLiBUbyByZXNldCBpdCBiYWNrIHRvIHJlZCBjYWxsIEBSYXBoYWVsLmdldENvbG9yLnJlc2V0XFxuICAgICA+IFBhcmFtZXRlcnNcXG4gICAgIC0gdmFsdWUgKG51bWJlcikgI29wdGlvbmFsIGJyaWdodG5lc3MsIGRlZmF1bHQgaXMgYDAuNzVgXFxuICAgICA9IChzdHJpbmcpIGhleCByZXByZXNlbnRhdGlvbiBvZiB0aGUgY29sb3VyLlxcbiAgICBcXFxcKi9cXG4gICAgUi5nZXRDb2xvciA9IGZ1bmN0aW9uICh2YWx1ZSkge1xcbiAgICAgICAgdmFyIHN0YXJ0ID0gdGhpcy5nZXRDb2xvci5zdGFydCA9IHRoaXMuZ2V0Q29sb3Iuc3RhcnQgfHwge2g6IDAsIHM6IDEsIGI6IHZhbHVlIHx8IC43NX0sXFxuICAgICAgICAgICAgcmdiID0gdGhpcy5oc2IycmdiKHN0YXJ0LmgsIHN0YXJ0LnMsIHN0YXJ0LmIpO1xcbiAgICAgICAgc3RhcnQuaCArPSAuMDc1O1xcbiAgICAgICAgaWYgKHN0YXJ0LmggPiAxKSB7XFxuICAgICAgICAgICAgc3RhcnQuaCA9IDA7XFxuICAgICAgICAgICAgc3RhcnQucyAtPSAuMjtcXG4gICAgICAgICAgICBzdGFydC5zIDw9IDAgJiYgKHRoaXMuZ2V0Q29sb3Iuc3RhcnQgPSB7aDogMCwgczogMSwgYjogc3RhcnQuYn0pO1xcbiAgICAgICAgfVxcbiAgICAgICAgcmV0dXJuIHJnYi5oZXg7XFxuICAgIH07XFxuICAgIC8qXFxcXFxcbiAgICAgKiBSYXBoYWVsLmdldENvbG9yLnJlc2V0XFxuICAgICBbIG1ldGhvZCBdXFxuICAgICAqKlxcbiAgICAgKiBSZXNldHMgc3BlY3RydW0gcG9zaXRpb24gZm9yIEBSYXBoYWVsLmdldENvbG9yIGJhY2sgdG8gcmVkLlxcbiAgICBcXFxcKi9cXG4gICAgUi5nZXRDb2xvci5yZXNldCA9IGZ1bmN0aW9uICgpIHtcXG4gICAgICAgIGRlbGV0ZSB0aGlzLnN0YXJ0O1xcbiAgICB9O1xcblxcbiAgICAvLyBodHRwOi8vc2NoZXBlcnMuY2MvZ2V0dGluZy10by10aGUtcG9pbnRcXG4gICAgZnVuY3Rpb24gY2F0bXVsbFJvbTJiZXppZXIoY3JwLCB6KSB7XFxuICAgICAgICB2YXIgZCA9IFtdO1xcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlMZW4gPSBjcnAubGVuZ3RoOyBpTGVuIC0gMiAqICF6ID4gaTsgaSArPSAyKSB7XFxuICAgICAgICAgICAgdmFyIHAgPSBbXFxuICAgICAgICAgICAgICAgICAgICAgICAge3g6ICtjcnBbaSAtIDJdLCB5OiArY3JwW2kgLSAxXX0sXFxuICAgICAgICAgICAgICAgICAgICAgICAge3g6ICtjcnBbaV0sICAgICB5OiArY3JwW2kgKyAxXX0sXFxuICAgICAgICAgICAgICAgICAgICAgICAge3g6ICtjcnBbaSArIDJdLCB5OiArY3JwW2kgKyAzXX0sXFxuICAgICAgICAgICAgICAgICAgICAgICAge3g6ICtjcnBbaSArIDRdLCB5OiArY3JwW2kgKyA1XX1cXG4gICAgICAgICAgICAgICAgICAgIF07XFxuICAgICAgICAgICAgaWYgKHopIHtcXG4gICAgICAgICAgICAgICAgaWYgKCFpKSB7XFxuICAgICAgICAgICAgICAgICAgICBwWzBdID0ge3g6ICtjcnBbaUxlbiAtIDJdLCB5OiArY3JwW2lMZW4gLSAxXX07XFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaUxlbiAtIDQgPT0gaSkge1xcbiAgICAgICAgICAgICAgICAgICAgcFszXSA9IHt4OiArY3JwWzBdLCB5OiArY3JwWzFdfTtcXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpTGVuIC0gMiA9PSBpKSB7XFxuICAgICAgICAgICAgICAgICAgICBwWzJdID0ge3g6ICtjcnBbMF0sIHk6ICtjcnBbMV19O1xcbiAgICAgICAgICAgICAgICAgICAgcFszXSA9IHt4OiArY3JwWzJdLCB5OiArY3JwWzNdfTtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgIGlmIChpTGVuIC0gNCA9PSBpKSB7XFxuICAgICAgICAgICAgICAgICAgICBwWzNdID0gcFsyXTtcXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghaSkge1xcbiAgICAgICAgICAgICAgICAgICAgcFswXSA9IHt4OiArY3JwW2ldLCB5OiArY3JwW2kgKyAxXX07XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgZC5wdXNoKFtcXFwiQ1xcXCIsXFxuICAgICAgICAgICAgICAgICAgKC1wWzBdLnggKyA2ICogcFsxXS54ICsgcFsyXS54KSAvIDYsXFxuICAgICAgICAgICAgICAgICAgKC1wWzBdLnkgKyA2ICogcFsxXS55ICsgcFsyXS55KSAvIDYsXFxuICAgICAgICAgICAgICAgICAgKHBbMV0ueCArIDYgKiBwWzJdLnggLSBwWzNdLngpIC8gNixcXG4gICAgICAgICAgICAgICAgICAocFsxXS55ICsgNipwWzJdLnkgLSBwWzNdLnkpIC8gNixcXG4gICAgICAgICAgICAgICAgICBwWzJdLngsXFxuICAgICAgICAgICAgICAgICAgcFsyXS55XFxuICAgICAgICAgICAgXSk7XFxuICAgICAgICB9XFxuXFxuICAgICAgICByZXR1cm4gZDtcXG4gICAgfVxcbiAgICAvKlxcXFxcXG4gICAgICogUmFwaGFlbC5wYXJzZVBhdGhTdHJpbmdcXG4gICAgIFsgbWV0aG9kIF1cXG4gICAgICoqXFxuICAgICAqIFV0aWxpdHkgbWV0aG9kXFxuICAgICAqKlxcbiAgICAgKiBQYXJzZXMgZ2l2ZW4gcGF0aCBzdHJpbmcgaW50byBhbiBhcnJheSBvZiBhcnJheXMgb2YgcGF0aCBzZWdtZW50cy5cXG4gICAgID4gUGFyYW1ldGVyc1xcbiAgICAgLSBwYXRoU3RyaW5nIChzdHJpbmd8YXJyYXkpIHBhdGggc3RyaW5nIG9yIGFycmF5IG9mIHNlZ21lbnRzIChpbiB0aGUgbGFzdCBjYXNlIGl0IHdpbGwgYmUgcmV0dXJuZWQgc3RyYWlnaHQgYXdheSlcXG4gICAgID0gKGFycmF5KSBhcnJheSBvZiBzZWdtZW50cy5cXG4gICAgXFxcXCovXFxuICAgIFIucGFyc2VQYXRoU3RyaW5nID0gZnVuY3Rpb24gKHBhdGhTdHJpbmcpIHtcXG4gICAgICAgIGlmICghcGF0aFN0cmluZykge1xcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xcbiAgICAgICAgfVxcbiAgICAgICAgdmFyIHB0aCA9IHBhdGhzKHBhdGhTdHJpbmcpO1xcbiAgICAgICAgaWYgKHB0aC5hcnIpIHtcXG4gICAgICAgICAgICByZXR1cm4gcGF0aENsb25lKHB0aC5hcnIpO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgdmFyIHBhcmFtQ291bnRzID0ge2E6IDcsIGM6IDYsIGg6IDEsIGw6IDIsIG06IDIsIHI6IDQsIHE6IDQsIHM6IDQsIHQ6IDIsIHY6IDEsIHo6IDB9LFxcbiAgICAgICAgICAgIGRhdGEgPSBbXTtcXG4gICAgICAgIGlmIChSLmlzKHBhdGhTdHJpbmcsIGFycmF5KSAmJiBSLmlzKHBhdGhTdHJpbmdbMF0sIGFycmF5KSkgeyAvLyByb3VnaCBhc3N1bXB0aW9uXFxuICAgICAgICAgICAgZGF0YSA9IHBhdGhDbG9uZShwYXRoU3RyaW5nKTtcXG4gICAgICAgIH1cXG4gICAgICAgIGlmICghZGF0YS5sZW5ndGgpIHtcXG4gICAgICAgICAgICBTdHIocGF0aFN0cmluZykucmVwbGFjZShwYXRoQ29tbWFuZCwgZnVuY3Rpb24gKGEsIGIsIGMpIHtcXG4gICAgICAgICAgICAgICAgdmFyIHBhcmFtcyA9IFtdLFxcbiAgICAgICAgICAgICAgICAgICAgbmFtZSA9IGIudG9Mb3dlckNhc2UoKTtcXG4gICAgICAgICAgICAgICAgYy5yZXBsYWNlKHBhdGhWYWx1ZXMsIGZ1bmN0aW9uIChhLCBiKSB7XFxuICAgICAgICAgICAgICAgICAgICBiICYmIHBhcmFtcy5wdXNoKCtiKTtcXG4gICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgICAgIGlmIChuYW1lID09IFxcXCJtXFxcIiAmJiBwYXJhbXMubGVuZ3RoID4gMikge1xcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5wdXNoKFtiXVtjb25jYXRdKHBhcmFtcy5zcGxpY2UoMCwgMikpKTtcXG4gICAgICAgICAgICAgICAgICAgIG5hbWUgPSBcXFwibFxcXCI7XFxuICAgICAgICAgICAgICAgICAgICBiID0gYiA9PSBcXFwibVxcXCIgPyBcXFwibFxcXCIgOiBcXFwiTFxcXCI7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgaWYgKG5hbWUgPT0gXFxcInJcXFwiKSB7XFxuICAgICAgICAgICAgICAgICAgICBkYXRhLnB1c2goW2JdW2NvbmNhdF0ocGFyYW1zKSk7XFxuICAgICAgICAgICAgICAgIH0gZWxzZSB3aGlsZSAocGFyYW1zLmxlbmd0aCA+PSBwYXJhbUNvdW50c1tuYW1lXSkge1xcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5wdXNoKFtiXVtjb25jYXRdKHBhcmFtcy5zcGxpY2UoMCwgcGFyYW1Db3VudHNbbmFtZV0pKSk7XFxuICAgICAgICAgICAgICAgICAgICBpZiAoIXBhcmFtQ291bnRzW25hbWVdKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgIH1cXG4gICAgICAgIGRhdGEudG9TdHJpbmcgPSBSLl9wYXRoMnN0cmluZztcXG4gICAgICAgIHB0aC5hcnIgPSBwYXRoQ2xvbmUoZGF0YSk7XFxuICAgICAgICByZXR1cm4gZGF0YTtcXG4gICAgfTtcXG4gICAgLypcXFxcXFxuICAgICAqIFJhcGhhZWwucGFyc2VUcmFuc2Zvcm1TdHJpbmdcXG4gICAgIFsgbWV0aG9kIF1cXG4gICAgICoqXFxuICAgICAqIFV0aWxpdHkgbWV0aG9kXFxuICAgICAqKlxcbiAgICAgKiBQYXJzZXMgZ2l2ZW4gcGF0aCBzdHJpbmcgaW50byBhbiBhcnJheSBvZiB0cmFuc2Zvcm1hdGlvbnMuXFxuICAgICA+IFBhcmFtZXRlcnNcXG4gICAgIC0gVFN0cmluZyAoc3RyaW5nfGFycmF5KSB0cmFuc2Zvcm0gc3RyaW5nIG9yIGFycmF5IG9mIHRyYW5zZm9ybWF0aW9ucyAoaW4gdGhlIGxhc3QgY2FzZSBpdCB3aWxsIGJlIHJldHVybmVkIHN0cmFpZ2h0IGF3YXkpXFxuICAgICA9IChhcnJheSkgYXJyYXkgb2YgdHJhbnNmb3JtYXRpb25zLlxcbiAgICBcXFxcKi9cXG4gICAgUi5wYXJzZVRyYW5zZm9ybVN0cmluZyA9IGNhY2hlcihmdW5jdGlvbiAoVFN0cmluZykge1xcbiAgICAgICAgaWYgKCFUU3RyaW5nKSB7XFxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XFxuICAgICAgICB9XFxuICAgICAgICB2YXIgcGFyYW1Db3VudHMgPSB7cjogMywgczogNCwgdDogMiwgbTogNn0sXFxuICAgICAgICAgICAgZGF0YSA9IFtdO1xcbiAgICAgICAgaWYgKFIuaXMoVFN0cmluZywgYXJyYXkpICYmIFIuaXMoVFN0cmluZ1swXSwgYXJyYXkpKSB7IC8vIHJvdWdoIGFzc3VtcHRpb25cXG4gICAgICAgICAgICBkYXRhID0gcGF0aENsb25lKFRTdHJpbmcpO1xcbiAgICAgICAgfVxcbiAgICAgICAgaWYgKCFkYXRhLmxlbmd0aCkge1xcbiAgICAgICAgICAgIFN0cihUU3RyaW5nKS5yZXBsYWNlKHRDb21tYW5kLCBmdW5jdGlvbiAoYSwgYiwgYykge1xcbiAgICAgICAgICAgICAgICB2YXIgcGFyYW1zID0gW10sXFxuICAgICAgICAgICAgICAgICAgICBuYW1lID0gbG93ZXJDYXNlLmNhbGwoYik7XFxuICAgICAgICAgICAgICAgIGMucmVwbGFjZShwYXRoVmFsdWVzLCBmdW5jdGlvbiAoYSwgYikge1xcbiAgICAgICAgICAgICAgICAgICAgYiAmJiBwYXJhbXMucHVzaCgrYik7XFxuICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgICBkYXRhLnB1c2goW2JdW2NvbmNhdF0ocGFyYW1zKSk7XFxuICAgICAgICAgICAgfSk7XFxuICAgICAgICB9XFxuICAgICAgICBkYXRhLnRvU3RyaW5nID0gUi5fcGF0aDJzdHJpbmc7XFxuICAgICAgICByZXR1cm4gZGF0YTtcXG4gICAgfSwgdGhpcywgZnVuY3Rpb24oZWxlbSkge1xcbiAgICAgICAgaWYgKCFlbGVtKSByZXR1cm4gZWxlbTtcXG4gICAgICAgIHZhciBuZXdEYXRhID0gW107XFxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZW0ubGVuZ3RoOyBpKyspIHtcXG4gICAgICAgICAgICB2YXIgbmV3TGV2ZWwgPSBbXTtcXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGVsZW1baV0ubGVuZ3RoOyBqKyspIHtcXG4gICAgICAgICAgICAgICAgbmV3TGV2ZWwucHVzaChlbGVtW2ldW2pdKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgbmV3RGF0YS5wdXNoKG5ld0xldmVsKTtcXG4gICAgICAgIH1cXG4gICAgICByZXR1cm4gbmV3RGF0YTsgfSApO1xcbiAgICAvLyBQQVRIU1xcbiAgICB2YXIgcGF0aHMgPSBmdW5jdGlvbiAocHMpIHtcXG4gICAgICAgIHZhciBwID0gcGF0aHMucHMgPSBwYXRocy5wcyB8fCB7fTtcXG4gICAgICAgIGlmIChwW3BzXSkge1xcbiAgICAgICAgICAgIHBbcHNdLnNsZWVwID0gMTAwO1xcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICBwW3BzXSA9IHtcXG4gICAgICAgICAgICAgICAgc2xlZXA6IDEwMFxcbiAgICAgICAgICAgIH07XFxuICAgICAgICB9XFxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcXG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gcCkgaWYgKHBbaGFzXShrZXkpICYmIGtleSAhPSBwcykge1xcbiAgICAgICAgICAgICAgICBwW2tleV0uc2xlZXAtLTtcXG4gICAgICAgICAgICAgICAgIXBba2V5XS5zbGVlcCAmJiBkZWxldGUgcFtrZXldO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0pO1xcbiAgICAgICAgcmV0dXJuIHBbcHNdO1xcbiAgICB9O1xcbiAgICAvKlxcXFxcXG4gICAgICogUmFwaGFlbC5maW5kRG90c0F0U2VnbWVudFxcbiAgICAgWyBtZXRob2QgXVxcbiAgICAgKipcXG4gICAgICogVXRpbGl0eSBtZXRob2RcXG4gICAgICoqXFxuICAgICAqIEZpbmQgZG90IGNvb3JkaW5hdGVzIG9uIHRoZSBnaXZlbiBjdWJpYyBiZXppZXIgY3VydmUgYXQgdGhlIGdpdmVuIHQuXFxuICAgICA+IFBhcmFtZXRlcnNcXG4gICAgIC0gcDF4IChudW1iZXIpIHggb2YgdGhlIGZpcnN0IHBvaW50IG9mIHRoZSBjdXJ2ZVxcbiAgICAgLSBwMXkgKG51bWJlcikgeSBvZiB0aGUgZmlyc3QgcG9pbnQgb2YgdGhlIGN1cnZlXFxuICAgICAtIGMxeCAobnVtYmVyKSB4IG9mIHRoZSBmaXJzdCBhbmNob3Igb2YgdGhlIGN1cnZlXFxuICAgICAtIGMxeSAobnVtYmVyKSB5IG9mIHRoZSBmaXJzdCBhbmNob3Igb2YgdGhlIGN1cnZlXFxuICAgICAtIGMyeCAobnVtYmVyKSB4IG9mIHRoZSBzZWNvbmQgYW5jaG9yIG9mIHRoZSBjdXJ2ZVxcbiAgICAgLSBjMnkgKG51bWJlcikgeSBvZiB0aGUgc2Vjb25kIGFuY2hvciBvZiB0aGUgY3VydmVcXG4gICAgIC0gcDJ4IChudW1iZXIpIHggb2YgdGhlIHNlY29uZCBwb2ludCBvZiB0aGUgY3VydmVcXG4gICAgIC0gcDJ5IChudW1iZXIpIHkgb2YgdGhlIHNlY29uZCBwb2ludCBvZiB0aGUgY3VydmVcXG4gICAgIC0gdCAobnVtYmVyKSBwb3NpdGlvbiBvbiB0aGUgY3VydmUgKDAuLjEpXFxuICAgICA9IChvYmplY3QpIHBvaW50IGluZm9ybWF0aW9uIGluIGZvcm1hdDpcXG4gICAgIG8ge1xcbiAgICAgbyAgICAgeDogKG51bWJlcikgeCBjb29yZGluYXRlIG9mIHRoZSBwb2ludFxcbiAgICAgbyAgICAgeTogKG51bWJlcikgeSBjb29yZGluYXRlIG9mIHRoZSBwb2ludFxcbiAgICAgbyAgICAgbToge1xcbiAgICAgbyAgICAgICAgIHg6IChudW1iZXIpIHggY29vcmRpbmF0ZSBvZiB0aGUgbGVmdCBhbmNob3JcXG4gICAgIG8gICAgICAgICB5OiAobnVtYmVyKSB5IGNvb3JkaW5hdGUgb2YgdGhlIGxlZnQgYW5jaG9yXFxuICAgICBvICAgICB9XFxuICAgICBvICAgICBuOiB7XFxuICAgICBvICAgICAgICAgeDogKG51bWJlcikgeCBjb29yZGluYXRlIG9mIHRoZSByaWdodCBhbmNob3JcXG4gICAgIG8gICAgICAgICB5OiAobnVtYmVyKSB5IGNvb3JkaW5hdGUgb2YgdGhlIHJpZ2h0IGFuY2hvclxcbiAgICAgbyAgICAgfVxcbiAgICAgbyAgICAgc3RhcnQ6IHtcXG4gICAgIG8gICAgICAgICB4OiAobnVtYmVyKSB4IGNvb3JkaW5hdGUgb2YgdGhlIHN0YXJ0IG9mIHRoZSBjdXJ2ZVxcbiAgICAgbyAgICAgICAgIHk6IChudW1iZXIpIHkgY29vcmRpbmF0ZSBvZiB0aGUgc3RhcnQgb2YgdGhlIGN1cnZlXFxuICAgICBvICAgICB9XFxuICAgICBvICAgICBlbmQ6IHtcXG4gICAgIG8gICAgICAgICB4OiAobnVtYmVyKSB4IGNvb3JkaW5hdGUgb2YgdGhlIGVuZCBvZiB0aGUgY3VydmVcXG4gICAgIG8gICAgICAgICB5OiAobnVtYmVyKSB5IGNvb3JkaW5hdGUgb2YgdGhlIGVuZCBvZiB0aGUgY3VydmVcXG4gICAgIG8gICAgIH1cXG4gICAgIG8gICAgIGFscGhhOiAobnVtYmVyKSBhbmdsZSBvZiB0aGUgY3VydmUgZGVyaXZhdGl2ZSBhdCB0aGUgcG9pbnRcXG4gICAgIG8gfVxcbiAgICBcXFxcKi9cXG4gICAgUi5maW5kRG90c0F0U2VnbWVudCA9IGZ1bmN0aW9uIChwMXgsIHAxeSwgYzF4LCBjMXksIGMyeCwgYzJ5LCBwMngsIHAyeSwgdCkge1xcbiAgICAgICAgdmFyIHQxID0gMSAtIHQsXFxuICAgICAgICAgICAgdDEzID0gcG93KHQxLCAzKSxcXG4gICAgICAgICAgICB0MTIgPSBwb3codDEsIDIpLFxcbiAgICAgICAgICAgIHQyID0gdCAqIHQsXFxuICAgICAgICAgICAgdDMgPSB0MiAqIHQsXFxuICAgICAgICAgICAgeCA9IHQxMyAqIHAxeCArIHQxMiAqIDMgKiB0ICogYzF4ICsgdDEgKiAzICogdCAqIHQgKiBjMnggKyB0MyAqIHAyeCxcXG4gICAgICAgICAgICB5ID0gdDEzICogcDF5ICsgdDEyICogMyAqIHQgKiBjMXkgKyB0MSAqIDMgKiB0ICogdCAqIGMyeSArIHQzICogcDJ5LFxcbiAgICAgICAgICAgIG14ID0gcDF4ICsgMiAqIHQgKiAoYzF4IC0gcDF4KSArIHQyICogKGMyeCAtIDIgKiBjMXggKyBwMXgpLFxcbiAgICAgICAgICAgIG15ID0gcDF5ICsgMiAqIHQgKiAoYzF5IC0gcDF5KSArIHQyICogKGMyeSAtIDIgKiBjMXkgKyBwMXkpLFxcbiAgICAgICAgICAgIG54ID0gYzF4ICsgMiAqIHQgKiAoYzJ4IC0gYzF4KSArIHQyICogKHAyeCAtIDIgKiBjMnggKyBjMXgpLFxcbiAgICAgICAgICAgIG55ID0gYzF5ICsgMiAqIHQgKiAoYzJ5IC0gYzF5KSArIHQyICogKHAyeSAtIDIgKiBjMnkgKyBjMXkpLFxcbiAgICAgICAgICAgIGF4ID0gdDEgKiBwMXggKyB0ICogYzF4LFxcbiAgICAgICAgICAgIGF5ID0gdDEgKiBwMXkgKyB0ICogYzF5LFxcbiAgICAgICAgICAgIGN4ID0gdDEgKiBjMnggKyB0ICogcDJ4LFxcbiAgICAgICAgICAgIGN5ID0gdDEgKiBjMnkgKyB0ICogcDJ5LFxcbiAgICAgICAgICAgIGFscGhhID0gKDkwIC0gbWF0aC5hdGFuMihteCAtIG54LCBteSAtIG55KSAqIDE4MCAvIFBJKTtcXG4gICAgICAgIChteCA+IG54IHx8IG15IDwgbnkpICYmIChhbHBoYSArPSAxODApO1xcbiAgICAgICAgcmV0dXJuIHtcXG4gICAgICAgICAgICB4OiB4LFxcbiAgICAgICAgICAgIHk6IHksXFxuICAgICAgICAgICAgbToge3g6IG14LCB5OiBteX0sXFxuICAgICAgICAgICAgbjoge3g6IG54LCB5OiBueX0sXFxuICAgICAgICAgICAgc3RhcnQ6IHt4OiBheCwgeTogYXl9LFxcbiAgICAgICAgICAgIGVuZDoge3g6IGN4LCB5OiBjeX0sXFxuICAgICAgICAgICAgYWxwaGE6IGFscGhhXFxuICAgICAgICB9O1xcbiAgICB9O1xcbiAgICAvKlxcXFxcXG4gICAgICogUmFwaGFlbC5iZXppZXJCQm94XFxuICAgICBbIG1ldGhvZCBdXFxuICAgICAqKlxcbiAgICAgKiBVdGlsaXR5IG1ldGhvZFxcbiAgICAgKipcXG4gICAgICogUmV0dXJuIGJvdW5kaW5nIGJveCBvZiBhIGdpdmVuIGN1YmljIGJlemllciBjdXJ2ZVxcbiAgICAgPiBQYXJhbWV0ZXJzXFxuICAgICAtIHAxeCAobnVtYmVyKSB4IG9mIHRoZSBmaXJzdCBwb2ludCBvZiB0aGUgY3VydmVcXG4gICAgIC0gcDF5IChudW1iZXIpIHkgb2YgdGhlIGZpcnN0IHBvaW50IG9mIHRoZSBjdXJ2ZVxcbiAgICAgLSBjMXggKG51bWJlcikgeCBvZiB0aGUgZmlyc3QgYW5jaG9yIG9mIHRoZSBjdXJ2ZVxcbiAgICAgLSBjMXkgKG51bWJlcikgeSBvZiB0aGUgZmlyc3QgYW5jaG9yIG9mIHRoZSBjdXJ2ZVxcbiAgICAgLSBjMnggKG51bWJlcikgeCBvZiB0aGUgc2Vjb25kIGFuY2hvciBvZiB0aGUgY3VydmVcXG4gICAgIC0gYzJ5IChudW1iZXIpIHkgb2YgdGhlIHNlY29uZCBhbmNob3Igb2YgdGhlIGN1cnZlXFxuICAgICAtIHAyeCAobnVtYmVyKSB4IG9mIHRoZSBzZWNvbmQgcG9pbnQgb2YgdGhlIGN1cnZlXFxuICAgICAtIHAyeSAobnVtYmVyKSB5IG9mIHRoZSBzZWNvbmQgcG9pbnQgb2YgdGhlIGN1cnZlXFxuICAgICAqIG9yXFxuICAgICAtIGJleiAoYXJyYXkpIGFycmF5IG9mIHNpeCBwb2ludHMgZm9yIGJlemllciBjdXJ2ZVxcbiAgICAgPSAob2JqZWN0KSBwb2ludCBpbmZvcm1hdGlvbiBpbiBmb3JtYXQ6XFxuICAgICBvIHtcXG4gICAgIG8gICAgIG1pbjoge1xcbiAgICAgbyAgICAgICAgIHg6IChudW1iZXIpIHggY29vcmRpbmF0ZSBvZiB0aGUgbGVmdCBwb2ludFxcbiAgICAgbyAgICAgICAgIHk6IChudW1iZXIpIHkgY29vcmRpbmF0ZSBvZiB0aGUgdG9wIHBvaW50XFxuICAgICBvICAgICB9XFxuICAgICBvICAgICBtYXg6IHtcXG4gICAgIG8gICAgICAgICB4OiAobnVtYmVyKSB4IGNvb3JkaW5hdGUgb2YgdGhlIHJpZ2h0IHBvaW50XFxuICAgICBvICAgICAgICAgeTogKG51bWJlcikgeSBjb29yZGluYXRlIG9mIHRoZSBib3R0b20gcG9pbnRcXG4gICAgIG8gICAgIH1cXG4gICAgIG8gfVxcbiAgICBcXFxcKi9cXG4gICAgUi5iZXppZXJCQm94ID0gZnVuY3Rpb24gKHAxeCwgcDF5LCBjMXgsIGMxeSwgYzJ4LCBjMnksIHAyeCwgcDJ5KSB7XFxuICAgICAgICBpZiAoIVIuaXMocDF4LCBcXFwiYXJyYXlcXFwiKSkge1xcbiAgICAgICAgICAgIHAxeCA9IFtwMXgsIHAxeSwgYzF4LCBjMXksIGMyeCwgYzJ5LCBwMngsIHAyeV07XFxuICAgICAgICB9XFxuICAgICAgICB2YXIgYmJveCA9IGN1cnZlRGltLmFwcGx5KG51bGwsIHAxeCk7XFxuICAgICAgICByZXR1cm4ge1xcbiAgICAgICAgICAgIHg6IGJib3gubWluLngsXFxuICAgICAgICAgICAgeTogYmJveC5taW4ueSxcXG4gICAgICAgICAgICB4MjogYmJveC5tYXgueCxcXG4gICAgICAgICAgICB5MjogYmJveC5tYXgueSxcXG4gICAgICAgICAgICB3aWR0aDogYmJveC5tYXgueCAtIGJib3gubWluLngsXFxuICAgICAgICAgICAgaGVpZ2h0OiBiYm94Lm1heC55IC0gYmJveC5taW4ueVxcbiAgICAgICAgfTtcXG4gICAgfTtcXG4gICAgLypcXFxcXFxuICAgICAqIFJhcGhhZWwuaXNQb2ludEluc2lkZUJCb3hcXG4gICAgIFsgbWV0aG9kIF1cXG4gICAgICoqXFxuICAgICAqIFV0aWxpdHkgbWV0aG9kXFxuICAgICAqKlxcbiAgICAgKiBSZXR1cm5zIGB0cnVlYCBpZiBnaXZlbiBwb2ludCBpcyBpbnNpZGUgYm91bmRpbmcgYm94ZXMuXFxuICAgICA+IFBhcmFtZXRlcnNcXG4gICAgIC0gYmJveCAoc3RyaW5nKSBib3VuZGluZyBib3hcXG4gICAgIC0geCAoc3RyaW5nKSB4IGNvb3JkaW5hdGUgb2YgdGhlIHBvaW50XFxuICAgICAtIHkgKHN0cmluZykgeSBjb29yZGluYXRlIG9mIHRoZSBwb2ludFxcbiAgICAgPSAoYm9vbGVhbikgYHRydWVgIGlmIHBvaW50IGluc2lkZVxcbiAgICBcXFxcKi9cXG4gICAgUi5pc1BvaW50SW5zaWRlQkJveCA9IGZ1bmN0aW9uIChiYm94LCB4LCB5KSB7XFxuICAgICAgICByZXR1cm4geCA+PSBiYm94LnggJiYgeCA8PSBiYm94LngyICYmIHkgPj0gYmJveC55ICYmIHkgPD0gYmJveC55MjtcXG4gICAgfTtcXG4gICAgLypcXFxcXFxuICAgICAqIFJhcGhhZWwuaXNCQm94SW50ZXJzZWN0XFxuICAgICBbIG1ldGhvZCBdXFxuICAgICAqKlxcbiAgICAgKiBVdGlsaXR5IG1ldGhvZFxcbiAgICAgKipcXG4gICAgICogUmV0dXJucyBgdHJ1ZWAgaWYgdHdvIGJvdW5kaW5nIGJveGVzIGludGVyc2VjdFxcbiAgICAgPiBQYXJhbWV0ZXJzXFxuICAgICAtIGJib3gxIChzdHJpbmcpIGZpcnN0IGJvdW5kaW5nIGJveFxcbiAgICAgLSBiYm94MiAoc3RyaW5nKSBzZWNvbmQgYm91bmRpbmcgYm94XFxuICAgICA9IChib29sZWFuKSBgdHJ1ZWAgaWYgdGhleSBpbnRlcnNlY3RcXG4gICAgXFxcXCovXFxuICAgIFIuaXNCQm94SW50ZXJzZWN0ID0gZnVuY3Rpb24gKGJib3gxLCBiYm94Mikge1xcbiAgICAgICAgdmFyIGkgPSBSLmlzUG9pbnRJbnNpZGVCQm94O1xcbiAgICAgICAgcmV0dXJuIGkoYmJveDIsIGJib3gxLngsIGJib3gxLnkpXFxuICAgICAgICAgICAgfHwgaShiYm94MiwgYmJveDEueDIsIGJib3gxLnkpXFxuICAgICAgICAgICAgfHwgaShiYm94MiwgYmJveDEueCwgYmJveDEueTIpXFxuICAgICAgICAgICAgfHwgaShiYm94MiwgYmJveDEueDIsIGJib3gxLnkyKVxcbiAgICAgICAgICAgIHx8IGkoYmJveDEsIGJib3gyLngsIGJib3gyLnkpXFxuICAgICAgICAgICAgfHwgaShiYm94MSwgYmJveDIueDIsIGJib3gyLnkpXFxuICAgICAgICAgICAgfHwgaShiYm94MSwgYmJveDIueCwgYmJveDIueTIpXFxuICAgICAgICAgICAgfHwgaShiYm94MSwgYmJveDIueDIsIGJib3gyLnkyKVxcbiAgICAgICAgICAgIHx8IChiYm94MS54IDwgYmJveDIueDIgJiYgYmJveDEueCA+IGJib3gyLnggfHwgYmJveDIueCA8IGJib3gxLngyICYmIGJib3gyLnggPiBiYm94MS54KVxcbiAgICAgICAgICAgICYmIChiYm94MS55IDwgYmJveDIueTIgJiYgYmJveDEueSA+IGJib3gyLnkgfHwgYmJveDIueSA8IGJib3gxLnkyICYmIGJib3gyLnkgPiBiYm94MS55KTtcXG4gICAgfTtcXG4gICAgZnVuY3Rpb24gYmFzZTModCwgcDEsIHAyLCBwMywgcDQpIHtcXG4gICAgICAgIHZhciB0MSA9IC0zICogcDEgKyA5ICogcDIgLSA5ICogcDMgKyAzICogcDQsXFxuICAgICAgICAgICAgdDIgPSB0ICogdDEgKyA2ICogcDEgLSAxMiAqIHAyICsgNiAqIHAzO1xcbiAgICAgICAgcmV0dXJuIHQgKiB0MiAtIDMgKiBwMSArIDMgKiBwMjtcXG4gICAgfVxcbiAgICBmdW5jdGlvbiBiZXpsZW4oeDEsIHkxLCB4MiwgeTIsIHgzLCB5MywgeDQsIHk0LCB6KSB7XFxuICAgICAgICBpZiAoeiA9PSBudWxsKSB7XFxuICAgICAgICAgICAgeiA9IDE7XFxuICAgICAgICB9XFxuICAgICAgICB6ID0geiA+IDEgPyAxIDogeiA8IDAgPyAwIDogejtcXG4gICAgICAgIHZhciB6MiA9IHogLyAyLFxcbiAgICAgICAgICAgIG4gPSAxMixcXG4gICAgICAgICAgICBUdmFsdWVzID0gWy0wLjEyNTIsMC4xMjUyLC0wLjM2NzgsMC4zNjc4LC0wLjU4NzMsMC41ODczLC0wLjc2OTksMC43Njk5LC0wLjkwNDEsMC45MDQxLC0wLjk4MTYsMC45ODE2XSxcXG4gICAgICAgICAgICBDdmFsdWVzID0gWzAuMjQ5MSwwLjI0OTEsMC4yMzM1LDAuMjMzNSwwLjIwMzIsMC4yMDMyLDAuMTYwMSwwLjE2MDEsMC4xMDY5LDAuMTA2OSwwLjA0NzIsMC4wNDcyXSxcXG4gICAgICAgICAgICBzdW0gPSAwO1xcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyBpKyspIHtcXG4gICAgICAgICAgICB2YXIgY3QgPSB6MiAqIFR2YWx1ZXNbaV0gKyB6MixcXG4gICAgICAgICAgICAgICAgeGJhc2UgPSBiYXNlMyhjdCwgeDEsIHgyLCB4MywgeDQpLFxcbiAgICAgICAgICAgICAgICB5YmFzZSA9IGJhc2UzKGN0LCB5MSwgeTIsIHkzLCB5NCksXFxuICAgICAgICAgICAgICAgIGNvbWIgPSB4YmFzZSAqIHhiYXNlICsgeWJhc2UgKiB5YmFzZTtcXG4gICAgICAgICAgICBzdW0gKz0gQ3ZhbHVlc1tpXSAqIG1hdGguc3FydChjb21iKTtcXG4gICAgICAgIH1cXG4gICAgICAgIHJldHVybiB6MiAqIHN1bTtcXG4gICAgfVxcbiAgICBmdW5jdGlvbiBnZXRUYXRMZW4oeDEsIHkxLCB4MiwgeTIsIHgzLCB5MywgeDQsIHk0LCBsbCkge1xcbiAgICAgICAgaWYgKGxsIDwgMCB8fCBiZXpsZW4oeDEsIHkxLCB4MiwgeTIsIHgzLCB5MywgeDQsIHk0KSA8IGxsKSB7XFxuICAgICAgICAgICAgcmV0dXJuO1xcbiAgICAgICAgfVxcbiAgICAgICAgdmFyIHQgPSAxLFxcbiAgICAgICAgICAgIHN0ZXAgPSB0IC8gMixcXG4gICAgICAgICAgICB0MiA9IHQgLSBzdGVwLFxcbiAgICAgICAgICAgIGwsXFxuICAgICAgICAgICAgZSA9IC4wMTtcXG4gICAgICAgIGwgPSBiZXpsZW4oeDEsIHkxLCB4MiwgeTIsIHgzLCB5MywgeDQsIHk0LCB0Mik7XFxuICAgICAgICB3aGlsZSAoYWJzKGwgLSBsbCkgPiBlKSB7XFxuICAgICAgICAgICAgc3RlcCAvPSAyO1xcbiAgICAgICAgICAgIHQyICs9IChsIDwgbGwgPyAxIDogLTEpICogc3RlcDtcXG4gICAgICAgICAgICBsID0gYmV6bGVuKHgxLCB5MSwgeDIsIHkyLCB4MywgeTMsIHg0LCB5NCwgdDIpO1xcbiAgICAgICAgfVxcbiAgICAgICAgcmV0dXJuIHQyO1xcbiAgICB9XFxuICAgIGZ1bmN0aW9uIGludGVyc2VjdCh4MSwgeTEsIHgyLCB5MiwgeDMsIHkzLCB4NCwgeTQpIHtcXG4gICAgICAgIGlmIChcXG4gICAgICAgICAgICBtbWF4KHgxLCB4MikgPCBtbWluKHgzLCB4NCkgfHxcXG4gICAgICAgICAgICBtbWluKHgxLCB4MikgPiBtbWF4KHgzLCB4NCkgfHxcXG4gICAgICAgICAgICBtbWF4KHkxLCB5MikgPCBtbWluKHkzLCB5NCkgfHxcXG4gICAgICAgICAgICBtbWluKHkxLCB5MikgPiBtbWF4KHkzLCB5NClcXG4gICAgICAgICkge1xcbiAgICAgICAgICAgIHJldHVybjtcXG4gICAgICAgIH1cXG4gICAgICAgIHZhciBueCA9ICh4MSAqIHkyIC0geTEgKiB4MikgKiAoeDMgLSB4NCkgLSAoeDEgLSB4MikgKiAoeDMgKiB5NCAtIHkzICogeDQpLFxcbiAgICAgICAgICAgIG55ID0gKHgxICogeTIgLSB5MSAqIHgyKSAqICh5MyAtIHk0KSAtICh5MSAtIHkyKSAqICh4MyAqIHk0IC0geTMgKiB4NCksXFxuICAgICAgICAgICAgZGVub21pbmF0b3IgPSAoeDEgLSB4MikgKiAoeTMgLSB5NCkgLSAoeTEgLSB5MikgKiAoeDMgLSB4NCk7XFxuXFxuICAgICAgICBpZiAoIWRlbm9taW5hdG9yKSB7XFxuICAgICAgICAgICAgcmV0dXJuO1xcbiAgICAgICAgfVxcbiAgICAgICAgdmFyIHB4ID0gbnggLyBkZW5vbWluYXRvcixcXG4gICAgICAgICAgICBweSA9IG55IC8gZGVub21pbmF0b3IsXFxuICAgICAgICAgICAgcHgyID0gK3B4LnRvRml4ZWQoMiksXFxuICAgICAgICAgICAgcHkyID0gK3B5LnRvRml4ZWQoMik7XFxuICAgICAgICBpZiAoXFxuICAgICAgICAgICAgcHgyIDwgK21taW4oeDEsIHgyKS50b0ZpeGVkKDIpIHx8XFxuICAgICAgICAgICAgcHgyID4gK21tYXgoeDEsIHgyKS50b0ZpeGVkKDIpIHx8XFxuICAgICAgICAgICAgcHgyIDwgK21taW4oeDMsIHg0KS50b0ZpeGVkKDIpIHx8XFxuICAgICAgICAgICAgcHgyID4gK21tYXgoeDMsIHg0KS50b0ZpeGVkKDIpIHx8XFxuICAgICAgICAgICAgcHkyIDwgK21taW4oeTEsIHkyKS50b0ZpeGVkKDIpIHx8XFxuICAgICAgICAgICAgcHkyID4gK21tYXgoeTEsIHkyKS50b0ZpeGVkKDIpIHx8XFxuICAgICAgICAgICAgcHkyIDwgK21taW4oeTMsIHk0KS50b0ZpeGVkKDIpIHx8XFxuICAgICAgICAgICAgcHkyID4gK21tYXgoeTMsIHk0KS50b0ZpeGVkKDIpXFxuICAgICAgICApIHtcXG4gICAgICAgICAgICByZXR1cm47XFxuICAgICAgICB9XFxuICAgICAgICByZXR1cm4ge3g6IHB4LCB5OiBweX07XFxuICAgIH1cXG4gICAgZnVuY3Rpb24gaW50ZXIoYmV6MSwgYmV6Mikge1xcbiAgICAgICAgcmV0dXJuIGludGVySGVscGVyKGJlejEsIGJlejIpO1xcbiAgICB9XFxuICAgIGZ1bmN0aW9uIGludGVyQ291bnQoYmV6MSwgYmV6Mikge1xcbiAgICAgICAgcmV0dXJuIGludGVySGVscGVyKGJlejEsIGJlejIsIDEpO1xcbiAgICB9XFxuICAgIGZ1bmN0aW9uIGludGVySGVscGVyKGJlejEsIGJlejIsIGp1c3RDb3VudCkge1xcbiAgICAgICAgdmFyIGJib3gxID0gUi5iZXppZXJCQm94KGJlejEpLFxcbiAgICAgICAgICAgIGJib3gyID0gUi5iZXppZXJCQm94KGJlejIpO1xcbiAgICAgICAgaWYgKCFSLmlzQkJveEludGVyc2VjdChiYm94MSwgYmJveDIpKSB7XFxuICAgICAgICAgICAgcmV0dXJuIGp1c3RDb3VudCA/IDAgOiBbXTtcXG4gICAgICAgIH1cXG4gICAgICAgIHZhciBsMSA9IGJlemxlbi5hcHBseSgwLCBiZXoxKSxcXG4gICAgICAgICAgICBsMiA9IGJlemxlbi5hcHBseSgwLCBiZXoyKSxcXG4gICAgICAgICAgICBuMSA9IG1tYXgofn4obDEgLyA1KSwgMSksXFxuICAgICAgICAgICAgbjIgPSBtbWF4KH5+KGwyIC8gNSksIDEpLFxcbiAgICAgICAgICAgIGRvdHMxID0gW10sXFxuICAgICAgICAgICAgZG90czIgPSBbXSxcXG4gICAgICAgICAgICB4eSA9IHt9LFxcbiAgICAgICAgICAgIHJlcyA9IGp1c3RDb3VudCA/IDAgOiBbXTtcXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbjEgKyAxOyBpKyspIHtcXG4gICAgICAgICAgICB2YXIgcCA9IFIuZmluZERvdHNBdFNlZ21lbnQuYXBwbHkoUiwgYmV6MS5jb25jYXQoaSAvIG4xKSk7XFxuICAgICAgICAgICAgZG90czEucHVzaCh7eDogcC54LCB5OiBwLnksIHQ6IGkgLyBuMX0pO1xcbiAgICAgICAgfVxcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG4yICsgMTsgaSsrKSB7XFxuICAgICAgICAgICAgcCA9IFIuZmluZERvdHNBdFNlZ21lbnQuYXBwbHkoUiwgYmV6Mi5jb25jYXQoaSAvIG4yKSk7XFxuICAgICAgICAgICAgZG90czIucHVzaCh7eDogcC54LCB5OiBwLnksIHQ6IGkgLyBuMn0pO1xcbiAgICAgICAgfVxcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG4xOyBpKyspIHtcXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG4yOyBqKyspIHtcXG4gICAgICAgICAgICAgICAgdmFyIGRpID0gZG90czFbaV0sXFxuICAgICAgICAgICAgICAgICAgICBkaTEgPSBkb3RzMVtpICsgMV0sXFxuICAgICAgICAgICAgICAgICAgICBkaiA9IGRvdHMyW2pdLFxcbiAgICAgICAgICAgICAgICAgICAgZGoxID0gZG90czJbaiArIDFdLFxcbiAgICAgICAgICAgICAgICAgICAgY2kgPSBhYnMoZGkxLnggLSBkaS54KSA8IC4wMDEgPyBcXFwieVxcXCIgOiBcXFwieFxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBjaiA9IGFicyhkajEueCAtIGRqLngpIDwgLjAwMSA/IFxcXCJ5XFxcIiA6IFxcXCJ4XFxcIixcXG4gICAgICAgICAgICAgICAgICAgIGlzID0gaW50ZXJzZWN0KGRpLngsIGRpLnksIGRpMS54LCBkaTEueSwgZGoueCwgZGoueSwgZGoxLngsIGRqMS55KTtcXG4gICAgICAgICAgICAgICAgaWYgKGlzKSB7XFxuICAgICAgICAgICAgICAgICAgICBpZiAoeHlbaXMueC50b0ZpeGVkKDQpXSA9PSBpcy55LnRvRml4ZWQoNCkpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgIHh5W2lzLngudG9GaXhlZCg0KV0gPSBpcy55LnRvRml4ZWQoNCk7XFxuICAgICAgICAgICAgICAgICAgICB2YXIgdDEgPSBkaS50ICsgYWJzKChpc1tjaV0gLSBkaVtjaV0pIC8gKGRpMVtjaV0gLSBkaVtjaV0pKSAqIChkaTEudCAtIGRpLnQpLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHQyID0gZGoudCArIGFicygoaXNbY2pdIC0gZGpbY2pdKSAvIChkajFbY2pdIC0gZGpbY2pdKSkgKiAoZGoxLnQgLSBkai50KTtcXG4gICAgICAgICAgICAgICAgICAgIGlmICh0MSA+PSAwICYmIHQxIDw9IDEuMDAxICYmIHQyID49IDAgJiYgdDIgPD0gMS4wMDEpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoanVzdENvdW50KSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcysrO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcy5wdXNoKHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg6IGlzLngsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5OiBpcy55LFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdDE6IG1taW4odDEsIDEpLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdDI6IG1taW4odDIsIDEpXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIHJldHVybiByZXM7XFxuICAgIH1cXG4gICAgLypcXFxcXFxuICAgICAqIFJhcGhhZWwucGF0aEludGVyc2VjdGlvblxcbiAgICAgWyBtZXRob2QgXVxcbiAgICAgKipcXG4gICAgICogVXRpbGl0eSBtZXRob2RcXG4gICAgICoqXFxuICAgICAqIEZpbmRzIGludGVyc2VjdGlvbnMgb2YgdHdvIHBhdGhzXFxuICAgICA+IFBhcmFtZXRlcnNcXG4gICAgIC0gcGF0aDEgKHN0cmluZykgcGF0aCBzdHJpbmdcXG4gICAgIC0gcGF0aDIgKHN0cmluZykgcGF0aCBzdHJpbmdcXG4gICAgID0gKGFycmF5KSBkb3RzIG9mIGludGVyc2VjdGlvblxcbiAgICAgbyBbXFxuICAgICBvICAgICB7XFxuICAgICBvICAgICAgICAgeDogKG51bWJlcikgeCBjb29yZGluYXRlIG9mIHRoZSBwb2ludFxcbiAgICAgbyAgICAgICAgIHk6IChudW1iZXIpIHkgY29vcmRpbmF0ZSBvZiB0aGUgcG9pbnRcXG4gICAgIG8gICAgICAgICB0MTogKG51bWJlcikgdCB2YWx1ZSBmb3Igc2VnbWVudCBvZiBwYXRoMVxcbiAgICAgbyAgICAgICAgIHQyOiAobnVtYmVyKSB0IHZhbHVlIGZvciBzZWdtZW50IG9mIHBhdGgyXFxuICAgICBvICAgICAgICAgc2VnbWVudDE6IChudW1iZXIpIG9yZGVyIG51bWJlciBmb3Igc2VnbWVudCBvZiBwYXRoMVxcbiAgICAgbyAgICAgICAgIHNlZ21lbnQyOiAobnVtYmVyKSBvcmRlciBudW1iZXIgZm9yIHNlZ21lbnQgb2YgcGF0aDJcXG4gICAgIG8gICAgICAgICBiZXoxOiAoYXJyYXkpIGVpZ2h0IGNvb3JkaW5hdGVzIHJlcHJlc2VudGluZyBiZXppw6lyIGN1cnZlIGZvciB0aGUgc2VnbWVudCBvZiBwYXRoMVxcbiAgICAgbyAgICAgICAgIGJlejI6IChhcnJheSkgZWlnaHQgY29vcmRpbmF0ZXMgcmVwcmVzZW50aW5nIGJlemnDqXIgY3VydmUgZm9yIHRoZSBzZWdtZW50IG9mIHBhdGgyXFxuICAgICBvICAgICB9XFxuICAgICBvIF1cXG4gICAgXFxcXCovXFxuICAgIFIucGF0aEludGVyc2VjdGlvbiA9IGZ1bmN0aW9uIChwYXRoMSwgcGF0aDIpIHtcXG4gICAgICAgIHJldHVybiBpbnRlclBhdGhIZWxwZXIocGF0aDEsIHBhdGgyKTtcXG4gICAgfTtcXG4gICAgUi5wYXRoSW50ZXJzZWN0aW9uTnVtYmVyID0gZnVuY3Rpb24gKHBhdGgxLCBwYXRoMikge1xcbiAgICAgICAgcmV0dXJuIGludGVyUGF0aEhlbHBlcihwYXRoMSwgcGF0aDIsIDEpO1xcbiAgICB9O1xcbiAgICBmdW5jdGlvbiBpbnRlclBhdGhIZWxwZXIocGF0aDEsIHBhdGgyLCBqdXN0Q291bnQpIHtcXG4gICAgICAgIHBhdGgxID0gUi5fcGF0aDJjdXJ2ZShwYXRoMSk7XFxuICAgICAgICBwYXRoMiA9IFIuX3BhdGgyY3VydmUocGF0aDIpO1xcbiAgICAgICAgdmFyIHgxLCB5MSwgeDIsIHkyLCB4MW0sIHkxbSwgeDJtLCB5Mm0sIGJlejEsIGJlejIsXFxuICAgICAgICAgICAgcmVzID0ganVzdENvdW50ID8gMCA6IFtdO1xcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gcGF0aDEubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xcbiAgICAgICAgICAgIHZhciBwaSA9IHBhdGgxW2ldO1xcbiAgICAgICAgICAgIGlmIChwaVswXSA9PSBcXFwiTVxcXCIpIHtcXG4gICAgICAgICAgICAgICAgeDEgPSB4MW0gPSBwaVsxXTtcXG4gICAgICAgICAgICAgICAgeTEgPSB5MW0gPSBwaVsyXTtcXG4gICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICBpZiAocGlbMF0gPT0gXFxcIkNcXFwiKSB7XFxuICAgICAgICAgICAgICAgICAgICBiZXoxID0gW3gxLCB5MV0uY29uY2F0KHBpLnNsaWNlKDEpKTtcXG4gICAgICAgICAgICAgICAgICAgIHgxID0gYmV6MVs2XTtcXG4gICAgICAgICAgICAgICAgICAgIHkxID0gYmV6MVs3XTtcXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICAgIGJlejEgPSBbeDEsIHkxLCB4MSwgeTEsIHgxbSwgeTFtLCB4MW0sIHkxbV07XFxuICAgICAgICAgICAgICAgICAgICB4MSA9IHgxbTtcXG4gICAgICAgICAgICAgICAgICAgIHkxID0geTFtO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwLCBqaiA9IHBhdGgyLmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcXG4gICAgICAgICAgICAgICAgICAgIHZhciBwaiA9IHBhdGgyW2pdO1xcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBqWzBdID09IFxcXCJNXFxcIikge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHgyID0geDJtID0gcGpbMV07XFxuICAgICAgICAgICAgICAgICAgICAgICAgeTIgPSB5Mm0gPSBwalsyXTtcXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBqWzBdID09IFxcXCJDXFxcIikge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZXoyID0gW3gyLCB5Ml0uY29uY2F0KHBqLnNsaWNlKDEpKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDIgPSBiZXoyWzZdO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5MiA9IGJlejJbN107XFxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmV6MiA9IFt4MiwgeTIsIHgyLCB5MiwgeDJtLCB5Mm0sIHgybSwgeTJtXTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDIgPSB4Mm07XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkyID0geTJtO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW50ciA9IGludGVySGVscGVyKGJlejEsIGJlejIsIGp1c3RDb3VudCk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGp1c3RDb3VudCkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXMgKz0gaW50cjtcXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBrID0gMCwga2sgPSBpbnRyLmxlbmd0aDsgayA8IGtrOyBrKyspIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludHJba10uc2VnbWVudDEgPSBpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50cltrXS5zZWdtZW50MiA9IGo7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRyW2tdLmJlejEgPSBiZXoxO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50cltrXS5iZXoyID0gYmV6MjtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXMgPSByZXMuY29uY2F0KGludHIpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIHJldHVybiByZXM7XFxuICAgIH1cXG4gICAgLypcXFxcXFxuICAgICAqIFJhcGhhZWwuaXNQb2ludEluc2lkZVBhdGhcXG4gICAgIFsgbWV0aG9kIF1cXG4gICAgICoqXFxuICAgICAqIFV0aWxpdHkgbWV0aG9kXFxuICAgICAqKlxcbiAgICAgKiBSZXR1cm5zIGB0cnVlYCBpZiBnaXZlbiBwb2ludCBpcyBpbnNpZGUgYSBnaXZlbiBjbG9zZWQgcGF0aC5cXG4gICAgID4gUGFyYW1ldGVyc1xcbiAgICAgLSBwYXRoIChzdHJpbmcpIHBhdGggc3RyaW5nXFxuICAgICAtIHggKG51bWJlcikgeCBvZiB0aGUgcG9pbnRcXG4gICAgIC0geSAobnVtYmVyKSB5IG9mIHRoZSBwb2ludFxcbiAgICAgPSAoYm9vbGVhbikgdHJ1ZSwgaWYgcG9pbnQgaXMgaW5zaWRlIHRoZSBwYXRoXFxuICAgIFxcXFwqL1xcbiAgICBSLmlzUG9pbnRJbnNpZGVQYXRoID0gZnVuY3Rpb24gKHBhdGgsIHgsIHkpIHtcXG4gICAgICAgIHZhciBiYm94ID0gUi5wYXRoQkJveChwYXRoKTtcXG4gICAgICAgIHJldHVybiBSLmlzUG9pbnRJbnNpZGVCQm94KGJib3gsIHgsIHkpICYmXFxuICAgICAgICAgICAgICAgaW50ZXJQYXRoSGVscGVyKHBhdGgsIFtbXFxcIk1cXFwiLCB4LCB5XSwgW1xcXCJIXFxcIiwgYmJveC54MiArIDEwXV0sIDEpICUgMiA9PSAxO1xcbiAgICB9O1xcbiAgICBSLl9yZW1vdmVkRmFjdG9yeSA9IGZ1bmN0aW9uIChtZXRob2RuYW1lKSB7XFxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xcbiAgICAgICAgICAgIGV2ZShcXFwicmFwaGFlbC5sb2dcXFwiLCBudWxsLCBcXFwiUmFwaGFcXFxceGVibDogeW91IGFyZSBjYWxsaW5nIHRvIG1ldGhvZCBcXFxcdTIwMWNcXFwiICsgbWV0aG9kbmFtZSArIFxcXCJcXFxcdTIwMWQgb2YgcmVtb3ZlZCBvYmplY3RcXFwiLCBtZXRob2RuYW1lKTtcXG4gICAgICAgIH07XFxuICAgIH07XFxuICAgIC8qXFxcXFxcbiAgICAgKiBSYXBoYWVsLnBhdGhCQm94XFxuICAgICBbIG1ldGhvZCBdXFxuICAgICAqKlxcbiAgICAgKiBVdGlsaXR5IG1ldGhvZFxcbiAgICAgKipcXG4gICAgICogUmV0dXJuIGJvdW5kaW5nIGJveCBvZiBhIGdpdmVuIHBhdGhcXG4gICAgID4gUGFyYW1ldGVyc1xcbiAgICAgLSBwYXRoIChzdHJpbmcpIHBhdGggc3RyaW5nXFxuICAgICA9IChvYmplY3QpIGJvdW5kaW5nIGJveFxcbiAgICAgbyB7XFxuICAgICBvICAgICB4OiAobnVtYmVyKSB4IGNvb3JkaW5hdGUgb2YgdGhlIGxlZnQgdG9wIHBvaW50IG9mIHRoZSBib3hcXG4gICAgIG8gICAgIHk6IChudW1iZXIpIHkgY29vcmRpbmF0ZSBvZiB0aGUgbGVmdCB0b3AgcG9pbnQgb2YgdGhlIGJveFxcbiAgICAgbyAgICAgeDI6IChudW1iZXIpIHggY29vcmRpbmF0ZSBvZiB0aGUgcmlnaHQgYm90dG9tIHBvaW50IG9mIHRoZSBib3hcXG4gICAgIG8gICAgIHkyOiAobnVtYmVyKSB5IGNvb3JkaW5hdGUgb2YgdGhlIHJpZ2h0IGJvdHRvbSBwb2ludCBvZiB0aGUgYm94XFxuICAgICBvICAgICB3aWR0aDogKG51bWJlcikgd2lkdGggb2YgdGhlIGJveFxcbiAgICAgbyAgICAgaGVpZ2h0OiAobnVtYmVyKSBoZWlnaHQgb2YgdGhlIGJveFxcbiAgICAgbyAgICAgY3g6IChudW1iZXIpIHggY29vcmRpbmF0ZSBvZiB0aGUgY2VudGVyIG9mIHRoZSBib3hcXG4gICAgIG8gICAgIGN5OiAobnVtYmVyKSB5IGNvb3JkaW5hdGUgb2YgdGhlIGNlbnRlciBvZiB0aGUgYm94XFxuICAgICBvIH1cXG4gICAgXFxcXCovXFxuICAgIHZhciBwYXRoRGltZW5zaW9ucyA9IFIucGF0aEJCb3ggPSBmdW5jdGlvbiAocGF0aCkge1xcbiAgICAgICAgdmFyIHB0aCA9IHBhdGhzKHBhdGgpO1xcbiAgICAgICAgaWYgKHB0aC5iYm94KSB7XFxuICAgICAgICAgICAgcmV0dXJuIGNsb25lKHB0aC5iYm94KTtcXG4gICAgICAgIH1cXG4gICAgICAgIGlmICghcGF0aCkge1xcbiAgICAgICAgICAgIHJldHVybiB7eDogMCwgeTogMCwgd2lkdGg6IDAsIGhlaWdodDogMCwgeDI6IDAsIHkyOiAwfTtcXG4gICAgICAgIH1cXG4gICAgICAgIHBhdGggPSBwYXRoMmN1cnZlKHBhdGgpO1xcbiAgICAgICAgdmFyIHggPSAwLFxcbiAgICAgICAgICAgIHkgPSAwLFxcbiAgICAgICAgICAgIFggPSBbXSxcXG4gICAgICAgICAgICBZID0gW10sXFxuICAgICAgICAgICAgcDtcXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IHBhdGgubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xcbiAgICAgICAgICAgIHAgPSBwYXRoW2ldO1xcbiAgICAgICAgICAgIGlmIChwWzBdID09IFxcXCJNXFxcIikge1xcbiAgICAgICAgICAgICAgICB4ID0gcFsxXTtcXG4gICAgICAgICAgICAgICAgeSA9IHBbMl07XFxuICAgICAgICAgICAgICAgIFgucHVzaCh4KTtcXG4gICAgICAgICAgICAgICAgWS5wdXNoKHkpO1xcbiAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgIHZhciBkaW0gPSBjdXJ2ZURpbSh4LCB5LCBwWzFdLCBwWzJdLCBwWzNdLCBwWzRdLCBwWzVdLCBwWzZdKTtcXG4gICAgICAgICAgICAgICAgWCA9IFhbY29uY2F0XShkaW0ubWluLngsIGRpbS5tYXgueCk7XFxuICAgICAgICAgICAgICAgIFkgPSBZW2NvbmNhdF0oZGltLm1pbi55LCBkaW0ubWF4LnkpO1xcbiAgICAgICAgICAgICAgICB4ID0gcFs1XTtcXG4gICAgICAgICAgICAgICAgeSA9IHBbNl07XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgICAgdmFyIHhtaW4gPSBtbWluW2FwcGx5XSgwLCBYKSxcXG4gICAgICAgICAgICB5bWluID0gbW1pblthcHBseV0oMCwgWSksXFxuICAgICAgICAgICAgeG1heCA9IG1tYXhbYXBwbHldKDAsIFgpLFxcbiAgICAgICAgICAgIHltYXggPSBtbWF4W2FwcGx5XSgwLCBZKSxcXG4gICAgICAgICAgICB3aWR0aCA9IHhtYXggLSB4bWluLFxcbiAgICAgICAgICAgIGhlaWdodCA9IHltYXggLSB5bWluLFxcbiAgICAgICAgICAgICAgICBiYiA9IHtcXG4gICAgICAgICAgICAgICAgeDogeG1pbixcXG4gICAgICAgICAgICAgICAgeTogeW1pbixcXG4gICAgICAgICAgICAgICAgeDI6IHhtYXgsXFxuICAgICAgICAgICAgICAgIHkyOiB5bWF4LFxcbiAgICAgICAgICAgICAgICB3aWR0aDogd2lkdGgsXFxuICAgICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0LFxcbiAgICAgICAgICAgICAgICBjeDogeG1pbiArIHdpZHRoIC8gMixcXG4gICAgICAgICAgICAgICAgY3k6IHltaW4gKyBoZWlnaHQgLyAyXFxuICAgICAgICAgICAgfTtcXG4gICAgICAgIHB0aC5iYm94ID0gY2xvbmUoYmIpO1xcbiAgICAgICAgcmV0dXJuIGJiO1xcbiAgICB9LFxcbiAgICAgICAgcGF0aENsb25lID0gZnVuY3Rpb24gKHBhdGhBcnJheSkge1xcbiAgICAgICAgICAgIHZhciByZXMgPSBjbG9uZShwYXRoQXJyYXkpO1xcbiAgICAgICAgICAgIHJlcy50b1N0cmluZyA9IFIuX3BhdGgyc3RyaW5nO1xcbiAgICAgICAgICAgIHJldHVybiByZXM7XFxuICAgICAgICB9LFxcbiAgICAgICAgcGF0aFRvUmVsYXRpdmUgPSBSLl9wYXRoVG9SZWxhdGl2ZSA9IGZ1bmN0aW9uIChwYXRoQXJyYXkpIHtcXG4gICAgICAgICAgICB2YXIgcHRoID0gcGF0aHMocGF0aEFycmF5KTtcXG4gICAgICAgICAgICBpZiAocHRoLnJlbCkge1xcbiAgICAgICAgICAgICAgICByZXR1cm4gcGF0aENsb25lKHB0aC5yZWwpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBpZiAoIVIuaXMocGF0aEFycmF5LCBhcnJheSkgfHwgIVIuaXMocGF0aEFycmF5ICYmIHBhdGhBcnJheVswXSwgYXJyYXkpKSB7IC8vIHJvdWdoIGFzc3VtcHRpb25cXG4gICAgICAgICAgICAgICAgcGF0aEFycmF5ID0gUi5wYXJzZVBhdGhTdHJpbmcocGF0aEFycmF5KTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgdmFyIHJlcyA9IFtdLFxcbiAgICAgICAgICAgICAgICB4ID0gMCxcXG4gICAgICAgICAgICAgICAgeSA9IDAsXFxuICAgICAgICAgICAgICAgIG14ID0gMCxcXG4gICAgICAgICAgICAgICAgbXkgPSAwLFxcbiAgICAgICAgICAgICAgICBzdGFydCA9IDA7XFxuICAgICAgICAgICAgaWYgKHBhdGhBcnJheVswXVswXSA9PSBcXFwiTVxcXCIpIHtcXG4gICAgICAgICAgICAgICAgeCA9IHBhdGhBcnJheVswXVsxXTtcXG4gICAgICAgICAgICAgICAgeSA9IHBhdGhBcnJheVswXVsyXTtcXG4gICAgICAgICAgICAgICAgbXggPSB4O1xcbiAgICAgICAgICAgICAgICBteSA9IHk7XFxuICAgICAgICAgICAgICAgIHN0YXJ0Kys7XFxuICAgICAgICAgICAgICAgIHJlcy5wdXNoKFtcXFwiTVxcXCIsIHgsIHldKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IHN0YXJ0LCBpaSA9IHBhdGhBcnJheS5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XFxuICAgICAgICAgICAgICAgIHZhciByID0gcmVzW2ldID0gW10sXFxuICAgICAgICAgICAgICAgICAgICBwYSA9IHBhdGhBcnJheVtpXTtcXG4gICAgICAgICAgICAgICAgaWYgKHBhWzBdICE9IGxvd2VyQ2FzZS5jYWxsKHBhWzBdKSkge1xcbiAgICAgICAgICAgICAgICAgICAgclswXSA9IGxvd2VyQ2FzZS5jYWxsKHBhWzBdKTtcXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoclswXSkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXFxcImFcXFwiOlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByWzFdID0gcGFbMV07XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJbMl0gPSBwYVsyXTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgclszXSA9IHBhWzNdO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByWzRdID0gcGFbNF07XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJbNV0gPSBwYVs1XTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcls2XSA9ICsocGFbNl0gLSB4KS50b0ZpeGVkKDMpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByWzddID0gKyhwYVs3XSAtIHkpLnRvRml4ZWQoMyk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXFxcInZcXFwiOlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByWzFdID0gKyhwYVsxXSAtIHkpLnRvRml4ZWQoMyk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXFxcIm1cXFwiOlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBteCA9IHBhWzFdO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBteSA9IHBhWzJdO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAxLCBqaiA9IHBhLmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJbal0gPSArKHBhW2pdIC0gKChqICUgMikgPyB4IDogeSkpLnRvRml4ZWQoMyk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICAgIHIgPSByZXNbaV0gPSBbXTtcXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYVswXSA9PSBcXFwibVxcXCIpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBteCA9IHBhWzFdICsgeDtcXG4gICAgICAgICAgICAgICAgICAgICAgICBteSA9IHBhWzJdICsgeTtcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGsgPSAwLCBrayA9IHBhLmxlbmd0aDsgayA8IGtrOyBrKyspIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNbaV1ba10gPSBwYVtrXTtcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICB2YXIgbGVuID0gcmVzW2ldLmxlbmd0aDtcXG4gICAgICAgICAgICAgICAgc3dpdGNoIChyZXNbaV1bMF0pIHtcXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXFxcInpcXFwiOlxcbiAgICAgICAgICAgICAgICAgICAgICAgIHggPSBteDtcXG4gICAgICAgICAgICAgICAgICAgICAgICB5ID0gbXk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgICAgICAgICBjYXNlIFxcXCJoXFxcIjpcXG4gICAgICAgICAgICAgICAgICAgICAgICB4ICs9ICtyZXNbaV1bbGVuIC0gMV07XFxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgICAgICAgICBjYXNlIFxcXCJ2XFxcIjpcXG4gICAgICAgICAgICAgICAgICAgICAgICB5ICs9ICtyZXNbaV1bbGVuIC0gMV07XFxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxcbiAgICAgICAgICAgICAgICAgICAgICAgIHggKz0gK3Jlc1tpXVtsZW4gLSAyXTtcXG4gICAgICAgICAgICAgICAgICAgICAgICB5ICs9ICtyZXNbaV1bbGVuIC0gMV07XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgcmVzLnRvU3RyaW5nID0gUi5fcGF0aDJzdHJpbmc7XFxuICAgICAgICAgICAgcHRoLnJlbCA9IHBhdGhDbG9uZShyZXMpO1xcbiAgICAgICAgICAgIHJldHVybiByZXM7XFxuICAgICAgICB9LFxcbiAgICAgICAgcGF0aFRvQWJzb2x1dGUgPSBSLl9wYXRoVG9BYnNvbHV0ZSA9IGZ1bmN0aW9uIChwYXRoQXJyYXkpIHtcXG4gICAgICAgICAgICB2YXIgcHRoID0gcGF0aHMocGF0aEFycmF5KTtcXG4gICAgICAgICAgICBpZiAocHRoLmFicykge1xcbiAgICAgICAgICAgICAgICByZXR1cm4gcGF0aENsb25lKHB0aC5hYnMpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBpZiAoIVIuaXMocGF0aEFycmF5LCBhcnJheSkgfHwgIVIuaXMocGF0aEFycmF5ICYmIHBhdGhBcnJheVswXSwgYXJyYXkpKSB7IC8vIHJvdWdoIGFzc3VtcHRpb25cXG4gICAgICAgICAgICAgICAgcGF0aEFycmF5ID0gUi5wYXJzZVBhdGhTdHJpbmcocGF0aEFycmF5KTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgaWYgKCFwYXRoQXJyYXkgfHwgIXBhdGhBcnJheS5sZW5ndGgpIHtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtbXFxcIk1cXFwiLCAwLCAwXV07XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIHZhciByZXMgPSBbXSxcXG4gICAgICAgICAgICAgICAgeCA9IDAsXFxuICAgICAgICAgICAgICAgIHkgPSAwLFxcbiAgICAgICAgICAgICAgICBteCA9IDAsXFxuICAgICAgICAgICAgICAgIG15ID0gMCxcXG4gICAgICAgICAgICAgICAgc3RhcnQgPSAwO1xcbiAgICAgICAgICAgIGlmIChwYXRoQXJyYXlbMF1bMF0gPT0gXFxcIk1cXFwiKSB7XFxuICAgICAgICAgICAgICAgIHggPSArcGF0aEFycmF5WzBdWzFdO1xcbiAgICAgICAgICAgICAgICB5ID0gK3BhdGhBcnJheVswXVsyXTtcXG4gICAgICAgICAgICAgICAgbXggPSB4O1xcbiAgICAgICAgICAgICAgICBteSA9IHk7XFxuICAgICAgICAgICAgICAgIHN0YXJ0Kys7XFxuICAgICAgICAgICAgICAgIHJlc1swXSA9IFtcXFwiTVxcXCIsIHgsIHldO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB2YXIgY3J6ID0gcGF0aEFycmF5Lmxlbmd0aCA9PSAzICYmIHBhdGhBcnJheVswXVswXSA9PSBcXFwiTVxcXCIgJiYgcGF0aEFycmF5WzFdWzBdLnRvVXBwZXJDYXNlKCkgPT0gXFxcIlJcXFwiICYmIHBhdGhBcnJheVsyXVswXS50b1VwcGVyQ2FzZSgpID09IFxcXCJaXFxcIjtcXG4gICAgICAgICAgICBmb3IgKHZhciByLCBwYSwgaSA9IHN0YXJ0LCBpaSA9IHBhdGhBcnJheS5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XFxuICAgICAgICAgICAgICAgIHJlcy5wdXNoKHIgPSBbXSk7XFxuICAgICAgICAgICAgICAgIHBhID0gcGF0aEFycmF5W2ldO1xcbiAgICAgICAgICAgICAgICBpZiAocGFbMF0gIT0gdXBwZXJDYXNlLmNhbGwocGFbMF0pKSB7XFxuICAgICAgICAgICAgICAgICAgICByWzBdID0gdXBwZXJDYXNlLmNhbGwocGFbMF0pO1xcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChyWzBdKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcXFwiQVxcXCI6XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJbMV0gPSBwYVsxXTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgclsyXSA9IHBhWzJdO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByWzNdID0gcGFbM107XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJbNF0gPSBwYVs0XTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcls1XSA9IHBhWzVdO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByWzZdID0gKyhwYVs2XSArIHgpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByWzddID0gKyhwYVs3XSArIHkpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFxcXCJWXFxcIjpcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgclsxXSA9ICtwYVsxXSArIHk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXFxcIkhcXFwiOlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByWzFdID0gK3BhWzFdICsgeDtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcXFwiUlxcXCI6XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkb3RzID0gW3gsIHldW2NvbmNhdF0ocGEuc2xpY2UoMSkpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMiwgamogPSBkb3RzLmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvdHNbal0gPSArZG90c1tqXSArIHg7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb3RzWysral0gPSArZG90c1tqXSArIHk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzLnBvcCgpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXMgPSByZXNbY29uY2F0XShjYXRtdWxsUm9tMmJlemllcihkb3RzLCBjcnopKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcXFwiTVxcXCI6XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG14ID0gK3BhWzFdICsgeDtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbXkgPSArcGFbMl0gKyB5O1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaiA9IDEsIGpqID0gcGEubGVuZ3RoOyBqIDwgamo7IGorKykge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcltqXSA9ICtwYVtqXSArICgoaiAlIDIpID8geCA6IHkpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGFbMF0gPT0gXFxcIlJcXFwiKSB7XFxuICAgICAgICAgICAgICAgICAgICBkb3RzID0gW3gsIHldW2NvbmNhdF0ocGEuc2xpY2UoMSkpO1xcbiAgICAgICAgICAgICAgICAgICAgcmVzLnBvcCgpO1xcbiAgICAgICAgICAgICAgICAgICAgcmVzID0gcmVzW2NvbmNhdF0oY2F0bXVsbFJvbTJiZXppZXIoZG90cywgY3J6KSk7XFxuICAgICAgICAgICAgICAgICAgICByID0gW1xcXCJSXFxcIl1bY29uY2F0XShwYS5zbGljZSgtMikpO1xcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgayA9IDAsIGtrID0gcGEubGVuZ3RoOyBrIDwga2s7IGsrKykge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHJba10gPSBwYVtrXTtcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHJbMF0pIHtcXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXFxcIlpcXFwiOlxcbiAgICAgICAgICAgICAgICAgICAgICAgIHggPSBteDtcXG4gICAgICAgICAgICAgICAgICAgICAgICB5ID0gbXk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgICAgICAgICBjYXNlIFxcXCJIXFxcIjpcXG4gICAgICAgICAgICAgICAgICAgICAgICB4ID0gclsxXTtcXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXFxcIlZcXFwiOlxcbiAgICAgICAgICAgICAgICAgICAgICAgIHkgPSByWzFdO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcXFwiTVxcXCI6XFxuICAgICAgICAgICAgICAgICAgICAgICAgbXggPSByW3IubGVuZ3RoIC0gMl07XFxuICAgICAgICAgICAgICAgICAgICAgICAgbXkgPSByW3IubGVuZ3RoIC0gMV07XFxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxcbiAgICAgICAgICAgICAgICAgICAgICAgIHggPSByW3IubGVuZ3RoIC0gMl07XFxuICAgICAgICAgICAgICAgICAgICAgICAgeSA9IHJbci5sZW5ndGggLSAxXTtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICByZXMudG9TdHJpbmcgPSBSLl9wYXRoMnN0cmluZztcXG4gICAgICAgICAgICBwdGguYWJzID0gcGF0aENsb25lKHJlcyk7XFxuICAgICAgICAgICAgcmV0dXJuIHJlcztcXG4gICAgICAgIH0sXFxuICAgICAgICBsMmMgPSBmdW5jdGlvbiAoeDEsIHkxLCB4MiwgeTIpIHtcXG4gICAgICAgICAgICByZXR1cm4gW3gxLCB5MSwgeDIsIHkyLCB4MiwgeTJdO1xcbiAgICAgICAgfSxcXG4gICAgICAgIHEyYyA9IGZ1bmN0aW9uICh4MSwgeTEsIGF4LCBheSwgeDIsIHkyKSB7XFxuICAgICAgICAgICAgdmFyIF8xMyA9IDEgLyAzLFxcbiAgICAgICAgICAgICAgICBfMjMgPSAyIC8gMztcXG4gICAgICAgICAgICByZXR1cm4gW1xcbiAgICAgICAgICAgICAgICAgICAgXzEzICogeDEgKyBfMjMgKiBheCxcXG4gICAgICAgICAgICAgICAgICAgIF8xMyAqIHkxICsgXzIzICogYXksXFxuICAgICAgICAgICAgICAgICAgICBfMTMgKiB4MiArIF8yMyAqIGF4LFxcbiAgICAgICAgICAgICAgICAgICAgXzEzICogeTIgKyBfMjMgKiBheSxcXG4gICAgICAgICAgICAgICAgICAgIHgyLFxcbiAgICAgICAgICAgICAgICAgICAgeTJcXG4gICAgICAgICAgICAgICAgXTtcXG4gICAgICAgIH0sXFxuICAgICAgICBhMmMgPSBmdW5jdGlvbiAoeDEsIHkxLCByeCwgcnksIGFuZ2xlLCBsYXJnZV9hcmNfZmxhZywgc3dlZXBfZmxhZywgeDIsIHkyLCByZWN1cnNpdmUpIHtcXG4gICAgICAgICAgICAvLyBmb3IgbW9yZSBpbmZvcm1hdGlvbiBvZiB3aGVyZSB0aGlzIG1hdGggY2FtZSBmcm9tIHZpc2l0OlxcbiAgICAgICAgICAgIC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL1NWRzExL2ltcGxub3RlLmh0bWwjQXJjSW1wbGVtZW50YXRpb25Ob3Rlc1xcbiAgICAgICAgICAgIHZhciBfMTIwID0gUEkgKiAxMjAgLyAxODAsXFxuICAgICAgICAgICAgICAgIHJhZCA9IFBJIC8gMTgwICogKCthbmdsZSB8fCAwKSxcXG4gICAgICAgICAgICAgICAgcmVzID0gW10sXFxuICAgICAgICAgICAgICAgIHh5LFxcbiAgICAgICAgICAgICAgICByb3RhdGUgPSBjYWNoZXIoZnVuY3Rpb24gKHgsIHksIHJhZCkge1xcbiAgICAgICAgICAgICAgICAgICAgdmFyIFggPSB4ICogbWF0aC5jb3MocmFkKSAtIHkgKiBtYXRoLnNpbihyYWQpLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIFkgPSB4ICogbWF0aC5zaW4ocmFkKSArIHkgKiBtYXRoLmNvcyhyYWQpO1xcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHt4OiBYLCB5OiBZfTtcXG4gICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgaWYgKCFyZWN1cnNpdmUpIHtcXG4gICAgICAgICAgICAgICAgeHkgPSByb3RhdGUoeDEsIHkxLCAtcmFkKTtcXG4gICAgICAgICAgICAgICAgeDEgPSB4eS54O1xcbiAgICAgICAgICAgICAgICB5MSA9IHh5Lnk7XFxuICAgICAgICAgICAgICAgIHh5ID0gcm90YXRlKHgyLCB5MiwgLXJhZCk7XFxuICAgICAgICAgICAgICAgIHgyID0geHkueDtcXG4gICAgICAgICAgICAgICAgeTIgPSB4eS55O1xcbiAgICAgICAgICAgICAgICB2YXIgY29zID0gbWF0aC5jb3MoUEkgLyAxODAgKiBhbmdsZSksXFxuICAgICAgICAgICAgICAgICAgICBzaW4gPSBtYXRoLnNpbihQSSAvIDE4MCAqIGFuZ2xlKSxcXG4gICAgICAgICAgICAgICAgICAgIHggPSAoeDEgLSB4MikgLyAyLFxcbiAgICAgICAgICAgICAgICAgICAgeSA9ICh5MSAtIHkyKSAvIDI7XFxuICAgICAgICAgICAgICAgIHZhciBoID0gKHggKiB4KSAvIChyeCAqIHJ4KSArICh5ICogeSkgLyAocnkgKiByeSk7XFxuICAgICAgICAgICAgICAgIGlmIChoID4gMSkge1xcbiAgICAgICAgICAgICAgICAgICAgaCA9IG1hdGguc3FydChoKTtcXG4gICAgICAgICAgICAgICAgICAgIHJ4ID0gaCAqIHJ4O1xcbiAgICAgICAgICAgICAgICAgICAgcnkgPSBoICogcnk7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgdmFyIHJ4MiA9IHJ4ICogcngsXFxuICAgICAgICAgICAgICAgICAgICByeTIgPSByeSAqIHJ5LFxcbiAgICAgICAgICAgICAgICAgICAgayA9IChsYXJnZV9hcmNfZmxhZyA9PSBzd2VlcF9mbGFnID8gLTEgOiAxKSAqXFxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0aC5zcXJ0KGFicygocngyICogcnkyIC0gcngyICogeSAqIHkgLSByeTIgKiB4ICogeCkgLyAocngyICogeSAqIHkgKyByeTIgKiB4ICogeCkpKSxcXG4gICAgICAgICAgICAgICAgICAgIGN4ID0gayAqIHJ4ICogeSAvIHJ5ICsgKHgxICsgeDIpIC8gMixcXG4gICAgICAgICAgICAgICAgICAgIGN5ID0gayAqIC1yeSAqIHggLyByeCArICh5MSArIHkyKSAvIDIsXFxuICAgICAgICAgICAgICAgICAgICBmMSA9IG1hdGguYXNpbigoKHkxIC0gY3kpIC8gcnkpLnRvRml4ZWQoOSkpLFxcbiAgICAgICAgICAgICAgICAgICAgZjIgPSBtYXRoLmFzaW4oKCh5MiAtIGN5KSAvIHJ5KS50b0ZpeGVkKDkpKTtcXG5cXG4gICAgICAgICAgICAgICAgZjEgPSB4MSA8IGN4ID8gUEkgLSBmMSA6IGYxO1xcbiAgICAgICAgICAgICAgICBmMiA9IHgyIDwgY3ggPyBQSSAtIGYyIDogZjI7XFxuICAgICAgICAgICAgICAgIGYxIDwgMCAmJiAoZjEgPSBQSSAqIDIgKyBmMSk7XFxuICAgICAgICAgICAgICAgIGYyIDwgMCAmJiAoZjIgPSBQSSAqIDIgKyBmMik7XFxuICAgICAgICAgICAgICAgIGlmIChzd2VlcF9mbGFnICYmIGYxID4gZjIpIHtcXG4gICAgICAgICAgICAgICAgICAgIGYxID0gZjEgLSBQSSAqIDI7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgaWYgKCFzd2VlcF9mbGFnICYmIGYyID4gZjEpIHtcXG4gICAgICAgICAgICAgICAgICAgIGYyID0gZjIgLSBQSSAqIDI7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICBmMSA9IHJlY3Vyc2l2ZVswXTtcXG4gICAgICAgICAgICAgICAgZjIgPSByZWN1cnNpdmVbMV07XFxuICAgICAgICAgICAgICAgIGN4ID0gcmVjdXJzaXZlWzJdO1xcbiAgICAgICAgICAgICAgICBjeSA9IHJlY3Vyc2l2ZVszXTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgdmFyIGRmID0gZjIgLSBmMTtcXG4gICAgICAgICAgICBpZiAoYWJzKGRmKSA+IF8xMjApIHtcXG4gICAgICAgICAgICAgICAgdmFyIGYyb2xkID0gZjIsXFxuICAgICAgICAgICAgICAgICAgICB4Mm9sZCA9IHgyLFxcbiAgICAgICAgICAgICAgICAgICAgeTJvbGQgPSB5MjtcXG4gICAgICAgICAgICAgICAgZjIgPSBmMSArIF8xMjAgKiAoc3dlZXBfZmxhZyAmJiBmMiA+IGYxID8gMSA6IC0xKTtcXG4gICAgICAgICAgICAgICAgeDIgPSBjeCArIHJ4ICogbWF0aC5jb3MoZjIpO1xcbiAgICAgICAgICAgICAgICB5MiA9IGN5ICsgcnkgKiBtYXRoLnNpbihmMik7XFxuICAgICAgICAgICAgICAgIHJlcyA9IGEyYyh4MiwgeTIsIHJ4LCByeSwgYW5nbGUsIDAsIHN3ZWVwX2ZsYWcsIHgyb2xkLCB5Mm9sZCwgW2YyLCBmMm9sZCwgY3gsIGN5XSk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIGRmID0gZjIgLSBmMTtcXG4gICAgICAgICAgICB2YXIgYzEgPSBtYXRoLmNvcyhmMSksXFxuICAgICAgICAgICAgICAgIHMxID0gbWF0aC5zaW4oZjEpLFxcbiAgICAgICAgICAgICAgICBjMiA9IG1hdGguY29zKGYyKSxcXG4gICAgICAgICAgICAgICAgczIgPSBtYXRoLnNpbihmMiksXFxuICAgICAgICAgICAgICAgIHQgPSBtYXRoLnRhbihkZiAvIDQpLFxcbiAgICAgICAgICAgICAgICBoeCA9IDQgLyAzICogcnggKiB0LFxcbiAgICAgICAgICAgICAgICBoeSA9IDQgLyAzICogcnkgKiB0LFxcbiAgICAgICAgICAgICAgICBtMSA9IFt4MSwgeTFdLFxcbiAgICAgICAgICAgICAgICBtMiA9IFt4MSArIGh4ICogczEsIHkxIC0gaHkgKiBjMV0sXFxuICAgICAgICAgICAgICAgIG0zID0gW3gyICsgaHggKiBzMiwgeTIgLSBoeSAqIGMyXSxcXG4gICAgICAgICAgICAgICAgbTQgPSBbeDIsIHkyXTtcXG4gICAgICAgICAgICBtMlswXSA9IDIgKiBtMVswXSAtIG0yWzBdO1xcbiAgICAgICAgICAgIG0yWzFdID0gMiAqIG0xWzFdIC0gbTJbMV07XFxuICAgICAgICAgICAgaWYgKHJlY3Vyc2l2ZSkge1xcbiAgICAgICAgICAgICAgICByZXR1cm4gW20yLCBtMywgbTRdW2NvbmNhdF0ocmVzKTtcXG4gICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICByZXMgPSBbbTIsIG0zLCBtNF1bY29uY2F0XShyZXMpLmpvaW4oKVtzcGxpdF0oXFxcIixcXFwiKTtcXG4gICAgICAgICAgICAgICAgdmFyIG5ld3JlcyA9IFtdO1xcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSByZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xcbiAgICAgICAgICAgICAgICAgICAgbmV3cmVzW2ldID0gaSAlIDIgPyByb3RhdGUocmVzW2kgLSAxXSwgcmVzW2ldLCByYWQpLnkgOiByb3RhdGUocmVzW2ldLCByZXNbaSArIDFdLCByYWQpLng7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ld3JlcztcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9LFxcbiAgICAgICAgZmluZERvdEF0U2VnbWVudCA9IGZ1bmN0aW9uIChwMXgsIHAxeSwgYzF4LCBjMXksIGMyeCwgYzJ5LCBwMngsIHAyeSwgdCkge1xcbiAgICAgICAgICAgIHZhciB0MSA9IDEgLSB0O1xcbiAgICAgICAgICAgIHJldHVybiB7XFxuICAgICAgICAgICAgICAgIHg6IHBvdyh0MSwgMykgKiBwMXggKyBwb3codDEsIDIpICogMyAqIHQgKiBjMXggKyB0MSAqIDMgKiB0ICogdCAqIGMyeCArIHBvdyh0LCAzKSAqIHAyeCxcXG4gICAgICAgICAgICAgICAgeTogcG93KHQxLCAzKSAqIHAxeSArIHBvdyh0MSwgMikgKiAzICogdCAqIGMxeSArIHQxICogMyAqIHQgKiB0ICogYzJ5ICsgcG93KHQsIDMpICogcDJ5XFxuICAgICAgICAgICAgfTtcXG4gICAgICAgIH0sXFxuICAgICAgICBjdXJ2ZURpbSA9IGNhY2hlcihmdW5jdGlvbiAocDF4LCBwMXksIGMxeCwgYzF5LCBjMngsIGMyeSwgcDJ4LCBwMnkpIHtcXG4gICAgICAgICAgICB2YXIgYSA9IChjMnggLSAyICogYzF4ICsgcDF4KSAtIChwMnggLSAyICogYzJ4ICsgYzF4KSxcXG4gICAgICAgICAgICAgICAgYiA9IDIgKiAoYzF4IC0gcDF4KSAtIDIgKiAoYzJ4IC0gYzF4KSxcXG4gICAgICAgICAgICAgICAgYyA9IHAxeCAtIGMxeCxcXG4gICAgICAgICAgICAgICAgdDEgPSAoLWIgKyBtYXRoLnNxcnQoYiAqIGIgLSA0ICogYSAqIGMpKSAvIDIgLyBhLFxcbiAgICAgICAgICAgICAgICB0MiA9ICgtYiAtIG1hdGguc3FydChiICogYiAtIDQgKiBhICogYykpIC8gMiAvIGEsXFxuICAgICAgICAgICAgICAgIHkgPSBbcDF5LCBwMnldLFxcbiAgICAgICAgICAgICAgICB4ID0gW3AxeCwgcDJ4XSxcXG4gICAgICAgICAgICAgICAgZG90O1xcbiAgICAgICAgICAgIGFicyh0MSkgPiBcXFwiMWUxMlxcXCIgJiYgKHQxID0gLjUpO1xcbiAgICAgICAgICAgIGFicyh0MikgPiBcXFwiMWUxMlxcXCIgJiYgKHQyID0gLjUpO1xcbiAgICAgICAgICAgIGlmICh0MSA+IDAgJiYgdDEgPCAxKSB7XFxuICAgICAgICAgICAgICAgIGRvdCA9IGZpbmREb3RBdFNlZ21lbnQocDF4LCBwMXksIGMxeCwgYzF5LCBjMngsIGMyeSwgcDJ4LCBwMnksIHQxKTtcXG4gICAgICAgICAgICAgICAgeC5wdXNoKGRvdC54KTtcXG4gICAgICAgICAgICAgICAgeS5wdXNoKGRvdC55KTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgaWYgKHQyID4gMCAmJiB0MiA8IDEpIHtcXG4gICAgICAgICAgICAgICAgZG90ID0gZmluZERvdEF0U2VnbWVudChwMXgsIHAxeSwgYzF4LCBjMXksIGMyeCwgYzJ5LCBwMngsIHAyeSwgdDIpO1xcbiAgICAgICAgICAgICAgICB4LnB1c2goZG90LngpO1xcbiAgICAgICAgICAgICAgICB5LnB1c2goZG90LnkpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBhID0gKGMyeSAtIDIgKiBjMXkgKyBwMXkpIC0gKHAyeSAtIDIgKiBjMnkgKyBjMXkpO1xcbiAgICAgICAgICAgIGIgPSAyICogKGMxeSAtIHAxeSkgLSAyICogKGMyeSAtIGMxeSk7XFxuICAgICAgICAgICAgYyA9IHAxeSAtIGMxeTtcXG4gICAgICAgICAgICB0MSA9ICgtYiArIG1hdGguc3FydChiICogYiAtIDQgKiBhICogYykpIC8gMiAvIGE7XFxuICAgICAgICAgICAgdDIgPSAoLWIgLSBtYXRoLnNxcnQoYiAqIGIgLSA0ICogYSAqIGMpKSAvIDIgLyBhO1xcbiAgICAgICAgICAgIGFicyh0MSkgPiBcXFwiMWUxMlxcXCIgJiYgKHQxID0gLjUpO1xcbiAgICAgICAgICAgIGFicyh0MikgPiBcXFwiMWUxMlxcXCIgJiYgKHQyID0gLjUpO1xcbiAgICAgICAgICAgIGlmICh0MSA+IDAgJiYgdDEgPCAxKSB7XFxuICAgICAgICAgICAgICAgIGRvdCA9IGZpbmREb3RBdFNlZ21lbnQocDF4LCBwMXksIGMxeCwgYzF5LCBjMngsIGMyeSwgcDJ4LCBwMnksIHQxKTtcXG4gICAgICAgICAgICAgICAgeC5wdXNoKGRvdC54KTtcXG4gICAgICAgICAgICAgICAgeS5wdXNoKGRvdC55KTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgaWYgKHQyID4gMCAmJiB0MiA8IDEpIHtcXG4gICAgICAgICAgICAgICAgZG90ID0gZmluZERvdEF0U2VnbWVudChwMXgsIHAxeSwgYzF4LCBjMXksIGMyeCwgYzJ5LCBwMngsIHAyeSwgdDIpO1xcbiAgICAgICAgICAgICAgICB4LnB1c2goZG90LngpO1xcbiAgICAgICAgICAgICAgICB5LnB1c2goZG90LnkpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICByZXR1cm4ge1xcbiAgICAgICAgICAgICAgICBtaW46IHt4OiBtbWluW2FwcGx5XSgwLCB4KSwgeTogbW1pblthcHBseV0oMCwgeSl9LFxcbiAgICAgICAgICAgICAgICBtYXg6IHt4OiBtbWF4W2FwcGx5XSgwLCB4KSwgeTogbW1heFthcHBseV0oMCwgeSl9XFxuICAgICAgICAgICAgfTtcXG4gICAgICAgIH0pLFxcbiAgICAgICAgcGF0aDJjdXJ2ZSA9IFIuX3BhdGgyY3VydmUgPSBjYWNoZXIoZnVuY3Rpb24gKHBhdGgsIHBhdGgyKSB7XFxuICAgICAgICAgICAgdmFyIHB0aCA9ICFwYXRoMiAmJiBwYXRocyhwYXRoKTtcXG4gICAgICAgICAgICBpZiAoIXBhdGgyICYmIHB0aC5jdXJ2ZSkge1xcbiAgICAgICAgICAgICAgICByZXR1cm4gcGF0aENsb25lKHB0aC5jdXJ2ZSk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIHZhciBwID0gcGF0aFRvQWJzb2x1dGUocGF0aCksXFxuICAgICAgICAgICAgICAgIHAyID0gcGF0aDIgJiYgcGF0aFRvQWJzb2x1dGUocGF0aDIpLFxcbiAgICAgICAgICAgICAgICBhdHRycyA9IHt4OiAwLCB5OiAwLCBieDogMCwgYnk6IDAsIFg6IDAsIFk6IDAsIHF4OiBudWxsLCBxeTogbnVsbH0sXFxuICAgICAgICAgICAgICAgIGF0dHJzMiA9IHt4OiAwLCB5OiAwLCBieDogMCwgYnk6IDAsIFg6IDAsIFk6IDAsIHF4OiBudWxsLCBxeTogbnVsbH0sXFxuICAgICAgICAgICAgICAgIHByb2Nlc3NQYXRoID0gZnVuY3Rpb24gKHBhdGgsIGQsIHBjb20pIHtcXG4gICAgICAgICAgICAgICAgICAgIHZhciBueCwgbnksIHRxID0ge1Q6MSwgUToxfTtcXG4gICAgICAgICAgICAgICAgICAgIGlmICghcGF0aCkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbXFxcIkNcXFwiLCBkLngsIGQueSwgZC54LCBkLnksIGQueCwgZC55XTtcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgICEocGF0aFswXSBpbiB0cSkgJiYgKGQucXggPSBkLnF5ID0gbnVsbCk7XFxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHBhdGhbMF0pIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFxcXCJNXFxcIjpcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5YID0gcGF0aFsxXTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5ZID0gcGF0aFsyXTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcXFwiQVxcXCI6XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGggPSBbXFxcIkNcXFwiXVtjb25jYXRdKGEyY1thcHBseV0oMCwgW2QueCwgZC55XVtjb25jYXRdKHBhdGguc2xpY2UoMSkpKSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXFxcIlNcXFwiOlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGNvbSA9PSBcXFwiQ1xcXCIgfHwgcGNvbSA9PSBcXFwiU1xcXCIpIHsgLy8gSW4gXFxcIlNcXFwiIGNhc2Ugd2UgaGF2ZSB0byB0YWtlIGludG8gYWNjb3VudCwgaWYgdGhlIHByZXZpb3VzIGNvbW1hbmQgaXMgQy9TLlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnggPSBkLnggKiAyIC0gZC5ieDsgICAgICAgICAgLy8gQW5kIHJlZmxlY3QgdGhlIHByZXZpb3VzXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBueSA9IGQueSAqIDIgLSBkLmJ5OyAgICAgICAgICAvLyBjb21tYW5kJ3MgY29udHJvbCBwb2ludCByZWxhdGl2ZSB0byB0aGUgY3VycmVudCBwb2ludC5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gb3Igc29tZSBlbHNlIG9yIG5vdGhpbmdcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG54ID0gZC54O1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnkgPSBkLnk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aCA9IFtcXFwiQ1xcXCIsIG54LCBueV1bY29uY2F0XShwYXRoLnNsaWNlKDEpKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcXFwiVFxcXCI6XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwY29tID09IFxcXCJRXFxcIiB8fCBwY29tID09IFxcXCJUXFxcIikgeyAvLyBJbiBcXFwiVFxcXCIgY2FzZSB3ZSBoYXZlIHRvIHRha2UgaW50byBhY2NvdW50LCBpZiB0aGUgcHJldmlvdXMgY29tbWFuZCBpcyBRL1QuXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnF4ID0gZC54ICogMiAtIGQucXg7ICAgICAgICAvLyBBbmQgbWFrZSBhIHJlZmxlY3Rpb24gc2ltaWxhclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5xeSA9IGQueSAqIDIgLSBkLnF5OyAgICAgICAgLy8gdG8gY2FzZSBcXFwiU1xcXCIuXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG9yIHNvbWV0aGluZyBlbHNlIG9yIG5vdGhpbmdcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQucXggPSBkLng7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnF5ID0gZC55O1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGggPSBbXFxcIkNcXFwiXVtjb25jYXRdKHEyYyhkLngsIGQueSwgZC5xeCwgZC5xeSwgcGF0aFsxXSwgcGF0aFsyXSkpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFxcXCJRXFxcIjpcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5xeCA9IHBhdGhbMV07XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQucXkgPSBwYXRoWzJdO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRoID0gW1xcXCJDXFxcIl1bY29uY2F0XShxMmMoZC54LCBkLnksIHBhdGhbMV0sIHBhdGhbMl0sIHBhdGhbM10sIHBhdGhbNF0pKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcXFwiTFxcXCI6XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGggPSBbXFxcIkNcXFwiXVtjb25jYXRdKGwyYyhkLngsIGQueSwgcGF0aFsxXSwgcGF0aFsyXSkpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFxcXCJIXFxcIjpcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aCA9IFtcXFwiQ1xcXCJdW2NvbmNhdF0obDJjKGQueCwgZC55LCBwYXRoWzFdLCBkLnkpKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcXFwiVlxcXCI6XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGggPSBbXFxcIkNcXFwiXVtjb25jYXRdKGwyYyhkLngsIGQueSwgZC54LCBwYXRoWzFdKSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXFxcIlpcXFwiOlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRoID0gW1xcXCJDXFxcIl1bY29uY2F0XShsMmMoZC54LCBkLnksIGQuWCwgZC5ZKSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhdGg7XFxuICAgICAgICAgICAgICAgIH0sXFxuICAgICAgICAgICAgICAgIGZpeEFyYyA9IGZ1bmN0aW9uIChwcCwgaSkge1xcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBwW2ldLmxlbmd0aCA+IDcpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBwcFtpXS5zaGlmdCgpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwaSA9IHBwW2ldO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChwaS5sZW5ndGgpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGNvbXMxW2ldPVxcXCJBXFxcIjsgLy8gaWYgY3JlYXRlZCBtdWx0aXBsZSBDOnMsIHRoZWlyIG9yaWdpbmFsIHNlZyBpcyBzYXZlZFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwMiAmJiAocGNvbXMyW2ldPVxcXCJBXFxcIik7IC8vIHRoZSBzYW1lIGFzIGFib3ZlXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBwLnNwbGljZShpKyssIDAsIFtcXFwiQ1xcXCJdW2NvbmNhdF0ocGkuc3BsaWNlKDAsIDYpKSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBwLnNwbGljZShpLCAxKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICBpaSA9IG1tYXgocC5sZW5ndGgsIHAyICYmIHAyLmxlbmd0aCB8fCAwKTtcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgfSxcXG4gICAgICAgICAgICAgICAgZml4TSA9IGZ1bmN0aW9uIChwYXRoMSwgcGF0aDIsIGExLCBhMiwgaSkge1xcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhdGgxICYmIHBhdGgyICYmIHBhdGgxW2ldWzBdID09IFxcXCJNXFxcIiAmJiBwYXRoMltpXVswXSAhPSBcXFwiTVxcXCIpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXRoMi5zcGxpY2UoaSwgMCwgW1xcXCJNXFxcIiwgYTIueCwgYTIueV0pO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGExLmJ4ID0gMDtcXG4gICAgICAgICAgICAgICAgICAgICAgICBhMS5ieSA9IDA7XFxuICAgICAgICAgICAgICAgICAgICAgICAgYTEueCA9IHBhdGgxW2ldWzFdO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGExLnkgPSBwYXRoMVtpXVsyXTtcXG4gICAgICAgICAgICAgICAgICAgICAgICBpaSA9IG1tYXgocC5sZW5ndGgsIHAyICYmIHAyLmxlbmd0aCB8fCAwKTtcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgfSxcXG4gICAgICAgICAgICAgICAgcGNvbXMxID0gW10sIC8vIHBhdGggY29tbWFuZHMgb2Ygb3JpZ2luYWwgcGF0aCBwXFxuICAgICAgICAgICAgICAgIHBjb21zMiA9IFtdLCAvLyBwYXRoIGNvbW1hbmRzIG9mIG9yaWdpbmFsIHBhdGggcDJcXG4gICAgICAgICAgICAgICAgcGZpcnN0ID0gXFxcIlxcXCIsIC8vIHRlbXBvcmFyeSBob2xkZXIgZm9yIG9yaWdpbmFsIHBhdGggY29tbWFuZFxcbiAgICAgICAgICAgICAgICBwY29tID0gXFxcIlxcXCI7IC8vIGhvbGRlciBmb3IgcHJldmlvdXMgcGF0aCBjb21tYW5kIG9mIG9yaWdpbmFsIHBhdGhcXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBtbWF4KHAubGVuZ3RoLCBwMiAmJiBwMi5sZW5ndGggfHwgMCk7IGkgPCBpaTsgaSsrKSB7XFxuICAgICAgICAgICAgICAgIHBbaV0gJiYgKHBmaXJzdCA9IHBbaV1bMF0pOyAvLyBzYXZlIGN1cnJlbnQgcGF0aCBjb21tYW5kXFxuXFxuICAgICAgICAgICAgICAgIGlmIChwZmlyc3QgIT0gXFxcIkNcXFwiKSAvLyBDIGlzIG5vdCBzYXZlZCB5ZXQsIGJlY2F1c2UgaXQgbWF5IGJlIHJlc3VsdCBvZiBjb252ZXJzaW9uXFxuICAgICAgICAgICAgICAgIHtcXG4gICAgICAgICAgICAgICAgICAgIHBjb21zMVtpXSA9IHBmaXJzdDsgLy8gU2F2ZSBjdXJyZW50IHBhdGggY29tbWFuZFxcbiAgICAgICAgICAgICAgICAgICAgaSAmJiAoIHBjb20gPSBwY29tczFbaS0xXSk7IC8vIEdldCBwcmV2aW91cyBwYXRoIGNvbW1hbmQgcGNvbVxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIHBbaV0gPSBwcm9jZXNzUGF0aChwW2ldLCBhdHRycywgcGNvbSk7IC8vIFByZXZpb3VzIHBhdGggY29tbWFuZCBpcyBpbnB1dHRlZCB0byBwcm9jZXNzUGF0aFxcblxcbiAgICAgICAgICAgICAgICBpZiAocGNvbXMxW2ldICE9IFxcXCJBXFxcIiAmJiBwZmlyc3QgPT0gXFxcIkNcXFwiKSBwY29tczFbaV0gPSBcXFwiQ1xcXCI7IC8vIEEgaXMgdGhlIG9ubHkgY29tbWFuZFxcbiAgICAgICAgICAgICAgICAvLyB3aGljaCBtYXkgcHJvZHVjZSBtdWx0aXBsZSBDOnNcXG4gICAgICAgICAgICAgICAgLy8gc28gd2UgaGF2ZSB0byBtYWtlIHN1cmUgdGhhdCBDIGlzIGFsc28gQyBpbiBvcmlnaW5hbCBwYXRoXFxuXFxuICAgICAgICAgICAgICAgIGZpeEFyYyhwLCBpKTsgLy8gZml4QXJjIGFkZHMgYWxzbyB0aGUgcmlnaHQgYW1vdW50IG9mIEE6cyB0byBwY29tczFcXG5cXG4gICAgICAgICAgICAgICAgaWYgKHAyKSB7IC8vIHRoZSBzYW1lIHByb2NlZHVyZXMgaXMgZG9uZSB0byBwMlxcbiAgICAgICAgICAgICAgICAgICAgcDJbaV0gJiYgKHBmaXJzdCA9IHAyW2ldWzBdKTtcXG4gICAgICAgICAgICAgICAgICAgIGlmIChwZmlyc3QgIT0gXFxcIkNcXFwiKVxcbiAgICAgICAgICAgICAgICAgICAge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHBjb21zMltpXSA9IHBmaXJzdDtcXG4gICAgICAgICAgICAgICAgICAgICAgICBpICYmIChwY29tID0gcGNvbXMyW2ktMV0pO1xcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgcDJbaV0gPSBwcm9jZXNzUGF0aChwMltpXSwgYXR0cnMyLCBwY29tKTtcXG5cXG4gICAgICAgICAgICAgICAgICAgIGlmIChwY29tczJbaV0hPVxcXCJBXFxcIiAmJiBwZmlyc3Q9PVxcXCJDXFxcIikgcGNvbXMyW2ldPVxcXCJDXFxcIjtcXG5cXG4gICAgICAgICAgICAgICAgICAgIGZpeEFyYyhwMiwgaSk7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgZml4TShwLCBwMiwgYXR0cnMsIGF0dHJzMiwgaSk7XFxuICAgICAgICAgICAgICAgIGZpeE0ocDIsIHAsIGF0dHJzMiwgYXR0cnMsIGkpO1xcbiAgICAgICAgICAgICAgICB2YXIgc2VnID0gcFtpXSxcXG4gICAgICAgICAgICAgICAgICAgIHNlZzIgPSBwMiAmJiBwMltpXSxcXG4gICAgICAgICAgICAgICAgICAgIHNlZ2xlbiA9IHNlZy5sZW5ndGgsXFxuICAgICAgICAgICAgICAgICAgICBzZWcybGVuID0gcDIgJiYgc2VnMi5sZW5ndGg7XFxuICAgICAgICAgICAgICAgIGF0dHJzLnggPSBzZWdbc2VnbGVuIC0gMl07XFxuICAgICAgICAgICAgICAgIGF0dHJzLnkgPSBzZWdbc2VnbGVuIC0gMV07XFxuICAgICAgICAgICAgICAgIGF0dHJzLmJ4ID0gdG9GbG9hdChzZWdbc2VnbGVuIC0gNF0pIHx8IGF0dHJzLng7XFxuICAgICAgICAgICAgICAgIGF0dHJzLmJ5ID0gdG9GbG9hdChzZWdbc2VnbGVuIC0gM10pIHx8IGF0dHJzLnk7XFxuICAgICAgICAgICAgICAgIGF0dHJzMi5ieCA9IHAyICYmICh0b0Zsb2F0KHNlZzJbc2VnMmxlbiAtIDRdKSB8fCBhdHRyczIueCk7XFxuICAgICAgICAgICAgICAgIGF0dHJzMi5ieSA9IHAyICYmICh0b0Zsb2F0KHNlZzJbc2VnMmxlbiAtIDNdKSB8fCBhdHRyczIueSk7XFxuICAgICAgICAgICAgICAgIGF0dHJzMi54ID0gcDIgJiYgc2VnMltzZWcybGVuIC0gMl07XFxuICAgICAgICAgICAgICAgIGF0dHJzMi55ID0gcDIgJiYgc2VnMltzZWcybGVuIC0gMV07XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIGlmICghcDIpIHtcXG4gICAgICAgICAgICAgICAgcHRoLmN1cnZlID0gcGF0aENsb25lKHApO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICByZXR1cm4gcDIgPyBbcCwgcDJdIDogcDtcXG4gICAgICAgIH0sIG51bGwsIHBhdGhDbG9uZSksXFxuICAgICAgICBwYXJzZURvdHMgPSBSLl9wYXJzZURvdHMgPSBjYWNoZXIoZnVuY3Rpb24gKGdyYWRpZW50KSB7XFxuICAgICAgICAgICAgdmFyIGRvdHMgPSBbXTtcXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBncmFkaWVudC5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XFxuICAgICAgICAgICAgICAgIHZhciBkb3QgPSB7fSxcXG4gICAgICAgICAgICAgICAgICAgIHBhciA9IGdyYWRpZW50W2ldLm1hdGNoKC9eKFteOl0qKTo/KFtcXFxcZFxcXFwuXSopLyk7XFxuICAgICAgICAgICAgICAgIGRvdC5jb2xvciA9IFIuZ2V0UkdCKHBhclsxXSk7XFxuICAgICAgICAgICAgICAgIGlmIChkb3QuY29sb3IuZXJyb3IpIHtcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIGRvdC5vcGFjaXR5ID0gZG90LmNvbG9yLm9wYWNpdHk7XFxuICAgICAgICAgICAgICAgIGRvdC5jb2xvciA9IGRvdC5jb2xvci5oZXg7XFxuICAgICAgICAgICAgICAgIHBhclsyXSAmJiAoZG90Lm9mZnNldCA9IHBhclsyXSArIFxcXCIlXFxcIik7XFxuICAgICAgICAgICAgICAgIGRvdHMucHVzaChkb3QpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBmb3IgKGkgPSAxLCBpaSA9IGRvdHMubGVuZ3RoIC0gMTsgaSA8IGlpOyBpKyspIHtcXG4gICAgICAgICAgICAgICAgaWYgKCFkb3RzW2ldLm9mZnNldCkge1xcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXJ0ID0gdG9GbG9hdChkb3RzW2kgLSAxXS5vZmZzZXQgfHwgMCksXFxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kID0gMDtcXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSBpICsgMTsgaiA8IGlpOyBqKyspIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZG90c1tqXS5vZmZzZXQpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kID0gZG90c1tqXS5vZmZzZXQ7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgIGlmICghZW5kKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kID0gMTAwO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGogPSBpaTtcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgIGVuZCA9IHRvRmxvYXQoZW5kKTtcXG4gICAgICAgICAgICAgICAgICAgIHZhciBkID0gKGVuZCAtIHN0YXJ0KSAvIChqIC0gaSArIDEpO1xcbiAgICAgICAgICAgICAgICAgICAgZm9yICg7IGkgPCBqOyBpKyspIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydCArPSBkO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvdHNbaV0ub2Zmc2V0ID0gc3RhcnQgKyBcXFwiJVxcXCI7XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgcmV0dXJuIGRvdHM7XFxuICAgICAgICB9KSxcXG4gICAgICAgIHRlYXIgPSBSLl90ZWFyID0gZnVuY3Rpb24gKGVsLCBwYXBlcikge1xcbiAgICAgICAgICAgIGVsID09IHBhcGVyLnRvcCAmJiAocGFwZXIudG9wID0gZWwucHJldik7XFxuICAgICAgICAgICAgZWwgPT0gcGFwZXIuYm90dG9tICYmIChwYXBlci5ib3R0b20gPSBlbC5uZXh0KTtcXG4gICAgICAgICAgICBlbC5uZXh0ICYmIChlbC5uZXh0LnByZXYgPSBlbC5wcmV2KTtcXG4gICAgICAgICAgICBlbC5wcmV2ICYmIChlbC5wcmV2Lm5leHQgPSBlbC5uZXh0KTtcXG4gICAgICAgIH0sXFxuICAgICAgICB0b2Zyb250ID0gUi5fdG9mcm9udCA9IGZ1bmN0aW9uIChlbCwgcGFwZXIpIHtcXG4gICAgICAgICAgICBpZiAocGFwZXIudG9wID09PSBlbCkge1xcbiAgICAgICAgICAgICAgICByZXR1cm47XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIHRlYXIoZWwsIHBhcGVyKTtcXG4gICAgICAgICAgICBlbC5uZXh0ID0gbnVsbDtcXG4gICAgICAgICAgICBlbC5wcmV2ID0gcGFwZXIudG9wO1xcbiAgICAgICAgICAgIHBhcGVyLnRvcC5uZXh0ID0gZWw7XFxuICAgICAgICAgICAgcGFwZXIudG9wID0gZWw7XFxuICAgICAgICB9LFxcbiAgICAgICAgdG9iYWNrID0gUi5fdG9iYWNrID0gZnVuY3Rpb24gKGVsLCBwYXBlcikge1xcbiAgICAgICAgICAgIGlmIChwYXBlci5ib3R0b20gPT09IGVsKSB7XFxuICAgICAgICAgICAgICAgIHJldHVybjtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgdGVhcihlbCwgcGFwZXIpO1xcbiAgICAgICAgICAgIGVsLm5leHQgPSBwYXBlci5ib3R0b207XFxuICAgICAgICAgICAgZWwucHJldiA9IG51bGw7XFxuICAgICAgICAgICAgcGFwZXIuYm90dG9tLnByZXYgPSBlbDtcXG4gICAgICAgICAgICBwYXBlci5ib3R0b20gPSBlbDtcXG4gICAgICAgIH0sXFxuICAgICAgICBpbnNlcnRhZnRlciA9IFIuX2luc2VydGFmdGVyID0gZnVuY3Rpb24gKGVsLCBlbDIsIHBhcGVyKSB7XFxuICAgICAgICAgICAgdGVhcihlbCwgcGFwZXIpO1xcbiAgICAgICAgICAgIGVsMiA9PSBwYXBlci50b3AgJiYgKHBhcGVyLnRvcCA9IGVsKTtcXG4gICAgICAgICAgICBlbDIubmV4dCAmJiAoZWwyLm5leHQucHJldiA9IGVsKTtcXG4gICAgICAgICAgICBlbC5uZXh0ID0gZWwyLm5leHQ7XFxuICAgICAgICAgICAgZWwucHJldiA9IGVsMjtcXG4gICAgICAgICAgICBlbDIubmV4dCA9IGVsO1xcbiAgICAgICAgfSxcXG4gICAgICAgIGluc2VydGJlZm9yZSA9IFIuX2luc2VydGJlZm9yZSA9IGZ1bmN0aW9uIChlbCwgZWwyLCBwYXBlcikge1xcbiAgICAgICAgICAgIHRlYXIoZWwsIHBhcGVyKTtcXG4gICAgICAgICAgICBlbDIgPT0gcGFwZXIuYm90dG9tICYmIChwYXBlci5ib3R0b20gPSBlbCk7XFxuICAgICAgICAgICAgZWwyLnByZXYgJiYgKGVsMi5wcmV2Lm5leHQgPSBlbCk7XFxuICAgICAgICAgICAgZWwucHJldiA9IGVsMi5wcmV2O1xcbiAgICAgICAgICAgIGVsMi5wcmV2ID0gZWw7XFxuICAgICAgICAgICAgZWwubmV4dCA9IGVsMjtcXG4gICAgICAgIH0sXFxuICAgICAgICAvKlxcXFxcXG4gICAgICAgICAqIFJhcGhhZWwudG9NYXRyaXhcXG4gICAgICAgICBbIG1ldGhvZCBdXFxuICAgICAgICAgKipcXG4gICAgICAgICAqIFV0aWxpdHkgbWV0aG9kXFxuICAgICAgICAgKipcXG4gICAgICAgICAqIFJldHVybnMgbWF0cml4IG9mIHRyYW5zZm9ybWF0aW9ucyBhcHBsaWVkIHRvIGEgZ2l2ZW4gcGF0aFxcbiAgICAgICAgID4gUGFyYW1ldGVyc1xcbiAgICAgICAgIC0gcGF0aCAoc3RyaW5nKSBwYXRoIHN0cmluZ1xcbiAgICAgICAgIC0gdHJhbnNmb3JtIChzdHJpbmd8YXJyYXkpIHRyYW5zZm9ybWF0aW9uIHN0cmluZ1xcbiAgICAgICAgID0gKG9iamVjdCkgQE1hdHJpeFxcbiAgICAgICAgXFxcXCovXFxuICAgICAgICB0b01hdHJpeCA9IFIudG9NYXRyaXggPSBmdW5jdGlvbiAocGF0aCwgdHJhbnNmb3JtKSB7XFxuICAgICAgICAgICAgdmFyIGJiID0gcGF0aERpbWVuc2lvbnMocGF0aCksXFxuICAgICAgICAgICAgICAgIGVsID0ge1xcbiAgICAgICAgICAgICAgICAgICAgXzoge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogRVxcbiAgICAgICAgICAgICAgICAgICAgfSxcXG4gICAgICAgICAgICAgICAgICAgIGdldEJCb3g6IGZ1bmN0aW9uICgpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYmI7XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH07XFxuICAgICAgICAgICAgZXh0cmFjdFRyYW5zZm9ybShlbCwgdHJhbnNmb3JtKTtcXG4gICAgICAgICAgICByZXR1cm4gZWwubWF0cml4O1xcbiAgICAgICAgfSxcXG4gICAgICAgIC8qXFxcXFxcbiAgICAgICAgICogUmFwaGFlbC50cmFuc2Zvcm1QYXRoXFxuICAgICAgICAgWyBtZXRob2QgXVxcbiAgICAgICAgICoqXFxuICAgICAgICAgKiBVdGlsaXR5IG1ldGhvZFxcbiAgICAgICAgICoqXFxuICAgICAgICAgKiBSZXR1cm5zIHBhdGggdHJhbnNmb3JtZWQgYnkgYSBnaXZlbiB0cmFuc2Zvcm1hdGlvblxcbiAgICAgICAgID4gUGFyYW1ldGVyc1xcbiAgICAgICAgIC0gcGF0aCAoc3RyaW5nKSBwYXRoIHN0cmluZ1xcbiAgICAgICAgIC0gdHJhbnNmb3JtIChzdHJpbmd8YXJyYXkpIHRyYW5zZm9ybWF0aW9uIHN0cmluZ1xcbiAgICAgICAgID0gKHN0cmluZykgcGF0aFxcbiAgICAgICAgXFxcXCovXFxuICAgICAgICB0cmFuc2Zvcm1QYXRoID0gUi50cmFuc2Zvcm1QYXRoID0gZnVuY3Rpb24gKHBhdGgsIHRyYW5zZm9ybSkge1xcbiAgICAgICAgICAgIHJldHVybiBtYXBQYXRoKHBhdGgsIHRvTWF0cml4KHBhdGgsIHRyYW5zZm9ybSkpO1xcbiAgICAgICAgfSxcXG4gICAgICAgIGV4dHJhY3RUcmFuc2Zvcm0gPSBSLl9leHRyYWN0VHJhbnNmb3JtID0gZnVuY3Rpb24gKGVsLCB0c3RyKSB7XFxuICAgICAgICAgICAgaWYgKHRzdHIgPT0gbnVsbCkge1xcbiAgICAgICAgICAgICAgICByZXR1cm4gZWwuXy50cmFuc2Zvcm07XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIHRzdHIgPSBTdHIodHN0cikucmVwbGFjZSgvXFxcXC57M318XFxcXHUyMDI2L2csIGVsLl8udHJhbnNmb3JtIHx8IEUpO1xcbiAgICAgICAgICAgIHZhciB0ZGF0YSA9IFIucGFyc2VUcmFuc2Zvcm1TdHJpbmcodHN0ciksXFxuICAgICAgICAgICAgICAgIGRlZyA9IDAsXFxuICAgICAgICAgICAgICAgIGR4ID0gMCxcXG4gICAgICAgICAgICAgICAgZHkgPSAwLFxcbiAgICAgICAgICAgICAgICBzeCA9IDEsXFxuICAgICAgICAgICAgICAgIHN5ID0gMSxcXG4gICAgICAgICAgICAgICAgXyA9IGVsLl8sXFxuICAgICAgICAgICAgICAgIG0gPSBuZXcgTWF0cml4O1xcbiAgICAgICAgICAgIF8udHJhbnNmb3JtID0gdGRhdGEgfHwgW107XFxuICAgICAgICAgICAgaWYgKHRkYXRhKSB7XFxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IHRkYXRhLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcXG4gICAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGRhdGFbaV0sXFxuICAgICAgICAgICAgICAgICAgICAgICAgdGxlbiA9IHQubGVuZ3RoLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1hbmQgPSBTdHIodFswXSkudG9Mb3dlckNhc2UoKSxcXG4gICAgICAgICAgICAgICAgICAgICAgICBhYnNvbHV0ZSA9IHRbMF0gIT0gY29tbWFuZCxcXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnZlciA9IGFic29sdXRlID8gbS5pbnZlcnQoKSA6IDAsXFxuICAgICAgICAgICAgICAgICAgICAgICAgeDEsXFxuICAgICAgICAgICAgICAgICAgICAgICAgeTEsXFxuICAgICAgICAgICAgICAgICAgICAgICAgeDIsXFxuICAgICAgICAgICAgICAgICAgICAgICAgeTIsXFxuICAgICAgICAgICAgICAgICAgICAgICAgYmI7XFxuICAgICAgICAgICAgICAgICAgICBpZiAoY29tbWFuZCA9PSBcXFwidFxcXCIgJiYgdGxlbiA9PSAzKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFic29sdXRlKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgxID0gaW52ZXIueCgwLCAwKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeTEgPSBpbnZlci55KDAsIDApO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MiA9IGludmVyLngodFsxXSwgdFsyXSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkyID0gaW52ZXIueSh0WzFdLCB0WzJdKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbS50cmFuc2xhdGUoeDIgLSB4MSwgeTIgLSB5MSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbS50cmFuc2xhdGUodFsxXSwgdFsyXSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjb21tYW5kID09IFxcXCJyXFxcIikge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0bGVuID09IDIpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmIgPSBiYiB8fCBlbC5nZXRCQm94KDEpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLnJvdGF0ZSh0WzFdLCBiYi54ICsgYmIud2lkdGggLyAyLCBiYi55ICsgYmIuaGVpZ2h0IC8gMik7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZyArPSB0WzFdO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGxlbiA9PSA0KSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhYnNvbHV0ZSkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeDIgPSBpbnZlci54KHRbMl0sIHRbM10pO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeTIgPSBpbnZlci55KHRbMl0sIHRbM10pO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5yb3RhdGUodFsxXSwgeDIsIHkyKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0ucm90YXRlKHRbMV0sIHRbMl0sIHRbM10pO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZyArPSB0WzFdO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29tbWFuZCA9PSBcXFwic1xcXCIpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGxlbiA9PSAyIHx8IHRsZW4gPT0gMykge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYiA9IGJiIHx8IGVsLmdldEJCb3goMSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uc2NhbGUodFsxXSwgdFt0bGVuIC0gMV0sIGJiLnggKyBiYi53aWR0aCAvIDIsIGJiLnkgKyBiYi5oZWlnaHQgLyAyKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ggKj0gdFsxXTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3kgKj0gdFt0bGVuIC0gMV07XFxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0bGVuID09IDUpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFic29sdXRlKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MiA9IGludmVyLngodFszXSwgdFs0XSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5MiA9IGludmVyLnkodFszXSwgdFs0XSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLnNjYWxlKHRbMV0sIHRbMl0sIHgyLCB5Mik7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLnNjYWxlKHRbMV0sIHRbMl0sIHRbM10sIHRbNF0pO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN4ICo9IHRbMV07XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN5ICo9IHRbMl07XFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjb21tYW5kID09IFxcXCJtXFxcIiAmJiB0bGVuID09IDcpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBtLmFkZCh0WzFdLCB0WzJdLCB0WzNdLCB0WzRdLCB0WzVdLCB0WzZdKTtcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgIF8uZGlydHlUID0gMTtcXG4gICAgICAgICAgICAgICAgICAgIGVsLm1hdHJpeCA9IG07XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgLypcXFxcXFxuICAgICAgICAgICAgICogRWxlbWVudC5tYXRyaXhcXG4gICAgICAgICAgICAgWyBwcm9wZXJ0eSAob2JqZWN0KSBdXFxuICAgICAgICAgICAgICoqXFxuICAgICAgICAgICAgICogS2VlcHMgQE1hdHJpeCBvYmplY3QsIHdoaWNoIHJlcHJlc2VudHMgZWxlbWVudCB0cmFuc2Zvcm1hdGlvblxcbiAgICAgICAgICAgIFxcXFwqL1xcbiAgICAgICAgICAgIGVsLm1hdHJpeCA9IG07XFxuXFxuICAgICAgICAgICAgXy5zeCA9IHN4O1xcbiAgICAgICAgICAgIF8uc3kgPSBzeTtcXG4gICAgICAgICAgICBfLmRlZyA9IGRlZztcXG4gICAgICAgICAgICBfLmR4ID0gZHggPSBtLmU7XFxuICAgICAgICAgICAgXy5keSA9IGR5ID0gbS5mO1xcblxcbiAgICAgICAgICAgIGlmIChzeCA9PSAxICYmIHN5ID09IDEgJiYgIWRlZyAmJiBfLmJib3gpIHtcXG4gICAgICAgICAgICAgICAgXy5iYm94LnggKz0gK2R4O1xcbiAgICAgICAgICAgICAgICBfLmJib3gueSArPSArZHk7XFxuICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgXy5kaXJ0eVQgPSAxO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0sXFxuICAgICAgICBnZXRFbXB0eSA9IGZ1bmN0aW9uIChpdGVtKSB7XFxuICAgICAgICAgICAgdmFyIGwgPSBpdGVtWzBdO1xcbiAgICAgICAgICAgIHN3aXRjaCAobC50b0xvd2VyQ2FzZSgpKSB7XFxuICAgICAgICAgICAgICAgIGNhc2UgXFxcInRcXFwiOiByZXR1cm4gW2wsIDAsIDBdO1xcbiAgICAgICAgICAgICAgICBjYXNlIFxcXCJtXFxcIjogcmV0dXJuIFtsLCAxLCAwLCAwLCAxLCAwLCAwXTtcXG4gICAgICAgICAgICAgICAgY2FzZSBcXFwiclxcXCI6IGlmIChpdGVtLmxlbmd0aCA9PSA0KSB7XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2wsIDAsIGl0ZW1bMl0sIGl0ZW1bM11dO1xcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtsLCAwXTtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICBjYXNlIFxcXCJzXFxcIjogaWYgKGl0ZW0ubGVuZ3RoID09IDUpIHtcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbbCwgMSwgMSwgaXRlbVszXSwgaXRlbVs0XV07XFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXRlbS5sZW5ndGggPT0gMykge1xcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtsLCAxLCAxXTtcXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbbCwgMV07XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICB9LFxcbiAgICAgICAgZXF1YWxpc2VUcmFuc2Zvcm0gPSBSLl9lcXVhbGlzZVRyYW5zZm9ybSA9IGZ1bmN0aW9uICh0MSwgdDIpIHtcXG4gICAgICAgICAgICB0MiA9IFN0cih0MikucmVwbGFjZSgvXFxcXC57M318XFxcXHUyMDI2L2csIHQxKTtcXG4gICAgICAgICAgICB0MSA9IFIucGFyc2VUcmFuc2Zvcm1TdHJpbmcodDEpIHx8IFtdO1xcbiAgICAgICAgICAgIHQyID0gUi5wYXJzZVRyYW5zZm9ybVN0cmluZyh0MikgfHwgW107XFxuICAgICAgICAgICAgdmFyIG1heGxlbmd0aCA9IG1tYXgodDEubGVuZ3RoLCB0Mi5sZW5ndGgpLFxcbiAgICAgICAgICAgICAgICBmcm9tID0gW10sXFxuICAgICAgICAgICAgICAgIHRvID0gW10sXFxuICAgICAgICAgICAgICAgIGkgPSAwLCBqLCBqaixcXG4gICAgICAgICAgICAgICAgdHQxLCB0dDI7XFxuICAgICAgICAgICAgZm9yICg7IGkgPCBtYXhsZW5ndGg7IGkrKykge1xcbiAgICAgICAgICAgICAgICB0dDEgPSB0MVtpXSB8fCBnZXRFbXB0eSh0MltpXSk7XFxuICAgICAgICAgICAgICAgIHR0MiA9IHQyW2ldIHx8IGdldEVtcHR5KHR0MSk7XFxuICAgICAgICAgICAgICAgIGlmICgodHQxWzBdICE9IHR0MlswXSkgfHxcXG4gICAgICAgICAgICAgICAgICAgICh0dDFbMF0udG9Mb3dlckNhc2UoKSA9PSBcXFwiclxcXCIgJiYgKHR0MVsyXSAhPSB0dDJbMl0gfHwgdHQxWzNdICE9IHR0MlszXSkpIHx8XFxuICAgICAgICAgICAgICAgICAgICAodHQxWzBdLnRvTG93ZXJDYXNlKCkgPT0gXFxcInNcXFwiICYmICh0dDFbM10gIT0gdHQyWzNdIHx8IHR0MVs0XSAhPSB0dDJbNF0pKVxcbiAgICAgICAgICAgICAgICAgICAgKSB7XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgZnJvbVtpXSA9IFtdO1xcbiAgICAgICAgICAgICAgICB0b1tpXSA9IFtdO1xcbiAgICAgICAgICAgICAgICBmb3IgKGogPSAwLCBqaiA9IG1tYXgodHQxLmxlbmd0aCwgdHQyLmxlbmd0aCk7IGogPCBqajsgaisrKSB7XFxuICAgICAgICAgICAgICAgICAgICBqIGluIHR0MSAmJiAoZnJvbVtpXVtqXSA9IHR0MVtqXSk7XFxuICAgICAgICAgICAgICAgICAgICBqIGluIHR0MiAmJiAodG9baV1bal0gPSB0dDJbal0pO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIHJldHVybiB7XFxuICAgICAgICAgICAgICAgIGZyb206IGZyb20sXFxuICAgICAgICAgICAgICAgIHRvOiB0b1xcbiAgICAgICAgICAgIH07XFxuICAgICAgICB9O1xcbiAgICBSLl9nZXRDb250YWluZXIgPSBmdW5jdGlvbiAoeCwgeSwgdywgaCkge1xcbiAgICAgICAgdmFyIGNvbnRhaW5lcjtcXG4gICAgICAgIGNvbnRhaW5lciA9IGggPT0gbnVsbCAmJiAhUi5pcyh4LCBcXFwib2JqZWN0XFxcIikgPyBnLmRvYy5nZXRFbGVtZW50QnlJZCh4KSA6IHg7XFxuICAgICAgICBpZiAoY29udGFpbmVyID09IG51bGwpIHtcXG4gICAgICAgICAgICByZXR1cm47XFxuICAgICAgICB9XFxuICAgICAgICBpZiAoY29udGFpbmVyLnRhZ05hbWUpIHtcXG4gICAgICAgICAgICBpZiAoeSA9PSBudWxsKSB7XFxuICAgICAgICAgICAgICAgIHJldHVybiB7XFxuICAgICAgICAgICAgICAgICAgICBjb250YWluZXI6IGNvbnRhaW5lcixcXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiBjb250YWluZXIuc3R5bGUucGl4ZWxXaWR0aCB8fCBjb250YWluZXIub2Zmc2V0V2lkdGgsXFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGNvbnRhaW5lci5zdHlsZS5waXhlbEhlaWdodCB8fCBjb250YWluZXIub2Zmc2V0SGVpZ2h0XFxuICAgICAgICAgICAgICAgIH07XFxuICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogY29udGFpbmVyLFxcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHksXFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IHdcXG4gICAgICAgICAgICAgICAgfTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgICByZXR1cm4ge1xcbiAgICAgICAgICAgIGNvbnRhaW5lcjogMSxcXG4gICAgICAgICAgICB4OiB4LFxcbiAgICAgICAgICAgIHk6IHksXFxuICAgICAgICAgICAgd2lkdGg6IHcsXFxuICAgICAgICAgICAgaGVpZ2h0OiBoXFxuICAgICAgICB9O1xcbiAgICB9O1xcbiAgICAvKlxcXFxcXG4gICAgICogUmFwaGFlbC5wYXRoVG9SZWxhdGl2ZVxcbiAgICAgWyBtZXRob2QgXVxcbiAgICAgKipcXG4gICAgICogVXRpbGl0eSBtZXRob2RcXG4gICAgICoqXFxuICAgICAqIENvbnZlcnRzIHBhdGggdG8gcmVsYXRpdmUgZm9ybVxcbiAgICAgPiBQYXJhbWV0ZXJzXFxuICAgICAtIHBhdGhTdHJpbmcgKHN0cmluZ3xhcnJheSkgcGF0aCBzdHJpbmcgb3IgYXJyYXkgb2Ygc2VnbWVudHNcXG4gICAgID0gKGFycmF5KSBhcnJheSBvZiBzZWdtZW50cy5cXG4gICAgXFxcXCovXFxuICAgIFIucGF0aFRvUmVsYXRpdmUgPSBwYXRoVG9SZWxhdGl2ZTtcXG4gICAgUi5fZW5naW5lID0ge307XFxuICAgIC8qXFxcXFxcbiAgICAgKiBSYXBoYWVsLnBhdGgyY3VydmVcXG4gICAgIFsgbWV0aG9kIF1cXG4gICAgICoqXFxuICAgICAqIFV0aWxpdHkgbWV0aG9kXFxuICAgICAqKlxcbiAgICAgKiBDb252ZXJ0cyBwYXRoIHRvIGEgbmV3IHBhdGggd2hlcmUgYWxsIHNlZ21lbnRzIGFyZSBjdWJpYyBiZXppZXIgY3VydmVzLlxcbiAgICAgPiBQYXJhbWV0ZXJzXFxuICAgICAtIHBhdGhTdHJpbmcgKHN0cmluZ3xhcnJheSkgcGF0aCBzdHJpbmcgb3IgYXJyYXkgb2Ygc2VnbWVudHNcXG4gICAgID0gKGFycmF5KSBhcnJheSBvZiBzZWdtZW50cy5cXG4gICAgXFxcXCovXFxuICAgIFIucGF0aDJjdXJ2ZSA9IHBhdGgyY3VydmU7XFxuICAgIC8qXFxcXFxcbiAgICAgKiBSYXBoYWVsLm1hdHJpeFxcbiAgICAgWyBtZXRob2QgXVxcbiAgICAgKipcXG4gICAgICogVXRpbGl0eSBtZXRob2RcXG4gICAgICoqXFxuICAgICAqIFJldHVybnMgbWF0cml4IGJhc2VkIG9uIGdpdmVuIHBhcmFtZXRlcnMuXFxuICAgICA+IFBhcmFtZXRlcnNcXG4gICAgIC0gYSAobnVtYmVyKVxcbiAgICAgLSBiIChudW1iZXIpXFxuICAgICAtIGMgKG51bWJlcilcXG4gICAgIC0gZCAobnVtYmVyKVxcbiAgICAgLSBlIChudW1iZXIpXFxuICAgICAtIGYgKG51bWJlcilcXG4gICAgID0gKG9iamVjdCkgQE1hdHJpeFxcbiAgICBcXFxcKi9cXG4gICAgUi5tYXRyaXggPSBmdW5jdGlvbiAoYSwgYiwgYywgZCwgZSwgZikge1xcbiAgICAgICAgcmV0dXJuIG5ldyBNYXRyaXgoYSwgYiwgYywgZCwgZSwgZik7XFxuICAgIH07XFxuICAgIGZ1bmN0aW9uIE1hdHJpeChhLCBiLCBjLCBkLCBlLCBmKSB7XFxuICAgICAgICBpZiAoYSAhPSBudWxsKSB7XFxuICAgICAgICAgICAgdGhpcy5hID0gK2E7XFxuICAgICAgICAgICAgdGhpcy5iID0gK2I7XFxuICAgICAgICAgICAgdGhpcy5jID0gK2M7XFxuICAgICAgICAgICAgdGhpcy5kID0gK2Q7XFxuICAgICAgICAgICAgdGhpcy5lID0gK2U7XFxuICAgICAgICAgICAgdGhpcy5mID0gK2Y7XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgIHRoaXMuYSA9IDE7XFxuICAgICAgICAgICAgdGhpcy5iID0gMDtcXG4gICAgICAgICAgICB0aGlzLmMgPSAwO1xcbiAgICAgICAgICAgIHRoaXMuZCA9IDE7XFxuICAgICAgICAgICAgdGhpcy5lID0gMDtcXG4gICAgICAgICAgICB0aGlzLmYgPSAwO1xcbiAgICAgICAgfVxcbiAgICB9XFxuICAgIChmdW5jdGlvbiAobWF0cml4cHJvdG8pIHtcXG4gICAgICAgIC8qXFxcXFxcbiAgICAgICAgICogTWF0cml4LmFkZFxcbiAgICAgICAgIFsgbWV0aG9kIF1cXG4gICAgICAgICAqKlxcbiAgICAgICAgICogQWRkcyBnaXZlbiBtYXRyaXggdG8gZXhpc3Rpbmcgb25lLlxcbiAgICAgICAgID4gUGFyYW1ldGVyc1xcbiAgICAgICAgIC0gYSAobnVtYmVyKVxcbiAgICAgICAgIC0gYiAobnVtYmVyKVxcbiAgICAgICAgIC0gYyAobnVtYmVyKVxcbiAgICAgICAgIC0gZCAobnVtYmVyKVxcbiAgICAgICAgIC0gZSAobnVtYmVyKVxcbiAgICAgICAgIC0gZiAobnVtYmVyKVxcbiAgICAgICAgIG9yXFxuICAgICAgICAgLSBtYXRyaXggKG9iamVjdCkgQE1hdHJpeFxcbiAgICAgICAgXFxcXCovXFxuICAgICAgICBtYXRyaXhwcm90by5hZGQgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCwgZSwgZikge1xcbiAgICAgICAgICAgIHZhciBvdXQgPSBbW10sIFtdLCBbXV0sXFxuICAgICAgICAgICAgICAgIG0gPSBbW3RoaXMuYSwgdGhpcy5jLCB0aGlzLmVdLCBbdGhpcy5iLCB0aGlzLmQsIHRoaXMuZl0sIFswLCAwLCAxXV0sXFxuICAgICAgICAgICAgICAgIG1hdHJpeCA9IFtbYSwgYywgZV0sIFtiLCBkLCBmXSwgWzAsIDAsIDFdXSxcXG4gICAgICAgICAgICAgICAgeCwgeSwgeiwgcmVzO1xcblxcbiAgICAgICAgICAgIGlmIChhICYmIGEgaW5zdGFuY2VvZiBNYXRyaXgpIHtcXG4gICAgICAgICAgICAgICAgbWF0cml4ID0gW1thLmEsIGEuYywgYS5lXSwgW2EuYiwgYS5kLCBhLmZdLCBbMCwgMCwgMV1dO1xcbiAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICBmb3IgKHggPSAwOyB4IDwgMzsgeCsrKSB7XFxuICAgICAgICAgICAgICAgIGZvciAoeSA9IDA7IHkgPCAzOyB5KyspIHtcXG4gICAgICAgICAgICAgICAgICAgIHJlcyA9IDA7XFxuICAgICAgICAgICAgICAgICAgICBmb3IgKHogPSAwOyB6IDwgMzsgeisrKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzICs9IG1beF1bel0gKiBtYXRyaXhbel1beV07XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICBvdXRbeF1beV0gPSByZXM7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgdGhpcy5hID0gb3V0WzBdWzBdO1xcbiAgICAgICAgICAgIHRoaXMuYiA9IG91dFsxXVswXTtcXG4gICAgICAgICAgICB0aGlzLmMgPSBvdXRbMF1bMV07XFxuICAgICAgICAgICAgdGhpcy5kID0gb3V0WzFdWzFdO1xcbiAgICAgICAgICAgIHRoaXMuZSA9IG91dFswXVsyXTtcXG4gICAgICAgICAgICB0aGlzLmYgPSBvdXRbMV1bMl07XFxuICAgICAgICB9O1xcbiAgICAgICAgLypcXFxcXFxuICAgICAgICAgKiBNYXRyaXguaW52ZXJ0XFxuICAgICAgICAgWyBtZXRob2QgXVxcbiAgICAgICAgICoqXFxuICAgICAgICAgKiBSZXR1cm5zIGludmVydGVkIHZlcnNpb24gb2YgdGhlIG1hdHJpeFxcbiAgICAgICAgID0gKG9iamVjdCkgQE1hdHJpeFxcbiAgICAgICAgXFxcXCovXFxuICAgICAgICBtYXRyaXhwcm90by5pbnZlcnQgPSBmdW5jdGlvbiAoKSB7XFxuICAgICAgICAgICAgdmFyIG1lID0gdGhpcyxcXG4gICAgICAgICAgICAgICAgeCA9IG1lLmEgKiBtZS5kIC0gbWUuYiAqIG1lLmM7XFxuICAgICAgICAgICAgcmV0dXJuIG5ldyBNYXRyaXgobWUuZCAvIHgsIC1tZS5iIC8geCwgLW1lLmMgLyB4LCBtZS5hIC8geCwgKG1lLmMgKiBtZS5mIC0gbWUuZCAqIG1lLmUpIC8geCwgKG1lLmIgKiBtZS5lIC0gbWUuYSAqIG1lLmYpIC8geCk7XFxuICAgICAgICB9O1xcbiAgICAgICAgLypcXFxcXFxuICAgICAgICAgKiBNYXRyaXguY2xvbmVcXG4gICAgICAgICBbIG1ldGhvZCBdXFxuICAgICAgICAgKipcXG4gICAgICAgICAqIFJldHVybnMgY29weSBvZiB0aGUgbWF0cml4XFxuICAgICAgICAgPSAob2JqZWN0KSBATWF0cml4XFxuICAgICAgICBcXFxcKi9cXG4gICAgICAgIG1hdHJpeHByb3RvLmNsb25lID0gZnVuY3Rpb24gKCkge1xcbiAgICAgICAgICAgIHJldHVybiBuZXcgTWF0cml4KHRoaXMuYSwgdGhpcy5iLCB0aGlzLmMsIHRoaXMuZCwgdGhpcy5lLCB0aGlzLmYpO1xcbiAgICAgICAgfTtcXG4gICAgICAgIC8qXFxcXFxcbiAgICAgICAgICogTWF0cml4LnRyYW5zbGF0ZVxcbiAgICAgICAgIFsgbWV0aG9kIF1cXG4gICAgICAgICAqKlxcbiAgICAgICAgICogVHJhbnNsYXRlIHRoZSBtYXRyaXhcXG4gICAgICAgICA+IFBhcmFtZXRlcnNcXG4gICAgICAgICAtIHggKG51bWJlcilcXG4gICAgICAgICAtIHkgKG51bWJlcilcXG4gICAgICAgIFxcXFwqL1xcbiAgICAgICAgbWF0cml4cHJvdG8udHJhbnNsYXRlID0gZnVuY3Rpb24gKHgsIHkpIHtcXG4gICAgICAgICAgICB0aGlzLmFkZCgxLCAwLCAwLCAxLCB4LCB5KTtcXG4gICAgICAgIH07XFxuICAgICAgICAvKlxcXFxcXG4gICAgICAgICAqIE1hdHJpeC5zY2FsZVxcbiAgICAgICAgIFsgbWV0aG9kIF1cXG4gICAgICAgICAqKlxcbiAgICAgICAgICogU2NhbGVzIHRoZSBtYXRyaXhcXG4gICAgICAgICA+IFBhcmFtZXRlcnNcXG4gICAgICAgICAtIHggKG51bWJlcilcXG4gICAgICAgICAtIHkgKG51bWJlcikgI29wdGlvbmFsXFxuICAgICAgICAgLSBjeCAobnVtYmVyKSAjb3B0aW9uYWxcXG4gICAgICAgICAtIGN5IChudW1iZXIpICNvcHRpb25hbFxcbiAgICAgICAgXFxcXCovXFxuICAgICAgICBtYXRyaXhwcm90by5zY2FsZSA9IGZ1bmN0aW9uICh4LCB5LCBjeCwgY3kpIHtcXG4gICAgICAgICAgICB5ID09IG51bGwgJiYgKHkgPSB4KTtcXG4gICAgICAgICAgICAoY3ggfHwgY3kpICYmIHRoaXMuYWRkKDEsIDAsIDAsIDEsIGN4LCBjeSk7XFxuICAgICAgICAgICAgdGhpcy5hZGQoeCwgMCwgMCwgeSwgMCwgMCk7XFxuICAgICAgICAgICAgKGN4IHx8IGN5KSAmJiB0aGlzLmFkZCgxLCAwLCAwLCAxLCAtY3gsIC1jeSk7XFxuICAgICAgICB9O1xcbiAgICAgICAgLypcXFxcXFxuICAgICAgICAgKiBNYXRyaXgucm90YXRlXFxuICAgICAgICAgWyBtZXRob2QgXVxcbiAgICAgICAgICoqXFxuICAgICAgICAgKiBSb3RhdGVzIHRoZSBtYXRyaXhcXG4gICAgICAgICA+IFBhcmFtZXRlcnNcXG4gICAgICAgICAtIGEgKG51bWJlcilcXG4gICAgICAgICAtIHggKG51bWJlcilcXG4gICAgICAgICAtIHkgKG51bWJlcilcXG4gICAgICAgIFxcXFwqL1xcbiAgICAgICAgbWF0cml4cHJvdG8ucm90YXRlID0gZnVuY3Rpb24gKGEsIHgsIHkpIHtcXG4gICAgICAgICAgICBhID0gUi5yYWQoYSk7XFxuICAgICAgICAgICAgeCA9IHggfHwgMDtcXG4gICAgICAgICAgICB5ID0geSB8fCAwO1xcbiAgICAgICAgICAgIHZhciBjb3MgPSArbWF0aC5jb3MoYSkudG9GaXhlZCg5KSxcXG4gICAgICAgICAgICAgICAgc2luID0gK21hdGguc2luKGEpLnRvRml4ZWQoOSk7XFxuICAgICAgICAgICAgdGhpcy5hZGQoY29zLCBzaW4sIC1zaW4sIGNvcywgeCwgeSk7XFxuICAgICAgICAgICAgdGhpcy5hZGQoMSwgMCwgMCwgMSwgLXgsIC15KTtcXG4gICAgICAgIH07XFxuICAgICAgICAvKlxcXFxcXG4gICAgICAgICAqIE1hdHJpeC54XFxuICAgICAgICAgWyBtZXRob2QgXVxcbiAgICAgICAgICoqXFxuICAgICAgICAgKiBSZXR1cm4geCBjb29yZGluYXRlIGZvciBnaXZlbiBwb2ludCBhZnRlciB0cmFuc2Zvcm1hdGlvbiBkZXNjcmliZWQgYnkgdGhlIG1hdHJpeC4gU2VlIGFsc28gQE1hdHJpeC55XFxuICAgICAgICAgPiBQYXJhbWV0ZXJzXFxuICAgICAgICAgLSB4IChudW1iZXIpXFxuICAgICAgICAgLSB5IChudW1iZXIpXFxuICAgICAgICAgPSAobnVtYmVyKSB4XFxuICAgICAgICBcXFxcKi9cXG4gICAgICAgIG1hdHJpeHByb3RvLnggPSBmdW5jdGlvbiAoeCwgeSkge1xcbiAgICAgICAgICAgIHJldHVybiB4ICogdGhpcy5hICsgeSAqIHRoaXMuYyArIHRoaXMuZTtcXG4gICAgICAgIH07XFxuICAgICAgICAvKlxcXFxcXG4gICAgICAgICAqIE1hdHJpeC55XFxuICAgICAgICAgWyBtZXRob2QgXVxcbiAgICAgICAgICoqXFxuICAgICAgICAgKiBSZXR1cm4geSBjb29yZGluYXRlIGZvciBnaXZlbiBwb2ludCBhZnRlciB0cmFuc2Zvcm1hdGlvbiBkZXNjcmliZWQgYnkgdGhlIG1hdHJpeC4gU2VlIGFsc28gQE1hdHJpeC54XFxuICAgICAgICAgPiBQYXJhbWV0ZXJzXFxuICAgICAgICAgLSB4IChudW1iZXIpXFxuICAgICAgICAgLSB5IChudW1iZXIpXFxuICAgICAgICAgPSAobnVtYmVyKSB5XFxuICAgICAgICBcXFxcKi9cXG4gICAgICAgIG1hdHJpeHByb3RvLnkgPSBmdW5jdGlvbiAoeCwgeSkge1xcbiAgICAgICAgICAgIHJldHVybiB4ICogdGhpcy5iICsgeSAqIHRoaXMuZCArIHRoaXMuZjtcXG4gICAgICAgIH07XFxuICAgICAgICBtYXRyaXhwcm90by5nZXQgPSBmdW5jdGlvbiAoaSkge1xcbiAgICAgICAgICAgIHJldHVybiArdGhpc1tTdHIuZnJvbUNoYXJDb2RlKDk3ICsgaSldLnRvRml4ZWQoNCk7XFxuICAgICAgICB9O1xcbiAgICAgICAgbWF0cml4cHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XFxuICAgICAgICAgICAgcmV0dXJuIFIuc3ZnID9cXG4gICAgICAgICAgICAgICAgXFxcIm1hdHJpeChcXFwiICsgW3RoaXMuZ2V0KDApLCB0aGlzLmdldCgxKSwgdGhpcy5nZXQoMiksIHRoaXMuZ2V0KDMpLCB0aGlzLmdldCg0KSwgdGhpcy5nZXQoNSldLmpvaW4oKSArIFxcXCIpXFxcIiA6XFxuICAgICAgICAgICAgICAgIFt0aGlzLmdldCgwKSwgdGhpcy5nZXQoMiksIHRoaXMuZ2V0KDEpLCB0aGlzLmdldCgzKSwgMCwgMF0uam9pbigpO1xcbiAgICAgICAgfTtcXG4gICAgICAgIG1hdHJpeHByb3RvLnRvRmlsdGVyID0gZnVuY3Rpb24gKCkge1xcbiAgICAgICAgICAgIHJldHVybiBcXFwicHJvZ2lkOkRYSW1hZ2VUcmFuc2Zvcm0uTWljcm9zb2Z0Lk1hdHJpeChNMTE9XFxcIiArIHRoaXMuZ2V0KDApICtcXG4gICAgICAgICAgICAgICAgXFxcIiwgTTEyPVxcXCIgKyB0aGlzLmdldCgyKSArIFxcXCIsIE0yMT1cXFwiICsgdGhpcy5nZXQoMSkgKyBcXFwiLCBNMjI9XFxcIiArIHRoaXMuZ2V0KDMpICtcXG4gICAgICAgICAgICAgICAgXFxcIiwgRHg9XFxcIiArIHRoaXMuZ2V0KDQpICsgXFxcIiwgRHk9XFxcIiArIHRoaXMuZ2V0KDUpICsgXFxcIiwgc2l6aW5nbWV0aG9kPSdhdXRvIGV4cGFuZCcpXFxcIjtcXG4gICAgICAgIH07XFxuICAgICAgICBtYXRyaXhwcm90by5vZmZzZXQgPSBmdW5jdGlvbiAoKSB7XFxuICAgICAgICAgICAgcmV0dXJuIFt0aGlzLmUudG9GaXhlZCg0KSwgdGhpcy5mLnRvRml4ZWQoNCldO1xcbiAgICAgICAgfTtcXG4gICAgICAgIGZ1bmN0aW9uIG5vcm0oYSkge1xcbiAgICAgICAgICAgIHJldHVybiBhWzBdICogYVswXSArIGFbMV0gKiBhWzFdO1xcbiAgICAgICAgfVxcbiAgICAgICAgZnVuY3Rpb24gbm9ybWFsaXplKGEpIHtcXG4gICAgICAgICAgICB2YXIgbWFnID0gbWF0aC5zcXJ0KG5vcm0oYSkpO1xcbiAgICAgICAgICAgIGFbMF0gJiYgKGFbMF0gLz0gbWFnKTtcXG4gICAgICAgICAgICBhWzFdICYmIChhWzFdIC89IG1hZyk7XFxuICAgICAgICB9XFxuICAgICAgICAvKlxcXFxcXG4gICAgICAgICAqIE1hdHJpeC5zcGxpdFxcbiAgICAgICAgIFsgbWV0aG9kIF1cXG4gICAgICAgICAqKlxcbiAgICAgICAgICogU3BsaXRzIG1hdHJpeCBpbnRvIHByaW1pdGl2ZSB0cmFuc2Zvcm1hdGlvbnNcXG4gICAgICAgICA9IChvYmplY3QpIGluIGZvcm1hdDpcXG4gICAgICAgICBvIGR4IChudW1iZXIpIHRyYW5zbGF0aW9uIGJ5IHhcXG4gICAgICAgICBvIGR5IChudW1iZXIpIHRyYW5zbGF0aW9uIGJ5IHlcXG4gICAgICAgICBvIHNjYWxleCAobnVtYmVyKSBzY2FsZSBieSB4XFxuICAgICAgICAgbyBzY2FsZXkgKG51bWJlcikgc2NhbGUgYnkgeVxcbiAgICAgICAgIG8gc2hlYXIgKG51bWJlcikgc2hlYXJcXG4gICAgICAgICBvIHJvdGF0ZSAobnVtYmVyKSByb3RhdGlvbiBpbiBkZWdcXG4gICAgICAgICBvIGlzU2ltcGxlIChib29sZWFuKSBjb3VsZCBpdCBiZSByZXByZXNlbnRlZCB2aWEgc2ltcGxlIHRyYW5zZm9ybWF0aW9uc1xcbiAgICAgICAgXFxcXCovXFxuICAgICAgICBtYXRyaXhwcm90by5zcGxpdCA9IGZ1bmN0aW9uICgpIHtcXG4gICAgICAgICAgICB2YXIgb3V0ID0ge307XFxuICAgICAgICAgICAgLy8gdHJhbnNsYXRpb25cXG4gICAgICAgICAgICBvdXQuZHggPSB0aGlzLmU7XFxuICAgICAgICAgICAgb3V0LmR5ID0gdGhpcy5mO1xcblxcbiAgICAgICAgICAgIC8vIHNjYWxlIGFuZCBzaGVhclxcbiAgICAgICAgICAgIHZhciByb3cgPSBbW3RoaXMuYSwgdGhpcy5jXSwgW3RoaXMuYiwgdGhpcy5kXV07XFxuICAgICAgICAgICAgb3V0LnNjYWxleCA9IG1hdGguc3FydChub3JtKHJvd1swXSkpO1xcbiAgICAgICAgICAgIG5vcm1hbGl6ZShyb3dbMF0pO1xcblxcbiAgICAgICAgICAgIG91dC5zaGVhciA9IHJvd1swXVswXSAqIHJvd1sxXVswXSArIHJvd1swXVsxXSAqIHJvd1sxXVsxXTtcXG4gICAgICAgICAgICByb3dbMV0gPSBbcm93WzFdWzBdIC0gcm93WzBdWzBdICogb3V0LnNoZWFyLCByb3dbMV1bMV0gLSByb3dbMF1bMV0gKiBvdXQuc2hlYXJdO1xcblxcbiAgICAgICAgICAgIG91dC5zY2FsZXkgPSBtYXRoLnNxcnQobm9ybShyb3dbMV0pKTtcXG4gICAgICAgICAgICBub3JtYWxpemUocm93WzFdKTtcXG4gICAgICAgICAgICBvdXQuc2hlYXIgLz0gb3V0LnNjYWxleTtcXG5cXG4gICAgICAgICAgICAvLyByb3RhdGlvblxcbiAgICAgICAgICAgIHZhciBzaW4gPSAtcm93WzBdWzFdLFxcbiAgICAgICAgICAgICAgICBjb3MgPSByb3dbMV1bMV07XFxuICAgICAgICAgICAgaWYgKGNvcyA8IDApIHtcXG4gICAgICAgICAgICAgICAgb3V0LnJvdGF0ZSA9IFIuZGVnKG1hdGguYWNvcyhjb3MpKTtcXG4gICAgICAgICAgICAgICAgaWYgKHNpbiA8IDApIHtcXG4gICAgICAgICAgICAgICAgICAgIG91dC5yb3RhdGUgPSAzNjAgLSBvdXQucm90YXRlO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgb3V0LnJvdGF0ZSA9IFIuZGVnKG1hdGguYXNpbihzaW4pKTtcXG4gICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgb3V0LmlzU2ltcGxlID0gIStvdXQuc2hlYXIudG9GaXhlZCg5KSAmJiAob3V0LnNjYWxleC50b0ZpeGVkKDkpID09IG91dC5zY2FsZXkudG9GaXhlZCg5KSB8fCAhb3V0LnJvdGF0ZSk7XFxuICAgICAgICAgICAgb3V0LmlzU3VwZXJTaW1wbGUgPSAhK291dC5zaGVhci50b0ZpeGVkKDkpICYmIG91dC5zY2FsZXgudG9GaXhlZCg5KSA9PSBvdXQuc2NhbGV5LnRvRml4ZWQoOSkgJiYgIW91dC5yb3RhdGU7XFxuICAgICAgICAgICAgb3V0Lm5vUm90YXRpb24gPSAhK291dC5zaGVhci50b0ZpeGVkKDkpICYmICFvdXQucm90YXRlO1xcbiAgICAgICAgICAgIHJldHVybiBvdXQ7XFxuICAgICAgICB9O1xcbiAgICAgICAgLypcXFxcXFxuICAgICAgICAgKiBNYXRyaXgudG9UcmFuc2Zvcm1TdHJpbmdcXG4gICAgICAgICBbIG1ldGhvZCBdXFxuICAgICAgICAgKipcXG4gICAgICAgICAqIFJldHVybiB0cmFuc2Zvcm0gc3RyaW5nIHRoYXQgcmVwcmVzZW50cyBnaXZlbiBtYXRyaXhcXG4gICAgICAgICA9IChzdHJpbmcpIHRyYW5zZm9ybSBzdHJpbmdcXG4gICAgICAgIFxcXFwqL1xcbiAgICAgICAgbWF0cml4cHJvdG8udG9UcmFuc2Zvcm1TdHJpbmcgPSBmdW5jdGlvbiAoc2hvcnRlcikge1xcbiAgICAgICAgICAgIHZhciBzID0gc2hvcnRlciB8fCB0aGlzW3NwbGl0XSgpO1xcbiAgICAgICAgICAgIGlmIChzLmlzU2ltcGxlKSB7XFxuICAgICAgICAgICAgICAgIHMuc2NhbGV4ID0gK3Muc2NhbGV4LnRvRml4ZWQoNCk7XFxuICAgICAgICAgICAgICAgIHMuc2NhbGV5ID0gK3Muc2NhbGV5LnRvRml4ZWQoNCk7XFxuICAgICAgICAgICAgICAgIHMucm90YXRlID0gK3Mucm90YXRlLnRvRml4ZWQoNCk7XFxuICAgICAgICAgICAgICAgIHJldHVybiAgKHMuZHggfHwgcy5keSA/IFxcXCJ0XFxcIiArIFtzLmR4LCBzLmR5XSA6IEUpICtcXG4gICAgICAgICAgICAgICAgICAgICAgICAocy5zY2FsZXggIT0gMSB8fCBzLnNjYWxleSAhPSAxID8gXFxcInNcXFwiICsgW3Muc2NhbGV4LCBzLnNjYWxleSwgMCwgMF0gOiBFKSArXFxuICAgICAgICAgICAgICAgICAgICAgICAgKHMucm90YXRlID8gXFxcInJcXFwiICsgW3Mucm90YXRlLCAwLCAwXSA6IEUpO1xcbiAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFwibVxcXCIgKyBbdGhpcy5nZXQoMCksIHRoaXMuZ2V0KDEpLCB0aGlzLmdldCgyKSwgdGhpcy5nZXQoMyksIHRoaXMuZ2V0KDQpLCB0aGlzLmdldCg1KV07XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfTtcXG4gICAgfSkoTWF0cml4LnByb3RvdHlwZSk7XFxuXFxuICAgIHZhciBwcmV2ZW50RGVmYXVsdCA9IGZ1bmN0aW9uICgpIHtcXG4gICAgICAgIHRoaXMucmV0dXJuVmFsdWUgPSBmYWxzZTtcXG4gICAgfSxcXG4gICAgcHJldmVudFRvdWNoID0gZnVuY3Rpb24gKCkge1xcbiAgICAgICAgcmV0dXJuIHRoaXMub3JpZ2luYWxFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xcbiAgICB9LFxcbiAgICBzdG9wUHJvcGFnYXRpb24gPSBmdW5jdGlvbiAoKSB7XFxuICAgICAgICB0aGlzLmNhbmNlbEJ1YmJsZSA9IHRydWU7XFxuICAgIH0sXFxuICAgIHN0b3BUb3VjaCA9IGZ1bmN0aW9uICgpIHtcXG4gICAgICAgIHJldHVybiB0aGlzLm9yaWdpbmFsRXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XFxuICAgIH0sXFxuICAgIGdldEV2ZW50UG9zaXRpb24gPSBmdW5jdGlvbiAoZSkge1xcbiAgICAgICAgdmFyIHNjcm9sbFkgPSBnLmRvYy5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wIHx8IGcuZG9jLmJvZHkuc2Nyb2xsVG9wLFxcbiAgICAgICAgICAgIHNjcm9sbFggPSBnLmRvYy5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCB8fCBnLmRvYy5ib2R5LnNjcm9sbExlZnQ7XFxuXFxuICAgICAgICByZXR1cm4ge1xcbiAgICAgICAgICAgIHg6IGUuY2xpZW50WCArIHNjcm9sbFgsXFxuICAgICAgICAgICAgeTogZS5jbGllbnRZICsgc2Nyb2xsWVxcbiAgICAgICAgfTtcXG4gICAgfSxcXG4gICAgYWRkRXZlbnQgPSAoZnVuY3Rpb24gKCkge1xcbiAgICAgICAgaWYgKGcuZG9jLmFkZEV2ZW50TGlzdGVuZXIpIHtcXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG9iaiwgdHlwZSwgZm4sIGVsZW1lbnQpIHtcXG4gICAgICAgICAgICAgICAgdmFyIGYgPSBmdW5jdGlvbiAoZSkge1xcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBvcyA9IGdldEV2ZW50UG9zaXRpb24oZSk7XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm4uY2FsbChlbGVtZW50LCBlLCBwb3MueCwgcG9zLnkpO1xcbiAgICAgICAgICAgICAgICB9O1xcbiAgICAgICAgICAgICAgICBvYmouYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBmLCBmYWxzZSk7XFxuXFxuICAgICAgICAgICAgICAgIGlmIChzdXBwb3J0c1RvdWNoICYmIHRvdWNoTWFwW3R5cGVdKSB7XFxuICAgICAgICAgICAgICAgICAgICB2YXIgX2YgPSBmdW5jdGlvbiAoZSkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwb3MgPSBnZXRFdmVudFBvc2l0aW9uKGUpLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbGRlID0gZTtcXG5cXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBlLnRhcmdldFRvdWNoZXMgJiYgZS50YXJnZXRUb3VjaGVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUudGFyZ2V0VG91Y2hlc1tpXS50YXJnZXQgPT0gb2JqKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlID0gZS50YXJnZXRUb3VjaGVzW2ldO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5vcmlnaW5hbEV2ZW50ID0gb2xkZTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQgPSBwcmV2ZW50VG91Y2g7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbiA9IHN0b3BUb3VjaDtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmbi5jYWxsKGVsZW1lbnQsIGUsIHBvcy54LCBwb3MueSk7XFxuICAgICAgICAgICAgICAgICAgICB9O1xcbiAgICAgICAgICAgICAgICAgICAgb2JqLmFkZEV2ZW50TGlzdGVuZXIodG91Y2hNYXBbdHlwZV0sIF9mLCBmYWxzZSk7XFxuICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcXG4gICAgICAgICAgICAgICAgICAgIG9iai5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGYsIGZhbHNlKTtcXG5cXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdXBwb3J0c1RvdWNoICYmIHRvdWNoTWFwW3R5cGVdKVxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoTWFwW3R5cGVdLCBfZiwgZmFsc2UpO1xcblxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XFxuICAgICAgICAgICAgICAgIH07XFxuICAgICAgICAgICAgfTtcXG4gICAgICAgIH0gZWxzZSBpZiAoZy5kb2MuYXR0YWNoRXZlbnQpIHtcXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG9iaiwgdHlwZSwgZm4sIGVsZW1lbnQpIHtcXG4gICAgICAgICAgICAgICAgdmFyIGYgPSBmdW5jdGlvbiAoZSkge1xcbiAgICAgICAgICAgICAgICAgICAgZSA9IGUgfHwgZy53aW4uZXZlbnQ7XFxuICAgICAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsWSA9IGcuZG9jLmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgfHwgZy5kb2MuYm9keS5zY3JvbGxUb3AsXFxuICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsWCA9IGcuZG9jLmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0IHx8IGcuZG9jLmJvZHkuc2Nyb2xsTGVmdCxcXG4gICAgICAgICAgICAgICAgICAgICAgICB4ID0gZS5jbGllbnRYICsgc2Nyb2xsWCxcXG4gICAgICAgICAgICAgICAgICAgICAgICB5ID0gZS5jbGllbnRZICsgc2Nyb2xsWTtcXG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQgPSBlLnByZXZlbnREZWZhdWx0IHx8IHByZXZlbnREZWZhdWx0O1xcbiAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24gPSBlLnN0b3BQcm9wYWdhdGlvbiB8fCBzdG9wUHJvcGFnYXRpb247XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm4uY2FsbChlbGVtZW50LCBlLCB4LCB5KTtcXG4gICAgICAgICAgICAgICAgfTtcXG4gICAgICAgICAgICAgICAgb2JqLmF0dGFjaEV2ZW50KFxcXCJvblxcXCIgKyB0eXBlLCBmKTtcXG4gICAgICAgICAgICAgICAgdmFyIGRldGFjaGVyID0gZnVuY3Rpb24gKCkge1xcbiAgICAgICAgICAgICAgICAgICAgb2JqLmRldGFjaEV2ZW50KFxcXCJvblxcXCIgKyB0eXBlLCBmKTtcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xcbiAgICAgICAgICAgICAgICB9O1xcbiAgICAgICAgICAgICAgICByZXR1cm4gZGV0YWNoZXI7XFxuICAgICAgICAgICAgfTtcXG4gICAgICAgIH1cXG4gICAgfSkoKSxcXG4gICAgZHJhZyA9IFtdLFxcbiAgICBkcmFnTW92ZSA9IGZ1bmN0aW9uIChlKSB7XFxuICAgICAgICB2YXIgeCA9IGUuY2xpZW50WCxcXG4gICAgICAgICAgICB5ID0gZS5jbGllbnRZLFxcbiAgICAgICAgICAgIHNjcm9sbFkgPSBnLmRvYy5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wIHx8IGcuZG9jLmJvZHkuc2Nyb2xsVG9wLFxcbiAgICAgICAgICAgIHNjcm9sbFggPSBnLmRvYy5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCB8fCBnLmRvYy5ib2R5LnNjcm9sbExlZnQsXFxuICAgICAgICAgICAgZHJhZ2ksXFxuICAgICAgICAgICAgaiA9IGRyYWcubGVuZ3RoO1xcbiAgICAgICAgd2hpbGUgKGotLSkge1xcbiAgICAgICAgICAgIGRyYWdpID0gZHJhZ1tqXTtcXG4gICAgICAgICAgICBpZiAoc3VwcG9ydHNUb3VjaCAmJiBlLnRvdWNoZXMpIHtcXG4gICAgICAgICAgICAgICAgdmFyIGkgPSBlLnRvdWNoZXMubGVuZ3RoLFxcbiAgICAgICAgICAgICAgICAgICAgdG91Y2g7XFxuICAgICAgICAgICAgICAgIHdoaWxlIChpLS0pIHtcXG4gICAgICAgICAgICAgICAgICAgIHRvdWNoID0gZS50b3VjaGVzW2ldO1xcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRvdWNoLmlkZW50aWZpZXIgPT0gZHJhZ2kuZWwuX2RyYWcuaWQpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICB4ID0gdG91Y2guY2xpZW50WDtcXG4gICAgICAgICAgICAgICAgICAgICAgICB5ID0gdG91Y2guY2xpZW50WTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAoZS5vcmlnaW5hbEV2ZW50ID8gZS5vcmlnaW5hbEV2ZW50IDogZSkucHJldmVudERlZmF1bHQoKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgdmFyIG5vZGUgPSBkcmFnaS5lbC5ub2RlLFxcbiAgICAgICAgICAgICAgICBvLFxcbiAgICAgICAgICAgICAgICBuZXh0ID0gbm9kZS5uZXh0U2libGluZyxcXG4gICAgICAgICAgICAgICAgcGFyZW50ID0gbm9kZS5wYXJlbnROb2RlLFxcbiAgICAgICAgICAgICAgICBkaXNwbGF5ID0gbm9kZS5zdHlsZS5kaXNwbGF5O1xcbiAgICAgICAgICAgIGcud2luLm9wZXJhICYmIHBhcmVudC5yZW1vdmVDaGlsZChub2RlKTtcXG4gICAgICAgICAgICBub2RlLnN0eWxlLmRpc3BsYXkgPSBcXFwibm9uZVxcXCI7XFxuICAgICAgICAgICAgbyA9IGRyYWdpLmVsLnBhcGVyLmdldEVsZW1lbnRCeVBvaW50KHgsIHkpO1xcbiAgICAgICAgICAgIG5vZGUuc3R5bGUuZGlzcGxheSA9IGRpc3BsYXk7XFxuICAgICAgICAgICAgZy53aW4ub3BlcmEgJiYgKG5leHQgPyBwYXJlbnQuaW5zZXJ0QmVmb3JlKG5vZGUsIG5leHQpIDogcGFyZW50LmFwcGVuZENoaWxkKG5vZGUpKTtcXG4gICAgICAgICAgICBvICYmIGV2ZShcXFwicmFwaGFlbC5kcmFnLm92ZXIuXFxcIiArIGRyYWdpLmVsLmlkLCBkcmFnaS5lbCwgbyk7XFxuICAgICAgICAgICAgeCArPSBzY3JvbGxYO1xcbiAgICAgICAgICAgIHkgKz0gc2Nyb2xsWTtcXG4gICAgICAgICAgICBldmUoXFxcInJhcGhhZWwuZHJhZy5tb3ZlLlxcXCIgKyBkcmFnaS5lbC5pZCwgZHJhZ2kubW92ZV9zY29wZSB8fCBkcmFnaS5lbCwgeCAtIGRyYWdpLmVsLl9kcmFnLngsIHkgLSBkcmFnaS5lbC5fZHJhZy55LCB4LCB5LCBlKTtcXG4gICAgICAgIH1cXG4gICAgfSxcXG4gICAgZHJhZ1VwID0gZnVuY3Rpb24gKGUpIHtcXG4gICAgICAgIFIudW5tb3VzZW1vdmUoZHJhZ01vdmUpLnVubW91c2V1cChkcmFnVXApO1xcbiAgICAgICAgdmFyIGkgPSBkcmFnLmxlbmd0aCxcXG4gICAgICAgICAgICBkcmFnaTtcXG4gICAgICAgIHdoaWxlIChpLS0pIHtcXG4gICAgICAgICAgICBkcmFnaSA9IGRyYWdbaV07XFxuICAgICAgICAgICAgZHJhZ2kuZWwuX2RyYWcgPSB7fTtcXG4gICAgICAgICAgICBldmUoXFxcInJhcGhhZWwuZHJhZy5lbmQuXFxcIiArIGRyYWdpLmVsLmlkLCBkcmFnaS5lbmRfc2NvcGUgfHwgZHJhZ2kuc3RhcnRfc2NvcGUgfHwgZHJhZ2kubW92ZV9zY29wZSB8fCBkcmFnaS5lbCwgZSk7XFxuICAgICAgICB9XFxuICAgICAgICBkcmFnID0gW107XFxuICAgIH0sXFxuICAgIC8qXFxcXFxcbiAgICAgKiBSYXBoYWVsLmVsXFxuICAgICBbIHByb3BlcnR5IChvYmplY3QpIF1cXG4gICAgICoqXFxuICAgICAqIFlvdSBjYW4gYWRkIHlvdXIgb3duIG1ldGhvZCB0byBlbGVtZW50cy4gVGhpcyBpcyB1c2VmdWwgd2hlbiB5b3Ugd2FudCB0byBoYWNrIGRlZmF1bHQgZnVuY3Rpb25hbGl0eSBvclxcbiAgICAgKiB3YW50IHRvIHdyYXAgc29tZSBjb21tb24gdHJhbnNmb3JtYXRpb24gb3IgYXR0cmlidXRlcyBpbiBvbmUgbWV0aG9kLiBJbiBkaWZmZXJlbmNlIHRvIGNhbnZhcyBtZXRob2RzLFxcbiAgICAgKiB5b3UgY2FuIHJlZGVmaW5lIGVsZW1lbnQgbWV0aG9kIGF0IGFueSB0aW1lLiBFeHBlbmRpbmcgZWxlbWVudCBtZXRob2RzIHdvdWxkbuKAmXQgYWZmZWN0IHNldC5cXG4gICAgID4gVXNhZ2VcXG4gICAgIHwgUmFwaGFlbC5lbC5yZWQgPSBmdW5jdGlvbiAoKSB7XFxuICAgICB8ICAgICB0aGlzLmF0dHIoe2ZpbGw6IFxcXCIjZjAwXFxcIn0pO1xcbiAgICAgfCB9O1xcbiAgICAgfCAvLyB0aGVuIHVzZSBpdFxcbiAgICAgfCBwYXBlci5jaXJjbGUoMTAwLCAxMDAsIDIwKS5yZWQoKTtcXG4gICAgXFxcXCovXFxuICAgIGVscHJvdG8gPSBSLmVsID0ge307XFxuICAgIC8qXFxcXFxcbiAgICAgKiBFbGVtZW50LmNsaWNrXFxuICAgICBbIG1ldGhvZCBdXFxuICAgICAqKlxcbiAgICAgKiBBZGRzIGV2ZW50IGhhbmRsZXIgZm9yIGNsaWNrIGZvciB0aGUgZWxlbWVudC5cXG4gICAgID4gUGFyYW1ldGVyc1xcbiAgICAgLSBoYW5kbGVyIChmdW5jdGlvbikgaGFuZGxlciBmb3IgdGhlIGV2ZW50XFxuICAgICA9IChvYmplY3QpIEBFbGVtZW50XFxuICAgIFxcXFwqL1xcbiAgICAvKlxcXFxcXG4gICAgICogRWxlbWVudC51bmNsaWNrXFxuICAgICBbIG1ldGhvZCBdXFxuICAgICAqKlxcbiAgICAgKiBSZW1vdmVzIGV2ZW50IGhhbmRsZXIgZm9yIGNsaWNrIGZvciB0aGUgZWxlbWVudC5cXG4gICAgID4gUGFyYW1ldGVyc1xcbiAgICAgLSBoYW5kbGVyIChmdW5jdGlvbikgI29wdGlvbmFsIGhhbmRsZXIgZm9yIHRoZSBldmVudFxcbiAgICAgPSAob2JqZWN0KSBARWxlbWVudFxcbiAgICBcXFxcKi9cXG5cXG4gICAgLypcXFxcXFxuICAgICAqIEVsZW1lbnQuZGJsY2xpY2tcXG4gICAgIFsgbWV0aG9kIF1cXG4gICAgICoqXFxuICAgICAqIEFkZHMgZXZlbnQgaGFuZGxlciBmb3IgZG91YmxlIGNsaWNrIGZvciB0aGUgZWxlbWVudC5cXG4gICAgID4gUGFyYW1ldGVyc1xcbiAgICAgLSBoYW5kbGVyIChmdW5jdGlvbikgaGFuZGxlciBmb3IgdGhlIGV2ZW50XFxuICAgICA9IChvYmplY3QpIEBFbGVtZW50XFxuICAgIFxcXFwqL1xcbiAgICAvKlxcXFxcXG4gICAgICogRWxlbWVudC51bmRibGNsaWNrXFxuICAgICBbIG1ldGhvZCBdXFxuICAgICAqKlxcbiAgICAgKiBSZW1vdmVzIGV2ZW50IGhhbmRsZXIgZm9yIGRvdWJsZSBjbGljayBmb3IgdGhlIGVsZW1lbnQuXFxuICAgICA+IFBhcmFtZXRlcnNcXG4gICAgIC0gaGFuZGxlciAoZnVuY3Rpb24pICNvcHRpb25hbCBoYW5kbGVyIGZvciB0aGUgZXZlbnRcXG4gICAgID0gKG9iamVjdCkgQEVsZW1lbnRcXG4gICAgXFxcXCovXFxuXFxuICAgIC8qXFxcXFxcbiAgICAgKiBFbGVtZW50Lm1vdXNlZG93blxcbiAgICAgWyBtZXRob2QgXVxcbiAgICAgKipcXG4gICAgICogQWRkcyBldmVudCBoYW5kbGVyIGZvciBtb3VzZWRvd24gZm9yIHRoZSBlbGVtZW50LlxcbiAgICAgPiBQYXJhbWV0ZXJzXFxuICAgICAtIGhhbmRsZXIgKGZ1bmN0aW9uKSBoYW5kbGVyIGZvciB0aGUgZXZlbnRcXG4gICAgID0gKG9iamVjdCkgQEVsZW1lbnRcXG4gICAgXFxcXCovXFxuICAgIC8qXFxcXFxcbiAgICAgKiBFbGVtZW50LnVubW91c2Vkb3duXFxuICAgICBbIG1ldGhvZCBdXFxuICAgICAqKlxcbiAgICAgKiBSZW1vdmVzIGV2ZW50IGhhbmRsZXIgZm9yIG1vdXNlZG93biBmb3IgdGhlIGVsZW1lbnQuXFxuICAgICA+IFBhcmFtZXRlcnNcXG4gICAgIC0gaGFuZGxlciAoZnVuY3Rpb24pICNvcHRpb25hbCBoYW5kbGVyIGZvciB0aGUgZXZlbnRcXG4gICAgID0gKG9iamVjdCkgQEVsZW1lbnRcXG4gICAgXFxcXCovXFxuXFxuICAgIC8qXFxcXFxcbiAgICAgKiBFbGVtZW50Lm1vdXNlbW92ZVxcbiAgICAgWyBtZXRob2QgXVxcbiAgICAgKipcXG4gICAgICogQWRkcyBldmVudCBoYW5kbGVyIGZvciBtb3VzZW1vdmUgZm9yIHRoZSBlbGVtZW50LlxcbiAgICAgPiBQYXJhbWV0ZXJzXFxuICAgICAtIGhhbmRsZXIgKGZ1bmN0aW9uKSBoYW5kbGVyIGZvciB0aGUgZXZlbnRcXG4gICAgID0gKG9iamVjdCkgQEVsZW1lbnRcXG4gICAgXFxcXCovXFxuICAgIC8qXFxcXFxcbiAgICAgKiBFbGVtZW50LnVubW91c2Vtb3ZlXFxuICAgICBbIG1ldGhvZCBdXFxuICAgICAqKlxcbiAgICAgKiBSZW1vdmVzIGV2ZW50IGhhbmRsZXIgZm9yIG1vdXNlbW92ZSBmb3IgdGhlIGVsZW1lbnQuXFxuICAgICA+IFBhcmFtZXRlcnNcXG4gICAgIC0gaGFuZGxlciAoZnVuY3Rpb24pICNvcHRpb25hbCBoYW5kbGVyIGZvciB0aGUgZXZlbnRcXG4gICAgID0gKG9iamVjdCkgQEVsZW1lbnRcXG4gICAgXFxcXCovXFxuXFxuICAgIC8qXFxcXFxcbiAgICAgKiBFbGVtZW50Lm1vdXNlb3V0XFxuICAgICBbIG1ldGhvZCBdXFxuICAgICAqKlxcbiAgICAgKiBBZGRzIGV2ZW50IGhhbmRsZXIgZm9yIG1vdXNlb3V0IGZvciB0aGUgZWxlbWVudC5cXG4gICAgID4gUGFyYW1ldGVyc1xcbiAgICAgLSBoYW5kbGVyIChmdW5jdGlvbikgaGFuZGxlciBmb3IgdGhlIGV2ZW50XFxuICAgICA9IChvYmplY3QpIEBFbGVtZW50XFxuICAgIFxcXFwqL1xcbiAgICAvKlxcXFxcXG4gICAgICogRWxlbWVudC51bm1vdXNlb3V0XFxuICAgICBbIG1ldGhvZCBdXFxuICAgICAqKlxcbiAgICAgKiBSZW1vdmVzIGV2ZW50IGhhbmRsZXIgZm9yIG1vdXNlb3V0IGZvciB0aGUgZWxlbWVudC5cXG4gICAgID4gUGFyYW1ldGVyc1xcbiAgICAgLSBoYW5kbGVyIChmdW5jdGlvbikgI29wdGlvbmFsIGhhbmRsZXIgZm9yIHRoZSBldmVudFxcbiAgICAgPSAob2JqZWN0KSBARWxlbWVudFxcbiAgICBcXFxcKi9cXG5cXG4gICAgLypcXFxcXFxuICAgICAqIEVsZW1lbnQubW91c2VvdmVyXFxuICAgICBbIG1ldGhvZCBdXFxuICAgICAqKlxcbiAgICAgKiBBZGRzIGV2ZW50IGhhbmRsZXIgZm9yIG1vdXNlb3ZlciBmb3IgdGhlIGVsZW1lbnQuXFxuICAgICA+IFBhcmFtZXRlcnNcXG4gICAgIC0gaGFuZGxlciAoZnVuY3Rpb24pIGhhbmRsZXIgZm9yIHRoZSBldmVudFxcbiAgICAgPSAob2JqZWN0KSBARWxlbWVudFxcbiAgICBcXFxcKi9cXG4gICAgLypcXFxcXFxuICAgICAqIEVsZW1lbnQudW5tb3VzZW92ZXJcXG4gICAgIFsgbWV0aG9kIF1cXG4gICAgICoqXFxuICAgICAqIFJlbW92ZXMgZXZlbnQgaGFuZGxlciBmb3IgbW91c2VvdmVyIGZvciB0aGUgZWxlbWVudC5cXG4gICAgID4gUGFyYW1ldGVyc1xcbiAgICAgLSBoYW5kbGVyIChmdW5jdGlvbikgI29wdGlvbmFsIGhhbmRsZXIgZm9yIHRoZSBldmVudFxcbiAgICAgPSAob2JqZWN0KSBARWxlbWVudFxcbiAgICBcXFxcKi9cXG5cXG4gICAgLypcXFxcXFxuICAgICAqIEVsZW1lbnQubW91c2V1cFxcbiAgICAgWyBtZXRob2QgXVxcbiAgICAgKipcXG4gICAgICogQWRkcyBldmVudCBoYW5kbGVyIGZvciBtb3VzZXVwIGZvciB0aGUgZWxlbWVudC5cXG4gICAgID4gUGFyYW1ldGVyc1xcbiAgICAgLSBoYW5kbGVyIChmdW5jdGlvbikgaGFuZGxlciBmb3IgdGhlIGV2ZW50XFxuICAgICA9IChvYmplY3QpIEBFbGVtZW50XFxuICAgIFxcXFwqL1xcbiAgICAvKlxcXFxcXG4gICAgICogRWxlbWVudC51bm1vdXNldXBcXG4gICAgIFsgbWV0aG9kIF1cXG4gICAgICoqXFxuICAgICAqIFJlbW92ZXMgZXZlbnQgaGFuZGxlciBmb3IgbW91c2V1cCBmb3IgdGhlIGVsZW1lbnQuXFxuICAgICA+IFBhcmFtZXRlcnNcXG4gICAgIC0gaGFuZGxlciAoZnVuY3Rpb24pICNvcHRpb25hbCBoYW5kbGVyIGZvciB0aGUgZXZlbnRcXG4gICAgID0gKG9iamVjdCkgQEVsZW1lbnRcXG4gICAgXFxcXCovXFxuXFxuICAgIC8qXFxcXFxcbiAgICAgKiBFbGVtZW50LnRvdWNoc3RhcnRcXG4gICAgIFsgbWV0aG9kIF1cXG4gICAgICoqXFxuICAgICAqIEFkZHMgZXZlbnQgaGFuZGxlciBmb3IgdG91Y2hzdGFydCBmb3IgdGhlIGVsZW1lbnQuXFxuICAgICA+IFBhcmFtZXRlcnNcXG4gICAgIC0gaGFuZGxlciAoZnVuY3Rpb24pIGhhbmRsZXIgZm9yIHRoZSBldmVudFxcbiAgICAgPSAob2JqZWN0KSBARWxlbWVudFxcbiAgICBcXFxcKi9cXG4gICAgLypcXFxcXFxuICAgICAqIEVsZW1lbnQudW50b3VjaHN0YXJ0XFxuICAgICBbIG1ldGhvZCBdXFxuICAgICAqKlxcbiAgICAgKiBSZW1vdmVzIGV2ZW50IGhhbmRsZXIgZm9yIHRvdWNoc3RhcnQgZm9yIHRoZSBlbGVtZW50LlxcbiAgICAgPiBQYXJhbWV0ZXJzXFxuICAgICAtIGhhbmRsZXIgKGZ1bmN0aW9uKSAjb3B0aW9uYWwgaGFuZGxlciBmb3IgdGhlIGV2ZW50XFxuICAgICA9IChvYmplY3QpIEBFbGVtZW50XFxuICAgIFxcXFwqL1xcblxcbiAgICAvKlxcXFxcXG4gICAgICogRWxlbWVudC50b3VjaG1vdmVcXG4gICAgIFsgbWV0aG9kIF1cXG4gICAgICoqXFxuICAgICAqIEFkZHMgZXZlbnQgaGFuZGxlciBmb3IgdG91Y2htb3ZlIGZvciB0aGUgZWxlbWVudC5cXG4gICAgID4gUGFyYW1ldGVyc1xcbiAgICAgLSBoYW5kbGVyIChmdW5jdGlvbikgaGFuZGxlciBmb3IgdGhlIGV2ZW50XFxuICAgICA9IChvYmplY3QpIEBFbGVtZW50XFxuICAgIFxcXFwqL1xcbiAgICAvKlxcXFxcXG4gICAgICogRWxlbWVudC51bnRvdWNobW92ZVxcbiAgICAgWyBtZXRob2QgXVxcbiAgICAgKipcXG4gICAgICogUmVtb3ZlcyBldmVudCBoYW5kbGVyIGZvciB0b3VjaG1vdmUgZm9yIHRoZSBlbGVtZW50LlxcbiAgICAgPiBQYXJhbWV0ZXJzXFxuICAgICAtIGhhbmRsZXIgKGZ1bmN0aW9uKSAjb3B0aW9uYWwgaGFuZGxlciBmb3IgdGhlIGV2ZW50XFxuICAgICA9IChvYmplY3QpIEBFbGVtZW50XFxuICAgIFxcXFwqL1xcblxcbiAgICAvKlxcXFxcXG4gICAgICogRWxlbWVudC50b3VjaGVuZFxcbiAgICAgWyBtZXRob2QgXVxcbiAgICAgKipcXG4gICAgICogQWRkcyBldmVudCBoYW5kbGVyIGZvciB0b3VjaGVuZCBmb3IgdGhlIGVsZW1lbnQuXFxuICAgICA+IFBhcmFtZXRlcnNcXG4gICAgIC0gaGFuZGxlciAoZnVuY3Rpb24pIGhhbmRsZXIgZm9yIHRoZSBldmVudFxcbiAgICAgPSAob2JqZWN0KSBARWxlbWVudFxcbiAgICBcXFxcKi9cXG4gICAgLypcXFxcXFxuICAgICAqIEVsZW1lbnQudW50b3VjaGVuZFxcbiAgICAgWyBtZXRob2QgXVxcbiAgICAgKipcXG4gICAgICogUmVtb3ZlcyBldmVudCBoYW5kbGVyIGZvciB0b3VjaGVuZCBmb3IgdGhlIGVsZW1lbnQuXFxuICAgICA+IFBhcmFtZXRlcnNcXG4gICAgIC0gaGFuZGxlciAoZnVuY3Rpb24pICNvcHRpb25hbCBoYW5kbGVyIGZvciB0aGUgZXZlbnRcXG4gICAgID0gKG9iamVjdCkgQEVsZW1lbnRcXG4gICAgXFxcXCovXFxuXFxuICAgIC8qXFxcXFxcbiAgICAgKiBFbGVtZW50LnRvdWNoY2FuY2VsXFxuICAgICBbIG1ldGhvZCBdXFxuICAgICAqKlxcbiAgICAgKiBBZGRzIGV2ZW50IGhhbmRsZXIgZm9yIHRvdWNoY2FuY2VsIGZvciB0aGUgZWxlbWVudC5cXG4gICAgID4gUGFyYW1ldGVyc1xcbiAgICAgLSBoYW5kbGVyIChmdW5jdGlvbikgaGFuZGxlciBmb3IgdGhlIGV2ZW50XFxuICAgICA9IChvYmplY3QpIEBFbGVtZW50XFxuICAgIFxcXFwqL1xcbiAgICAvKlxcXFxcXG4gICAgICogRWxlbWVudC51bnRvdWNoY2FuY2VsXFxuICAgICBbIG1ldGhvZCBdXFxuICAgICAqKlxcbiAgICAgKiBSZW1vdmVzIGV2ZW50IGhhbmRsZXIgZm9yIHRvdWNoY2FuY2VsIGZvciB0aGUgZWxlbWVudC5cXG4gICAgID4gUGFyYW1ldGVyc1xcbiAgICAgLSBoYW5kbGVyIChmdW5jdGlvbikgI29wdGlvbmFsIGhhbmRsZXIgZm9yIHRoZSBldmVudFxcbiAgICAgPSAob2JqZWN0KSBARWxlbWVudFxcbiAgICBcXFxcKi9cXG4gICAgZm9yICh2YXIgaSA9IGV2ZW50cy5sZW5ndGg7IGktLTspIHtcXG4gICAgICAgIChmdW5jdGlvbiAoZXZlbnROYW1lKSB7XFxuICAgICAgICAgICAgUltldmVudE5hbWVdID0gZWxwcm90b1tldmVudE5hbWVdID0gZnVuY3Rpb24gKGZuLCBzY29wZSkge1xcbiAgICAgICAgICAgICAgICBpZiAoUi5pcyhmbiwgXFxcImZ1bmN0aW9uXFxcIikpIHtcXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRzID0gdGhpcy5ldmVudHMgfHwgW107XFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmV2ZW50cy5wdXNoKHtuYW1lOiBldmVudE5hbWUsIGY6IGZuLCB1bmJpbmQ6IGFkZEV2ZW50KHRoaXMuc2hhcGUgfHwgdGhpcy5ub2RlIHx8IGcuZG9jLCBldmVudE5hbWUsIGZuLCBzY29wZSB8fCB0aGlzKX0pO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xcbiAgICAgICAgICAgIH07XFxuICAgICAgICAgICAgUltcXFwidW5cXFwiICsgZXZlbnROYW1lXSA9IGVscHJvdG9bXFxcInVuXFxcIiArIGV2ZW50TmFtZV0gPSBmdW5jdGlvbiAoZm4pIHtcXG4gICAgICAgICAgICAgICAgdmFyIGV2ZW50cyA9IHRoaXMuZXZlbnRzIHx8IFtdLFxcbiAgICAgICAgICAgICAgICAgICAgbCA9IGV2ZW50cy5sZW5ndGg7XFxuICAgICAgICAgICAgICAgIHdoaWxlIChsLS0pe1xcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50c1tsXS5uYW1lID09IGV2ZW50TmFtZSAmJiAoUi5pcyhmbiwgXFxcInVuZGVmaW5lZFxcXCIpIHx8IGV2ZW50c1tsXS5mID09IGZuKSkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50c1tsXS51bmJpbmQoKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudHMuc3BsaWNlKGwsIDEpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICFldmVudHMubGVuZ3RoICYmIGRlbGV0ZSB0aGlzLmV2ZW50cztcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcXG4gICAgICAgICAgICB9O1xcbiAgICAgICAgfSkoZXZlbnRzW2ldKTtcXG4gICAgfVxcblxcbiAgICAvKlxcXFxcXG4gICAgICogRWxlbWVudC5kYXRhXFxuICAgICBbIG1ldGhvZCBdXFxuICAgICAqKlxcbiAgICAgKiBBZGRzIG9yIHJldHJpZXZlcyBnaXZlbiB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggZ2l2ZW4ga2V5LlxcbiAgICAgKipcXG4gICAgICogU2VlIGFsc28gQEVsZW1lbnQucmVtb3ZlRGF0YVxcbiAgICAgPiBQYXJhbWV0ZXJzXFxuICAgICAtIGtleSAoc3RyaW5nKSBrZXkgdG8gc3RvcmUgZGF0YVxcbiAgICAgLSB2YWx1ZSAoYW55KSAjb3B0aW9uYWwgdmFsdWUgdG8gc3RvcmVcXG4gICAgID0gKG9iamVjdCkgQEVsZW1lbnRcXG4gICAgICogb3IsIGlmIHZhbHVlIGlzIG5vdCBzcGVjaWZpZWQ6XFxuICAgICA9IChhbnkpIHZhbHVlXFxuICAgICAqIG9yLCBpZiBrZXkgYW5kIHZhbHVlIGFyZSBub3Qgc3BlY2lmaWVkOlxcbiAgICAgPSAob2JqZWN0KSBLZXkvdmFsdWUgcGFpcnMgZm9yIGFsbCB0aGUgZGF0YSBhc3NvY2lhdGVkIHdpdGggdGhlIGVsZW1lbnQuXFxuICAgICA+IFVzYWdlXFxuICAgICB8IGZvciAodmFyIGkgPSAwLCBpIDwgNSwgaSsrKSB7XFxuICAgICB8ICAgICBwYXBlci5jaXJjbGUoMTAgKyAxNSAqIGksIDEwLCAxMClcXG4gICAgIHwgICAgICAgICAgLmF0dHIoe2ZpbGw6IFxcXCIjMDAwXFxcIn0pXFxuICAgICB8ICAgICAgICAgIC5kYXRhKFxcXCJpXFxcIiwgaSlcXG4gICAgIHwgICAgICAgICAgLmNsaWNrKGZ1bmN0aW9uICgpIHtcXG4gICAgIHwgICAgICAgICAgICAgYWxlcnQodGhpcy5kYXRhKFxcXCJpXFxcIikpO1xcbiAgICAgfCAgICAgICAgICB9KTtcXG4gICAgIHwgfVxcbiAgICBcXFxcKi9cXG4gICAgZWxwcm90by5kYXRhID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcXG4gICAgICAgIHZhciBkYXRhID0gZWxkYXRhW3RoaXMuaWRdID0gZWxkYXRhW3RoaXMuaWRdIHx8IHt9O1xcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT0gMCkge1xcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xcbiAgICAgICAgfVxcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT0gMSkge1xcbiAgICAgICAgICAgIGlmIChSLmlzKGtleSwgXFxcIm9iamVjdFxcXCIpKSB7XFxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgaW4ga2V5KSBpZiAoa2V5W2hhc10oaSkpIHtcXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YShpLCBrZXlbaV0pO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBldmUoXFxcInJhcGhhZWwuZGF0YS5nZXQuXFxcIiArIHRoaXMuaWQsIHRoaXMsIGRhdGFba2V5XSwga2V5KTtcXG4gICAgICAgICAgICByZXR1cm4gZGF0YVtrZXldO1xcbiAgICAgICAgfVxcbiAgICAgICAgZGF0YVtrZXldID0gdmFsdWU7XFxuICAgICAgICBldmUoXFxcInJhcGhhZWwuZGF0YS5zZXQuXFxcIiArIHRoaXMuaWQsIHRoaXMsIHZhbHVlLCBrZXkpO1xcbiAgICAgICAgcmV0dXJuIHRoaXM7XFxuICAgIH07XFxuICAgIC8qXFxcXFxcbiAgICAgKiBFbGVtZW50LnJlbW92ZURhdGFcXG4gICAgIFsgbWV0aG9kIF1cXG4gICAgICoqXFxuICAgICAqIFJlbW92ZXMgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIGFuIGVsZW1lbnQgYnkgZ2l2ZW4ga2V5LlxcbiAgICAgKiBJZiBrZXkgaXMgbm90IHByb3ZpZGVkLCByZW1vdmVzIGFsbCB0aGUgZGF0YSBvZiB0aGUgZWxlbWVudC5cXG4gICAgID4gUGFyYW1ldGVyc1xcbiAgICAgLSBrZXkgKHN0cmluZykgI29wdGlvbmFsIGtleVxcbiAgICAgPSAob2JqZWN0KSBARWxlbWVudFxcbiAgICBcXFxcKi9cXG4gICAgZWxwcm90by5yZW1vdmVEYXRhID0gZnVuY3Rpb24gKGtleSkge1xcbiAgICAgICAgaWYgKGtleSA9PSBudWxsKSB7XFxuICAgICAgICAgICAgZGVsZXRlIGVsZGF0YVt0aGlzLmlkXTtcXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgZWxkYXRhW3RoaXMuaWRdICYmIGRlbGV0ZSBlbGRhdGFbdGhpcy5pZF1ba2V5XTtcXG4gICAgICAgIH1cXG4gICAgICAgIHJldHVybiB0aGlzO1xcbiAgICB9O1xcbiAgICAgLypcXFxcXFxuICAgICAqIEVsZW1lbnQuZ2V0RGF0YVxcbiAgICAgWyBtZXRob2QgXVxcbiAgICAgKipcXG4gICAgICogUmV0cmlldmVzIHRoZSBlbGVtZW50IGRhdGFcXG4gICAgID0gKG9iamVjdCkgZGF0YVxcbiAgICBcXFxcKi9cXG4gICAgZWxwcm90by5nZXREYXRhID0gZnVuY3Rpb24gKCkge1xcbiAgICAgICAgcmV0dXJuIGNsb25lKGVsZGF0YVt0aGlzLmlkXSB8fCB7fSk7XFxuICAgIH07XFxuICAgIC8qXFxcXFxcbiAgICAgKiBFbGVtZW50LmhvdmVyXFxuICAgICBbIG1ldGhvZCBdXFxuICAgICAqKlxcbiAgICAgKiBBZGRzIGV2ZW50IGhhbmRsZXJzIGZvciBob3ZlciBmb3IgdGhlIGVsZW1lbnQuXFxuICAgICA+IFBhcmFtZXRlcnNcXG4gICAgIC0gZl9pbiAoZnVuY3Rpb24pIGhhbmRsZXIgZm9yIGhvdmVyIGluXFxuICAgICAtIGZfb3V0IChmdW5jdGlvbikgaGFuZGxlciBmb3IgaG92ZXIgb3V0XFxuICAgICAtIGljb250ZXh0IChvYmplY3QpICNvcHRpb25hbCBjb250ZXh0IGZvciBob3ZlciBpbiBoYW5kbGVyXFxuICAgICAtIG9jb250ZXh0IChvYmplY3QpICNvcHRpb25hbCBjb250ZXh0IGZvciBob3ZlciBvdXQgaGFuZGxlclxcbiAgICAgPSAob2JqZWN0KSBARWxlbWVudFxcbiAgICBcXFxcKi9cXG4gICAgZWxwcm90by5ob3ZlciA9IGZ1bmN0aW9uIChmX2luLCBmX291dCwgc2NvcGVfaW4sIHNjb3BlX291dCkge1xcbiAgICAgICAgcmV0dXJuIHRoaXMubW91c2VvdmVyKGZfaW4sIHNjb3BlX2luKS5tb3VzZW91dChmX291dCwgc2NvcGVfb3V0IHx8IHNjb3BlX2luKTtcXG4gICAgfTtcXG4gICAgLypcXFxcXFxuICAgICAqIEVsZW1lbnQudW5ob3ZlclxcbiAgICAgWyBtZXRob2QgXVxcbiAgICAgKipcXG4gICAgICogUmVtb3ZlcyBldmVudCBoYW5kbGVycyBmb3IgaG92ZXIgZm9yIHRoZSBlbGVtZW50LlxcbiAgICAgPiBQYXJhbWV0ZXJzXFxuICAgICAtIGZfaW4gKGZ1bmN0aW9uKSBoYW5kbGVyIGZvciBob3ZlciBpblxcbiAgICAgLSBmX291dCAoZnVuY3Rpb24pIGhhbmRsZXIgZm9yIGhvdmVyIG91dFxcbiAgICAgPSAob2JqZWN0KSBARWxlbWVudFxcbiAgICBcXFxcKi9cXG4gICAgZWxwcm90by51bmhvdmVyID0gZnVuY3Rpb24gKGZfaW4sIGZfb3V0KSB7XFxuICAgICAgICByZXR1cm4gdGhpcy51bm1vdXNlb3ZlcihmX2luKS51bm1vdXNlb3V0KGZfb3V0KTtcXG4gICAgfTtcXG4gICAgdmFyIGRyYWdnYWJsZSA9IFtdO1xcbiAgICAvKlxcXFxcXG4gICAgICogRWxlbWVudC5kcmFnXFxuICAgICBbIG1ldGhvZCBdXFxuICAgICAqKlxcbiAgICAgKiBBZGRzIGV2ZW50IGhhbmRsZXJzIGZvciBkcmFnIG9mIHRoZSBlbGVtZW50LlxcbiAgICAgPiBQYXJhbWV0ZXJzXFxuICAgICAtIG9ubW92ZSAoZnVuY3Rpb24pIGhhbmRsZXIgZm9yIG1vdmluZ1xcbiAgICAgLSBvbnN0YXJ0IChmdW5jdGlvbikgaGFuZGxlciBmb3IgZHJhZyBzdGFydFxcbiAgICAgLSBvbmVuZCAoZnVuY3Rpb24pIGhhbmRsZXIgZm9yIGRyYWcgZW5kXFxuICAgICAtIG1jb250ZXh0IChvYmplY3QpICNvcHRpb25hbCBjb250ZXh0IGZvciBtb3ZpbmcgaGFuZGxlclxcbiAgICAgLSBzY29udGV4dCAob2JqZWN0KSAjb3B0aW9uYWwgY29udGV4dCBmb3IgZHJhZyBzdGFydCBoYW5kbGVyXFxuICAgICAtIGVjb250ZXh0IChvYmplY3QpICNvcHRpb25hbCBjb250ZXh0IGZvciBkcmFnIGVuZCBoYW5kbGVyXFxuICAgICAqIEFkZGl0aW9uYWxseSBmb2xsb3dpbmcgYGRyYWdgIGV2ZW50cyB3aWxsIGJlIHRyaWdnZXJlZDogYGRyYWcuc3RhcnQuPGlkPmAgb24gc3RhcnQsXFxuICAgICAqIGBkcmFnLmVuZC48aWQ+YCBvbiBlbmQgYW5kIGBkcmFnLm1vdmUuPGlkPmAgb24gZXZlcnkgbW92ZS4gV2hlbiBlbGVtZW50IHdpbGwgYmUgZHJhZ2dlZCBvdmVyIGFub3RoZXIgZWxlbWVudFxcbiAgICAgKiBgZHJhZy5vdmVyLjxpZD5gIHdpbGwgYmUgZmlyZWQgYXMgd2VsbC5cXG4gICAgICpcXG4gICAgICogU3RhcnQgZXZlbnQgYW5kIHN0YXJ0IGhhbmRsZXIgd2lsbCBiZSBjYWxsZWQgaW4gc3BlY2lmaWVkIGNvbnRleHQgb3IgaW4gY29udGV4dCBvZiB0aGUgZWxlbWVudCB3aXRoIGZvbGxvd2luZyBwYXJhbWV0ZXJzOlxcbiAgICAgbyB4IChudW1iZXIpIHggcG9zaXRpb24gb2YgdGhlIG1vdXNlXFxuICAgICBvIHkgKG51bWJlcikgeSBwb3NpdGlvbiBvZiB0aGUgbW91c2VcXG4gICAgIG8gZXZlbnQgKG9iamVjdCkgRE9NIGV2ZW50IG9iamVjdFxcbiAgICAgKiBNb3ZlIGV2ZW50IGFuZCBtb3ZlIGhhbmRsZXIgd2lsbCBiZSBjYWxsZWQgaW4gc3BlY2lmaWVkIGNvbnRleHQgb3IgaW4gY29udGV4dCBvZiB0aGUgZWxlbWVudCB3aXRoIGZvbGxvd2luZyBwYXJhbWV0ZXJzOlxcbiAgICAgbyBkeCAobnVtYmVyKSBzaGlmdCBieSB4IGZyb20gdGhlIHN0YXJ0IHBvaW50XFxuICAgICBvIGR5IChudW1iZXIpIHNoaWZ0IGJ5IHkgZnJvbSB0aGUgc3RhcnQgcG9pbnRcXG4gICAgIG8geCAobnVtYmVyKSB4IHBvc2l0aW9uIG9mIHRoZSBtb3VzZVxcbiAgICAgbyB5IChudW1iZXIpIHkgcG9zaXRpb24gb2YgdGhlIG1vdXNlXFxuICAgICBvIGV2ZW50IChvYmplY3QpIERPTSBldmVudCBvYmplY3RcXG4gICAgICogRW5kIGV2ZW50IGFuZCBlbmQgaGFuZGxlciB3aWxsIGJlIGNhbGxlZCBpbiBzcGVjaWZpZWQgY29udGV4dCBvciBpbiBjb250ZXh0IG9mIHRoZSBlbGVtZW50IHdpdGggZm9sbG93aW5nIHBhcmFtZXRlcnM6XFxuICAgICBvIGV2ZW50IChvYmplY3QpIERPTSBldmVudCBvYmplY3RcXG4gICAgID0gKG9iamVjdCkgQEVsZW1lbnRcXG4gICAgXFxcXCovXFxuICAgIGVscHJvdG8uZHJhZyA9IGZ1bmN0aW9uIChvbm1vdmUsIG9uc3RhcnQsIG9uZW5kLCBtb3ZlX3Njb3BlLCBzdGFydF9zY29wZSwgZW5kX3Njb3BlKSB7XFxuICAgICAgICBmdW5jdGlvbiBzdGFydChlKSB7XFxuICAgICAgICAgICAgKGUub3JpZ2luYWxFdmVudCB8fCBlKS5wcmV2ZW50RGVmYXVsdCgpO1xcbiAgICAgICAgICAgIHZhciB4ID0gZS5jbGllbnRYLFxcbiAgICAgICAgICAgICAgICB5ID0gZS5jbGllbnRZLFxcbiAgICAgICAgICAgICAgICBzY3JvbGxZID0gZy5kb2MuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCB8fCBnLmRvYy5ib2R5LnNjcm9sbFRvcCxcXG4gICAgICAgICAgICAgICAgc2Nyb2xsWCA9IGcuZG9jLmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0IHx8IGcuZG9jLmJvZHkuc2Nyb2xsTGVmdDtcXG4gICAgICAgICAgICB0aGlzLl9kcmFnLmlkID0gZS5pZGVudGlmaWVyO1xcbiAgICAgICAgICAgIGlmIChzdXBwb3J0c1RvdWNoICYmIGUudG91Y2hlcykge1xcbiAgICAgICAgICAgICAgICB2YXIgaSA9IGUudG91Y2hlcy5sZW5ndGgsIHRvdWNoO1xcbiAgICAgICAgICAgICAgICB3aGlsZSAoaS0tKSB7XFxuICAgICAgICAgICAgICAgICAgICB0b3VjaCA9IGUudG91Y2hlc1tpXTtcXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2RyYWcuaWQgPSB0b3VjaC5pZGVudGlmaWVyO1xcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRvdWNoLmlkZW50aWZpZXIgPT0gdGhpcy5fZHJhZy5pZCkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHggPSB0b3VjaC5jbGllbnRYO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHkgPSB0b3VjaC5jbGllbnRZO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIHRoaXMuX2RyYWcueCA9IHggKyBzY3JvbGxYO1xcbiAgICAgICAgICAgIHRoaXMuX2RyYWcueSA9IHkgKyBzY3JvbGxZO1xcbiAgICAgICAgICAgICFkcmFnLmxlbmd0aCAmJiBSLm1vdXNlbW92ZShkcmFnTW92ZSkubW91c2V1cChkcmFnVXApO1xcbiAgICAgICAgICAgIGRyYWcucHVzaCh7ZWw6IHRoaXMsIG1vdmVfc2NvcGU6IG1vdmVfc2NvcGUsIHN0YXJ0X3Njb3BlOiBzdGFydF9zY29wZSwgZW5kX3Njb3BlOiBlbmRfc2NvcGV9KTtcXG4gICAgICAgICAgICBvbnN0YXJ0ICYmIGV2ZS5vbihcXFwicmFwaGFlbC5kcmFnLnN0YXJ0LlxcXCIgKyB0aGlzLmlkLCBvbnN0YXJ0KTtcXG4gICAgICAgICAgICBvbm1vdmUgJiYgZXZlLm9uKFxcXCJyYXBoYWVsLmRyYWcubW92ZS5cXFwiICsgdGhpcy5pZCwgb25tb3ZlKTtcXG4gICAgICAgICAgICBvbmVuZCAmJiBldmUub24oXFxcInJhcGhhZWwuZHJhZy5lbmQuXFxcIiArIHRoaXMuaWQsIG9uZW5kKTtcXG4gICAgICAgICAgICBldmUoXFxcInJhcGhhZWwuZHJhZy5zdGFydC5cXFwiICsgdGhpcy5pZCwgc3RhcnRfc2NvcGUgfHwgbW92ZV9zY29wZSB8fCB0aGlzLCB0aGlzLl9kcmFnLngsIHRoaXMuX2RyYWcueSwgZSk7XFxuICAgICAgICB9XFxuICAgICAgICB0aGlzLl9kcmFnID0ge307XFxuICAgICAgICBkcmFnZ2FibGUucHVzaCh7ZWw6IHRoaXMsIHN0YXJ0OiBzdGFydH0pO1xcbiAgICAgICAgdGhpcy5tb3VzZWRvd24oc3RhcnQpO1xcbiAgICAgICAgcmV0dXJuIHRoaXM7XFxuICAgIH07XFxuICAgIC8qXFxcXFxcbiAgICAgKiBFbGVtZW50Lm9uRHJhZ092ZXJcXG4gICAgIFsgbWV0aG9kIF1cXG4gICAgICoqXFxuICAgICAqIFNob3J0Y3V0IGZvciBhc3NpZ25pbmcgZXZlbnQgaGFuZGxlciBmb3IgYGRyYWcub3Zlci48aWQ+YCBldmVudCwgd2hlcmUgaWQgaXMgaWQgb2YgdGhlIGVsZW1lbnQgKHNlZSBARWxlbWVudC5pZCkuXFxuICAgICA+IFBhcmFtZXRlcnNcXG4gICAgIC0gZiAoZnVuY3Rpb24pIGhhbmRsZXIgZm9yIGV2ZW50LCBmaXJzdCBhcmd1bWVudCB3b3VsZCBiZSB0aGUgZWxlbWVudCB5b3UgYXJlIGRyYWdnaW5nIG92ZXJcXG4gICAgXFxcXCovXFxuICAgIGVscHJvdG8ub25EcmFnT3ZlciA9IGZ1bmN0aW9uIChmKSB7XFxuICAgICAgICBmID8gZXZlLm9uKFxcXCJyYXBoYWVsLmRyYWcub3Zlci5cXFwiICsgdGhpcy5pZCwgZikgOiBldmUudW5iaW5kKFxcXCJyYXBoYWVsLmRyYWcub3Zlci5cXFwiICsgdGhpcy5pZCk7XFxuICAgIH07XFxuICAgIC8qXFxcXFxcbiAgICAgKiBFbGVtZW50LnVuZHJhZ1xcbiAgICAgWyBtZXRob2QgXVxcbiAgICAgKipcXG4gICAgICogUmVtb3ZlcyBhbGwgZHJhZyBldmVudCBoYW5kbGVycyBmcm9tIGdpdmVuIGVsZW1lbnQuXFxuICAgIFxcXFwqL1xcbiAgICBlbHByb3RvLnVuZHJhZyA9IGZ1bmN0aW9uICgpIHtcXG4gICAgICAgIHZhciBpID0gZHJhZ2dhYmxlLmxlbmd0aDtcXG4gICAgICAgIHdoaWxlIChpLS0pIGlmIChkcmFnZ2FibGVbaV0uZWwgPT0gdGhpcykge1xcbiAgICAgICAgICAgIHRoaXMudW5tb3VzZWRvd24oZHJhZ2dhYmxlW2ldLnN0YXJ0KTtcXG4gICAgICAgICAgICBkcmFnZ2FibGUuc3BsaWNlKGksIDEpO1xcbiAgICAgICAgICAgIGV2ZS51bmJpbmQoXFxcInJhcGhhZWwuZHJhZy4qLlxcXCIgKyB0aGlzLmlkKTtcXG4gICAgICAgIH1cXG4gICAgICAgICFkcmFnZ2FibGUubGVuZ3RoICYmIFIudW5tb3VzZW1vdmUoZHJhZ01vdmUpLnVubW91c2V1cChkcmFnVXApO1xcbiAgICAgICAgZHJhZyA9IFtdO1xcbiAgICB9O1xcbiAgICAvKlxcXFxcXG4gICAgICogUGFwZXIuY2lyY2xlXFxuICAgICBbIG1ldGhvZCBdXFxuICAgICAqKlxcbiAgICAgKiBEcmF3cyBhIGNpcmNsZS5cXG4gICAgICoqXFxuICAgICA+IFBhcmFtZXRlcnNcXG4gICAgICoqXFxuICAgICAtIHggKG51bWJlcikgeCBjb29yZGluYXRlIG9mIHRoZSBjZW50cmVcXG4gICAgIC0geSAobnVtYmVyKSB5IGNvb3JkaW5hdGUgb2YgdGhlIGNlbnRyZVxcbiAgICAgLSByIChudW1iZXIpIHJhZGl1c1xcbiAgICAgPSAob2JqZWN0KSBSYXBoYcOrbCBlbGVtZW50IG9iamVjdCB3aXRoIHR5cGUg4oCcY2lyY2xl4oCdXFxuICAgICAqKlxcbiAgICAgPiBVc2FnZVxcbiAgICAgfCB2YXIgYyA9IHBhcGVyLmNpcmNsZSg1MCwgNTAsIDQwKTtcXG4gICAgXFxcXCovXFxuICAgIHBhcGVycHJvdG8uY2lyY2xlID0gZnVuY3Rpb24gKHgsIHksIHIpIHtcXG4gICAgICAgIHZhciBvdXQgPSBSLl9lbmdpbmUuY2lyY2xlKHRoaXMsIHggfHwgMCwgeSB8fCAwLCByIHx8IDApO1xcbiAgICAgICAgdGhpcy5fX3NldF9fICYmIHRoaXMuX19zZXRfXy5wdXNoKG91dCk7XFxuICAgICAgICByZXR1cm4gb3V0O1xcbiAgICB9O1xcbiAgICAvKlxcXFxcXG4gICAgICogUGFwZXIucmVjdFxcbiAgICAgWyBtZXRob2QgXVxcbiAgICAgKlxcbiAgICAgKiBEcmF3cyBhIHJlY3RhbmdsZS5cXG4gICAgICoqXFxuICAgICA+IFBhcmFtZXRlcnNcXG4gICAgICoqXFxuICAgICAtIHggKG51bWJlcikgeCBjb29yZGluYXRlIG9mIHRoZSB0b3AgbGVmdCBjb3JuZXJcXG4gICAgIC0geSAobnVtYmVyKSB5IGNvb3JkaW5hdGUgb2YgdGhlIHRvcCBsZWZ0IGNvcm5lclxcbiAgICAgLSB3aWR0aCAobnVtYmVyKSB3aWR0aFxcbiAgICAgLSBoZWlnaHQgKG51bWJlcikgaGVpZ2h0XFxuICAgICAtIHIgKG51bWJlcikgI29wdGlvbmFsIHJhZGl1cyBmb3Igcm91bmRlZCBjb3JuZXJzLCBkZWZhdWx0IGlzIDBcXG4gICAgID0gKG9iamVjdCkgUmFwaGHDq2wgZWxlbWVudCBvYmplY3Qgd2l0aCB0eXBlIOKAnHJlY3TigJ1cXG4gICAgICoqXFxuICAgICA+IFVzYWdlXFxuICAgICB8IC8vIHJlZ3VsYXIgcmVjdGFuZ2xlXFxuICAgICB8IHZhciBjID0gcGFwZXIucmVjdCgxMCwgMTAsIDUwLCA1MCk7XFxuICAgICB8IC8vIHJlY3RhbmdsZSB3aXRoIHJvdW5kZWQgY29ybmVyc1xcbiAgICAgfCB2YXIgYyA9IHBhcGVyLnJlY3QoNDAsIDQwLCA1MCwgNTAsIDEwKTtcXG4gICAgXFxcXCovXFxuICAgIHBhcGVycHJvdG8ucmVjdCA9IGZ1bmN0aW9uICh4LCB5LCB3LCBoLCByKSB7XFxuICAgICAgICB2YXIgb3V0ID0gUi5fZW5naW5lLnJlY3QodGhpcywgeCB8fCAwLCB5IHx8IDAsIHcgfHwgMCwgaCB8fCAwLCByIHx8IDApO1xcbiAgICAgICAgdGhpcy5fX3NldF9fICYmIHRoaXMuX19zZXRfXy5wdXNoKG91dCk7XFxuICAgICAgICByZXR1cm4gb3V0O1xcbiAgICB9O1xcbiAgICAvKlxcXFxcXG4gICAgICogUGFwZXIuZWxsaXBzZVxcbiAgICAgWyBtZXRob2QgXVxcbiAgICAgKipcXG4gICAgICogRHJhd3MgYW4gZWxsaXBzZS5cXG4gICAgICoqXFxuICAgICA+IFBhcmFtZXRlcnNcXG4gICAgICoqXFxuICAgICAtIHggKG51bWJlcikgeCBjb29yZGluYXRlIG9mIHRoZSBjZW50cmVcXG4gICAgIC0geSAobnVtYmVyKSB5IGNvb3JkaW5hdGUgb2YgdGhlIGNlbnRyZVxcbiAgICAgLSByeCAobnVtYmVyKSBob3Jpem9udGFsIHJhZGl1c1xcbiAgICAgLSByeSAobnVtYmVyKSB2ZXJ0aWNhbCByYWRpdXNcXG4gICAgID0gKG9iamVjdCkgUmFwaGHDq2wgZWxlbWVudCBvYmplY3Qgd2l0aCB0eXBlIOKAnGVsbGlwc2XigJ1cXG4gICAgICoqXFxuICAgICA+IFVzYWdlXFxuICAgICB8IHZhciBjID0gcGFwZXIuZWxsaXBzZSg1MCwgNTAsIDQwLCAyMCk7XFxuICAgIFxcXFwqL1xcbiAgICBwYXBlcnByb3RvLmVsbGlwc2UgPSBmdW5jdGlvbiAoeCwgeSwgcngsIHJ5KSB7XFxuICAgICAgICB2YXIgb3V0ID0gUi5fZW5naW5lLmVsbGlwc2UodGhpcywgeCB8fCAwLCB5IHx8IDAsIHJ4IHx8IDAsIHJ5IHx8IDApO1xcbiAgICAgICAgdGhpcy5fX3NldF9fICYmIHRoaXMuX19zZXRfXy5wdXNoKG91dCk7XFxuICAgICAgICByZXR1cm4gb3V0O1xcbiAgICB9O1xcbiAgICAvKlxcXFxcXG4gICAgICogUGFwZXIucGF0aFxcbiAgICAgWyBtZXRob2QgXVxcbiAgICAgKipcXG4gICAgICogQ3JlYXRlcyBhIHBhdGggZWxlbWVudCBieSBnaXZlbiBwYXRoIGRhdGEgc3RyaW5nLlxcbiAgICAgPiBQYXJhbWV0ZXJzXFxuICAgICAtIHBhdGhTdHJpbmcgKHN0cmluZykgI29wdGlvbmFsIHBhdGggc3RyaW5nIGluIFNWRyBmb3JtYXQuXFxuICAgICAqIFBhdGggc3RyaW5nIGNvbnNpc3RzIG9mIG9uZS1sZXR0ZXIgY29tbWFuZHMsIGZvbGxvd2VkIGJ5IGNvbW1hIHNlcHJhcmF0ZWQgYXJndW1lbnRzIGluIG51bWVyY2FsIGZvcm0uIEV4YW1wbGU6XFxuICAgICB8IFxcXCJNMTAsMjBMMzAsNDBcXFwiXFxuICAgICAqIEhlcmUgd2UgY2FuIHNlZSB0d28gY29tbWFuZHM6IOKAnE3igJ0sIHdpdGggYXJndW1lbnRzIGAoMTAsIDIwKWAgYW5kIOKAnEzigJ0gd2l0aCBhcmd1bWVudHMgYCgzMCwgNDApYC4gVXBwZXIgY2FzZSBsZXR0ZXIgbWVhbiBjb21tYW5kIGlzIGFic29sdXRlLCBsb3dlciBjYXNl4oCUcmVsYXRpdmUuXFxuICAgICAqXFxuICAgICAjIDxwPkhlcmUgaXMgc2hvcnQgbGlzdCBvZiBjb21tYW5kcyBhdmFpbGFibGUsIGZvciBtb3JlIGRldGFpbHMgc2VlIDxhIGhyZWY9XFxcImh0dHA6Ly93d3cudzMub3JnL1RSL1NWRy9wYXRocy5odG1sI1BhdGhEYXRhXFxcIiB0aXRsZT1cXFwiRGV0YWlscyBvZiBhIHBhdGgncyBkYXRhIGF0dHJpYnV0ZSdzIGZvcm1hdCBhcmUgZGVzY3JpYmVkIGluIHRoZSBTVkcgc3BlY2lmaWNhdGlvbi5cXFwiPlNWRyBwYXRoIHN0cmluZyBmb3JtYXQ8L2E+LjwvcD5cXG4gICAgICMgPHRhYmxlPjx0aGVhZD48dHI+PHRoPkNvbW1hbmQ8L3RoPjx0aD5OYW1lPC90aD48dGg+UGFyYW1ldGVyczwvdGg+PC90cj48L3RoZWFkPjx0Ym9keT5cXG4gICAgICMgPHRyPjx0ZD5NPC90ZD48dGQ+bW92ZXRvPC90ZD48dGQ+KHggeSkrPC90ZD48L3RyPlxcbiAgICAgIyA8dHI+PHRkPlo8L3RkPjx0ZD5jbG9zZXBhdGg8L3RkPjx0ZD4obm9uZSk8L3RkPjwvdHI+XFxuICAgICAjIDx0cj48dGQ+TDwvdGQ+PHRkPmxpbmV0bzwvdGQ+PHRkPih4IHkpKzwvdGQ+PC90cj5cXG4gICAgICMgPHRyPjx0ZD5IPC90ZD48dGQ+aG9yaXpvbnRhbCBsaW5ldG88L3RkPjx0ZD54KzwvdGQ+PC90cj5cXG4gICAgICMgPHRyPjx0ZD5WPC90ZD48dGQ+dmVydGljYWwgbGluZXRvPC90ZD48dGQ+eSs8L3RkPjwvdHI+XFxuICAgICAjIDx0cj48dGQ+QzwvdGQ+PHRkPmN1cnZldG88L3RkPjx0ZD4oeDEgeTEgeDIgeTIgeCB5KSs8L3RkPjwvdHI+XFxuICAgICAjIDx0cj48dGQ+UzwvdGQ+PHRkPnNtb290aCBjdXJ2ZXRvPC90ZD48dGQ+KHgyIHkyIHggeSkrPC90ZD48L3RyPlxcbiAgICAgIyA8dHI+PHRkPlE8L3RkPjx0ZD5xdWFkcmF0aWMgQsOpemllciBjdXJ2ZXRvPC90ZD48dGQ+KHgxIHkxIHggeSkrPC90ZD48L3RyPlxcbiAgICAgIyA8dHI+PHRkPlQ8L3RkPjx0ZD5zbW9vdGggcXVhZHJhdGljIELDqXppZXIgY3VydmV0bzwvdGQ+PHRkPih4IHkpKzwvdGQ+PC90cj5cXG4gICAgICMgPHRyPjx0ZD5BPC90ZD48dGQ+ZWxsaXB0aWNhbCBhcmM8L3RkPjx0ZD4ocnggcnkgeC1heGlzLXJvdGF0aW9uIGxhcmdlLWFyYy1mbGFnIHN3ZWVwLWZsYWcgeCB5KSs8L3RkPjwvdHI+XFxuICAgICAjIDx0cj48dGQ+UjwvdGQ+PHRkPjxhIGhyZWY9XFxcImh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ2F0bXVsbOKAk1JvbV9zcGxpbmUjQ2F0bXVsbC5FMi44MC45M1JvbV9zcGxpbmVcXFwiPkNhdG11bGwtUm9tIGN1cnZldG88L2E+KjwvdGQ+PHRkPngxIHkxICh4IHkpKzwvdGQ+PC90cj48L3Rib2R5PjwvdGFibGU+XFxuICAgICAqICog4oCcQ2F0bXVsbC1Sb20gY3VydmV0b+KAnSBpcyBhIG5vdCBzdGFuZGFyZCBTVkcgY29tbWFuZCBhbmQgYWRkZWQgaW4gMi4wIHRvIG1ha2UgbGlmZSBlYXNpZXIuXFxuICAgICAqIE5vdGU6IHRoZXJlIGlzIGEgc3BlY2lhbCBjYXNlIHdoZW4gcGF0aCBjb25zaXN0IG9mIGp1c3QgdGhyZWUgY29tbWFuZHM6IOKAnE0xMCwxMFLigKZ64oCdLiBJbiB0aGlzIGNhc2UgcGF0aCB3aWxsIHNtb290aGx5IGNvbm5lY3RzIHRvIGl0cyBiZWdpbm5pbmcuXFxuICAgICA+IFVzYWdlXFxuICAgICB8IHZhciBjID0gcGFwZXIucGF0aChcXFwiTTEwIDEwTDkwIDkwXFxcIik7XFxuICAgICB8IC8vIGRyYXcgYSBkaWFnb25hbCBsaW5lOlxcbiAgICAgfCAvLyBtb3ZlIHRvIDEwLDEwLCBsaW5lIHRvIDkwLDkwXFxuICAgICAqIEZvciBleGFtcGxlIG9mIHBhdGggc3RyaW5ncywgY2hlY2sgb3V0IHRoZXNlIGljb25zOiBodHRwOi8vcmFwaGFlbGpzLmNvbS9pY29ucy9cXG4gICAgXFxcXCovXFxuICAgIHBhcGVycHJvdG8ucGF0aCA9IGZ1bmN0aW9uIChwYXRoU3RyaW5nKSB7XFxuICAgICAgICBwYXRoU3RyaW5nICYmICFSLmlzKHBhdGhTdHJpbmcsIHN0cmluZykgJiYgIVIuaXMocGF0aFN0cmluZ1swXSwgYXJyYXkpICYmIChwYXRoU3RyaW5nICs9IEUpO1xcbiAgICAgICAgdmFyIG91dCA9IFIuX2VuZ2luZS5wYXRoKFIuZm9ybWF0W2FwcGx5XShSLCBhcmd1bWVudHMpLCB0aGlzKTtcXG4gICAgICAgIHRoaXMuX19zZXRfXyAmJiB0aGlzLl9fc2V0X18ucHVzaChvdXQpO1xcbiAgICAgICAgcmV0dXJuIG91dDtcXG4gICAgfTtcXG4gICAgLypcXFxcXFxuICAgICAqIFBhcGVyLmltYWdlXFxuICAgICBbIG1ldGhvZCBdXFxuICAgICAqKlxcbiAgICAgKiBFbWJlZHMgYW4gaW1hZ2UgaW50byB0aGUgc3VyZmFjZS5cXG4gICAgICoqXFxuICAgICA+IFBhcmFtZXRlcnNcXG4gICAgICoqXFxuICAgICAtIHNyYyAoc3RyaW5nKSBVUkkgb2YgdGhlIHNvdXJjZSBpbWFnZVxcbiAgICAgLSB4IChudW1iZXIpIHggY29vcmRpbmF0ZSBwb3NpdGlvblxcbiAgICAgLSB5IChudW1iZXIpIHkgY29vcmRpbmF0ZSBwb3NpdGlvblxcbiAgICAgLSB3aWR0aCAobnVtYmVyKSB3aWR0aCBvZiB0aGUgaW1hZ2VcXG4gICAgIC0gaGVpZ2h0IChudW1iZXIpIGhlaWdodCBvZiB0aGUgaW1hZ2VcXG4gICAgID0gKG9iamVjdCkgUmFwaGHDq2wgZWxlbWVudCBvYmplY3Qgd2l0aCB0eXBlIOKAnGltYWdl4oCdXFxuICAgICAqKlxcbiAgICAgPiBVc2FnZVxcbiAgICAgfCB2YXIgYyA9IHBhcGVyLmltYWdlKFxcXCJhcHBsZS5wbmdcXFwiLCAxMCwgMTAsIDgwLCA4MCk7XFxuICAgIFxcXFwqL1xcbiAgICBwYXBlcnByb3RvLmltYWdlID0gZnVuY3Rpb24gKHNyYywgeCwgeSwgdywgaCkge1xcbiAgICAgICAgdmFyIG91dCA9IFIuX2VuZ2luZS5pbWFnZSh0aGlzLCBzcmMgfHwgXFxcImFib3V0OmJsYW5rXFxcIiwgeCB8fCAwLCB5IHx8IDAsIHcgfHwgMCwgaCB8fCAwKTtcXG4gICAgICAgIHRoaXMuX19zZXRfXyAmJiB0aGlzLl9fc2V0X18ucHVzaChvdXQpO1xcbiAgICAgICAgcmV0dXJuIG91dDtcXG4gICAgfTtcXG4gICAgLypcXFxcXFxuICAgICAqIFBhcGVyLnRleHRcXG4gICAgIFsgbWV0aG9kIF1cXG4gICAgICoqXFxuICAgICAqIERyYXdzIGEgdGV4dCBzdHJpbmcuIElmIHlvdSBuZWVkIGxpbmUgYnJlYWtzLCBwdXQg4oCcXFxcXG7igJ0gaW4gdGhlIHN0cmluZy5cXG4gICAgICoqXFxuICAgICA+IFBhcmFtZXRlcnNcXG4gICAgICoqXFxuICAgICAtIHggKG51bWJlcikgeCBjb29yZGluYXRlIHBvc2l0aW9uXFxuICAgICAtIHkgKG51bWJlcikgeSBjb29yZGluYXRlIHBvc2l0aW9uXFxuICAgICAtIHRleHQgKHN0cmluZykgVGhlIHRleHQgc3RyaW5nIHRvIGRyYXdcXG4gICAgID0gKG9iamVjdCkgUmFwaGHDq2wgZWxlbWVudCBvYmplY3Qgd2l0aCB0eXBlIOKAnHRleHTigJ1cXG4gICAgICoqXFxuICAgICA+IFVzYWdlXFxuICAgICB8IHZhciB0ID0gcGFwZXIudGV4dCg1MCwgNTAsIFxcXCJSYXBoYcOrbFxcXFxua2lja3NcXFxcbmJ1dHQhXFxcIik7XFxuICAgIFxcXFwqL1xcbiAgICBwYXBlcnByb3RvLnRleHQgPSBmdW5jdGlvbiAoeCwgeSwgdGV4dCkge1xcbiAgICAgICAgdmFyIG91dCA9IFIuX2VuZ2luZS50ZXh0KHRoaXMsIHggfHwgMCwgeSB8fCAwLCBTdHIodGV4dCkpO1xcbiAgICAgICAgdGhpcy5fX3NldF9fICYmIHRoaXMuX19zZXRfXy5wdXNoKG91dCk7XFxuICAgICAgICByZXR1cm4gb3V0O1xcbiAgICB9O1xcbiAgICAvKlxcXFxcXG4gICAgICogUGFwZXIuc2V0XFxuICAgICBbIG1ldGhvZCBdXFxuICAgICAqKlxcbiAgICAgKiBDcmVhdGVzIGFycmF5LWxpa2Ugb2JqZWN0IHRvIGtlZXAgYW5kIG9wZXJhdGUgc2V2ZXJhbCBlbGVtZW50cyBhdCBvbmNlLlxcbiAgICAgKiBXYXJuaW5nOiBpdCBkb2VzbuKAmXQgY3JlYXRlIGFueSBlbGVtZW50cyBmb3IgaXRzZWxmIGluIHRoZSBwYWdlLCBpdCBqdXN0IGdyb3VwcyBleGlzdGluZyBlbGVtZW50cy5cXG4gICAgICogU2V0cyBhY3QgYXMgcHNldWRvIGVsZW1lbnRzIOKAlCBhbGwgbWV0aG9kcyBhdmFpbGFibGUgdG8gYW4gZWxlbWVudCBjYW4gYmUgdXNlZCBvbiBhIHNldC5cXG4gICAgID0gKG9iamVjdCkgYXJyYXktbGlrZSBvYmplY3QgdGhhdCByZXByZXNlbnRzIHNldCBvZiBlbGVtZW50c1xcbiAgICAgKipcXG4gICAgID4gVXNhZ2VcXG4gICAgIHwgdmFyIHN0ID0gcGFwZXIuc2V0KCk7XFxuICAgICB8IHN0LnB1c2goXFxuICAgICB8ICAgICBwYXBlci5jaXJjbGUoMTAsIDEwLCA1KSxcXG4gICAgIHwgICAgIHBhcGVyLmNpcmNsZSgzMCwgMTAsIDUpXFxuICAgICB8ICk7XFxuICAgICB8IHN0LmF0dHIoe2ZpbGw6IFxcXCJyZWRcXFwifSk7IC8vIGNoYW5nZXMgdGhlIGZpbGwgb2YgYm90aCBjaXJjbGVzXFxuICAgIFxcXFwqL1xcbiAgICBwYXBlcnByb3RvLnNldCA9IGZ1bmN0aW9uIChpdGVtc0FycmF5KSB7XFxuICAgICAgICAhUi5pcyhpdGVtc0FycmF5LCBcXFwiYXJyYXlcXFwiKSAmJiAoaXRlbXNBcnJheSA9IEFycmF5LnByb3RvdHlwZS5zcGxpY2UuY2FsbChhcmd1bWVudHMsIDAsIGFyZ3VtZW50cy5sZW5ndGgpKTtcXG4gICAgICAgIHZhciBvdXQgPSBuZXcgU2V0KGl0ZW1zQXJyYXkpO1xcbiAgICAgICAgdGhpcy5fX3NldF9fICYmIHRoaXMuX19zZXRfXy5wdXNoKG91dCk7XFxuICAgICAgICBvdXRbXFxcInBhcGVyXFxcIl0gPSB0aGlzO1xcbiAgICAgICAgb3V0W1xcXCJ0eXBlXFxcIl0gPSBcXFwic2V0XFxcIjtcXG4gICAgICAgIHJldHVybiBvdXQ7XFxuICAgIH07XFxuICAgIC8qXFxcXFxcbiAgICAgKiBQYXBlci5zZXRTdGFydFxcbiAgICAgWyBtZXRob2QgXVxcbiAgICAgKipcXG4gICAgICogQ3JlYXRlcyBAUGFwZXIuc2V0LiBBbGwgZWxlbWVudHMgdGhhdCB3aWxsIGJlIGNyZWF0ZWQgYWZ0ZXIgY2FsbGluZyB0aGlzIG1ldGhvZCBhbmQgYmVmb3JlIGNhbGxpbmdcXG4gICAgICogQFBhcGVyLnNldEZpbmlzaCB3aWxsIGJlIGFkZGVkIHRvIHRoZSBzZXQuXFxuICAgICAqKlxcbiAgICAgPiBVc2FnZVxcbiAgICAgfCBwYXBlci5zZXRTdGFydCgpO1xcbiAgICAgfCBwYXBlci5jaXJjbGUoMTAsIDEwLCA1KSxcXG4gICAgIHwgcGFwZXIuY2lyY2xlKDMwLCAxMCwgNSlcXG4gICAgIHwgdmFyIHN0ID0gcGFwZXIuc2V0RmluaXNoKCk7XFxuICAgICB8IHN0LmF0dHIoe2ZpbGw6IFxcXCJyZWRcXFwifSk7IC8vIGNoYW5nZXMgdGhlIGZpbGwgb2YgYm90aCBjaXJjbGVzXFxuICAgIFxcXFwqL1xcbiAgICBwYXBlcnByb3RvLnNldFN0YXJ0ID0gZnVuY3Rpb24gKHNldCkge1xcbiAgICAgICAgdGhpcy5fX3NldF9fID0gc2V0IHx8IHRoaXMuc2V0KCk7XFxuICAgIH07XFxuICAgIC8qXFxcXFxcbiAgICAgKiBQYXBlci5zZXRGaW5pc2hcXG4gICAgIFsgbWV0aG9kIF1cXG4gICAgICoqXFxuICAgICAqIFNlZSBAUGFwZXIuc2V0U3RhcnQuIFRoaXMgbWV0aG9kIGZpbmlzaGVzIGNhdGNoaW5nIGFuZCByZXR1cm5zIHJlc3VsdGluZyBzZXQuXFxuICAgICAqKlxcbiAgICAgPSAob2JqZWN0KSBzZXRcXG4gICAgXFxcXCovXFxuICAgIHBhcGVycHJvdG8uc2V0RmluaXNoID0gZnVuY3Rpb24gKHNldCkge1xcbiAgICAgICAgdmFyIG91dCA9IHRoaXMuX19zZXRfXztcXG4gICAgICAgIGRlbGV0ZSB0aGlzLl9fc2V0X187XFxuICAgICAgICByZXR1cm4gb3V0O1xcbiAgICB9O1xcbiAgICAvKlxcXFxcXG4gICAgICogUGFwZXIuZ2V0U2l6ZVxcbiAgICAgWyBtZXRob2QgXVxcbiAgICAgKipcXG4gICAgICogT2J0YWlucyBjdXJyZW50IHBhcGVyIGFjdHVhbCBzaXplLlxcbiAgICAgKipcXG4gICAgID0gKG9iamVjdClcXG4gICAgIFxcXFwqL1xcbiAgICBwYXBlcnByb3RvLmdldFNpemUgPSBmdW5jdGlvbiAoKSB7XFxuICAgICAgICB2YXIgY29udGFpbmVyID0gdGhpcy5jYW52YXMucGFyZW50Tm9kZTtcXG4gICAgICAgIHJldHVybiB7XFxuICAgICAgICAgICAgd2lkdGg6IGNvbnRhaW5lci5vZmZzZXRXaWR0aCxcXG4gICAgICAgICAgICBoZWlnaHQ6IGNvbnRhaW5lci5vZmZzZXRIZWlnaHRcXG4gICAgICAgICAgICAgICAgfTtcXG4gICAgICAgIH07XFxuICAgIC8qXFxcXFxcbiAgICAgKiBQYXBlci5zZXRTaXplXFxuICAgICBbIG1ldGhvZCBdXFxuICAgICAqKlxcbiAgICAgKiBJZiB5b3UgbmVlZCB0byBjaGFuZ2UgZGltZW5zaW9ucyBvZiB0aGUgY2FudmFzIGNhbGwgdGhpcyBtZXRob2RcXG4gICAgICoqXFxuICAgICA+IFBhcmFtZXRlcnNcXG4gICAgICoqXFxuICAgICAtIHdpZHRoIChudW1iZXIpIG5ldyB3aWR0aCBvZiB0aGUgY2FudmFzXFxuICAgICAtIGhlaWdodCAobnVtYmVyKSBuZXcgaGVpZ2h0IG9mIHRoZSBjYW52YXNcXG4gICAgXFxcXCovXFxuICAgIHBhcGVycHJvdG8uc2V0U2l6ZSA9IGZ1bmN0aW9uICh3aWR0aCwgaGVpZ2h0KSB7XFxuICAgICAgICByZXR1cm4gUi5fZW5naW5lLnNldFNpemUuY2FsbCh0aGlzLCB3aWR0aCwgaGVpZ2h0KTtcXG4gICAgfTtcXG4gICAgLypcXFxcXFxuICAgICAqIFBhcGVyLnNldFZpZXdCb3hcXG4gICAgIFsgbWV0aG9kIF1cXG4gICAgICoqXFxuICAgICAqIFNldHMgdGhlIHZpZXcgYm94IG9mIHRoZSBwYXBlci4gUHJhY3RpY2FsbHkgaXQgZ2l2ZXMgeW91IGFiaWxpdHkgdG8gem9vbSBhbmQgcGFuIHdob2xlIHBhcGVyIHN1cmZhY2UgYnlcXG4gICAgICogc3BlY2lmeWluZyBuZXcgYm91bmRhcmllcy5cXG4gICAgICoqXFxuICAgICA+IFBhcmFtZXRlcnNcXG4gICAgICoqXFxuICAgICAtIHggKG51bWJlcikgbmV3IHggcG9zaXRpb24sIGRlZmF1bHQgaXMgYDBgXFxuICAgICAtIHkgKG51bWJlcikgbmV3IHkgcG9zaXRpb24sIGRlZmF1bHQgaXMgYDBgXFxuICAgICAtIHcgKG51bWJlcikgbmV3IHdpZHRoIG9mIHRoZSBjYW52YXNcXG4gICAgIC0gaCAobnVtYmVyKSBuZXcgaGVpZ2h0IG9mIHRoZSBjYW52YXNcXG4gICAgIC0gZml0IChib29sZWFuKSBgdHJ1ZWAgaWYgeW91IHdhbnQgZ3JhcGhpY3MgdG8gZml0IGludG8gbmV3IGJvdW5kYXJ5IGJveFxcbiAgICBcXFxcKi9cXG4gICAgcGFwZXJwcm90by5zZXRWaWV3Qm94ID0gZnVuY3Rpb24gKHgsIHksIHcsIGgsIGZpdCkge1xcbiAgICAgICAgcmV0dXJuIFIuX2VuZ2luZS5zZXRWaWV3Qm94LmNhbGwodGhpcywgeCwgeSwgdywgaCwgZml0KTtcXG4gICAgfTtcXG4gICAgLypcXFxcXFxuICAgICAqIFBhcGVyLnRvcFxcbiAgICAgWyBwcm9wZXJ0eSBdXFxuICAgICAqKlxcbiAgICAgKiBQb2ludHMgdG8gdGhlIHRvcG1vc3QgZWxlbWVudCBvbiB0aGUgcGFwZXJcXG4gICAgXFxcXCovXFxuICAgIC8qXFxcXFxcbiAgICAgKiBQYXBlci5ib3R0b21cXG4gICAgIFsgcHJvcGVydHkgXVxcbiAgICAgKipcXG4gICAgICogUG9pbnRzIHRvIHRoZSBib3R0b20gZWxlbWVudCBvbiB0aGUgcGFwZXJcXG4gICAgXFxcXCovXFxuICAgIHBhcGVycHJvdG8udG9wID0gcGFwZXJwcm90by5ib3R0b20gPSBudWxsO1xcbiAgICAvKlxcXFxcXG4gICAgICogUGFwZXIucmFwaGFlbFxcbiAgICAgWyBwcm9wZXJ0eSBdXFxuICAgICAqKlxcbiAgICAgKiBQb2ludHMgdG8gdGhlIEBSYXBoYWVsIG9iamVjdC9mdW5jdGlvblxcbiAgICBcXFxcKi9cXG4gICAgcGFwZXJwcm90by5yYXBoYWVsID0gUjtcXG4gICAgdmFyIGdldE9mZnNldCA9IGZ1bmN0aW9uIChlbGVtKSB7XFxuICAgICAgICB2YXIgYm94ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcXG4gICAgICAgICAgICBkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQsXFxuICAgICAgICAgICAgYm9keSA9IGRvYy5ib2R5LFxcbiAgICAgICAgICAgIGRvY0VsZW0gPSBkb2MuZG9jdW1lbnRFbGVtZW50LFxcbiAgICAgICAgICAgIGNsaWVudFRvcCA9IGRvY0VsZW0uY2xpZW50VG9wIHx8IGJvZHkuY2xpZW50VG9wIHx8IDAsIGNsaWVudExlZnQgPSBkb2NFbGVtLmNsaWVudExlZnQgfHwgYm9keS5jbGllbnRMZWZ0IHx8IDAsXFxuICAgICAgICAgICAgdG9wICA9IGJveC50b3AgICsgKGcud2luLnBhZ2VZT2Zmc2V0IHx8IGRvY0VsZW0uc2Nyb2xsVG9wIHx8IGJvZHkuc2Nyb2xsVG9wICkgLSBjbGllbnRUb3AsXFxuICAgICAgICAgICAgbGVmdCA9IGJveC5sZWZ0ICsgKGcud2luLnBhZ2VYT2Zmc2V0IHx8IGRvY0VsZW0uc2Nyb2xsTGVmdCB8fCBib2R5LnNjcm9sbExlZnQpIC0gY2xpZW50TGVmdDtcXG4gICAgICAgIHJldHVybiB7XFxuICAgICAgICAgICAgeTogdG9wLFxcbiAgICAgICAgICAgIHg6IGxlZnRcXG4gICAgICAgIH07XFxuICAgIH07XFxuICAgIC8qXFxcXFxcbiAgICAgKiBQYXBlci5nZXRFbGVtZW50QnlQb2ludFxcbiAgICAgWyBtZXRob2QgXVxcbiAgICAgKipcXG4gICAgICogUmV0dXJucyB5b3UgdG9wbW9zdCBlbGVtZW50IHVuZGVyIGdpdmVuIHBvaW50LlxcbiAgICAgKipcXG4gICAgID0gKG9iamVjdCkgUmFwaGHDq2wgZWxlbWVudCBvYmplY3RcXG4gICAgID4gUGFyYW1ldGVyc1xcbiAgICAgKipcXG4gICAgIC0geCAobnVtYmVyKSB4IGNvb3JkaW5hdGUgZnJvbSB0aGUgdG9wIGxlZnQgY29ybmVyIG9mIHRoZSB3aW5kb3dcXG4gICAgIC0geSAobnVtYmVyKSB5IGNvb3JkaW5hdGUgZnJvbSB0aGUgdG9wIGxlZnQgY29ybmVyIG9mIHRoZSB3aW5kb3dcXG4gICAgID4gVXNhZ2VcXG4gICAgIHwgcGFwZXIuZ2V0RWxlbWVudEJ5UG9pbnQobW91c2VYLCBtb3VzZVkpLmF0dHIoe3N0cm9rZTogXFxcIiNmMDBcXFwifSk7XFxuICAgIFxcXFwqL1xcbiAgICBwYXBlcnByb3RvLmdldEVsZW1lbnRCeVBvaW50ID0gZnVuY3Rpb24gKHgsIHkpIHtcXG4gICAgICAgIHZhciBwYXBlciA9IHRoaXMsXFxuICAgICAgICAgICAgc3ZnID0gcGFwZXIuY2FudmFzLFxcbiAgICAgICAgICAgIHRhcmdldCA9IGcuZG9jLmVsZW1lbnRGcm9tUG9pbnQoeCwgeSk7XFxuICAgICAgICBpZiAoZy53aW4ub3BlcmEgJiYgdGFyZ2V0LnRhZ05hbWUgPT0gXFxcInN2Z1xcXCIpIHtcXG4gICAgICAgICAgICB2YXIgc28gPSBnZXRPZmZzZXQoc3ZnKSxcXG4gICAgICAgICAgICAgICAgc3IgPSBzdmcuY3JlYXRlU1ZHUmVjdCgpO1xcbiAgICAgICAgICAgIHNyLnggPSB4IC0gc28ueDtcXG4gICAgICAgICAgICBzci55ID0geSAtIHNvLnk7XFxuICAgICAgICAgICAgc3Iud2lkdGggPSBzci5oZWlnaHQgPSAxO1xcbiAgICAgICAgICAgIHZhciBoaXRzID0gc3ZnLmdldEludGVyc2VjdGlvbkxpc3Qoc3IsIG51bGwpO1xcbiAgICAgICAgICAgIGlmIChoaXRzLmxlbmd0aCkge1xcbiAgICAgICAgICAgICAgICB0YXJnZXQgPSBoaXRzW2hpdHMubGVuZ3RoIC0gMV07XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgICAgaWYgKCF0YXJnZXQpIHtcXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcXG4gICAgICAgIH1cXG4gICAgICAgIHdoaWxlICh0YXJnZXQucGFyZW50Tm9kZSAmJiB0YXJnZXQgIT0gc3ZnLnBhcmVudE5vZGUgJiYgIXRhcmdldC5yYXBoYWVsKSB7XFxuICAgICAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LnBhcmVudE5vZGU7XFxuICAgICAgICB9XFxuICAgICAgICB0YXJnZXQgPT0gcGFwZXIuY2FudmFzLnBhcmVudE5vZGUgJiYgKHRhcmdldCA9IHN2Zyk7XFxuICAgICAgICB0YXJnZXQgPSB0YXJnZXQgJiYgdGFyZ2V0LnJhcGhhZWwgPyBwYXBlci5nZXRCeUlkKHRhcmdldC5yYXBoYWVsaWQpIDogbnVsbDtcXG4gICAgICAgIHJldHVybiB0YXJnZXQ7XFxuICAgIH07XFxuXFxuICAgIC8qXFxcXFxcbiAgICAgKiBQYXBlci5nZXRFbGVtZW50c0J5QkJveFxcbiAgICAgWyBtZXRob2QgXVxcbiAgICAgKipcXG4gICAgICogUmV0dXJucyBzZXQgb2YgZWxlbWVudHMgdGhhdCBoYXZlIGFuIGludGVyc2VjdGluZyBib3VuZGluZyBib3hcXG4gICAgICoqXFxuICAgICA+IFBhcmFtZXRlcnNcXG4gICAgICoqXFxuICAgICAtIGJib3ggKG9iamVjdCkgYmJveCB0byBjaGVjayB3aXRoXFxuICAgICA9IChvYmplY3QpIEBTZXRcXG4gICAgIFxcXFwqL1xcbiAgICBwYXBlcnByb3RvLmdldEVsZW1lbnRzQnlCQm94ID0gZnVuY3Rpb24gKGJib3gpIHtcXG4gICAgICAgIHZhciBzZXQgPSB0aGlzLnNldCgpO1xcbiAgICAgICAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xcbiAgICAgICAgICAgIGlmIChSLmlzQkJveEludGVyc2VjdChlbC5nZXRCQm94KCksIGJib3gpKSB7XFxuICAgICAgICAgICAgICAgIHNldC5wdXNoKGVsKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9KTtcXG4gICAgICAgIHJldHVybiBzZXQ7XFxuICAgIH07XFxuXFxuICAgIC8qXFxcXFxcbiAgICAgKiBQYXBlci5nZXRCeUlkXFxuICAgICBbIG1ldGhvZCBdXFxuICAgICAqKlxcbiAgICAgKiBSZXR1cm5zIHlvdSBlbGVtZW50IGJ5IGl0cyBpbnRlcm5hbCBJRC5cXG4gICAgICoqXFxuICAgICA+IFBhcmFtZXRlcnNcXG4gICAgICoqXFxuICAgICAtIGlkIChudW1iZXIpIGlkXFxuICAgICA9IChvYmplY3QpIFJhcGhhw6tsIGVsZW1lbnQgb2JqZWN0XFxuICAgIFxcXFwqL1xcbiAgICBwYXBlcnByb3RvLmdldEJ5SWQgPSBmdW5jdGlvbiAoaWQpIHtcXG4gICAgICAgIHZhciBib3QgPSB0aGlzLmJvdHRvbTtcXG4gICAgICAgIHdoaWxlIChib3QpIHtcXG4gICAgICAgICAgICBpZiAoYm90LmlkID09IGlkKSB7XFxuICAgICAgICAgICAgICAgIHJldHVybiBib3Q7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIGJvdCA9IGJvdC5uZXh0O1xcbiAgICAgICAgfVxcbiAgICAgICAgcmV0dXJuIG51bGw7XFxuICAgIH07XFxuICAgIC8qXFxcXFxcbiAgICAgKiBQYXBlci5mb3JFYWNoXFxuICAgICBbIG1ldGhvZCBdXFxuICAgICAqKlxcbiAgICAgKiBFeGVjdXRlcyBnaXZlbiBmdW5jdGlvbiBmb3IgZWFjaCBlbGVtZW50IG9uIHRoZSBwYXBlclxcbiAgICAgKlxcbiAgICAgKiBJZiBjYWxsYmFjayBmdW5jdGlvbiByZXR1cm5zIGBmYWxzZWAgaXQgd2lsbCBzdG9wIGxvb3AgcnVubmluZy5cXG4gICAgICoqXFxuICAgICA+IFBhcmFtZXRlcnNcXG4gICAgICoqXFxuICAgICAtIGNhbGxiYWNrIChmdW5jdGlvbikgZnVuY3Rpb24gdG8gcnVuXFxuICAgICAtIHRoaXNBcmcgKG9iamVjdCkgY29udGV4dCBvYmplY3QgZm9yIHRoZSBjYWxsYmFja1xcbiAgICAgPSAob2JqZWN0KSBQYXBlciBvYmplY3RcXG4gICAgID4gVXNhZ2VcXG4gICAgIHwgcGFwZXIuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcXG4gICAgIHwgICAgIGVsLmF0dHIoeyBzdHJva2U6IFxcXCJibHVlXFxcIiB9KTtcXG4gICAgIHwgfSk7XFxuICAgIFxcXFwqL1xcbiAgICBwYXBlcnByb3RvLmZvckVhY2ggPSBmdW5jdGlvbiAoY2FsbGJhY2ssIHRoaXNBcmcpIHtcXG4gICAgICAgIHZhciBib3QgPSB0aGlzLmJvdHRvbTtcXG4gICAgICAgIHdoaWxlIChib3QpIHtcXG4gICAgICAgICAgICBpZiAoY2FsbGJhY2suY2FsbCh0aGlzQXJnLCBib3QpID09PSBmYWxzZSkge1xcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgYm90ID0gYm90Lm5leHQ7XFxuICAgICAgICB9XFxuICAgICAgICByZXR1cm4gdGhpcztcXG4gICAgfTtcXG4gICAgLypcXFxcXFxuICAgICAqIFBhcGVyLmdldEVsZW1lbnRzQnlQb2ludFxcbiAgICAgWyBtZXRob2QgXVxcbiAgICAgKipcXG4gICAgICogUmV0dXJucyBzZXQgb2YgZWxlbWVudHMgdGhhdCBoYXZlIGNvbW1vbiBwb2ludCBpbnNpZGVcXG4gICAgICoqXFxuICAgICA+IFBhcmFtZXRlcnNcXG4gICAgICoqXFxuICAgICAtIHggKG51bWJlcikgeCBjb29yZGluYXRlIG9mIHRoZSBwb2ludFxcbiAgICAgLSB5IChudW1iZXIpIHkgY29vcmRpbmF0ZSBvZiB0aGUgcG9pbnRcXG4gICAgID0gKG9iamVjdCkgQFNldFxcbiAgICBcXFxcKi9cXG4gICAgcGFwZXJwcm90by5nZXRFbGVtZW50c0J5UG9pbnQgPSBmdW5jdGlvbiAoeCwgeSkge1xcbiAgICAgICAgdmFyIHNldCA9IHRoaXMuc2V0KCk7XFxuICAgICAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XFxuICAgICAgICAgICAgaWYgKGVsLmlzUG9pbnRJbnNpZGUoeCwgeSkpIHtcXG4gICAgICAgICAgICAgICAgc2V0LnB1c2goZWwpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0pO1xcbiAgICAgICAgcmV0dXJuIHNldDtcXG4gICAgfTtcXG4gICAgZnVuY3Rpb24geF95KCkge1xcbiAgICAgICAgcmV0dXJuIHRoaXMueCArIFMgKyB0aGlzLnk7XFxuICAgIH1cXG4gICAgZnVuY3Rpb24geF95X3dfaCgpIHtcXG4gICAgICAgIHJldHVybiB0aGlzLnggKyBTICsgdGhpcy55ICsgUyArIHRoaXMud2lkdGggKyBcXFwiIFxcXFx4ZDcgXFxcIiArIHRoaXMuaGVpZ2h0O1xcbiAgICB9XFxuICAgIC8qXFxcXFxcbiAgICAgKiBFbGVtZW50LmlzUG9pbnRJbnNpZGVcXG4gICAgIFsgbWV0aG9kIF1cXG4gICAgICoqXFxuICAgICAqIERldGVybWluZSBpZiBnaXZlbiBwb2ludCBpcyBpbnNpZGUgdGhpcyBlbGVtZW504oCZcyBzaGFwZVxcbiAgICAgKipcXG4gICAgID4gUGFyYW1ldGVyc1xcbiAgICAgKipcXG4gICAgIC0geCAobnVtYmVyKSB4IGNvb3JkaW5hdGUgb2YgdGhlIHBvaW50XFxuICAgICAtIHkgKG51bWJlcikgeSBjb29yZGluYXRlIG9mIHRoZSBwb2ludFxcbiAgICAgPSAoYm9vbGVhbikgYHRydWVgIGlmIHBvaW50IGluc2lkZSB0aGUgc2hhcGVcXG4gICAgXFxcXCovXFxuICAgIGVscHJvdG8uaXNQb2ludEluc2lkZSA9IGZ1bmN0aW9uICh4LCB5KSB7XFxuICAgICAgICB2YXIgcnAgPSB0aGlzLnJlYWxQYXRoID0gZ2V0UGF0aFt0aGlzLnR5cGVdKHRoaXMpO1xcbiAgICAgICAgaWYgKHRoaXMuYXR0cigndHJhbnNmb3JtJykgJiYgdGhpcy5hdHRyKCd0cmFuc2Zvcm0nKS5sZW5ndGgpIHtcXG4gICAgICAgICAgICBycCA9IFIudHJhbnNmb3JtUGF0aChycCwgdGhpcy5hdHRyKCd0cmFuc2Zvcm0nKSk7XFxuICAgICAgICB9XFxuICAgICAgICByZXR1cm4gUi5pc1BvaW50SW5zaWRlUGF0aChycCwgeCwgeSk7XFxuICAgIH07XFxuICAgIC8qXFxcXFxcbiAgICAgKiBFbGVtZW50LmdldEJCb3hcXG4gICAgIFsgbWV0aG9kIF1cXG4gICAgICoqXFxuICAgICAqIFJldHVybiBib3VuZGluZyBib3ggZm9yIGEgZ2l2ZW4gZWxlbWVudFxcbiAgICAgKipcXG4gICAgID4gUGFyYW1ldGVyc1xcbiAgICAgKipcXG4gICAgIC0gaXNXaXRob3V0VHJhbnNmb3JtIChib29sZWFuKSBmbGFnLCBgdHJ1ZWAgaWYgeW91IHdhbnQgdG8gaGF2ZSBib3VuZGluZyBib3ggYmVmb3JlIHRyYW5zZm9ybWF0aW9ucy4gRGVmYXVsdCBpcyBgZmFsc2VgLlxcbiAgICAgPSAob2JqZWN0KSBCb3VuZGluZyBib3ggb2JqZWN0OlxcbiAgICAgbyB7XFxuICAgICBvICAgICB4OiAobnVtYmVyKSB0b3AgbGVmdCBjb3JuZXIgeFxcbiAgICAgbyAgICAgeTogKG51bWJlcikgdG9wIGxlZnQgY29ybmVyIHlcXG4gICAgIG8gICAgIHgyOiAobnVtYmVyKSBib3R0b20gcmlnaHQgY29ybmVyIHhcXG4gICAgIG8gICAgIHkyOiAobnVtYmVyKSBib3R0b20gcmlnaHQgY29ybmVyIHlcXG4gICAgIG8gICAgIHdpZHRoOiAobnVtYmVyKSB3aWR0aFxcbiAgICAgbyAgICAgaGVpZ2h0OiAobnVtYmVyKSBoZWlnaHRcXG4gICAgIG8gfVxcbiAgICBcXFxcKi9cXG4gICAgZWxwcm90by5nZXRCQm94ID0gZnVuY3Rpb24gKGlzV2l0aG91dFRyYW5zZm9ybSkge1xcbiAgICAgICAgaWYgKHRoaXMucmVtb3ZlZCkge1xcbiAgICAgICAgICAgIHJldHVybiB7fTtcXG4gICAgICAgIH1cXG4gICAgICAgIHZhciBfID0gdGhpcy5fO1xcbiAgICAgICAgaWYgKGlzV2l0aG91dFRyYW5zZm9ybSkge1xcbiAgICAgICAgICAgIGlmIChfLmRpcnR5IHx8ICFfLmJib3h3dCkge1xcbiAgICAgICAgICAgICAgICB0aGlzLnJlYWxQYXRoID0gZ2V0UGF0aFt0aGlzLnR5cGVdKHRoaXMpO1xcbiAgICAgICAgICAgICAgICBfLmJib3h3dCA9IHBhdGhEaW1lbnNpb25zKHRoaXMucmVhbFBhdGgpO1xcbiAgICAgICAgICAgICAgICBfLmJib3h3dC50b1N0cmluZyA9IHhfeV93X2g7XFxuICAgICAgICAgICAgICAgIF8uZGlydHkgPSAwO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICByZXR1cm4gXy5iYm94d3Q7XFxuICAgICAgICB9XFxuICAgICAgICBpZiAoXy5kaXJ0eSB8fCBfLmRpcnR5VCB8fCAhXy5iYm94KSB7XFxuICAgICAgICAgICAgaWYgKF8uZGlydHkgfHwgIXRoaXMucmVhbFBhdGgpIHtcXG4gICAgICAgICAgICAgICAgXy5iYm94d3QgPSAwO1xcbiAgICAgICAgICAgICAgICB0aGlzLnJlYWxQYXRoID0gZ2V0UGF0aFt0aGlzLnR5cGVdKHRoaXMpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBfLmJib3ggPSBwYXRoRGltZW5zaW9ucyhtYXBQYXRoKHRoaXMucmVhbFBhdGgsIHRoaXMubWF0cml4KSk7XFxuICAgICAgICAgICAgXy5iYm94LnRvU3RyaW5nID0geF95X3dfaDtcXG4gICAgICAgICAgICBfLmRpcnR5ID0gXy5kaXJ0eVQgPSAwO1xcbiAgICAgICAgfVxcbiAgICAgICAgcmV0dXJuIF8uYmJveDtcXG4gICAgfTtcXG4gICAgLypcXFxcXFxuICAgICAqIEVsZW1lbnQuY2xvbmVcXG4gICAgIFsgbWV0aG9kIF1cXG4gICAgICoqXFxuICAgICA9IChvYmplY3QpIGNsb25lIG9mIGEgZ2l2ZW4gZWxlbWVudFxcbiAgICAgKipcXG4gICAgXFxcXCovXFxuICAgIGVscHJvdG8uY2xvbmUgPSBmdW5jdGlvbiAoKSB7XFxuICAgICAgICBpZiAodGhpcy5yZW1vdmVkKSB7XFxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XFxuICAgICAgICB9XFxuICAgICAgICB2YXIgb3V0ID0gdGhpcy5wYXBlclt0aGlzLnR5cGVdKCkuYXR0cih0aGlzLmF0dHIoKSk7XFxuICAgICAgICB0aGlzLl9fc2V0X18gJiYgdGhpcy5fX3NldF9fLnB1c2gob3V0KTtcXG4gICAgICAgIHJldHVybiBvdXQ7XFxuICAgIH07XFxuICAgIC8qXFxcXFxcbiAgICAgKiBFbGVtZW50Lmdsb3dcXG4gICAgIFsgbWV0aG9kIF1cXG4gICAgICoqXFxuICAgICAqIFJldHVybiBzZXQgb2YgZWxlbWVudHMgdGhhdCBjcmVhdGUgZ2xvdy1saWtlIGVmZmVjdCBhcm91bmQgZ2l2ZW4gZWxlbWVudC4gU2VlIEBQYXBlci5zZXQuXFxuICAgICAqXFxuICAgICAqIE5vdGU6IEdsb3cgaXMgbm90IGNvbm5lY3RlZCB0byB0aGUgZWxlbWVudC4gSWYgeW91IGNoYW5nZSBlbGVtZW50IGF0dHJpYnV0ZXMgaXQgd29u4oCZdCBhZGp1c3QgaXRzZWxmLlxcbiAgICAgKipcXG4gICAgID4gUGFyYW1ldGVyc1xcbiAgICAgKipcXG4gICAgIC0gZ2xvdyAob2JqZWN0KSAjb3B0aW9uYWwgcGFyYW1ldGVycyBvYmplY3Qgd2l0aCBhbGwgcHJvcGVydGllcyBvcHRpb25hbDpcXG4gICAgIG8ge1xcbiAgICAgbyAgICAgd2lkdGggKG51bWJlcikgc2l6ZSBvZiB0aGUgZ2xvdywgZGVmYXVsdCBpcyBgMTBgXFxuICAgICBvICAgICBmaWxsIChib29sZWFuKSB3aWxsIGl0IGJlIGZpbGxlZCwgZGVmYXVsdCBpcyBgZmFsc2VgXFxuICAgICBvICAgICBvcGFjaXR5IChudW1iZXIpIG9wYWNpdHksIGRlZmF1bHQgaXMgYDAuNWBcXG4gICAgIG8gICAgIG9mZnNldHggKG51bWJlcikgaG9yaXpvbnRhbCBvZmZzZXQsIGRlZmF1bHQgaXMgYDBgXFxuICAgICBvICAgICBvZmZzZXR5IChudW1iZXIpIHZlcnRpY2FsIG9mZnNldCwgZGVmYXVsdCBpcyBgMGBcXG4gICAgIG8gICAgIGNvbG9yIChzdHJpbmcpIGdsb3cgY29sb3VyLCBkZWZhdWx0IGlzIGBibGFja2BcXG4gICAgIG8gfVxcbiAgICAgPSAob2JqZWN0KSBAUGFwZXIuc2V0IG9mIGVsZW1lbnRzIHRoYXQgcmVwcmVzZW50cyBnbG93XFxuICAgIFxcXFwqL1xcbiAgICBlbHByb3RvLmdsb3cgPSBmdW5jdGlvbiAoZ2xvdykge1xcbiAgICAgICAgaWYgKHRoaXMudHlwZSA9PSBcXFwidGV4dFxcXCIpIHtcXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcXG4gICAgICAgIH1cXG4gICAgICAgIGdsb3cgPSBnbG93IHx8IHt9O1xcbiAgICAgICAgdmFyIHMgPSB7XFxuICAgICAgICAgICAgd2lkdGg6IChnbG93LndpZHRoIHx8IDEwKSArICgrdGhpcy5hdHRyKFxcXCJzdHJva2Utd2lkdGhcXFwiKSB8fCAxKSxcXG4gICAgICAgICAgICBmaWxsOiBnbG93LmZpbGwgfHwgZmFsc2UsXFxuICAgICAgICAgICAgb3BhY2l0eTogZ2xvdy5vcGFjaXR5ID09IG51bGwgPyAuNSA6IGdsb3cub3BhY2l0eSxcXG4gICAgICAgICAgICBvZmZzZXR4OiBnbG93Lm9mZnNldHggfHwgMCxcXG4gICAgICAgICAgICBvZmZzZXR5OiBnbG93Lm9mZnNldHkgfHwgMCxcXG4gICAgICAgICAgICBjb2xvcjogZ2xvdy5jb2xvciB8fCBcXFwiIzAwMFxcXCJcXG4gICAgICAgIH0sXFxuICAgICAgICAgICAgYyA9IHMud2lkdGggLyAyLFxcbiAgICAgICAgICAgIHIgPSB0aGlzLnBhcGVyLFxcbiAgICAgICAgICAgIG91dCA9IHIuc2V0KCksXFxuICAgICAgICAgICAgcGF0aCA9IHRoaXMucmVhbFBhdGggfHwgZ2V0UGF0aFt0aGlzLnR5cGVdKHRoaXMpO1xcbiAgICAgICAgcGF0aCA9IHRoaXMubWF0cml4ID8gbWFwUGF0aChwYXRoLCB0aGlzLm1hdHJpeCkgOiBwYXRoO1xcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBjICsgMTsgaSsrKSB7XFxuICAgICAgICAgICAgb3V0LnB1c2goci5wYXRoKHBhdGgpLmF0dHIoe1xcbiAgICAgICAgICAgICAgICBzdHJva2U6IHMuY29sb3IsXFxuICAgICAgICAgICAgICAgIGZpbGw6IHMuZmlsbCA/IHMuY29sb3IgOiBcXFwibm9uZVxcXCIsXFxuICAgICAgICAgICAgICAgIFxcXCJzdHJva2UtbGluZWpvaW5cXFwiOiBcXFwicm91bmRcXFwiLFxcbiAgICAgICAgICAgICAgICBcXFwic3Ryb2tlLWxpbmVjYXBcXFwiOiBcXFwicm91bmRcXFwiLFxcbiAgICAgICAgICAgICAgICBcXFwic3Ryb2tlLXdpZHRoXFxcIjogKyhzLndpZHRoIC8gYyAqIGkpLnRvRml4ZWQoMyksXFxuICAgICAgICAgICAgICAgIG9wYWNpdHk6ICsocy5vcGFjaXR5IC8gYykudG9GaXhlZCgzKVxcbiAgICAgICAgICAgIH0pKTtcXG4gICAgICAgIH1cXG4gICAgICAgIHJldHVybiBvdXQuaW5zZXJ0QmVmb3JlKHRoaXMpLnRyYW5zbGF0ZShzLm9mZnNldHgsIHMub2Zmc2V0eSk7XFxuICAgIH07XFxuICAgIHZhciBjdXJ2ZXNsZW5ndGhzID0ge30sXFxuICAgIGdldFBvaW50QXRTZWdtZW50TGVuZ3RoID0gZnVuY3Rpb24gKHAxeCwgcDF5LCBjMXgsIGMxeSwgYzJ4LCBjMnksIHAyeCwgcDJ5LCBsZW5ndGgpIHtcXG4gICAgICAgIGlmIChsZW5ndGggPT0gbnVsbCkge1xcbiAgICAgICAgICAgIHJldHVybiBiZXpsZW4ocDF4LCBwMXksIGMxeCwgYzF5LCBjMngsIGMyeSwgcDJ4LCBwMnkpO1xcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICByZXR1cm4gUi5maW5kRG90c0F0U2VnbWVudChwMXgsIHAxeSwgYzF4LCBjMXksIGMyeCwgYzJ5LCBwMngsIHAyeSwgZ2V0VGF0TGVuKHAxeCwgcDF5LCBjMXgsIGMxeSwgYzJ4LCBjMnksIHAyeCwgcDJ5LCBsZW5ndGgpKTtcXG4gICAgICAgIH1cXG4gICAgfSxcXG4gICAgZ2V0TGVuZ3RoRmFjdG9yeSA9IGZ1bmN0aW9uIChpc3RvdGFsLCBzdWJwYXRoKSB7XFxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHBhdGgsIGxlbmd0aCwgb25seXN0YXJ0KSB7XFxuICAgICAgICAgICAgcGF0aCA9IHBhdGgyY3VydmUocGF0aCk7XFxuICAgICAgICAgICAgdmFyIHgsIHksIHAsIGwsIHNwID0gXFxcIlxcXCIsIHN1YnBhdGhzID0ge30sIHBvaW50LFxcbiAgICAgICAgICAgICAgICBsZW4gPSAwO1xcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IHBhdGgubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xcbiAgICAgICAgICAgICAgICBwID0gcGF0aFtpXTtcXG4gICAgICAgICAgICAgICAgaWYgKHBbMF0gPT0gXFxcIk1cXFwiKSB7XFxuICAgICAgICAgICAgICAgICAgICB4ID0gK3BbMV07XFxuICAgICAgICAgICAgICAgICAgICB5ID0gK3BbMl07XFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICBsID0gZ2V0UG9pbnRBdFNlZ21lbnRMZW5ndGgoeCwgeSwgcFsxXSwgcFsyXSwgcFszXSwgcFs0XSwgcFs1XSwgcFs2XSk7XFxuICAgICAgICAgICAgICAgICAgICBpZiAobGVuICsgbCA+IGxlbmd0aCkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdWJwYXRoICYmICFzdWJwYXRocy5zdGFydCkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludCA9IGdldFBvaW50QXRTZWdtZW50TGVuZ3RoKHgsIHksIHBbMV0sIHBbMl0sIHBbM10sIHBbNF0sIHBbNV0sIHBbNl0sIGxlbmd0aCAtIGxlbik7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwICs9IFtcXFwiQ1xcXCIgKyBwb2ludC5zdGFydC54LCBwb2ludC5zdGFydC55LCBwb2ludC5tLngsIHBvaW50Lm0ueSwgcG9pbnQueCwgcG9pbnQueV07XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvbmx5c3RhcnQpIHtyZXR1cm4gc3A7fVxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJwYXRocy5zdGFydCA9IHNwO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcCA9IFtcXFwiTVxcXCIgKyBwb2ludC54LCBwb2ludC55ICsgXFxcIkNcXFwiICsgcG9pbnQubi54LCBwb2ludC5uLnksIHBvaW50LmVuZC54LCBwb2ludC5lbmQueSwgcFs1XSwgcFs2XV0uam9pbigpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZW4gKz0gbDtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeCA9ICtwWzVdO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5ID0gK3BbNl07XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzdG90YWwgJiYgIXN1YnBhdGgpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnQgPSBnZXRQb2ludEF0U2VnbWVudExlbmd0aCh4LCB5LCBwWzFdLCBwWzJdLCBwWzNdLCBwWzRdLCBwWzVdLCBwWzZdLCBsZW5ndGggLSBsZW4pO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge3g6IHBvaW50LngsIHk6IHBvaW50LnksIGFscGhhOiBwb2ludC5hbHBoYX07XFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgbGVuICs9IGw7XFxuICAgICAgICAgICAgICAgICAgICB4ID0gK3BbNV07XFxuICAgICAgICAgICAgICAgICAgICB5ID0gK3BbNl07XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgc3AgKz0gcC5zaGlmdCgpICsgcDtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgc3VicGF0aHMuZW5kID0gc3A7XFxuICAgICAgICAgICAgcG9pbnQgPSBpc3RvdGFsID8gbGVuIDogc3VicGF0aCA/IHN1YnBhdGhzIDogUi5maW5kRG90c0F0U2VnbWVudCh4LCB5LCBwWzBdLCBwWzFdLCBwWzJdLCBwWzNdLCBwWzRdLCBwWzVdLCAxKTtcXG4gICAgICAgICAgICBwb2ludC5hbHBoYSAmJiAocG9pbnQgPSB7eDogcG9pbnQueCwgeTogcG9pbnQueSwgYWxwaGE6IHBvaW50LmFscGhhfSk7XFxuICAgICAgICAgICAgcmV0dXJuIHBvaW50O1xcbiAgICAgICAgfTtcXG4gICAgfTtcXG4gICAgdmFyIGdldFRvdGFsTGVuZ3RoID0gZ2V0TGVuZ3RoRmFjdG9yeSgxKSxcXG4gICAgICAgIGdldFBvaW50QXRMZW5ndGggPSBnZXRMZW5ndGhGYWN0b3J5KCksXFxuICAgICAgICBnZXRTdWJwYXRoc0F0TGVuZ3RoID0gZ2V0TGVuZ3RoRmFjdG9yeSgwLCAxKTtcXG4gICAgLypcXFxcXFxuICAgICAqIFJhcGhhZWwuZ2V0VG90YWxMZW5ndGhcXG4gICAgIFsgbWV0aG9kIF1cXG4gICAgICoqXFxuICAgICAqIFJldHVybnMgbGVuZ3RoIG9mIHRoZSBnaXZlbiBwYXRoIGluIHBpeGVscy5cXG4gICAgICoqXFxuICAgICA+IFBhcmFtZXRlcnNcXG4gICAgICoqXFxuICAgICAtIHBhdGggKHN0cmluZykgU1ZHIHBhdGggc3RyaW5nLlxcbiAgICAgKipcXG4gICAgID0gKG51bWJlcikgbGVuZ3RoLlxcbiAgICBcXFxcKi9cXG4gICAgUi5nZXRUb3RhbExlbmd0aCA9IGdldFRvdGFsTGVuZ3RoO1xcbiAgICAvKlxcXFxcXG4gICAgICogUmFwaGFlbC5nZXRQb2ludEF0TGVuZ3RoXFxuICAgICBbIG1ldGhvZCBdXFxuICAgICAqKlxcbiAgICAgKiBSZXR1cm4gY29vcmRpbmF0ZXMgb2YgdGhlIHBvaW50IGxvY2F0ZWQgYXQgdGhlIGdpdmVuIGxlbmd0aCBvbiB0aGUgZ2l2ZW4gcGF0aC5cXG4gICAgICoqXFxuICAgICA+IFBhcmFtZXRlcnNcXG4gICAgICoqXFxuICAgICAtIHBhdGggKHN0cmluZykgU1ZHIHBhdGggc3RyaW5nXFxuICAgICAtIGxlbmd0aCAobnVtYmVyKVxcbiAgICAgKipcXG4gICAgID0gKG9iamVjdCkgcmVwcmVzZW50YXRpb24gb2YgdGhlIHBvaW50OlxcbiAgICAgbyB7XFxuICAgICBvICAgICB4OiAobnVtYmVyKSB4IGNvb3JkaW5hdGVcXG4gICAgIG8gICAgIHk6IChudW1iZXIpIHkgY29vcmRpbmF0ZVxcbiAgICAgbyAgICAgYWxwaGE6IChudW1iZXIpIGFuZ2xlIG9mIGRlcml2YXRpdmVcXG4gICAgIG8gfVxcbiAgICBcXFxcKi9cXG4gICAgUi5nZXRQb2ludEF0TGVuZ3RoID0gZ2V0UG9pbnRBdExlbmd0aDtcXG4gICAgLypcXFxcXFxuICAgICAqIFJhcGhhZWwuZ2V0U3VicGF0aFxcbiAgICAgWyBtZXRob2QgXVxcbiAgICAgKipcXG4gICAgICogUmV0dXJuIHN1YnBhdGggb2YgYSBnaXZlbiBwYXRoIGZyb20gZ2l2ZW4gbGVuZ3RoIHRvIGdpdmVuIGxlbmd0aC5cXG4gICAgICoqXFxuICAgICA+IFBhcmFtZXRlcnNcXG4gICAgICoqXFxuICAgICAtIHBhdGggKHN0cmluZykgU1ZHIHBhdGggc3RyaW5nXFxuICAgICAtIGZyb20gKG51bWJlcikgcG9zaXRpb24gb2YgdGhlIHN0YXJ0IG9mIHRoZSBzZWdtZW50XFxuICAgICAtIHRvIChudW1iZXIpIHBvc2l0aW9uIG9mIHRoZSBlbmQgb2YgdGhlIHNlZ21lbnRcXG4gICAgICoqXFxuICAgICA9IChzdHJpbmcpIHBhdGhzdHJpbmcgZm9yIHRoZSBzZWdtZW50XFxuICAgIFxcXFwqL1xcbiAgICBSLmdldFN1YnBhdGggPSBmdW5jdGlvbiAocGF0aCwgZnJvbSwgdG8pIHtcXG4gICAgICAgIGlmICh0aGlzLmdldFRvdGFsTGVuZ3RoKHBhdGgpIC0gdG8gPCAxZS02KSB7XFxuICAgICAgICAgICAgcmV0dXJuIGdldFN1YnBhdGhzQXRMZW5ndGgocGF0aCwgZnJvbSkuZW5kO1xcbiAgICAgICAgfVxcbiAgICAgICAgdmFyIGEgPSBnZXRTdWJwYXRoc0F0TGVuZ3RoKHBhdGgsIHRvLCAxKTtcXG4gICAgICAgIHJldHVybiBmcm9tID8gZ2V0U3VicGF0aHNBdExlbmd0aChhLCBmcm9tKS5lbmQgOiBhO1xcbiAgICB9O1xcbiAgICAvKlxcXFxcXG4gICAgICogRWxlbWVudC5nZXRUb3RhbExlbmd0aFxcbiAgICAgWyBtZXRob2QgXVxcbiAgICAgKipcXG4gICAgICogUmV0dXJucyBsZW5ndGggb2YgdGhlIHBhdGggaW4gcGl4ZWxzLiBPbmx5IHdvcmtzIGZvciBlbGVtZW50IG9mIOKAnHBhdGjigJ0gdHlwZS5cXG4gICAgID0gKG51bWJlcikgbGVuZ3RoLlxcbiAgICBcXFxcKi9cXG4gICAgZWxwcm90by5nZXRUb3RhbExlbmd0aCA9IGZ1bmN0aW9uICgpIHtcXG4gICAgICAgIHZhciBwYXRoID0gdGhpcy5nZXRQYXRoKCk7XFxuICAgICAgICBpZiAoIXBhdGgpIHtcXG4gICAgICAgICAgICByZXR1cm47XFxuICAgICAgICB9XFxuXFxuICAgICAgICBpZiAodGhpcy5ub2RlLmdldFRvdGFsTGVuZ3RoKSB7XFxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubm9kZS5nZXRUb3RhbExlbmd0aCgpO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgcmV0dXJuIGdldFRvdGFsTGVuZ3RoKHBhdGgpO1xcbiAgICB9O1xcbiAgICAvKlxcXFxcXG4gICAgICogRWxlbWVudC5nZXRQb2ludEF0TGVuZ3RoXFxuICAgICBbIG1ldGhvZCBdXFxuICAgICAqKlxcbiAgICAgKiBSZXR1cm4gY29vcmRpbmF0ZXMgb2YgdGhlIHBvaW50IGxvY2F0ZWQgYXQgdGhlIGdpdmVuIGxlbmd0aCBvbiB0aGUgZ2l2ZW4gcGF0aC4gT25seSB3b3JrcyBmb3IgZWxlbWVudCBvZiDigJxwYXRo4oCdIHR5cGUuXFxuICAgICAqKlxcbiAgICAgPiBQYXJhbWV0ZXJzXFxuICAgICAqKlxcbiAgICAgLSBsZW5ndGggKG51bWJlcilcXG4gICAgICoqXFxuICAgICA9IChvYmplY3QpIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBwb2ludDpcXG4gICAgIG8ge1xcbiAgICAgbyAgICAgeDogKG51bWJlcikgeCBjb29yZGluYXRlXFxuICAgICBvICAgICB5OiAobnVtYmVyKSB5IGNvb3JkaW5hdGVcXG4gICAgIG8gICAgIGFscGhhOiAobnVtYmVyKSBhbmdsZSBvZiBkZXJpdmF0aXZlXFxuICAgICBvIH1cXG4gICAgXFxcXCovXFxuICAgIGVscHJvdG8uZ2V0UG9pbnRBdExlbmd0aCA9IGZ1bmN0aW9uIChsZW5ndGgpIHtcXG4gICAgICAgIHZhciBwYXRoID0gdGhpcy5nZXRQYXRoKCk7XFxuICAgICAgICBpZiAoIXBhdGgpIHtcXG4gICAgICAgICAgICByZXR1cm47XFxuICAgICAgICB9XFxuXFxuICAgICAgICByZXR1cm4gZ2V0UG9pbnRBdExlbmd0aChwYXRoLCBsZW5ndGgpO1xcbiAgICB9O1xcbiAgICAvKlxcXFxcXG4gICAgICogRWxlbWVudC5nZXRQYXRoXFxuICAgICBbIG1ldGhvZCBdXFxuICAgICAqKlxcbiAgICAgKiBSZXR1cm5zIHBhdGggb2YgdGhlIGVsZW1lbnQuIE9ubHkgd29ya3MgZm9yIGVsZW1lbnRzIG9mIOKAnHBhdGjigJ0gdHlwZSBhbmQgc2ltcGxlIGVsZW1lbnRzIGxpa2UgY2lyY2xlLlxcbiAgICAgPSAob2JqZWN0KSBwYXRoXFxuICAgICAqKlxcbiAgICBcXFxcKi9cXG4gICAgZWxwcm90by5nZXRQYXRoID0gZnVuY3Rpb24gKCkge1xcbiAgICAgICAgdmFyIHBhdGgsXFxuICAgICAgICAgICAgZ2V0UGF0aCA9IFIuX2dldFBhdGhbdGhpcy50eXBlXTtcXG5cXG4gICAgICAgIGlmICh0aGlzLnR5cGUgPT0gXFxcInRleHRcXFwiIHx8IHRoaXMudHlwZSA9PSBcXFwic2V0XFxcIikge1xcbiAgICAgICAgICAgIHJldHVybjtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIGlmIChnZXRQYXRoKSB7XFxuICAgICAgICAgICAgcGF0aCA9IGdldFBhdGgodGhpcyk7XFxuICAgICAgICB9XFxuXFxuICAgICAgICByZXR1cm4gcGF0aDtcXG4gICAgfTtcXG4gICAgLypcXFxcXFxuICAgICAqIEVsZW1lbnQuZ2V0U3VicGF0aFxcbiAgICAgWyBtZXRob2QgXVxcbiAgICAgKipcXG4gICAgICogUmV0dXJuIHN1YnBhdGggb2YgYSBnaXZlbiBlbGVtZW50IGZyb20gZ2l2ZW4gbGVuZ3RoIHRvIGdpdmVuIGxlbmd0aC4gT25seSB3b3JrcyBmb3IgZWxlbWVudCBvZiDigJxwYXRo4oCdIHR5cGUuXFxuICAgICAqKlxcbiAgICAgPiBQYXJhbWV0ZXJzXFxuICAgICAqKlxcbiAgICAgLSBmcm9tIChudW1iZXIpIHBvc2l0aW9uIG9mIHRoZSBzdGFydCBvZiB0aGUgc2VnbWVudFxcbiAgICAgLSB0byAobnVtYmVyKSBwb3NpdGlvbiBvZiB0aGUgZW5kIG9mIHRoZSBzZWdtZW50XFxuICAgICAqKlxcbiAgICAgPSAoc3RyaW5nKSBwYXRoc3RyaW5nIGZvciB0aGUgc2VnbWVudFxcbiAgICBcXFxcKi9cXG4gICAgZWxwcm90by5nZXRTdWJwYXRoID0gZnVuY3Rpb24gKGZyb20sIHRvKSB7XFxuICAgICAgICB2YXIgcGF0aCA9IHRoaXMuZ2V0UGF0aCgpO1xcbiAgICAgICAgaWYgKCFwYXRoKSB7XFxuICAgICAgICAgICAgcmV0dXJuO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgcmV0dXJuIFIuZ2V0U3VicGF0aChwYXRoLCBmcm9tLCB0byk7XFxuICAgIH07XFxuICAgIC8qXFxcXFxcbiAgICAgKiBSYXBoYWVsLmVhc2luZ19mb3JtdWxhc1xcbiAgICAgWyBwcm9wZXJ0eSBdXFxuICAgICAqKlxcbiAgICAgKiBPYmplY3QgdGhhdCBjb250YWlucyBlYXNpbmcgZm9ybXVsYXMgZm9yIGFuaW1hdGlvbi4gWW91IGNvdWxkIGV4dGVuZCBpdCB3aXRoIHlvdXIgb3duLiBCeSBkZWZhdWx0IGl0IGhhcyBmb2xsb3dpbmcgbGlzdCBvZiBlYXNpbmc6XFxuICAgICAjIDx1bD5cXG4gICAgICMgICAgIDxsaT7igJxsaW5lYXLigJ08L2xpPlxcbiAgICAgIyAgICAgPGxpPuKAnCZsdDvigJ0gb3Ig4oCcZWFzZUlu4oCdIG9yIOKAnGVhc2UtaW7igJ08L2xpPlxcbiAgICAgIyAgICAgPGxpPuKAnD7igJ0gb3Ig4oCcZWFzZU91dOKAnSBvciDigJxlYXNlLW91dOKAnTwvbGk+XFxuICAgICAjICAgICA8bGk+4oCcJmx0Oz7igJ0gb3Ig4oCcZWFzZUluT3V04oCdIG9yIOKAnGVhc2UtaW4tb3V04oCdPC9saT5cXG4gICAgICMgICAgIDxsaT7igJxiYWNrSW7igJ0gb3Ig4oCcYmFjay1pbuKAnTwvbGk+XFxuICAgICAjICAgICA8bGk+4oCcYmFja091dOKAnSBvciDigJxiYWNrLW91dOKAnTwvbGk+XFxuICAgICAjICAgICA8bGk+4oCcZWxhc3RpY+KAnTwvbGk+XFxuICAgICAjICAgICA8bGk+4oCcYm91bmNl4oCdPC9saT5cXG4gICAgICMgPC91bD5cXG4gICAgICMgPHA+U2VlIGFsc28gPGEgaHJlZj1cXFwiaHR0cDovL3JhcGhhZWxqcy5jb20vZWFzaW5nLmh0bWxcXFwiPkVhc2luZyBkZW1vPC9hPi48L3A+XFxuICAgIFxcXFwqL1xcbiAgICB2YXIgZWYgPSBSLmVhc2luZ19mb3JtdWxhcyA9IHtcXG4gICAgICAgIGxpbmVhcjogZnVuY3Rpb24gKG4pIHtcXG4gICAgICAgICAgICByZXR1cm4gbjtcXG4gICAgICAgIH0sXFxuICAgICAgICBcXFwiPFxcXCI6IGZ1bmN0aW9uIChuKSB7XFxuICAgICAgICAgICAgcmV0dXJuIHBvdyhuLCAxLjcpO1xcbiAgICAgICAgfSxcXG4gICAgICAgIFxcXCI+XFxcIjogZnVuY3Rpb24gKG4pIHtcXG4gICAgICAgICAgICByZXR1cm4gcG93KG4sIC40OCk7XFxuICAgICAgICB9LFxcbiAgICAgICAgXFxcIjw+XFxcIjogZnVuY3Rpb24gKG4pIHtcXG4gICAgICAgICAgICB2YXIgcSA9IC40OCAtIG4gLyAxLjA0LFxcbiAgICAgICAgICAgICAgICBRID0gbWF0aC5zcXJ0KC4xNzM0ICsgcSAqIHEpLFxcbiAgICAgICAgICAgICAgICB4ID0gUSAtIHEsXFxuICAgICAgICAgICAgICAgIFggPSBwb3coYWJzKHgpLCAxIC8gMykgKiAoeCA8IDAgPyAtMSA6IDEpLFxcbiAgICAgICAgICAgICAgICB5ID0gLVEgLSBxLFxcbiAgICAgICAgICAgICAgICBZID0gcG93KGFicyh5KSwgMSAvIDMpICogKHkgPCAwID8gLTEgOiAxKSxcXG4gICAgICAgICAgICAgICAgdCA9IFggKyBZICsgLjU7XFxuICAgICAgICAgICAgcmV0dXJuICgxIC0gdCkgKiAzICogdCAqIHQgKyB0ICogdCAqIHQ7XFxuICAgICAgICB9LFxcbiAgICAgICAgYmFja0luOiBmdW5jdGlvbiAobikge1xcbiAgICAgICAgICAgIHZhciBzID0gMS43MDE1ODtcXG4gICAgICAgICAgICByZXR1cm4gbiAqIG4gKiAoKHMgKyAxKSAqIG4gLSBzKTtcXG4gICAgICAgIH0sXFxuICAgICAgICBiYWNrT3V0OiBmdW5jdGlvbiAobikge1xcbiAgICAgICAgICAgIG4gPSBuIC0gMTtcXG4gICAgICAgICAgICB2YXIgcyA9IDEuNzAxNTg7XFxuICAgICAgICAgICAgcmV0dXJuIG4gKiBuICogKChzICsgMSkgKiBuICsgcykgKyAxO1xcbiAgICAgICAgfSxcXG4gICAgICAgIGVsYXN0aWM6IGZ1bmN0aW9uIChuKSB7XFxuICAgICAgICAgICAgaWYgKG4gPT0gISFuKSB7XFxuICAgICAgICAgICAgICAgIHJldHVybiBuO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICByZXR1cm4gcG93KDIsIC0xMCAqIG4pICogbWF0aC5zaW4oKG4gLSAuMDc1KSAqICgyICogUEkpIC8gLjMpICsgMTtcXG4gICAgICAgIH0sXFxuICAgICAgICBib3VuY2U6IGZ1bmN0aW9uIChuKSB7XFxuICAgICAgICAgICAgdmFyIHMgPSA3LjU2MjUsXFxuICAgICAgICAgICAgICAgIHAgPSAyLjc1LFxcbiAgICAgICAgICAgICAgICBsO1xcbiAgICAgICAgICAgIGlmIChuIDwgKDEgLyBwKSkge1xcbiAgICAgICAgICAgICAgICBsID0gcyAqIG4gKiBuO1xcbiAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgIGlmIChuIDwgKDIgLyBwKSkge1xcbiAgICAgICAgICAgICAgICAgICAgbiAtPSAoMS41IC8gcCk7XFxuICAgICAgICAgICAgICAgICAgICBsID0gcyAqIG4gKiBuICsgLjc1O1xcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgICAgaWYgKG4gPCAoMi41IC8gcCkpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBuIC09ICgyLjI1IC8gcCk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgbCA9IHMgKiBuICogbiArIC45Mzc1O1xcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBuIC09ICgyLjYyNSAvIHApO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGwgPSBzICogbiAqIG4gKyAuOTg0Mzc1O1xcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIHJldHVybiBsO1xcbiAgICAgICAgfVxcbiAgICB9O1xcbiAgICBlZi5lYXNlSW4gPSBlZltcXFwiZWFzZS1pblxcXCJdID0gZWZbXFxcIjxcXFwiXTtcXG4gICAgZWYuZWFzZU91dCA9IGVmW1xcXCJlYXNlLW91dFxcXCJdID0gZWZbXFxcIj5cXFwiXTtcXG4gICAgZWYuZWFzZUluT3V0ID0gZWZbXFxcImVhc2UtaW4tb3V0XFxcIl0gPSBlZltcXFwiPD5cXFwiXTtcXG4gICAgZWZbXFxcImJhY2staW5cXFwiXSA9IGVmLmJhY2tJbjtcXG4gICAgZWZbXFxcImJhY2stb3V0XFxcIl0gPSBlZi5iYWNrT3V0O1xcblxcbiAgICB2YXIgYW5pbWF0aW9uRWxlbWVudHMgPSBbXSxcXG4gICAgICAgIHJlcXVlc3RBbmltRnJhbWUgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lICAgICAgIHx8XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgICAgfHxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cub1JlcXVlc3RBbmltYXRpb25GcmFtZSAgICAgIHx8XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93Lm1zUmVxdWVzdEFuaW1hdGlvbkZyYW1lICAgICB8fFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChjYWxsYmFjaykge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGNhbGxiYWNrLCAxNik7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcXG4gICAgICAgIGFuaW1hdGlvbiA9IGZ1bmN0aW9uICgpIHtcXG4gICAgICAgICAgICB2YXIgTm93ID0gK25ldyBEYXRlLFxcbiAgICAgICAgICAgICAgICBsID0gMDtcXG4gICAgICAgICAgICBmb3IgKDsgbCA8IGFuaW1hdGlvbkVsZW1lbnRzLmxlbmd0aDsgbCsrKSB7XFxuICAgICAgICAgICAgICAgIHZhciBlID0gYW5pbWF0aW9uRWxlbWVudHNbbF07XFxuICAgICAgICAgICAgICAgIGlmIChlLmVsLnJlbW92ZWQgfHwgZS5wYXVzZWQpIHtcXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIHZhciB0aW1lID0gTm93IC0gZS5zdGFydCxcXG4gICAgICAgICAgICAgICAgICAgIG1zID0gZS5tcyxcXG4gICAgICAgICAgICAgICAgICAgIGVhc2luZyA9IGUuZWFzaW5nLFxcbiAgICAgICAgICAgICAgICAgICAgZnJvbSA9IGUuZnJvbSxcXG4gICAgICAgICAgICAgICAgICAgIGRpZmYgPSBlLmRpZmYsXFxuICAgICAgICAgICAgICAgICAgICB0byA9IGUudG8sXFxuICAgICAgICAgICAgICAgICAgICB0ID0gZS50LFxcbiAgICAgICAgICAgICAgICAgICAgdGhhdCA9IGUuZWwsXFxuICAgICAgICAgICAgICAgICAgICBzZXQgPSB7fSxcXG4gICAgICAgICAgICAgICAgICAgIG5vdyxcXG4gICAgICAgICAgICAgICAgICAgIGluaXQgPSB7fSxcXG4gICAgICAgICAgICAgICAgICAgIGtleTtcXG4gICAgICAgICAgICAgICAgaWYgKGUuaW5pdHN0YXR1cykge1xcbiAgICAgICAgICAgICAgICAgICAgdGltZSA9IChlLmluaXRzdGF0dXMgKiBlLmFuaW0udG9wIC0gZS5wcmV2KSAvIChlLnBlcmNlbnQgLSBlLnByZXYpICogbXM7XFxuICAgICAgICAgICAgICAgICAgICBlLnN0YXR1cyA9IGUuaW5pdHN0YXR1cztcXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBlLmluaXRzdGF0dXM7XFxuICAgICAgICAgICAgICAgICAgICBlLnN0b3AgJiYgYW5pbWF0aW9uRWxlbWVudHMuc3BsaWNlKGwtLSwgMSk7XFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICBlLnN0YXR1cyA9IChlLnByZXYgKyAoZS5wZXJjZW50IC0gZS5wcmV2KSAqICh0aW1lIC8gbXMpKSAvIGUuYW5pbS50b3A7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgaWYgKHRpbWUgPCAwKSB7XFxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICBpZiAodGltZSA8IG1zKSB7XFxuICAgICAgICAgICAgICAgICAgICB2YXIgcG9zID0gZWFzaW5nKHRpbWUgLyBtcyk7XFxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBhdHRyIGluIGZyb20pIGlmIChmcm9tW2hhc10oYXR0cikpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGF2YWlsYWJsZUFuaW1BdHRyc1thdHRyXSkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIG51OlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm93ID0gK2Zyb21bYXR0cl0gKyBwb3MgKiBtcyAqIGRpZmZbYXR0cl07XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcXFwiY29sb3VyXFxcIjpcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdyA9IFxcXCJyZ2IoXFxcIiArIFtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cHRvMjU1KHJvdW5kKGZyb21bYXR0cl0uciArIHBvcyAqIG1zICogZGlmZlthdHRyXS5yKSksXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXB0bzI1NShyb3VuZChmcm9tW2F0dHJdLmcgKyBwb3MgKiBtcyAqIGRpZmZbYXR0cl0uZykpLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwdG8yNTUocm91bmQoZnJvbVthdHRyXS5iICsgcG9zICogbXMgKiBkaWZmW2F0dHJdLmIpKVxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXS5qb2luKFxcXCIsXFxcIikgKyBcXFwiKVxcXCI7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcXFwicGF0aFxcXCI6XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3cgPSBbXTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IGZyb21bYXR0cl0ubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vd1tpXSA9IFtmcm9tW2F0dHJdW2ldWzBdXTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMSwgamogPSBmcm9tW2F0dHJdW2ldLmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm93W2ldW2pdID0gK2Zyb21bYXR0cl1baV1bal0gKyBwb3MgKiBtcyAqIGRpZmZbYXR0cl1baV1bal07XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vd1tpXSA9IG5vd1tpXS5qb2luKFMpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm93ID0gbm93LmpvaW4oUyk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcXFwidHJhbnNmb3JtXFxcIjpcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkaWZmW2F0dHJdLnJlYWwpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3cgPSBbXTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IGZyb21bYXR0cl0ubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3dbaV0gPSBbZnJvbVthdHRyXVtpXVswXV07XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaiA9IDEsIGpqID0gZnJvbVthdHRyXVtpXS5sZW5ndGg7IGogPCBqajsgaisrKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3dbaV1bal0gPSBmcm9tW2F0dHJdW2ldW2pdICsgcG9zICogbXMgKiBkaWZmW2F0dHJdW2ldW2pdO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZ2V0ID0gZnVuY3Rpb24gKGkpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICtmcm9tW2F0dHJdW2ldICsgcG9zICogbXMgKiBkaWZmW2F0dHJdW2ldO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbm93ID0gW1tcXFwiclxcXCIsIGdldCgyKSwgMCwgMF0sIFtcXFwidFxcXCIsIGdldCgzKSwgZ2V0KDQpXSwgW1xcXCJzXFxcIiwgZ2V0KDApLCBnZXQoMSksIDAsIDBdXTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3cgPSBbW1xcXCJtXFxcIiwgZ2V0KDApLCBnZXQoMSksIGdldCgyKSwgZ2V0KDMpLCBnZXQoNCksIGdldCg1KV1dO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXFxcImNzdlxcXCI6XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXR0ciA9PSBcXFwiY2xpcC1yZWN0XFxcIikge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdyA9IFtdO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgPSA0O1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChpLS0pIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm93W2ldID0gK2Zyb21bYXR0cl1baV0gKyBwb3MgKiBtcyAqIGRpZmZbYXR0cl1baV07XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZnJvbTIgPSBbXVtjb25jYXRdKGZyb21bYXR0cl0pO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm93ID0gW107XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gdGhhdC5wYXBlci5jdXN0b21BdHRyaWJ1dGVzW2F0dHJdLmxlbmd0aDtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChpLS0pIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3dbaV0gPSArZnJvbTJbaV0gKyBwb3MgKiBtcyAqIGRpZmZbYXR0cl1baV07XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0W2F0dHJdID0gbm93O1xcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5hdHRyKHNldCk7XFxuICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKGlkLCB0aGF0LCBhbmltKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZShcXFwicmFwaGFlbC5hbmltLmZyYW1lLlxcXCIgKyBpZCwgdGhhdCwgYW5pbSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgICAgICAgICB9KSh0aGF0LmlkLCB0aGF0LCBlLmFuaW0pO1xcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uKGYsIGVsLCBhKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlKFxcXCJyYXBoYWVsLmFuaW0uZnJhbWUuXFxcIiArIGVsLmlkLCBlbCwgYSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZShcXFwicmFwaGFlbC5hbmltLmZpbmlzaC5cXFwiICsgZWwuaWQsIGVsLCBhKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUi5pcyhmLCBcXFwiZnVuY3Rpb25cXFwiKSAmJiBmLmNhbGwoZWwpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgICAgICAgfSkoZS5jYWxsYmFjaywgdGhhdCwgZS5hbmltKTtcXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuYXR0cih0byk7XFxuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25FbGVtZW50cy5zcGxpY2UobC0tLCAxKTtcXG4gICAgICAgICAgICAgICAgICAgIGlmIChlLnJlcGVhdCA+IDEgJiYgIWUubmV4dCkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoa2V5IGluIHRvKSBpZiAodG9baGFzXShrZXkpKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRba2V5XSA9IGUudG90YWxPcmlnaW5ba2V5XTtcXG4gICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgZS5lbC5hdHRyKGluaXQpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bkFuaW1hdGlvbihlLmFuaW0sIGUuZWwsIGUuYW5pbS5wZXJjZW50c1swXSwgbnVsbCwgZS50b3RhbE9yaWdpbiwgZS5yZXBlYXQgLSAxKTtcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgIGlmIChlLm5leHQgJiYgIWUuc3RvcCkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bkFuaW1hdGlvbihlLmFuaW0sIGUuZWwsIGUubmV4dCwgbnVsbCwgZS50b3RhbE9yaWdpbiwgZS5yZXBlYXQpO1xcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIGFuaW1hdGlvbkVsZW1lbnRzLmxlbmd0aCAmJiByZXF1ZXN0QW5pbUZyYW1lKGFuaW1hdGlvbik7XFxuICAgICAgICB9LFxcbiAgICAgICAgdXB0bzI1NSA9IGZ1bmN0aW9uIChjb2xvcikge1xcbiAgICAgICAgICAgIHJldHVybiBjb2xvciA+IDI1NSA/IDI1NSA6IGNvbG9yIDwgMCA/IDAgOiBjb2xvcjtcXG4gICAgICAgIH07XFxuICAgIC8qXFxcXFxcbiAgICAgKiBFbGVtZW50LmFuaW1hdGVXaXRoXFxuICAgICBbIG1ldGhvZCBdXFxuICAgICAqKlxcbiAgICAgKiBBY3RzIHNpbWlsYXIgdG8gQEVsZW1lbnQuYW5pbWF0ZSwgYnV0IGVuc3VyZSB0aGF0IGdpdmVuIGFuaW1hdGlvbiBydW5zIGluIHN5bmMgd2l0aCBhbm90aGVyIGdpdmVuIGVsZW1lbnQuXFxuICAgICAqKlxcbiAgICAgPiBQYXJhbWV0ZXJzXFxuICAgICAqKlxcbiAgICAgLSBlbCAob2JqZWN0KSBlbGVtZW50IHRvIHN5bmMgd2l0aFxcbiAgICAgLSBhbmltIChvYmplY3QpIGFuaW1hdGlvbiB0byBzeW5jIHdpdGhcXG4gICAgIC0gcGFyYW1zIChvYmplY3QpICNvcHRpb25hbCBmaW5hbCBhdHRyaWJ1dGVzIGZvciB0aGUgZWxlbWVudCwgc2VlIGFsc28gQEVsZW1lbnQuYXR0clxcbiAgICAgLSBtcyAobnVtYmVyKSAjb3B0aW9uYWwgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBmb3IgYW5pbWF0aW9uIHRvIHJ1blxcbiAgICAgLSBlYXNpbmcgKHN0cmluZykgI29wdGlvbmFsIGVhc2luZyB0eXBlLiBBY2NlcHQgb24gb2YgQFJhcGhhZWwuZWFzaW5nX2Zvcm11bGFzIG9yIENTUyBmb3JtYXQ6IGBjdWJpYyYjeDIwMTA7YmV6aWVyKFhYLCYjMTYwO1hYLCYjMTYwO1hYLCYjMTYwO1hYKWBcXG4gICAgIC0gY2FsbGJhY2sgKGZ1bmN0aW9uKSAjb3B0aW9uYWwgY2FsbGJhY2sgZnVuY3Rpb24uIFdpbGwgYmUgY2FsbGVkIGF0IHRoZSBlbmQgb2YgYW5pbWF0aW9uLlxcbiAgICAgKiBvclxcbiAgICAgLSBlbGVtZW50IChvYmplY3QpIGVsZW1lbnQgdG8gc3luYyB3aXRoXFxuICAgICAtIGFuaW0gKG9iamVjdCkgYW5pbWF0aW9uIHRvIHN5bmMgd2l0aFxcbiAgICAgLSBhbmltYXRpb24gKG9iamVjdCkgI29wdGlvbmFsIGFuaW1hdGlvbiBvYmplY3QsIHNlZSBAUmFwaGFlbC5hbmltYXRpb25cXG4gICAgICoqXFxuICAgICA9IChvYmplY3QpIG9yaWdpbmFsIGVsZW1lbnRcXG4gICAgXFxcXCovXFxuICAgIGVscHJvdG8uYW5pbWF0ZVdpdGggPSBmdW5jdGlvbiAoZWwsIGFuaW0sIHBhcmFtcywgbXMsIGVhc2luZywgY2FsbGJhY2spIHtcXG4gICAgICAgIHZhciBlbGVtZW50ID0gdGhpcztcXG4gICAgICAgIGlmIChlbGVtZW50LnJlbW92ZWQpIHtcXG4gICAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjay5jYWxsKGVsZW1lbnQpO1xcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50O1xcbiAgICAgICAgfVxcbiAgICAgICAgdmFyIGEgPSBwYXJhbXMgaW5zdGFuY2VvZiBBbmltYXRpb24gPyBwYXJhbXMgOiBSLmFuaW1hdGlvbihwYXJhbXMsIG1zLCBlYXNpbmcsIGNhbGxiYWNrKSxcXG4gICAgICAgICAgICB4LCB5O1xcbiAgICAgICAgcnVuQW5pbWF0aW9uKGEsIGVsZW1lbnQsIGEucGVyY2VudHNbMF0sIG51bGwsIGVsZW1lbnQuYXR0cigpKTtcXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IGFuaW1hdGlvbkVsZW1lbnRzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcXG4gICAgICAgICAgICBpZiAoYW5pbWF0aW9uRWxlbWVudHNbaV0uYW5pbSA9PSBhbmltICYmIGFuaW1hdGlvbkVsZW1lbnRzW2ldLmVsID09IGVsKSB7XFxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbkVsZW1lbnRzW2lpIC0gMV0uc3RhcnQgPSBhbmltYXRpb25FbGVtZW50c1tpXS5zdGFydDtcXG4gICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XFxuICAgICAgICAvL1xcbiAgICAgICAgLy9cXG4gICAgICAgIC8vIHZhciBhID0gcGFyYW1zID8gUi5hbmltYXRpb24ocGFyYW1zLCBtcywgZWFzaW5nLCBjYWxsYmFjaykgOiBhbmltLFxcbiAgICAgICAgLy8gICAgIHN0YXR1cyA9IGVsZW1lbnQuc3RhdHVzKGFuaW0pO1xcbiAgICAgICAgLy8gcmV0dXJuIHRoaXMuYW5pbWF0ZShhKS5zdGF0dXMoYSwgc3RhdHVzICogYW5pbS5tcyAvIGEubXMpO1xcbiAgICB9O1xcbiAgICBmdW5jdGlvbiBDdWJpY0JlemllckF0VGltZSh0LCBwMXgsIHAxeSwgcDJ4LCBwMnksIGR1cmF0aW9uKSB7XFxuICAgICAgICB2YXIgY3ggPSAzICogcDF4LFxcbiAgICAgICAgICAgIGJ4ID0gMyAqIChwMnggLSBwMXgpIC0gY3gsXFxuICAgICAgICAgICAgYXggPSAxIC0gY3ggLSBieCxcXG4gICAgICAgICAgICBjeSA9IDMgKiBwMXksXFxuICAgICAgICAgICAgYnkgPSAzICogKHAyeSAtIHAxeSkgLSBjeSxcXG4gICAgICAgICAgICBheSA9IDEgLSBjeSAtIGJ5O1xcbiAgICAgICAgZnVuY3Rpb24gc2FtcGxlQ3VydmVYKHQpIHtcXG4gICAgICAgICAgICByZXR1cm4gKChheCAqIHQgKyBieCkgKiB0ICsgY3gpICogdDtcXG4gICAgICAgIH1cXG4gICAgICAgIGZ1bmN0aW9uIHNvbHZlKHgsIGVwc2lsb24pIHtcXG4gICAgICAgICAgICB2YXIgdCA9IHNvbHZlQ3VydmVYKHgsIGVwc2lsb24pO1xcbiAgICAgICAgICAgIHJldHVybiAoKGF5ICogdCArIGJ5KSAqIHQgKyBjeSkgKiB0O1xcbiAgICAgICAgfVxcbiAgICAgICAgZnVuY3Rpb24gc29sdmVDdXJ2ZVgoeCwgZXBzaWxvbikge1xcbiAgICAgICAgICAgIHZhciB0MCwgdDEsIHQyLCB4MiwgZDIsIGk7XFxuICAgICAgICAgICAgZm9yKHQyID0geCwgaSA9IDA7IGkgPCA4OyBpKyspIHtcXG4gICAgICAgICAgICAgICAgeDIgPSBzYW1wbGVDdXJ2ZVgodDIpIC0geDtcXG4gICAgICAgICAgICAgICAgaWYgKGFicyh4MikgPCBlcHNpbG9uKSB7XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdDI7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgZDIgPSAoMyAqIGF4ICogdDIgKyAyICogYngpICogdDIgKyBjeDtcXG4gICAgICAgICAgICAgICAgaWYgKGFicyhkMikgPCAxZS02KSB7XFxuICAgICAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICB0MiA9IHQyIC0geDIgLyBkMjtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgdDAgPSAwO1xcbiAgICAgICAgICAgIHQxID0gMTtcXG4gICAgICAgICAgICB0MiA9IHg7XFxuICAgICAgICAgICAgaWYgKHQyIDwgdDApIHtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIHQwO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBpZiAodDIgPiB0MSkge1xcbiAgICAgICAgICAgICAgICByZXR1cm4gdDE7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIHdoaWxlICh0MCA8IHQxKSB7XFxuICAgICAgICAgICAgICAgIHgyID0gc2FtcGxlQ3VydmVYKHQyKTtcXG4gICAgICAgICAgICAgICAgaWYgKGFicyh4MiAtIHgpIDwgZXBzaWxvbikge1xcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQyO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIGlmICh4ID4geDIpIHtcXG4gICAgICAgICAgICAgICAgICAgIHQwID0gdDI7XFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICB0MSA9IHQyO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIHQyID0gKHQxIC0gdDApIC8gMiArIHQwO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICByZXR1cm4gdDI7XFxuICAgICAgICB9XFxuICAgICAgICByZXR1cm4gc29sdmUodCwgMSAvICgyMDAgKiBkdXJhdGlvbikpO1xcbiAgICB9XFxuICAgIGVscHJvdG8ub25BbmltYXRpb24gPSBmdW5jdGlvbiAoZikge1xcbiAgICAgICAgZiA/IGV2ZS5vbihcXFwicmFwaGFlbC5hbmltLmZyYW1lLlxcXCIgKyB0aGlzLmlkLCBmKSA6IGV2ZS51bmJpbmQoXFxcInJhcGhhZWwuYW5pbS5mcmFtZS5cXFwiICsgdGhpcy5pZCk7XFxuICAgICAgICByZXR1cm4gdGhpcztcXG4gICAgfTtcXG4gICAgZnVuY3Rpb24gQW5pbWF0aW9uKGFuaW0sIG1zKSB7XFxuICAgICAgICB2YXIgcGVyY2VudHMgPSBbXSxcXG4gICAgICAgICAgICBuZXdBbmltID0ge307XFxuICAgICAgICB0aGlzLm1zID0gbXM7XFxuICAgICAgICB0aGlzLnRpbWVzID0gMTtcXG4gICAgICAgIGlmIChhbmltKSB7XFxuICAgICAgICAgICAgZm9yICh2YXIgYXR0ciBpbiBhbmltKSBpZiAoYW5pbVtoYXNdKGF0dHIpKSB7XFxuICAgICAgICAgICAgICAgIG5ld0FuaW1bdG9GbG9hdChhdHRyKV0gPSBhbmltW2F0dHJdO1xcbiAgICAgICAgICAgICAgICBwZXJjZW50cy5wdXNoKHRvRmxvYXQoYXR0cikpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBwZXJjZW50cy5zb3J0KHNvcnRCeU51bWJlcik7XFxuICAgICAgICB9XFxuICAgICAgICB0aGlzLmFuaW0gPSBuZXdBbmltO1xcbiAgICAgICAgdGhpcy50b3AgPSBwZXJjZW50c1twZXJjZW50cy5sZW5ndGggLSAxXTtcXG4gICAgICAgIHRoaXMucGVyY2VudHMgPSBwZXJjZW50cztcXG4gICAgfVxcbiAgICAvKlxcXFxcXG4gICAgICogQW5pbWF0aW9uLmRlbGF5XFxuICAgICBbIG1ldGhvZCBdXFxuICAgICAqKlxcbiAgICAgKiBDcmVhdGVzIGEgY29weSBvZiBleGlzdGluZyBhbmltYXRpb24gb2JqZWN0IHdpdGggZ2l2ZW4gZGVsYXkuXFxuICAgICAqKlxcbiAgICAgPiBQYXJhbWV0ZXJzXFxuICAgICAqKlxcbiAgICAgLSBkZWxheSAobnVtYmVyKSBudW1iZXIgb2YgbXMgdG8gcGFzcyBiZXR3ZWVuIGFuaW1hdGlvbiBzdGFydCBhbmQgYWN0dWFsIGFuaW1hdGlvblxcbiAgICAgKipcXG4gICAgID0gKG9iamVjdCkgbmV3IGFsdGVyZWQgQW5pbWF0aW9uIG9iamVjdFxcbiAgICAgfCB2YXIgYW5pbSA9IFJhcGhhZWwuYW5pbWF0aW9uKHtjeDogMTAsIGN5OiAyMH0sIDJlMyk7XFxuICAgICB8IGNpcmNsZTEuYW5pbWF0ZShhbmltKTsgLy8gcnVuIHRoZSBnaXZlbiBhbmltYXRpb24gaW1tZWRpYXRlbHlcXG4gICAgIHwgY2lyY2xlMi5hbmltYXRlKGFuaW0uZGVsYXkoNTAwKSk7IC8vIHJ1biB0aGUgZ2l2ZW4gYW5pbWF0aW9uIGFmdGVyIDUwMCBtc1xcbiAgICBcXFxcKi9cXG4gICAgQW5pbWF0aW9uLnByb3RvdHlwZS5kZWxheSA9IGZ1bmN0aW9uIChkZWxheSkge1xcbiAgICAgICAgdmFyIGEgPSBuZXcgQW5pbWF0aW9uKHRoaXMuYW5pbSwgdGhpcy5tcyk7XFxuICAgICAgICBhLnRpbWVzID0gdGhpcy50aW1lcztcXG4gICAgICAgIGEuZGVsID0gK2RlbGF5IHx8IDA7XFxuICAgICAgICByZXR1cm4gYTtcXG4gICAgfTtcXG4gICAgLypcXFxcXFxuICAgICAqIEFuaW1hdGlvbi5yZXBlYXRcXG4gICAgIFsgbWV0aG9kIF1cXG4gICAgICoqXFxuICAgICAqIENyZWF0ZXMgYSBjb3B5IG9mIGV4aXN0aW5nIGFuaW1hdGlvbiBvYmplY3Qgd2l0aCBnaXZlbiByZXBldGl0aW9uLlxcbiAgICAgKipcXG4gICAgID4gUGFyYW1ldGVyc1xcbiAgICAgKipcXG4gICAgIC0gcmVwZWF0IChudW1iZXIpIG51bWJlciBpdGVyYXRpb25zIG9mIGFuaW1hdGlvbi4gRm9yIGluZmluaXRlIGFuaW1hdGlvbiBwYXNzIGBJbmZpbml0eWBcXG4gICAgICoqXFxuICAgICA9IChvYmplY3QpIG5ldyBhbHRlcmVkIEFuaW1hdGlvbiBvYmplY3RcXG4gICAgXFxcXCovXFxuICAgIEFuaW1hdGlvbi5wcm90b3R5cGUucmVwZWF0ID0gZnVuY3Rpb24gKHRpbWVzKSB7XFxuICAgICAgICB2YXIgYSA9IG5ldyBBbmltYXRpb24odGhpcy5hbmltLCB0aGlzLm1zKTtcXG4gICAgICAgIGEuZGVsID0gdGhpcy5kZWw7XFxuICAgICAgICBhLnRpbWVzID0gbWF0aC5mbG9vcihtbWF4KHRpbWVzLCAwKSkgfHwgMTtcXG4gICAgICAgIHJldHVybiBhO1xcbiAgICB9O1xcbiAgICBmdW5jdGlvbiBydW5BbmltYXRpb24oYW5pbSwgZWxlbWVudCwgcGVyY2VudCwgc3RhdHVzLCB0b3RhbE9yaWdpbiwgdGltZXMpIHtcXG4gICAgICAgIHBlcmNlbnQgPSB0b0Zsb2F0KHBlcmNlbnQpO1xcbiAgICAgICAgdmFyIHBhcmFtcyxcXG4gICAgICAgICAgICBpc0luQW5pbSxcXG4gICAgICAgICAgICBpc0luQW5pbVNldCxcXG4gICAgICAgICAgICBwZXJjZW50cyA9IFtdLFxcbiAgICAgICAgICAgIG5leHQsXFxuICAgICAgICAgICAgcHJldixcXG4gICAgICAgICAgICB0aW1lc3RhbXAsXFxuICAgICAgICAgICAgbXMgPSBhbmltLm1zLFxcbiAgICAgICAgICAgIGZyb20gPSB7fSxcXG4gICAgICAgICAgICB0byA9IHt9LFxcbiAgICAgICAgICAgIGRpZmYgPSB7fTtcXG4gICAgICAgIGlmIChzdGF0dXMpIHtcXG4gICAgICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IGFuaW1hdGlvbkVsZW1lbnRzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcXG4gICAgICAgICAgICAgICAgdmFyIGUgPSBhbmltYXRpb25FbGVtZW50c1tpXTtcXG4gICAgICAgICAgICAgICAgaWYgKGUuZWwuaWQgPT0gZWxlbWVudC5pZCAmJiBlLmFuaW0gPT0gYW5pbSkge1xcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUucGVyY2VudCAhPSBwZXJjZW50KSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uRWxlbWVudHMuc3BsaWNlKGksIDEpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzSW5BbmltU2V0ID0gMTtcXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgaXNJbkFuaW0gPSBlO1xcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5hdHRyKGUudG90YWxPcmlnaW4pO1xcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgIHN0YXR1cyA9ICt0bzsgLy8gTmFOXFxuICAgICAgICB9XFxuICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBhbmltLnBlcmNlbnRzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcXG4gICAgICAgICAgICBpZiAoYW5pbS5wZXJjZW50c1tpXSA9PSBwZXJjZW50IHx8IGFuaW0ucGVyY2VudHNbaV0gPiBzdGF0dXMgKiBhbmltLnRvcCkge1xcbiAgICAgICAgICAgICAgICBwZXJjZW50ID0gYW5pbS5wZXJjZW50c1tpXTtcXG4gICAgICAgICAgICAgICAgcHJldiA9IGFuaW0ucGVyY2VudHNbaSAtIDFdIHx8IDA7XFxuICAgICAgICAgICAgICAgIG1zID0gbXMgLyBhbmltLnRvcCAqIChwZXJjZW50IC0gcHJldik7XFxuICAgICAgICAgICAgICAgIG5leHQgPSBhbmltLnBlcmNlbnRzW2kgKyAxXTtcXG4gICAgICAgICAgICAgICAgcGFyYW1zID0gYW5pbS5hbmltW3BlcmNlbnRdO1xcbiAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXR1cykge1xcbiAgICAgICAgICAgICAgICBlbGVtZW50LmF0dHIoYW5pbS5hbmltW2FuaW0ucGVyY2VudHNbaV1dKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgICBpZiAoIXBhcmFtcykge1xcbiAgICAgICAgICAgIHJldHVybjtcXG4gICAgICAgIH1cXG4gICAgICAgIGlmICghaXNJbkFuaW0pIHtcXG4gICAgICAgICAgICBmb3IgKHZhciBhdHRyIGluIHBhcmFtcykgaWYgKHBhcmFtc1toYXNdKGF0dHIpKSB7XFxuICAgICAgICAgICAgICAgIGlmIChhdmFpbGFibGVBbmltQXR0cnNbaGFzXShhdHRyKSB8fCBlbGVtZW50LnBhcGVyLmN1c3RvbUF0dHJpYnV0ZXNbaGFzXShhdHRyKSkge1xcbiAgICAgICAgICAgICAgICAgICAgZnJvbVthdHRyXSA9IGVsZW1lbnQuYXR0cihhdHRyKTtcXG4gICAgICAgICAgICAgICAgICAgIChmcm9tW2F0dHJdID09IG51bGwpICYmIChmcm9tW2F0dHJdID0gYXZhaWxhYmxlQXR0cnNbYXR0cl0pO1xcbiAgICAgICAgICAgICAgICAgICAgdG9bYXR0cl0gPSBwYXJhbXNbYXR0cl07XFxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGF2YWlsYWJsZUFuaW1BdHRyc1thdHRyXSkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgbnU6XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpZmZbYXR0cl0gPSAodG9bYXR0cl0gLSBmcm9tW2F0dHJdKSAvIG1zO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFxcXCJjb2xvdXJcXFwiOlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tW2F0dHJdID0gUi5nZXRSR0IoZnJvbVthdHRyXSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0b0NvbG91ciA9IFIuZ2V0UkdCKHRvW2F0dHJdKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlmZlthdHRyXSA9IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHI6ICh0b0NvbG91ci5yIC0gZnJvbVthdHRyXS5yKSAvIG1zLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZzogKHRvQ29sb3VyLmcgLSBmcm9tW2F0dHJdLmcpIC8gbXMsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiOiAodG9Db2xvdXIuYiAtIGZyb21bYXR0cl0uYikgLyBtc1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFxcXCJwYXRoXFxcIjpcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhdGhlcyA9IHBhdGgyY3VydmUoZnJvbVthdHRyXSwgdG9bYXR0cl0pLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9QYXRoID0gcGF0aGVzWzFdO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tW2F0dHJdID0gcGF0aGVzWzBdO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaWZmW2F0dHJdID0gW107XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDAsIGlpID0gZnJvbVthdHRyXS5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaWZmW2F0dHJdW2ldID0gWzBdO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDEsIGpqID0gZnJvbVthdHRyXVtpXS5sZW5ndGg7IGogPCBqajsgaisrKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlmZlthdHRyXVtpXVtqXSA9ICh0b1BhdGhbaV1bal0gLSBmcm9tW2F0dHJdW2ldW2pdKSAvIG1zO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXFxcInRyYW5zZm9ybVxcXCI6XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfID0gZWxlbWVudC5fLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXEgPSBlcXVhbGlzZVRyYW5zZm9ybShfW2F0dHJdLCB0b1thdHRyXSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcSkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbVthdHRyXSA9IGVxLmZyb207XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b1thdHRyXSA9IGVxLnRvO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlmZlthdHRyXSA9IFtdO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlmZlthdHRyXS5yZWFsID0gdHJ1ZTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDAsIGlpID0gZnJvbVthdHRyXS5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlmZlthdHRyXVtpXSA9IFtmcm9tW2F0dHJdW2ldWzBdXTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGogPSAxLCBqaiA9IGZyb21bYXR0cl1baV0ubGVuZ3RoOyBqIDwgamo7IGorKykge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaWZmW2F0dHJdW2ldW2pdID0gKHRvW2F0dHJdW2ldW2pdIC0gZnJvbVthdHRyXVtpXVtqXSkgLyBtcztcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbSA9IChlbGVtZW50Lm1hdHJpeCB8fCBuZXcgTWF0cml4KSxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bzIgPSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF86IHt0cmFuc2Zvcm06IF8udHJhbnNmb3JtfSxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0QkJveDogZnVuY3Rpb24gKCkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQuZ2V0QkJveCgxKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tW2F0dHJdID0gW1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uYSxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLmIsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5jLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uZCxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLmUsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5mXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmFjdFRyYW5zZm9ybSh0bzIsIHRvW2F0dHJdKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvW2F0dHJdID0gdG8yLl8udHJhbnNmb3JtO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlmZlthdHRyXSA9IFtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodG8yLm1hdHJpeC5hIC0gbS5hKSAvIG1zLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0bzIubWF0cml4LmIgLSBtLmIpIC8gbXMsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRvMi5tYXRyaXguYyAtIG0uYykgLyBtcyxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodG8yLm1hdHJpeC5kIC0gbS5kKSAvIG1zLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0bzIubWF0cml4LmUgLSBtLmUpIC8gbXMsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRvMi5tYXRyaXguZiAtIG0uZikgLyBtc1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZyb21bYXR0cl0gPSBbXy5zeCwgXy5zeSwgXy5kZWcsIF8uZHgsIF8uZHldO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdmFyIHRvMiA9IHtfOnt9LCBnZXRCQm94OiBmdW5jdGlvbiAoKSB7IHJldHVybiBlbGVtZW50LmdldEJCb3goKTsgfX07XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBleHRyYWN0VHJhbnNmb3JtKHRvMiwgdG9bYXR0cl0pO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGlmZlthdHRyXSA9IFtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAodG8yLl8uc3ggLSBfLnN4KSAvIG1zLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICh0bzIuXy5zeSAtIF8uc3kpIC8gbXMsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgKHRvMi5fLmRlZyAtIF8uZGVnKSAvIG1zLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICh0bzIuXy5keCAtIF8uZHgpIC8gbXMsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgKHRvMi5fLmR5IC0gXy5keSkgLyBtc1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gXTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFxcXCJjc3ZcXFwiOlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWVzID0gU3RyKHBhcmFtc1thdHRyXSlbc3BsaXRdKHNlcGFyYXRvciksXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tMiA9IFN0cihmcm9tW2F0dHJdKVtzcGxpdF0oc2VwYXJhdG9yKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF0dHIgPT0gXFxcImNsaXAtcmVjdFxcXCIpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb21bYXR0cl0gPSBmcm9tMjtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpZmZbYXR0cl0gPSBbXTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBmcm9tMi5sZW5ndGg7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoaS0tKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlmZlthdHRyXVtpXSA9ICh2YWx1ZXNbaV0gLSBmcm9tW2F0dHJdW2ldKSAvIG1zO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvW2F0dHJdID0gdmFsdWVzO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXMgPSBbXVtjb25jYXRdKHBhcmFtc1thdHRyXSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb20yID0gW11bY29uY2F0XShmcm9tW2F0dHJdKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlmZlthdHRyXSA9IFtdO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gZWxlbWVudC5wYXBlci5jdXN0b21BdHRyaWJ1dGVzW2F0dHJdLmxlbmd0aDtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGktLSkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlmZlthdHRyXVtpXSA9ICgodmFsdWVzW2ldIHx8IDApIC0gKGZyb20yW2ldIHx8IDApKSAvIG1zO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIHZhciBlYXNpbmcgPSBwYXJhbXMuZWFzaW5nLFxcbiAgICAgICAgICAgICAgICBlYXN5ZWFzeSA9IFIuZWFzaW5nX2Zvcm11bGFzW2Vhc2luZ107XFxuICAgICAgICAgICAgaWYgKCFlYXN5ZWFzeSkge1xcbiAgICAgICAgICAgICAgICBlYXN5ZWFzeSA9IFN0cihlYXNpbmcpLm1hdGNoKGJlemllcnJnKTtcXG4gICAgICAgICAgICAgICAgaWYgKGVhc3llYXN5ICYmIGVhc3llYXN5Lmxlbmd0aCA9PSA1KSB7XFxuICAgICAgICAgICAgICAgICAgICB2YXIgY3VydmUgPSBlYXN5ZWFzeTtcXG4gICAgICAgICAgICAgICAgICAgIGVhc3llYXN5ID0gZnVuY3Rpb24gKHQpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3ViaWNCZXppZXJBdFRpbWUodCwgK2N1cnZlWzFdLCArY3VydmVbMl0sICtjdXJ2ZVszXSwgK2N1cnZlWzRdLCBtcyk7XFxuICAgICAgICAgICAgICAgICAgICB9O1xcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgICAgZWFzeWVhc3kgPSBwaXBlO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIHRpbWVzdGFtcCA9IHBhcmFtcy5zdGFydCB8fCBhbmltLnN0YXJ0IHx8ICtuZXcgRGF0ZTtcXG4gICAgICAgICAgICBlID0ge1xcbiAgICAgICAgICAgICAgICBhbmltOiBhbmltLFxcbiAgICAgICAgICAgICAgICBwZXJjZW50OiBwZXJjZW50LFxcbiAgICAgICAgICAgICAgICB0aW1lc3RhbXA6IHRpbWVzdGFtcCxcXG4gICAgICAgICAgICAgICAgc3RhcnQ6IHRpbWVzdGFtcCArIChhbmltLmRlbCB8fCAwKSxcXG4gICAgICAgICAgICAgICAgc3RhdHVzOiAwLFxcbiAgICAgICAgICAgICAgICBpbml0c3RhdHVzOiBzdGF0dXMgfHwgMCxcXG4gICAgICAgICAgICAgICAgc3RvcDogZmFsc2UsXFxuICAgICAgICAgICAgICAgIG1zOiBtcyxcXG4gICAgICAgICAgICAgICAgZWFzaW5nOiBlYXN5ZWFzeSxcXG4gICAgICAgICAgICAgICAgZnJvbTogZnJvbSxcXG4gICAgICAgICAgICAgICAgZGlmZjogZGlmZixcXG4gICAgICAgICAgICAgICAgdG86IHRvLFxcbiAgICAgICAgICAgICAgICBlbDogZWxlbWVudCxcXG4gICAgICAgICAgICAgICAgY2FsbGJhY2s6IHBhcmFtcy5jYWxsYmFjayxcXG4gICAgICAgICAgICAgICAgcHJldjogcHJldixcXG4gICAgICAgICAgICAgICAgbmV4dDogbmV4dCxcXG4gICAgICAgICAgICAgICAgcmVwZWF0OiB0aW1lcyB8fCBhbmltLnRpbWVzLFxcbiAgICAgICAgICAgICAgICBvcmlnaW46IGVsZW1lbnQuYXR0cigpLFxcbiAgICAgICAgICAgICAgICB0b3RhbE9yaWdpbjogdG90YWxPcmlnaW5cXG4gICAgICAgICAgICB9O1xcbiAgICAgICAgICAgIGFuaW1hdGlvbkVsZW1lbnRzLnB1c2goZSk7XFxuICAgICAgICAgICAgaWYgKHN0YXR1cyAmJiAhaXNJbkFuaW0gJiYgIWlzSW5BbmltU2V0KSB7XFxuICAgICAgICAgICAgICAgIGUuc3RvcCA9IHRydWU7XFxuICAgICAgICAgICAgICAgIGUuc3RhcnQgPSBuZXcgRGF0ZSAtIG1zICogc3RhdHVzO1xcbiAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uRWxlbWVudHMubGVuZ3RoID09IDEpIHtcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhbmltYXRpb24oKTtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBpZiAoaXNJbkFuaW1TZXQpIHtcXG4gICAgICAgICAgICAgICAgZS5zdGFydCA9IG5ldyBEYXRlIC0gZS5tcyAqIHN0YXR1cztcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgYW5pbWF0aW9uRWxlbWVudHMubGVuZ3RoID09IDEgJiYgcmVxdWVzdEFuaW1GcmFtZShhbmltYXRpb24pO1xcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICBpc0luQW5pbS5pbml0c3RhdHVzID0gc3RhdHVzO1xcbiAgICAgICAgICAgIGlzSW5BbmltLnN0YXJ0ID0gbmV3IERhdGUgLSBpc0luQW5pbS5tcyAqIHN0YXR1cztcXG4gICAgICAgIH1cXG4gICAgICAgIGV2ZShcXFwicmFwaGFlbC5hbmltLnN0YXJ0LlxcXCIgKyBlbGVtZW50LmlkLCBlbGVtZW50LCBhbmltKTtcXG4gICAgfVxcbiAgICAvKlxcXFxcXG4gICAgICogUmFwaGFlbC5hbmltYXRpb25cXG4gICAgIFsgbWV0aG9kIF1cXG4gICAgICoqXFxuICAgICAqIENyZWF0ZXMgYW4gYW5pbWF0aW9uIG9iamVjdCB0aGF0IGNhbiBiZSBwYXNzZWQgdG8gdGhlIEBFbGVtZW50LmFuaW1hdGUgb3IgQEVsZW1lbnQuYW5pbWF0ZVdpdGggbWV0aG9kcy5cXG4gICAgICogU2VlIGFsc28gQEFuaW1hdGlvbi5kZWxheSBhbmQgQEFuaW1hdGlvbi5yZXBlYXQgbWV0aG9kcy5cXG4gICAgICoqXFxuICAgICA+IFBhcmFtZXRlcnNcXG4gICAgICoqXFxuICAgICAtIHBhcmFtcyAob2JqZWN0KSBmaW5hbCBhdHRyaWJ1dGVzIGZvciB0aGUgZWxlbWVudCwgc2VlIGFsc28gQEVsZW1lbnQuYXR0clxcbiAgICAgLSBtcyAobnVtYmVyKSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGZvciBhbmltYXRpb24gdG8gcnVuXFxuICAgICAtIGVhc2luZyAoc3RyaW5nKSAjb3B0aW9uYWwgZWFzaW5nIHR5cGUuIEFjY2VwdCBvbmUgb2YgQFJhcGhhZWwuZWFzaW5nX2Zvcm11bGFzIG9yIENTUyBmb3JtYXQ6IGBjdWJpYyYjeDIwMTA7YmV6aWVyKFhYLCYjMTYwO1hYLCYjMTYwO1hYLCYjMTYwO1hYKWBcXG4gICAgIC0gY2FsbGJhY2sgKGZ1bmN0aW9uKSAjb3B0aW9uYWwgY2FsbGJhY2sgZnVuY3Rpb24uIFdpbGwgYmUgY2FsbGVkIGF0IHRoZSBlbmQgb2YgYW5pbWF0aW9uLlxcbiAgICAgKipcXG4gICAgID0gKG9iamVjdCkgQEFuaW1hdGlvblxcbiAgICBcXFxcKi9cXG4gICAgUi5hbmltYXRpb24gPSBmdW5jdGlvbiAocGFyYW1zLCBtcywgZWFzaW5nLCBjYWxsYmFjaykge1xcbiAgICAgICAgaWYgKHBhcmFtcyBpbnN0YW5jZW9mIEFuaW1hdGlvbikge1xcbiAgICAgICAgICAgIHJldHVybiBwYXJhbXM7XFxuICAgICAgICB9XFxuICAgICAgICBpZiAoUi5pcyhlYXNpbmcsIFxcXCJmdW5jdGlvblxcXCIpIHx8ICFlYXNpbmcpIHtcXG4gICAgICAgICAgICBjYWxsYmFjayA9IGNhbGxiYWNrIHx8IGVhc2luZyB8fCBudWxsO1xcbiAgICAgICAgICAgIGVhc2luZyA9IG51bGw7XFxuICAgICAgICB9XFxuICAgICAgICBwYXJhbXMgPSBPYmplY3QocGFyYW1zKTtcXG4gICAgICAgIG1zID0gK21zIHx8IDA7XFxuICAgICAgICB2YXIgcCA9IHt9LFxcbiAgICAgICAgICAgIGpzb24sXFxuICAgICAgICAgICAgYXR0cjtcXG4gICAgICAgIGZvciAoYXR0ciBpbiBwYXJhbXMpIGlmIChwYXJhbXNbaGFzXShhdHRyKSAmJiB0b0Zsb2F0KGF0dHIpICE9IGF0dHIgJiYgdG9GbG9hdChhdHRyKSArIFxcXCIlXFxcIiAhPSBhdHRyKSB7XFxuICAgICAgICAgICAganNvbiA9IHRydWU7XFxuICAgICAgICAgICAgcFthdHRyXSA9IHBhcmFtc1thdHRyXTtcXG4gICAgICAgIH1cXG4gICAgICAgIGlmICghanNvbikge1xcbiAgICAgICAgICAgIC8vIGlmIHBlcmNlbnQtbGlrZSBzeW50YXggaXMgdXNlZCBhbmQgZW5kLW9mLWFsbCBhbmltYXRpb24gY2FsbGJhY2sgdXNlZFxcbiAgICAgICAgICAgIGlmKGNhbGxiYWNrKXtcXG4gICAgICAgICAgICAgICAgLy8gZmluZCB0aGUgbGFzdCBvbmVcXG4gICAgICAgICAgICAgICAgdmFyIGxhc3RLZXkgPSAwO1xcbiAgICAgICAgICAgICAgICBmb3IodmFyIGkgaW4gcGFyYW1zKXtcXG4gICAgICAgICAgICAgICAgICAgIHZhciBwZXJjZW50ID0gdG9JbnQoaSk7XFxuICAgICAgICAgICAgICAgICAgICBpZihwYXJhbXNbaGFzXShpKSAmJiBwZXJjZW50ID4gbGFzdEtleSl7XFxuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdEtleSA9IHBlcmNlbnQ7XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgbGFzdEtleSArPSAnJSc7XFxuICAgICAgICAgICAgICAgIC8vIGlmIGFscmVhZHkgZGVmaW5lZCBjYWxsYmFjayBpbiB0aGUgbGFzdCBrZXlmcmFtZSwgc2tpcFxcbiAgICAgICAgICAgICAgICAhcGFyYW1zW2xhc3RLZXldLmNhbGxiYWNrICYmIChwYXJhbXNbbGFzdEtleV0uY2FsbGJhY2sgPSBjYWxsYmFjayk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICByZXR1cm4gbmV3IEFuaW1hdGlvbihwYXJhbXMsIG1zKTtcXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgZWFzaW5nICYmIChwLmVhc2luZyA9IGVhc2luZyk7XFxuICAgICAgICAgICAgY2FsbGJhY2sgJiYgKHAuY2FsbGJhY2sgPSBjYWxsYmFjayk7XFxuICAgICAgICAgICAgcmV0dXJuIG5ldyBBbmltYXRpb24oezEwMDogcH0sIG1zKTtcXG4gICAgICAgIH1cXG4gICAgfTtcXG4gICAgLypcXFxcXFxuICAgICAqIEVsZW1lbnQuYW5pbWF0ZVxcbiAgICAgWyBtZXRob2QgXVxcbiAgICAgKipcXG4gICAgICogQ3JlYXRlcyBhbmQgc3RhcnRzIGFuaW1hdGlvbiBmb3IgZ2l2ZW4gZWxlbWVudC5cXG4gICAgICoqXFxuICAgICA+IFBhcmFtZXRlcnNcXG4gICAgICoqXFxuICAgICAtIHBhcmFtcyAob2JqZWN0KSBmaW5hbCBhdHRyaWJ1dGVzIGZvciB0aGUgZWxlbWVudCwgc2VlIGFsc28gQEVsZW1lbnQuYXR0clxcbiAgICAgLSBtcyAobnVtYmVyKSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGZvciBhbmltYXRpb24gdG8gcnVuXFxuICAgICAtIGVhc2luZyAoc3RyaW5nKSAjb3B0aW9uYWwgZWFzaW5nIHR5cGUuIEFjY2VwdCBvbmUgb2YgQFJhcGhhZWwuZWFzaW5nX2Zvcm11bGFzIG9yIENTUyBmb3JtYXQ6IGBjdWJpYyYjeDIwMTA7YmV6aWVyKFhYLCYjMTYwO1hYLCYjMTYwO1hYLCYjMTYwO1hYKWBcXG4gICAgIC0gY2FsbGJhY2sgKGZ1bmN0aW9uKSAjb3B0aW9uYWwgY2FsbGJhY2sgZnVuY3Rpb24uIFdpbGwgYmUgY2FsbGVkIGF0IHRoZSBlbmQgb2YgYW5pbWF0aW9uLlxcbiAgICAgKiBvclxcbiAgICAgLSBhbmltYXRpb24gKG9iamVjdCkgYW5pbWF0aW9uIG9iamVjdCwgc2VlIEBSYXBoYWVsLmFuaW1hdGlvblxcbiAgICAgKipcXG4gICAgID0gKG9iamVjdCkgb3JpZ2luYWwgZWxlbWVudFxcbiAgICBcXFxcKi9cXG4gICAgZWxwcm90by5hbmltYXRlID0gZnVuY3Rpb24gKHBhcmFtcywgbXMsIGVhc2luZywgY2FsbGJhY2spIHtcXG4gICAgICAgIHZhciBlbGVtZW50ID0gdGhpcztcXG4gICAgICAgIGlmIChlbGVtZW50LnJlbW92ZWQpIHtcXG4gICAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjay5jYWxsKGVsZW1lbnQpO1xcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50O1xcbiAgICAgICAgfVxcbiAgICAgICAgdmFyIGFuaW0gPSBwYXJhbXMgaW5zdGFuY2VvZiBBbmltYXRpb24gPyBwYXJhbXMgOiBSLmFuaW1hdGlvbihwYXJhbXMsIG1zLCBlYXNpbmcsIGNhbGxiYWNrKTtcXG4gICAgICAgIHJ1bkFuaW1hdGlvbihhbmltLCBlbGVtZW50LCBhbmltLnBlcmNlbnRzWzBdLCBudWxsLCBlbGVtZW50LmF0dHIoKSk7XFxuICAgICAgICByZXR1cm4gZWxlbWVudDtcXG4gICAgfTtcXG4gICAgLypcXFxcXFxuICAgICAqIEVsZW1lbnQuc2V0VGltZVxcbiAgICAgWyBtZXRob2QgXVxcbiAgICAgKipcXG4gICAgICogU2V0cyB0aGUgc3RhdHVzIG9mIGFuaW1hdGlvbiBvZiB0aGUgZWxlbWVudCBpbiBtaWxsaXNlY29uZHMuIFNpbWlsYXIgdG8gQEVsZW1lbnQuc3RhdHVzIG1ldGhvZC5cXG4gICAgICoqXFxuICAgICA+IFBhcmFtZXRlcnNcXG4gICAgICoqXFxuICAgICAtIGFuaW0gKG9iamVjdCkgYW5pbWF0aW9uIG9iamVjdFxcbiAgICAgLSB2YWx1ZSAobnVtYmVyKSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGZyb20gdGhlIGJlZ2lubmluZyBvZiB0aGUgYW5pbWF0aW9uXFxuICAgICAqKlxcbiAgICAgPSAob2JqZWN0KSBvcmlnaW5hbCBlbGVtZW50IGlmIGB2YWx1ZWAgaXMgc3BlY2lmaWVkXFxuICAgICAqIE5vdGUsIHRoYXQgZHVyaW5nIGFuaW1hdGlvbiBmb2xsb3dpbmcgZXZlbnRzIGFyZSB0cmlnZ2VyZWQ6XFxuICAgICAqXFxuICAgICAqIE9uIGVhY2ggYW5pbWF0aW9uIGZyYW1lIGV2ZW50IGBhbmltLmZyYW1lLjxpZD5gLCBvbiBzdGFydCBgYW5pbS5zdGFydC48aWQ+YCBhbmQgb24gZW5kIGBhbmltLmZpbmlzaC48aWQ+YC5cXG4gICAgXFxcXCovXFxuICAgIGVscHJvdG8uc2V0VGltZSA9IGZ1bmN0aW9uIChhbmltLCB2YWx1ZSkge1xcbiAgICAgICAgaWYgKGFuaW0gJiYgdmFsdWUgIT0gbnVsbCkge1xcbiAgICAgICAgICAgIHRoaXMuc3RhdHVzKGFuaW0sIG1taW4odmFsdWUsIGFuaW0ubXMpIC8gYW5pbS5tcyk7XFxuICAgICAgICB9XFxuICAgICAgICByZXR1cm4gdGhpcztcXG4gICAgfTtcXG4gICAgLypcXFxcXFxuICAgICAqIEVsZW1lbnQuc3RhdHVzXFxuICAgICBbIG1ldGhvZCBdXFxuICAgICAqKlxcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIHN0YXR1cyBvZiBhbmltYXRpb24gb2YgdGhlIGVsZW1lbnQuXFxuICAgICAqKlxcbiAgICAgPiBQYXJhbWV0ZXJzXFxuICAgICAqKlxcbiAgICAgLSBhbmltIChvYmplY3QpICNvcHRpb25hbCBhbmltYXRpb24gb2JqZWN0XFxuICAgICAtIHZhbHVlIChudW1iZXIpICNvcHRpb25hbCAwIOKAkyAxLiBJZiBzcGVjaWZpZWQsIG1ldGhvZCB3b3JrcyBsaWtlIGEgc2V0dGVyIGFuZCBzZXRzIHRoZSBzdGF0dXMgb2YgYSBnaXZlbiBhbmltYXRpb24gdG8gdGhlIHZhbHVlLiBUaGlzIHdpbGwgY2F1c2UgYW5pbWF0aW9uIHRvIGp1bXAgdG8gdGhlIGdpdmVuIHBvc2l0aW9uLlxcbiAgICAgKipcXG4gICAgID0gKG51bWJlcikgc3RhdHVzXFxuICAgICAqIG9yXFxuICAgICA9IChhcnJheSkgc3RhdHVzIGlmIGBhbmltYCBpcyBub3Qgc3BlY2lmaWVkLiBBcnJheSBvZiBvYmplY3RzIGluIGZvcm1hdDpcXG4gICAgIG8ge1xcbiAgICAgbyAgICAgYW5pbTogKG9iamVjdCkgYW5pbWF0aW9uIG9iamVjdFxcbiAgICAgbyAgICAgc3RhdHVzOiAobnVtYmVyKSBzdGF0dXNcXG4gICAgIG8gfVxcbiAgICAgKiBvclxcbiAgICAgPSAob2JqZWN0KSBvcmlnaW5hbCBlbGVtZW50IGlmIGB2YWx1ZWAgaXMgc3BlY2lmaWVkXFxuICAgIFxcXFwqL1xcbiAgICBlbHByb3RvLnN0YXR1cyA9IGZ1bmN0aW9uIChhbmltLCB2YWx1ZSkge1xcbiAgICAgICAgdmFyIG91dCA9IFtdLFxcbiAgICAgICAgICAgIGkgPSAwLFxcbiAgICAgICAgICAgIGxlbixcXG4gICAgICAgICAgICBlO1xcbiAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcXG4gICAgICAgICAgICBydW5BbmltYXRpb24oYW5pbSwgdGhpcywgLTEsIG1taW4odmFsdWUsIDEpKTtcXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgbGVuID0gYW5pbWF0aW9uRWxlbWVudHMubGVuZ3RoO1xcbiAgICAgICAgICAgIGZvciAoOyBpIDwgbGVuOyBpKyspIHtcXG4gICAgICAgICAgICAgICAgZSA9IGFuaW1hdGlvbkVsZW1lbnRzW2ldO1xcbiAgICAgICAgICAgICAgICBpZiAoZS5lbC5pZCA9PSB0aGlzLmlkICYmICghYW5pbSB8fCBlLmFuaW0gPT0gYW5pbSkpIHtcXG4gICAgICAgICAgICAgICAgICAgIGlmIChhbmltKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUuc3RhdHVzO1xcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgb3V0LnB1c2goe1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuaW06IGUuYW5pbSxcXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IGUuc3RhdHVzXFxuICAgICAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBpZiAoYW5pbSkge1xcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgcmV0dXJuIG91dDtcXG4gICAgICAgIH1cXG4gICAgfTtcXG4gICAgLypcXFxcXFxuICAgICAqIEVsZW1lbnQucGF1c2VcXG4gICAgIFsgbWV0aG9kIF1cXG4gICAgICoqXFxuICAgICAqIFN0b3BzIGFuaW1hdGlvbiBvZiB0aGUgZWxlbWVudCB3aXRoIGFiaWxpdHkgdG8gcmVzdW1lIGl0IGxhdGVyIG9uLlxcbiAgICAgKipcXG4gICAgID4gUGFyYW1ldGVyc1xcbiAgICAgKipcXG4gICAgIC0gYW5pbSAob2JqZWN0KSAjb3B0aW9uYWwgYW5pbWF0aW9uIG9iamVjdFxcbiAgICAgKipcXG4gICAgID0gKG9iamVjdCkgb3JpZ2luYWwgZWxlbWVudFxcbiAgICBcXFxcKi9cXG4gICAgZWxwcm90by5wYXVzZSA9IGZ1bmN0aW9uIChhbmltKSB7XFxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFuaW1hdGlvbkVsZW1lbnRzLmxlbmd0aDsgaSsrKSBpZiAoYW5pbWF0aW9uRWxlbWVudHNbaV0uZWwuaWQgPT0gdGhpcy5pZCAmJiAoIWFuaW0gfHwgYW5pbWF0aW9uRWxlbWVudHNbaV0uYW5pbSA9PSBhbmltKSkge1xcbiAgICAgICAgICAgIGlmIChldmUoXFxcInJhcGhhZWwuYW5pbS5wYXVzZS5cXFwiICsgdGhpcy5pZCwgdGhpcywgYW5pbWF0aW9uRWxlbWVudHNbaV0uYW5pbSkgIT09IGZhbHNlKSB7XFxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbkVsZW1lbnRzW2ldLnBhdXNlZCA9IHRydWU7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgICAgcmV0dXJuIHRoaXM7XFxuICAgIH07XFxuICAgIC8qXFxcXFxcbiAgICAgKiBFbGVtZW50LnJlc3VtZVxcbiAgICAgWyBtZXRob2QgXVxcbiAgICAgKipcXG4gICAgICogUmVzdW1lcyBhbmltYXRpb24gaWYgaXQgd2FzIHBhdXNlZCB3aXRoIEBFbGVtZW50LnBhdXNlIG1ldGhvZC5cXG4gICAgICoqXFxuICAgICA+IFBhcmFtZXRlcnNcXG4gICAgICoqXFxuICAgICAtIGFuaW0gKG9iamVjdCkgI29wdGlvbmFsIGFuaW1hdGlvbiBvYmplY3RcXG4gICAgICoqXFxuICAgICA9IChvYmplY3QpIG9yaWdpbmFsIGVsZW1lbnRcXG4gICAgXFxcXCovXFxuICAgIGVscHJvdG8ucmVzdW1lID0gZnVuY3Rpb24gKGFuaW0pIHtcXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYW5pbWF0aW9uRWxlbWVudHMubGVuZ3RoOyBpKyspIGlmIChhbmltYXRpb25FbGVtZW50c1tpXS5lbC5pZCA9PSB0aGlzLmlkICYmICghYW5pbSB8fCBhbmltYXRpb25FbGVtZW50c1tpXS5hbmltID09IGFuaW0pKSB7XFxuICAgICAgICAgICAgdmFyIGUgPSBhbmltYXRpb25FbGVtZW50c1tpXTtcXG4gICAgICAgICAgICBpZiAoZXZlKFxcXCJyYXBoYWVsLmFuaW0ucmVzdW1lLlxcXCIgKyB0aGlzLmlkLCB0aGlzLCBlLmFuaW0pICE9PSBmYWxzZSkge1xcbiAgICAgICAgICAgICAgICBkZWxldGUgZS5wYXVzZWQ7XFxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdHVzKGUuYW5pbSwgZS5zdGF0dXMpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIHJldHVybiB0aGlzO1xcbiAgICB9O1xcbiAgICAvKlxcXFxcXG4gICAgICogRWxlbWVudC5zdG9wXFxuICAgICBbIG1ldGhvZCBdXFxuICAgICAqKlxcbiAgICAgKiBTdG9wcyBhbmltYXRpb24gb2YgdGhlIGVsZW1lbnQuXFxuICAgICAqKlxcbiAgICAgPiBQYXJhbWV0ZXJzXFxuICAgICAqKlxcbiAgICAgLSBhbmltIChvYmplY3QpICNvcHRpb25hbCBhbmltYXRpb24gb2JqZWN0XFxuICAgICAqKlxcbiAgICAgPSAob2JqZWN0KSBvcmlnaW5hbCBlbGVtZW50XFxuICAgIFxcXFwqL1xcbiAgICBlbHByb3RvLnN0b3AgPSBmdW5jdGlvbiAoYW5pbSkge1xcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhbmltYXRpb25FbGVtZW50cy5sZW5ndGg7IGkrKykgaWYgKGFuaW1hdGlvbkVsZW1lbnRzW2ldLmVsLmlkID09IHRoaXMuaWQgJiYgKCFhbmltIHx8IGFuaW1hdGlvbkVsZW1lbnRzW2ldLmFuaW0gPT0gYW5pbSkpIHtcXG4gICAgICAgICAgICBpZiAoZXZlKFxcXCJyYXBoYWVsLmFuaW0uc3RvcC5cXFwiICsgdGhpcy5pZCwgdGhpcywgYW5pbWF0aW9uRWxlbWVudHNbaV0uYW5pbSkgIT09IGZhbHNlKSB7XFxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbkVsZW1lbnRzLnNwbGljZShpLS0sIDEpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIHJldHVybiB0aGlzO1xcbiAgICB9O1xcbiAgICBmdW5jdGlvbiBzdG9wQW5pbWF0aW9uKHBhcGVyKSB7XFxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFuaW1hdGlvbkVsZW1lbnRzLmxlbmd0aDsgaSsrKSBpZiAoYW5pbWF0aW9uRWxlbWVudHNbaV0uZWwucGFwZXIgPT0gcGFwZXIpIHtcXG4gICAgICAgICAgICBhbmltYXRpb25FbGVtZW50cy5zcGxpY2UoaS0tLCAxKTtcXG4gICAgICAgIH1cXG4gICAgfVxcbiAgICBldmUub24oXFxcInJhcGhhZWwucmVtb3ZlXFxcIiwgc3RvcEFuaW1hdGlvbik7XFxuICAgIGV2ZS5vbihcXFwicmFwaGFlbC5jbGVhclxcXCIsIHN0b3BBbmltYXRpb24pO1xcbiAgICBlbHByb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xcbiAgICAgICAgcmV0dXJuIFxcXCJSYXBoYVxcXFx4ZWJsXFxcXHUyMDE5cyBvYmplY3RcXFwiO1xcbiAgICB9O1xcblxcbiAgICAvLyBTZXRcXG4gICAgdmFyIFNldCA9IGZ1bmN0aW9uIChpdGVtcykge1xcbiAgICAgICAgdGhpcy5pdGVtcyA9IFtdO1xcbiAgICAgICAgdGhpcy5sZW5ndGggPSAwO1xcbiAgICAgICAgdGhpcy50eXBlID0gXFxcInNldFxcXCI7XFxuICAgICAgICBpZiAoaXRlbXMpIHtcXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBpdGVtcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XFxuICAgICAgICAgICAgICAgIGlmIChpdGVtc1tpXSAmJiAoaXRlbXNbaV0uY29uc3RydWN0b3IgPT0gZWxwcm90by5jb25zdHJ1Y3RvciB8fCBpdGVtc1tpXS5jb25zdHJ1Y3RvciA9PSBTZXQpKSB7XFxuICAgICAgICAgICAgICAgICAgICB0aGlzW3RoaXMuaXRlbXMubGVuZ3RoXSA9IHRoaXMuaXRlbXNbdGhpcy5pdGVtcy5sZW5ndGhdID0gaXRlbXNbaV07XFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxlbmd0aCsrO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICB9LFxcbiAgICBzZXRwcm90byA9IFNldC5wcm90b3R5cGU7XFxuICAgIC8qXFxcXFxcbiAgICAgKiBTZXQucHVzaFxcbiAgICAgWyBtZXRob2QgXVxcbiAgICAgKipcXG4gICAgICogQWRkcyBlYWNoIGFyZ3VtZW50IHRvIHRoZSBjdXJyZW50IHNldC5cXG4gICAgID0gKG9iamVjdCkgb3JpZ2luYWwgZWxlbWVudFxcbiAgICBcXFxcKi9cXG4gICAgc2V0cHJvdG8ucHVzaCA9IGZ1bmN0aW9uICgpIHtcXG4gICAgICAgIHZhciBpdGVtLFxcbiAgICAgICAgICAgIGxlbjtcXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XFxuICAgICAgICAgICAgaXRlbSA9IGFyZ3VtZW50c1tpXTtcXG4gICAgICAgICAgICBpZiAoaXRlbSAmJiAoaXRlbS5jb25zdHJ1Y3RvciA9PSBlbHByb3RvLmNvbnN0cnVjdG9yIHx8IGl0ZW0uY29uc3RydWN0b3IgPT0gU2V0KSkge1xcbiAgICAgICAgICAgICAgICBsZW4gPSB0aGlzLml0ZW1zLmxlbmd0aDtcXG4gICAgICAgICAgICAgICAgdGhpc1tsZW5dID0gdGhpcy5pdGVtc1tsZW5dID0gaXRlbTtcXG4gICAgICAgICAgICAgICAgdGhpcy5sZW5ndGgrKztcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgICByZXR1cm4gdGhpcztcXG4gICAgfTtcXG4gICAgLypcXFxcXFxuICAgICAqIFNldC5wb3BcXG4gICAgIFsgbWV0aG9kIF1cXG4gICAgICoqXFxuICAgICAqIFJlbW92ZXMgbGFzdCBlbGVtZW50IGFuZCByZXR1cm5zIGl0LlxcbiAgICAgPSAob2JqZWN0KSBlbGVtZW50XFxuICAgIFxcXFwqL1xcbiAgICBzZXRwcm90by5wb3AgPSBmdW5jdGlvbiAoKSB7XFxuICAgICAgICB0aGlzLmxlbmd0aCAmJiBkZWxldGUgdGhpc1t0aGlzLmxlbmd0aC0tXTtcXG4gICAgICAgIHJldHVybiB0aGlzLml0ZW1zLnBvcCgpO1xcbiAgICB9O1xcbiAgICAvKlxcXFxcXG4gICAgICogU2V0LmZvckVhY2hcXG4gICAgIFsgbWV0aG9kIF1cXG4gICAgICoqXFxuICAgICAqIEV4ZWN1dGVzIGdpdmVuIGZ1bmN0aW9uIGZvciBlYWNoIGVsZW1lbnQgaW4gdGhlIHNldC5cXG4gICAgICpcXG4gICAgICogSWYgZnVuY3Rpb24gcmV0dXJucyBgZmFsc2VgIGl0IHdpbGwgc3RvcCBsb29wIHJ1bm5pbmcuXFxuICAgICAqKlxcbiAgICAgPiBQYXJhbWV0ZXJzXFxuICAgICAqKlxcbiAgICAgLSBjYWxsYmFjayAoZnVuY3Rpb24pIGZ1bmN0aW9uIHRvIHJ1blxcbiAgICAgLSB0aGlzQXJnIChvYmplY3QpIGNvbnRleHQgb2JqZWN0IGZvciB0aGUgY2FsbGJhY2tcXG4gICAgID0gKG9iamVjdCkgU2V0IG9iamVjdFxcbiAgICBcXFxcKi9cXG4gICAgc2V0cHJvdG8uZm9yRWFjaCA9IGZ1bmN0aW9uIChjYWxsYmFjaywgdGhpc0FyZykge1xcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gdGhpcy5pdGVtcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XFxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrLmNhbGwodGhpc0FyZywgdGhpcy5pdGVtc1tpXSwgaSkgPT09IGZhbHNlKSB7XFxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIHJldHVybiB0aGlzO1xcbiAgICB9O1xcbiAgICBmb3IgKHZhciBtZXRob2QgaW4gZWxwcm90bykgaWYgKGVscHJvdG9baGFzXShtZXRob2QpKSB7XFxuICAgICAgICBzZXRwcm90b1ttZXRob2RdID0gKGZ1bmN0aW9uIChtZXRob2RuYW1lKSB7XFxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcXG4gICAgICAgICAgICAgICAgdmFyIGFyZyA9IGFyZ3VtZW50cztcXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcXG4gICAgICAgICAgICAgICAgICAgIGVsW21ldGhvZG5hbWVdW2FwcGx5XShlbCwgYXJnKTtcXG4gICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgfTtcXG4gICAgICAgIH0pKG1ldGhvZCk7XFxuICAgIH1cXG4gICAgc2V0cHJvdG8uYXR0ciA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xcbiAgICAgICAgaWYgKG5hbWUgJiYgUi5pcyhuYW1lLCBhcnJheSkgJiYgUi5pcyhuYW1lWzBdLCBcXFwib2JqZWN0XFxcIikpIHtcXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMCwgamogPSBuYW1lLmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcXG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtc1tqXS5hdHRyKG5hbWVbal0pO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gdGhpcy5pdGVtcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XFxuICAgICAgICAgICAgICAgIHRoaXMuaXRlbXNbaV0uYXR0cihuYW1lLCB2YWx1ZSk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgICAgcmV0dXJuIHRoaXM7XFxuICAgIH07XFxuICAgIC8qXFxcXFxcbiAgICAgKiBTZXQuY2xlYXJcXG4gICAgIFsgbWV0aG9kIF1cXG4gICAgICoqXFxuICAgICAqIFJlbW92ZXMgYWxsIGVsZW1lbnRzIGZyb20gdGhlIHNldFxcbiAgICBcXFxcKi9cXG4gICAgc2V0cHJvdG8uY2xlYXIgPSBmdW5jdGlvbiAoKSB7XFxuICAgICAgICB3aGlsZSAodGhpcy5sZW5ndGgpIHtcXG4gICAgICAgICAgICB0aGlzLnBvcCgpO1xcbiAgICAgICAgfVxcbiAgICB9O1xcbiAgICAvKlxcXFxcXG4gICAgICogU2V0LnNwbGljZVxcbiAgICAgWyBtZXRob2QgXVxcbiAgICAgKipcXG4gICAgICogUmVtb3ZlcyBnaXZlbiBlbGVtZW50IGZyb20gdGhlIHNldFxcbiAgICAgKipcXG4gICAgID4gUGFyYW1ldGVyc1xcbiAgICAgKipcXG4gICAgIC0gaW5kZXggKG51bWJlcikgcG9zaXRpb24gb2YgdGhlIGRlbGV0aW9uXFxuICAgICAtIGNvdW50IChudW1iZXIpIG51bWJlciBvZiBlbGVtZW50IHRvIHJlbW92ZVxcbiAgICAgLSBpbnNlcnRpb27igKYgKG9iamVjdCkgI29wdGlvbmFsIGVsZW1lbnRzIHRvIGluc2VydFxcbiAgICAgPSAob2JqZWN0KSBzZXQgZWxlbWVudHMgdGhhdCB3ZXJlIGRlbGV0ZWRcXG4gICAgXFxcXCovXFxuICAgIHNldHByb3RvLnNwbGljZSA9IGZ1bmN0aW9uIChpbmRleCwgY291bnQsIGluc2VydGlvbikge1xcbiAgICAgICAgaW5kZXggPSBpbmRleCA8IDAgPyBtbWF4KHRoaXMubGVuZ3RoICsgaW5kZXgsIDApIDogaW5kZXg7XFxuICAgICAgICBjb3VudCA9IG1tYXgoMCwgbW1pbih0aGlzLmxlbmd0aCAtIGluZGV4LCBjb3VudCkpO1xcbiAgICAgICAgdmFyIHRhaWwgPSBbXSxcXG4gICAgICAgICAgICB0b2RlbCA9IFtdLFxcbiAgICAgICAgICAgIGFyZ3MgPSBbXSxcXG4gICAgICAgICAgICBpO1xcbiAgICAgICAgZm9yIChpID0gMjsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xcbiAgICAgICAgICAgIGFyZ3MucHVzaChhcmd1bWVudHNbaV0pO1xcbiAgICAgICAgfVxcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcXG4gICAgICAgICAgICB0b2RlbC5wdXNoKHRoaXNbaW5kZXggKyBpXSk7XFxuICAgICAgICB9XFxuICAgICAgICBmb3IgKDsgaSA8IHRoaXMubGVuZ3RoIC0gaW5kZXg7IGkrKykge1xcbiAgICAgICAgICAgIHRhaWwucHVzaCh0aGlzW2luZGV4ICsgaV0pO1xcbiAgICAgICAgfVxcbiAgICAgICAgdmFyIGFyZ2xlbiA9IGFyZ3MubGVuZ3RoO1xcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGFyZ2xlbiArIHRhaWwubGVuZ3RoOyBpKyspIHtcXG4gICAgICAgICAgICB0aGlzLml0ZW1zW2luZGV4ICsgaV0gPSB0aGlzW2luZGV4ICsgaV0gPSBpIDwgYXJnbGVuID8gYXJnc1tpXSA6IHRhaWxbaSAtIGFyZ2xlbl07XFxuICAgICAgICB9XFxuICAgICAgICBpID0gdGhpcy5pdGVtcy5sZW5ndGggPSB0aGlzLmxlbmd0aCAtPSBjb3VudCAtIGFyZ2xlbjtcXG4gICAgICAgIHdoaWxlICh0aGlzW2ldKSB7XFxuICAgICAgICAgICAgZGVsZXRlIHRoaXNbaSsrXTtcXG4gICAgICAgIH1cXG4gICAgICAgIHJldHVybiBuZXcgU2V0KHRvZGVsKTtcXG4gICAgfTtcXG4gICAgLypcXFxcXFxuICAgICAqIFNldC5leGNsdWRlXFxuICAgICBbIG1ldGhvZCBdXFxuICAgICAqKlxcbiAgICAgKiBSZW1vdmVzIGdpdmVuIGVsZW1lbnQgZnJvbSB0aGUgc2V0XFxuICAgICAqKlxcbiAgICAgPiBQYXJhbWV0ZXJzXFxuICAgICAqKlxcbiAgICAgLSBlbGVtZW50IChvYmplY3QpIGVsZW1lbnQgdG8gcmVtb3ZlXFxuICAgICA9IChib29sZWFuKSBgdHJ1ZWAgaWYgb2JqZWN0IHdhcyBmb3VuZCAmIHJlbW92ZWQgZnJvbSB0aGUgc2V0XFxuICAgIFxcXFwqL1xcbiAgICBzZXRwcm90by5leGNsdWRlID0gZnVuY3Rpb24gKGVsKSB7XFxuICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSB0aGlzLmxlbmd0aDsgaSA8IGlpOyBpKyspIGlmICh0aGlzW2ldID09IGVsKSB7XFxuICAgICAgICAgICAgdGhpcy5zcGxpY2UoaSwgMSk7XFxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XFxuICAgICAgICB9XFxuICAgIH07XFxuICAgIHNldHByb3RvLmFuaW1hdGUgPSBmdW5jdGlvbiAocGFyYW1zLCBtcywgZWFzaW5nLCBjYWxsYmFjaykge1xcbiAgICAgICAgKFIuaXMoZWFzaW5nLCBcXFwiZnVuY3Rpb25cXFwiKSB8fCAhZWFzaW5nKSAmJiAoY2FsbGJhY2sgPSBlYXNpbmcgfHwgbnVsbCk7XFxuICAgICAgICB2YXIgbGVuID0gdGhpcy5pdGVtcy5sZW5ndGgsXFxuICAgICAgICAgICAgaSA9IGxlbixcXG4gICAgICAgICAgICBpdGVtLFxcbiAgICAgICAgICAgIHNldCA9IHRoaXMsXFxuICAgICAgICAgICAgY29sbGVjdG9yO1xcbiAgICAgICAgaWYgKCFsZW4pIHtcXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcXG4gICAgICAgIH1cXG4gICAgICAgIGNhbGxiYWNrICYmIChjb2xsZWN0b3IgPSBmdW5jdGlvbiAoKSB7XFxuICAgICAgICAgICAgIS0tbGVuICYmIGNhbGxiYWNrLmNhbGwoc2V0KTtcXG4gICAgICAgIH0pO1xcbiAgICAgICAgZWFzaW5nID0gUi5pcyhlYXNpbmcsIHN0cmluZykgPyBlYXNpbmcgOiBjb2xsZWN0b3I7XFxuICAgICAgICB2YXIgYW5pbSA9IFIuYW5pbWF0aW9uKHBhcmFtcywgbXMsIGVhc2luZywgY29sbGVjdG9yKTtcXG4gICAgICAgIGl0ZW0gPSB0aGlzLml0ZW1zWy0taV0uYW5pbWF0ZShhbmltKTtcXG4gICAgICAgIHdoaWxlIChpLS0pIHtcXG4gICAgICAgICAgICB0aGlzLml0ZW1zW2ldICYmICF0aGlzLml0ZW1zW2ldLnJlbW92ZWQgJiYgdGhpcy5pdGVtc1tpXS5hbmltYXRlV2l0aChpdGVtLCBhbmltLCBhbmltKTtcXG4gICAgICAgICAgICAodGhpcy5pdGVtc1tpXSAmJiAhdGhpcy5pdGVtc1tpXS5yZW1vdmVkKSB8fCBsZW4tLTtcXG4gICAgICAgIH1cXG4gICAgICAgIHJldHVybiB0aGlzO1xcbiAgICB9O1xcbiAgICBzZXRwcm90by5pbnNlcnRBZnRlciA9IGZ1bmN0aW9uIChlbCkge1xcbiAgICAgICAgdmFyIGkgPSB0aGlzLml0ZW1zLmxlbmd0aDtcXG4gICAgICAgIHdoaWxlIChpLS0pIHtcXG4gICAgICAgICAgICB0aGlzLml0ZW1zW2ldLmluc2VydEFmdGVyKGVsKTtcXG4gICAgICAgIH1cXG4gICAgICAgIHJldHVybiB0aGlzO1xcbiAgICB9O1xcbiAgICBzZXRwcm90by5nZXRCQm94ID0gZnVuY3Rpb24gKCkge1xcbiAgICAgICAgdmFyIHggPSBbXSxcXG4gICAgICAgICAgICB5ID0gW10sXFxuICAgICAgICAgICAgeDIgPSBbXSxcXG4gICAgICAgICAgICB5MiA9IFtdO1xcbiAgICAgICAgZm9yICh2YXIgaSA9IHRoaXMuaXRlbXMubGVuZ3RoOyBpLS07KSBpZiAoIXRoaXMuaXRlbXNbaV0ucmVtb3ZlZCkge1xcbiAgICAgICAgICAgIHZhciBib3ggPSB0aGlzLml0ZW1zW2ldLmdldEJCb3goKTtcXG4gICAgICAgICAgICB4LnB1c2goYm94LngpO1xcbiAgICAgICAgICAgIHkucHVzaChib3gueSk7XFxuICAgICAgICAgICAgeDIucHVzaChib3gueCArIGJveC53aWR0aCk7XFxuICAgICAgICAgICAgeTIucHVzaChib3gueSArIGJveC5oZWlnaHQpO1xcbiAgICAgICAgfVxcbiAgICAgICAgeCA9IG1taW5bYXBwbHldKDAsIHgpO1xcbiAgICAgICAgeSA9IG1taW5bYXBwbHldKDAsIHkpO1xcbiAgICAgICAgeDIgPSBtbWF4W2FwcGx5XSgwLCB4Mik7XFxuICAgICAgICB5MiA9IG1tYXhbYXBwbHldKDAsIHkyKTtcXG4gICAgICAgIHJldHVybiB7XFxuICAgICAgICAgICAgeDogeCxcXG4gICAgICAgICAgICB5OiB5LFxcbiAgICAgICAgICAgIHgyOiB4MixcXG4gICAgICAgICAgICB5MjogeTIsXFxuICAgICAgICAgICAgd2lkdGg6IHgyIC0geCxcXG4gICAgICAgICAgICBoZWlnaHQ6IHkyIC0geVxcbiAgICAgICAgfTtcXG4gICAgfTtcXG4gICAgc2V0cHJvdG8uY2xvbmUgPSBmdW5jdGlvbiAocykge1xcbiAgICAgICAgcyA9IHRoaXMucGFwZXIuc2V0KCk7XFxuICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSB0aGlzLml0ZW1zLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcXG4gICAgICAgICAgICBzLnB1c2godGhpcy5pdGVtc1tpXS5jbG9uZSgpKTtcXG4gICAgICAgIH1cXG4gICAgICAgIHJldHVybiBzO1xcbiAgICB9O1xcbiAgICBzZXRwcm90by50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcXG4gICAgICAgIHJldHVybiBcXFwiUmFwaGFcXFxceGVibFxcXFx1MjAxOHMgc2V0XFxcIjtcXG4gICAgfTtcXG5cXG4gICAgc2V0cHJvdG8uZ2xvdyA9IGZ1bmN0aW9uKGdsb3dDb25maWcpIHtcXG4gICAgICAgIHZhciByZXQgPSB0aGlzLnBhcGVyLnNldCgpO1xcbiAgICAgICAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHNoYXBlLCBpbmRleCl7XFxuICAgICAgICAgICAgdmFyIGcgPSBzaGFwZS5nbG93KGdsb3dDb25maWcpO1xcbiAgICAgICAgICAgIGlmKGcgIT0gbnVsbCl7XFxuICAgICAgICAgICAgICAgIGcuZm9yRWFjaChmdW5jdGlvbihzaGFwZTIsIGluZGV4Mil7XFxuICAgICAgICAgICAgICAgICAgICByZXQucHVzaChzaGFwZTIpO1xcbiAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9KTtcXG4gICAgICAgIHJldHVybiByZXQ7XFxuICAgIH07XFxuXFxuXFxuICAgIC8qXFxcXFxcbiAgICAgKiBTZXQuaXNQb2ludEluc2lkZVxcbiAgICAgWyBtZXRob2QgXVxcbiAgICAgKipcXG4gICAgICogRGV0ZXJtaW5lIGlmIGdpdmVuIHBvaW50IGlzIGluc2lkZSB0aGlzIHNldOKAmXMgZWxlbWVudHNcXG4gICAgICoqXFxuICAgICA+IFBhcmFtZXRlcnNcXG4gICAgICoqXFxuICAgICAtIHggKG51bWJlcikgeCBjb29yZGluYXRlIG9mIHRoZSBwb2ludFxcbiAgICAgLSB5IChudW1iZXIpIHkgY29vcmRpbmF0ZSBvZiB0aGUgcG9pbnRcXG4gICAgID0gKGJvb2xlYW4pIGB0cnVlYCBpZiBwb2ludCBpcyBpbnNpZGUgYW55IG9mIHRoZSBzZXQncyBlbGVtZW50c1xcbiAgICAgXFxcXCovXFxuICAgIHNldHByb3RvLmlzUG9pbnRJbnNpZGUgPSBmdW5jdGlvbiAoeCwgeSkge1xcbiAgICAgICAgdmFyIGlzUG9pbnRJbnNpZGUgPSBmYWxzZTtcXG4gICAgICAgIHRoaXMuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcXG4gICAgICAgICAgICBpZiAoZWwuaXNQb2ludEluc2lkZSh4LCB5KSkge1xcbiAgICAgICAgICAgICAgICBpc1BvaW50SW5zaWRlID0gdHJ1ZTtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBzdG9wIGxvb3BcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9KTtcXG4gICAgICAgIHJldHVybiBpc1BvaW50SW5zaWRlO1xcbiAgICB9O1xcblxcbiAgICAvKlxcXFxcXG4gICAgICogUmFwaGFlbC5yZWdpc3RlckZvbnRcXG4gICAgIFsgbWV0aG9kIF1cXG4gICAgICoqXFxuICAgICAqIEFkZHMgZ2l2ZW4gZm9udCB0byB0aGUgcmVnaXN0ZXJlZCBzZXQgb2YgZm9udHMgZm9yIFJhcGhhw6tsLiBTaG91bGQgYmUgdXNlZCBhcyBhbiBpbnRlcm5hbCBjYWxsIGZyb20gd2l0aGluIEN1ZsOzbuKAmXMgZm9udCBmaWxlLlxcbiAgICAgKiBSZXR1cm5zIG9yaWdpbmFsIHBhcmFtZXRlciwgc28gaXQgY291bGQgYmUgdXNlZCB3aXRoIGNoYWluaW5nLlxcbiAgICAgIyA8YSBocmVmPVxcXCJodHRwOi8vd2lraS5naXRodWIuY29tL3NvcmNjdS9jdWZvbi9hYm91dFxcXCI+TW9yZSBhYm91dCBDdWbDs24gYW5kIGhvdyB0byBjb252ZXJ0IHlvdXIgZm9udCBmb3JtIFRURiwgT1RGLCBldGMgdG8gSmF2YVNjcmlwdCBmaWxlLjwvYT5cXG4gICAgICoqXFxuICAgICA+IFBhcmFtZXRlcnNcXG4gICAgICoqXFxuICAgICAtIGZvbnQgKG9iamVjdCkgdGhlIGZvbnQgdG8gcmVnaXN0ZXJcXG4gICAgID0gKG9iamVjdCkgdGhlIGZvbnQgeW91IHBhc3NlZCBpblxcbiAgICAgPiBVc2FnZVxcbiAgICAgfCBDdWZvbi5yZWdpc3RlckZvbnQoUmFwaGFlbC5yZWdpc3RlckZvbnQoe+KApn0pKTtcXG4gICAgXFxcXCovXFxuICAgIFIucmVnaXN0ZXJGb250ID0gZnVuY3Rpb24gKGZvbnQpIHtcXG4gICAgICAgIGlmICghZm9udC5mYWNlKSB7XFxuICAgICAgICAgICAgcmV0dXJuIGZvbnQ7XFxuICAgICAgICB9XFxuICAgICAgICB0aGlzLmZvbnRzID0gdGhpcy5mb250cyB8fCB7fTtcXG4gICAgICAgIHZhciBmb250Y29weSA9IHtcXG4gICAgICAgICAgICAgICAgdzogZm9udC53LFxcbiAgICAgICAgICAgICAgICBmYWNlOiB7fSxcXG4gICAgICAgICAgICAgICAgZ2x5cGhzOiB7fVxcbiAgICAgICAgICAgIH0sXFxuICAgICAgICAgICAgZmFtaWx5ID0gZm9udC5mYWNlW1xcXCJmb250LWZhbWlseVxcXCJdO1xcbiAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBmb250LmZhY2UpIGlmIChmb250LmZhY2VbaGFzXShwcm9wKSkge1xcbiAgICAgICAgICAgIGZvbnRjb3B5LmZhY2VbcHJvcF0gPSBmb250LmZhY2VbcHJvcF07XFxuICAgICAgICB9XFxuICAgICAgICBpZiAodGhpcy5mb250c1tmYW1pbHldKSB7XFxuICAgICAgICAgICAgdGhpcy5mb250c1tmYW1pbHldLnB1c2goZm9udGNvcHkpO1xcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICB0aGlzLmZvbnRzW2ZhbWlseV0gPSBbZm9udGNvcHldO1xcbiAgICAgICAgfVxcbiAgICAgICAgaWYgKCFmb250LnN2Zykge1xcbiAgICAgICAgICAgIGZvbnRjb3B5LmZhY2VbXFxcInVuaXRzLXBlci1lbVxcXCJdID0gdG9JbnQoZm9udC5mYWNlW1xcXCJ1bml0cy1wZXItZW1cXFwiXSwgMTApO1xcbiAgICAgICAgICAgIGZvciAodmFyIGdseXBoIGluIGZvbnQuZ2x5cGhzKSBpZiAoZm9udC5nbHlwaHNbaGFzXShnbHlwaCkpIHtcXG4gICAgICAgICAgICAgICAgdmFyIHBhdGggPSBmb250LmdseXBoc1tnbHlwaF07XFxuICAgICAgICAgICAgICAgIGZvbnRjb3B5LmdseXBoc1tnbHlwaF0gPSB7XFxuICAgICAgICAgICAgICAgICAgICB3OiBwYXRoLncsXFxuICAgICAgICAgICAgICAgICAgICBrOiB7fSxcXG4gICAgICAgICAgICAgICAgICAgIGQ6IHBhdGguZCAmJiBcXFwiTVxcXCIgKyBwYXRoLmQucmVwbGFjZSgvW21sY3h0cnZdL2csIGZ1bmN0aW9uIChjb21tYW5kKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7bDogXFxcIkxcXFwiLCBjOiBcXFwiQ1xcXCIsIHg6IFxcXCJ6XFxcIiwgdDogXFxcIm1cXFwiLCByOiBcXFwibFxcXCIsIHY6IFxcXCJjXFxcIn1bY29tbWFuZF0gfHwgXFxcIk1cXFwiO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pICsgXFxcInpcXFwiXFxuICAgICAgICAgICAgICAgIH07XFxuICAgICAgICAgICAgICAgIGlmIChwYXRoLmspIHtcXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGsgaW4gcGF0aC5rKSBpZiAocGF0aFtoYXNdKGspKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udGNvcHkuZ2x5cGhzW2dseXBoXS5rW2tdID0gcGF0aC5rW2tdO1xcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgICAgcmV0dXJuIGZvbnQ7XFxuICAgIH07XFxuICAgIC8qXFxcXFxcbiAgICAgKiBQYXBlci5nZXRGb250XFxuICAgICBbIG1ldGhvZCBdXFxuICAgICAqKlxcbiAgICAgKiBGaW5kcyBmb250IG9iamVjdCBpbiB0aGUgcmVnaXN0ZXJlZCBmb250cyBieSBnaXZlbiBwYXJhbWV0ZXJzLiBZb3UgY291bGQgc3BlY2lmeSBvbmx5IG9uZSB3b3JkIGZyb20gdGhlIGZvbnQgbmFtZSwgbGlrZSDigJxNeXJpYWTigJ0gZm9yIOKAnE15cmlhZCBQcm/igJ0uXFxuICAgICAqKlxcbiAgICAgPiBQYXJhbWV0ZXJzXFxuICAgICAqKlxcbiAgICAgLSBmYW1pbHkgKHN0cmluZykgZm9udCBmYW1pbHkgbmFtZSBvciBhbnkgd29yZCBmcm9tIGl0XFxuICAgICAtIHdlaWdodCAoc3RyaW5nKSAjb3B0aW9uYWwgZm9udCB3ZWlnaHRcXG4gICAgIC0gc3R5bGUgKHN0cmluZykgI29wdGlvbmFsIGZvbnQgc3R5bGVcXG4gICAgIC0gc3RyZXRjaCAoc3RyaW5nKSAjb3B0aW9uYWwgZm9udCBzdHJldGNoXFxuICAgICA9IChvYmplY3QpIHRoZSBmb250IG9iamVjdFxcbiAgICAgPiBVc2FnZVxcbiAgICAgfCBwYXBlci5wcmludCgxMDAsIDEwMCwgXFxcIlRlc3Qgc3RyaW5nXFxcIiwgcGFwZXIuZ2V0Rm9udChcXFwiVGltZXNcXFwiLCA4MDApLCAzMCk7XFxuICAgIFxcXFwqL1xcbiAgICBwYXBlcnByb3RvLmdldEZvbnQgPSBmdW5jdGlvbiAoZmFtaWx5LCB3ZWlnaHQsIHN0eWxlLCBzdHJldGNoKSB7XFxuICAgICAgICBzdHJldGNoID0gc3RyZXRjaCB8fCBcXFwibm9ybWFsXFxcIjtcXG4gICAgICAgIHN0eWxlID0gc3R5bGUgfHwgXFxcIm5vcm1hbFxcXCI7XFxuICAgICAgICB3ZWlnaHQgPSArd2VpZ2h0IHx8IHtub3JtYWw6IDQwMCwgYm9sZDogNzAwLCBsaWdodGVyOiAzMDAsIGJvbGRlcjogODAwfVt3ZWlnaHRdIHx8IDQwMDtcXG4gICAgICAgIGlmICghUi5mb250cykge1xcbiAgICAgICAgICAgIHJldHVybjtcXG4gICAgICAgIH1cXG4gICAgICAgIHZhciBmb250ID0gUi5mb250c1tmYW1pbHldO1xcbiAgICAgICAgaWYgKCFmb250KSB7XFxuICAgICAgICAgICAgdmFyIG5hbWUgPSBuZXcgUmVnRXhwKFxcXCIoXnxcXFxcXFxcXHMpXFxcIiArIGZhbWlseS5yZXBsYWNlKC9bXlxcXFx3XFxcXGRcXFxccyshfi46Xy1dL2csIEUpICsgXFxcIihcXFxcXFxcXHN8JClcXFwiLCBcXFwiaVxcXCIpO1xcbiAgICAgICAgICAgIGZvciAodmFyIGZvbnROYW1lIGluIFIuZm9udHMpIGlmIChSLmZvbnRzW2hhc10oZm9udE5hbWUpKSB7XFxuICAgICAgICAgICAgICAgIGlmIChuYW1lLnRlc3QoZm9udE5hbWUpKSB7XFxuICAgICAgICAgICAgICAgICAgICBmb250ID0gUi5mb250c1tmb250TmFtZV07XFxuICAgICAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIHZhciB0aGVmb250O1xcbiAgICAgICAgaWYgKGZvbnQpIHtcXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBmb250Lmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcXG4gICAgICAgICAgICAgICAgdGhlZm9udCA9IGZvbnRbaV07XFxuICAgICAgICAgICAgICAgIGlmICh0aGVmb250LmZhY2VbXFxcImZvbnQtd2VpZ2h0XFxcIl0gPT0gd2VpZ2h0ICYmICh0aGVmb250LmZhY2VbXFxcImZvbnQtc3R5bGVcXFwiXSA9PSBzdHlsZSB8fCAhdGhlZm9udC5mYWNlW1xcXCJmb250LXN0eWxlXFxcIl0pICYmIHRoZWZvbnQuZmFjZVtcXFwiZm9udC1zdHJldGNoXFxcIl0gPT0gc3RyZXRjaCkge1xcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgICByZXR1cm4gdGhlZm9udDtcXG4gICAgfTtcXG4gICAgLypcXFxcXFxuICAgICAqIFBhcGVyLnByaW50XFxuICAgICBbIG1ldGhvZCBdXFxuICAgICAqKlxcbiAgICAgKiBDcmVhdGVzIHBhdGggdGhhdCByZXByZXNlbnQgZ2l2ZW4gdGV4dCB3cml0dGVuIHVzaW5nIGdpdmVuIGZvbnQgYXQgZ2l2ZW4gcG9zaXRpb24gd2l0aCBnaXZlbiBzaXplLlxcbiAgICAgKiBSZXN1bHQgb2YgdGhlIG1ldGhvZCBpcyBwYXRoIGVsZW1lbnQgdGhhdCBjb250YWlucyB3aG9sZSB0ZXh0IGFzIGEgc2VwYXJhdGUgcGF0aC5cXG4gICAgICoqXFxuICAgICA+IFBhcmFtZXRlcnNcXG4gICAgICoqXFxuICAgICAtIHggKG51bWJlcikgeCBwb3NpdGlvbiBvZiB0aGUgdGV4dFxcbiAgICAgLSB5IChudW1iZXIpIHkgcG9zaXRpb24gb2YgdGhlIHRleHRcXG4gICAgIC0gc3RyaW5nIChzdHJpbmcpIHRleHQgdG8gcHJpbnRcXG4gICAgIC0gZm9udCAob2JqZWN0KSBmb250IG9iamVjdCwgc2VlIEBQYXBlci5nZXRGb250XFxuICAgICAtIHNpemUgKG51bWJlcikgI29wdGlvbmFsIHNpemUgb2YgdGhlIGZvbnQsIGRlZmF1bHQgaXMgYDE2YFxcbiAgICAgLSBvcmlnaW4gKHN0cmluZykgI29wdGlvbmFsIGNvdWxkIGJlIGBcXFwiYmFzZWxpbmVcXFwiYCBvciBgXFxcIm1pZGRsZVxcXCJgLCBkZWZhdWx0IGlzIGBcXFwibWlkZGxlXFxcImBcXG4gICAgIC0gbGV0dGVyX3NwYWNpbmcgKG51bWJlcikgI29wdGlvbmFsIG51bWJlciBpbiByYW5nZSBgLTEuLjFgLCBkZWZhdWx0IGlzIGAwYFxcbiAgICAgLSBsaW5lX3NwYWNpbmcgKG51bWJlcikgI29wdGlvbmFsIG51bWJlciBpbiByYW5nZSBgMS4uM2AsIGRlZmF1bHQgaXMgYDFgXFxuICAgICA9IChvYmplY3QpIHJlc3VsdGluZyBwYXRoIGVsZW1lbnQsIHdoaWNoIGNvbnNpc3Qgb2YgYWxsIGxldHRlcnNcXG4gICAgID4gVXNhZ2VcXG4gICAgIHwgdmFyIHR4dCA9IHIucHJpbnQoMTAsIDUwLCBcXFwicHJpbnRcXFwiLCByLmdldEZvbnQoXFxcIk11c2VvXFxcIiksIDMwKS5hdHRyKHtmaWxsOiBcXFwiI2ZmZlxcXCJ9KTtcXG4gICAgXFxcXCovXFxuICAgIHBhcGVycHJvdG8ucHJpbnQgPSBmdW5jdGlvbiAoeCwgeSwgc3RyaW5nLCBmb250LCBzaXplLCBvcmlnaW4sIGxldHRlcl9zcGFjaW5nLCBsaW5lX3NwYWNpbmcpIHtcXG4gICAgICAgIG9yaWdpbiA9IG9yaWdpbiB8fCBcXFwibWlkZGxlXFxcIjsgLy8gYmFzZWxpbmV8bWlkZGxlXFxuICAgICAgICBsZXR0ZXJfc3BhY2luZyA9IG1tYXgobW1pbihsZXR0ZXJfc3BhY2luZyB8fCAwLCAxKSwgLTEpO1xcbiAgICAgICAgbGluZV9zcGFjaW5nID0gbW1heChtbWluKGxpbmVfc3BhY2luZyB8fCAxLCAzKSwgMSk7XFxuICAgICAgICB2YXIgbGV0dGVycyA9IFN0cihzdHJpbmcpW3NwbGl0XShFKSxcXG4gICAgICAgICAgICBzaGlmdCA9IDAsXFxuICAgICAgICAgICAgbm90Zmlyc3QgPSAwLFxcbiAgICAgICAgICAgIHBhdGggPSBFLFxcbiAgICAgICAgICAgIHNjYWxlO1xcbiAgICAgICAgUi5pcyhmb250LCBcXFwic3RyaW5nXFxcIikgJiYgKGZvbnQgPSB0aGlzLmdldEZvbnQoZm9udCkpO1xcbiAgICAgICAgaWYgKGZvbnQpIHtcXG4gICAgICAgICAgICBzY2FsZSA9IChzaXplIHx8IDE2KSAvIGZvbnQuZmFjZVtcXFwidW5pdHMtcGVyLWVtXFxcIl07XFxuICAgICAgICAgICAgdmFyIGJiID0gZm9udC5mYWNlLmJib3hbc3BsaXRdKHNlcGFyYXRvciksXFxuICAgICAgICAgICAgICAgIHRvcCA9ICtiYlswXSxcXG4gICAgICAgICAgICAgICAgbGluZUhlaWdodCA9IGJiWzNdIC0gYmJbMV0sXFxuICAgICAgICAgICAgICAgIHNoaWZ0eSA9IDAsXFxuICAgICAgICAgICAgICAgIGhlaWdodCA9ICtiYlsxXSArIChvcmlnaW4gPT0gXFxcImJhc2VsaW5lXFxcIiA/IGxpbmVIZWlnaHQgKyAoK2ZvbnQuZmFjZS5kZXNjZW50KSA6IGxpbmVIZWlnaHQgLyAyKTtcXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBsZXR0ZXJzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcXG4gICAgICAgICAgICAgICAgaWYgKGxldHRlcnNbaV0gPT0gXFxcIlxcXFxuXFxcIikge1xcbiAgICAgICAgICAgICAgICAgICAgc2hpZnQgPSAwO1xcbiAgICAgICAgICAgICAgICAgICAgY3VyciA9IDA7XFxuICAgICAgICAgICAgICAgICAgICBub3RmaXJzdCA9IDA7XFxuICAgICAgICAgICAgICAgICAgICBzaGlmdHkgKz0gbGluZUhlaWdodCAqIGxpbmVfc3BhY2luZztcXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICAgIHZhciBwcmV2ID0gbm90Zmlyc3QgJiYgZm9udC5nbHlwaHNbbGV0dGVyc1tpIC0gMV1dIHx8IHt9LFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnIgPSBmb250LmdseXBoc1tsZXR0ZXJzW2ldXTtcXG4gICAgICAgICAgICAgICAgICAgIHNoaWZ0ICs9IG5vdGZpcnN0ID8gKHByZXYudyB8fCBmb250LncpICsgKHByZXYuayAmJiBwcmV2LmtbbGV0dGVyc1tpXV0gfHwgMCkgKyAoZm9udC53ICogbGV0dGVyX3NwYWNpbmcpIDogMDtcXG4gICAgICAgICAgICAgICAgICAgIG5vdGZpcnN0ID0gMTtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICBpZiAoY3VyciAmJiBjdXJyLmQpIHtcXG4gICAgICAgICAgICAgICAgICAgIHBhdGggKz0gUi50cmFuc2Zvcm1QYXRoKGN1cnIuZCwgW1xcXCJ0XFxcIiwgc2hpZnQgKiBzY2FsZSwgc2hpZnR5ICogc2NhbGUsIFxcXCJzXFxcIiwgc2NhbGUsIHNjYWxlLCB0b3AsIGhlaWdodCwgXFxcInRcXFwiLCAoeCAtIHRvcCkgLyBzY2FsZSwgKHkgLSBoZWlnaHQpIC8gc2NhbGVdKTtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIHJldHVybiB0aGlzLnBhdGgocGF0aCkuYXR0cih7XFxuICAgICAgICAgICAgZmlsbDogXFxcIiMwMDBcXFwiLFxcbiAgICAgICAgICAgIHN0cm9rZTogXFxcIm5vbmVcXFwiXFxuICAgICAgICB9KTtcXG4gICAgfTtcXG5cXG4gICAgLypcXFxcXFxuICAgICAqIFBhcGVyLmFkZFxcbiAgICAgWyBtZXRob2QgXVxcbiAgICAgKipcXG4gICAgICogSW1wb3J0cyBlbGVtZW50cyBpbiBKU09OIGFycmF5IGluIGZvcm1hdCBge3R5cGU6IHR5cGUsIDxhdHRyaWJ1dGVzPn1gXFxuICAgICAqKlxcbiAgICAgPiBQYXJhbWV0ZXJzXFxuICAgICAqKlxcbiAgICAgLSBqc29uIChhcnJheSlcXG4gICAgID0gKG9iamVjdCkgcmVzdWx0aW5nIHNldCBvZiBpbXBvcnRlZCBlbGVtZW50c1xcbiAgICAgPiBVc2FnZVxcbiAgICAgfCBwYXBlci5hZGQoW1xcbiAgICAgfCAgICAge1xcbiAgICAgfCAgICAgICAgIHR5cGU6IFxcXCJjaXJjbGVcXFwiLFxcbiAgICAgfCAgICAgICAgIGN4OiAxMCxcXG4gICAgIHwgICAgICAgICBjeTogMTAsXFxuICAgICB8ICAgICAgICAgcjogNVxcbiAgICAgfCAgICAgfSxcXG4gICAgIHwgICAgIHtcXG4gICAgIHwgICAgICAgICB0eXBlOiBcXFwicmVjdFxcXCIsXFxuICAgICB8ICAgICAgICAgeDogMTAsXFxuICAgICB8ICAgICAgICAgeTogMTAsXFxuICAgICB8ICAgICAgICAgd2lkdGg6IDEwLFxcbiAgICAgfCAgICAgICAgIGhlaWdodDogMTAsXFxuICAgICB8ICAgICAgICAgZmlsbDogXFxcIiNmYzBcXFwiXFxuICAgICB8ICAgICB9XFxuICAgICB8IF0pO1xcbiAgICBcXFxcKi9cXG4gICAgcGFwZXJwcm90by5hZGQgPSBmdW5jdGlvbiAoanNvbikge1xcbiAgICAgICAgaWYgKFIuaXMoanNvbiwgXFxcImFycmF5XFxcIikpIHtcXG4gICAgICAgICAgICB2YXIgcmVzID0gdGhpcy5zZXQoKSxcXG4gICAgICAgICAgICAgICAgaSA9IDAsXFxuICAgICAgICAgICAgICAgIGlpID0ganNvbi5sZW5ndGgsXFxuICAgICAgICAgICAgICAgIGo7XFxuICAgICAgICAgICAgZm9yICg7IGkgPCBpaTsgaSsrKSB7XFxuICAgICAgICAgICAgICAgIGogPSBqc29uW2ldIHx8IHt9O1xcbiAgICAgICAgICAgICAgICBlbGVtZW50c1toYXNdKGoudHlwZSkgJiYgcmVzLnB1c2godGhpc1tqLnR5cGVdKCkuYXR0cihqKSk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgICAgcmV0dXJuIHJlcztcXG4gICAgfTtcXG5cXG4gICAgLypcXFxcXFxuICAgICAqIFJhcGhhZWwuZm9ybWF0XFxuICAgICBbIG1ldGhvZCBdXFxuICAgICAqKlxcbiAgICAgKiBTaW1wbGUgZm9ybWF0IGZ1bmN0aW9uLiBSZXBsYWNlcyBjb25zdHJ1Y3Rpb24gb2YgdHlwZSDigJxgezxudW1iZXI+fWDigJ0gdG8gdGhlIGNvcnJlc3BvbmRpbmcgYXJndW1lbnQuXFxuICAgICAqKlxcbiAgICAgPiBQYXJhbWV0ZXJzXFxuICAgICAqKlxcbiAgICAgLSB0b2tlbiAoc3RyaW5nKSBzdHJpbmcgdG8gZm9ybWF0XFxuICAgICAtIOKApiAoc3RyaW5nKSByZXN0IG9mIGFyZ3VtZW50cyB3aWxsIGJlIHRyZWF0ZWQgYXMgcGFyYW1ldGVycyBmb3IgcmVwbGFjZW1lbnRcXG4gICAgID0gKHN0cmluZykgZm9ybWF0ZWQgc3RyaW5nXFxuICAgICA+IFVzYWdlXFxuICAgICB8IHZhciB4ID0gMTAsXFxuICAgICB8ICAgICB5ID0gMjAsXFxuICAgICB8ICAgICB3aWR0aCA9IDQwLFxcbiAgICAgfCAgICAgaGVpZ2h0ID0gNTA7XFxuICAgICB8IC8vIHRoaXMgd2lsbCBkcmF3IGEgcmVjdGFuZ3VsYXIgc2hhcGUgZXF1aXZhbGVudCB0byBcXFwiTTEwLDIwaDQwdjUwaC00MHpcXFwiXFxuICAgICB8IHBhcGVyLnBhdGgoUmFwaGFlbC5mb3JtYXQoXFxcIk17MH0sezF9aHsyfXZ7M31oezR9elxcXCIsIHgsIHksIHdpZHRoLCBoZWlnaHQsIC13aWR0aCkpO1xcbiAgICBcXFxcKi9cXG4gICAgUi5mb3JtYXQgPSBmdW5jdGlvbiAodG9rZW4sIHBhcmFtcykge1xcbiAgICAgICAgdmFyIGFyZ3MgPSBSLmlzKHBhcmFtcywgYXJyYXkpID8gWzBdW2NvbmNhdF0ocGFyYW1zKSA6IGFyZ3VtZW50cztcXG4gICAgICAgIHRva2VuICYmIFIuaXModG9rZW4sIHN0cmluZykgJiYgYXJncy5sZW5ndGggLSAxICYmICh0b2tlbiA9IHRva2VuLnJlcGxhY2UoZm9ybWF0cmcsIGZ1bmN0aW9uIChzdHIsIGkpIHtcXG4gICAgICAgICAgICByZXR1cm4gYXJnc1srK2ldID09IG51bGwgPyBFIDogYXJnc1tpXTtcXG4gICAgICAgIH0pKTtcXG4gICAgICAgIHJldHVybiB0b2tlbiB8fCBFO1xcbiAgICB9O1xcbiAgICAvKlxcXFxcXG4gICAgICogUmFwaGFlbC5mdWxsZmlsbFxcbiAgICAgWyBtZXRob2QgXVxcbiAgICAgKipcXG4gICAgICogQSBsaXR0bGUgYml0IG1vcmUgYWR2YW5jZWQgZm9ybWF0IGZ1bmN0aW9uIHRoYW4gQFJhcGhhZWwuZm9ybWF0LiBSZXBsYWNlcyBjb25zdHJ1Y3Rpb24gb2YgdHlwZSDigJxgezxuYW1lPn1g4oCdIHRvIHRoZSBjb3JyZXNwb25kaW5nIGFyZ3VtZW50LlxcbiAgICAgKipcXG4gICAgID4gUGFyYW1ldGVyc1xcbiAgICAgKipcXG4gICAgIC0gdG9rZW4gKHN0cmluZykgc3RyaW5nIHRvIGZvcm1hdFxcbiAgICAgLSBqc29uIChvYmplY3QpIG9iamVjdCB3aGljaCBwcm9wZXJ0aWVzIHdpbGwgYmUgdXNlZCBhcyBhIHJlcGxhY2VtZW50XFxuICAgICA9IChzdHJpbmcpIGZvcm1hdGVkIHN0cmluZ1xcbiAgICAgPiBVc2FnZVxcbiAgICAgfCAvLyB0aGlzIHdpbGwgZHJhdyBhIHJlY3Rhbmd1bGFyIHNoYXBlIGVxdWl2YWxlbnQgdG8gXFxcIk0xMCwyMGg0MHY1MGgtNDB6XFxcIlxcbiAgICAgfCBwYXBlci5wYXRoKFJhcGhhZWwuZnVsbGZpbGwoXFxcIk17eH0se3l9aHtkaW0ud2lkdGh9dntkaW0uaGVpZ2h0fWh7ZGltWyduZWdhdGl2ZSB3aWR0aCddfXpcXFwiLCB7XFxuICAgICB8ICAgICB4OiAxMCxcXG4gICAgIHwgICAgIHk6IDIwLFxcbiAgICAgfCAgICAgZGltOiB7XFxuICAgICB8ICAgICAgICAgd2lkdGg6IDQwLFxcbiAgICAgfCAgICAgICAgIGhlaWdodDogNTAsXFxuICAgICB8ICAgICAgICAgXFxcIm5lZ2F0aXZlIHdpZHRoXFxcIjogLTQwXFxuICAgICB8ICAgICB9XFxuICAgICB8IH0pKTtcXG4gICAgXFxcXCovXFxuICAgIFIuZnVsbGZpbGwgPSAoZnVuY3Rpb24gKCkge1xcbiAgICAgICAgdmFyIHRva2VuUmVnZXggPSAvXFxcXHsoW15cXFxcfV0rKVxcXFx9L2csXFxuICAgICAgICAgICAgb2JqTm90YXRpb25SZWdleCA9IC8oPzooPzpefFxcXFwuKSguKz8pKD89XFxcXFt8XFxcXC58JHxcXFxcKCl8XFxcXFsoJ3xcXFwiKSguKz8pXFxcXDJcXFxcXSkoXFxcXChcXFxcKSk/L2csIC8vIG1hdGNoZXMgLnh4eHh4IG9yIFtcXFwieHh4eHhcXFwiXSB0byBydW4gb3ZlciBvYmplY3QgcHJvcGVydGllc1xcbiAgICAgICAgICAgIHJlcGxhY2VyID0gZnVuY3Rpb24gKGFsbCwga2V5LCBvYmopIHtcXG4gICAgICAgICAgICAgICAgdmFyIHJlcyA9IG9iajtcXG4gICAgICAgICAgICAgICAga2V5LnJlcGxhY2Uob2JqTm90YXRpb25SZWdleCwgZnVuY3Rpb24gKGFsbCwgbmFtZSwgcXVvdGUsIHF1b3RlZE5hbWUsIGlzRnVuYykge1xcbiAgICAgICAgICAgICAgICAgICAgbmFtZSA9IG5hbWUgfHwgcXVvdGVkTmFtZTtcXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXMpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmFtZSBpbiByZXMpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzID0gcmVzW25hbWVdO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgcmVzID09IFxcXCJmdW5jdGlvblxcXCIgJiYgaXNGdW5jICYmIChyZXMgPSByZXMoKSk7XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgICByZXMgPSAocmVzID09IG51bGwgfHwgcmVzID09IG9iaiA/IGFsbCA6IHJlcykgKyBcXFwiXFxcIjtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcztcXG4gICAgICAgICAgICB9O1xcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzdHIsIG9iaikge1xcbiAgICAgICAgICAgIHJldHVybiBTdHJpbmcoc3RyKS5yZXBsYWNlKHRva2VuUmVnZXgsIGZ1bmN0aW9uIChhbGwsIGtleSkge1xcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVwbGFjZXIoYWxsLCBrZXksIG9iaik7XFxuICAgICAgICAgICAgfSk7XFxuICAgICAgICB9O1xcbiAgICB9KSgpO1xcbiAgICAvKlxcXFxcXG4gICAgICogUmFwaGFlbC5uaW5qYVxcbiAgICAgWyBtZXRob2QgXVxcbiAgICAgKipcXG4gICAgICogSWYgeW91IHdhbnQgdG8gbGVhdmUgbm8gdHJhY2Ugb2YgUmFwaGHDq2wgKFdlbGwsIFJhcGhhw6tsIGNyZWF0ZXMgb25seSBvbmUgZ2xvYmFsIHZhcmlhYmxlIGBSYXBoYWVsYCwgYnV0IGFueXdheS4pIFlvdSBjYW4gdXNlIGBuaW5qYWAgbWV0aG9kLlxcbiAgICAgKiBCZXdhcmUsIHRoYXQgaW4gdGhpcyBjYXNlIHBsdWdpbnMgY291bGQgc3RvcCB3b3JraW5nLCBiZWNhdXNlIHRoZXkgYXJlIGRlcGVuZGluZyBvbiBnbG9iYWwgdmFyaWFibGUgZXhpc3RlbmNlLlxcbiAgICAgKipcXG4gICAgID0gKG9iamVjdCkgUmFwaGFlbCBvYmplY3RcXG4gICAgID4gVXNhZ2VcXG4gICAgIHwgKGZ1bmN0aW9uIChsb2NhbF9yYXBoYWVsKSB7XFxuICAgICB8ICAgICB2YXIgcGFwZXIgPSBsb2NhbF9yYXBoYWVsKDEwLCAxMCwgMzIwLCAyMDApO1xcbiAgICAgfCAgICAg4oCmXFxuICAgICB8IH0pKFJhcGhhZWwubmluamEoKSk7XFxuICAgIFxcXFwqL1xcbiAgICBSLm5pbmphID0gZnVuY3Rpb24gKCkge1xcbiAgICAgICAgaWYgKG9sZFJhcGhhZWwud2FzKSB7XFxuICAgICAgICAgICAgZy53aW4uUmFwaGFlbCA9IG9sZFJhcGhhZWwuaXM7XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgIC8vIElFOCByYWlzZXMgYW4gZXJyb3Igd2hlbiBkZWxldGluZyB3aW5kb3cgcHJvcGVydHlcXG4gICAgICAgICAgICB3aW5kb3cuUmFwaGFlbCA9IHVuZGVmaW5lZDtcXG4gICAgICAgICAgICB0cnkge1xcbiAgICAgICAgICAgICAgICBkZWxldGUgd2luZG93LlJhcGhhZWw7XFxuICAgICAgICAgICAgfSBjYXRjaChlKSB7fVxcbiAgICAgICAgfVxcbiAgICAgICAgcmV0dXJuIFI7XFxuICAgIH07XFxuICAgIC8qXFxcXFxcbiAgICAgKiBSYXBoYWVsLnN0XFxuICAgICBbIHByb3BlcnR5IChvYmplY3QpIF1cXG4gICAgICoqXFxuICAgICAqIFlvdSBjYW4gYWRkIHlvdXIgb3duIG1ldGhvZCB0byBlbGVtZW50cyBhbmQgc2V0cy4gSXQgaXMgd2lzZSB0byBhZGQgYSBzZXQgbWV0aG9kIGZvciBlYWNoIGVsZW1lbnQgbWV0aG9kXFxuICAgICAqIHlvdSBhZGRlZCwgc28geW91IHdpbGwgYmUgYWJsZSB0byBjYWxsIHRoZSBzYW1lIG1ldGhvZCBvbiBzZXRzIHRvby5cXG4gICAgICoqXFxuICAgICAqIFNlZSBhbHNvIEBSYXBoYWVsLmVsLlxcbiAgICAgPiBVc2FnZVxcbiAgICAgfCBSYXBoYWVsLmVsLnJlZCA9IGZ1bmN0aW9uICgpIHtcXG4gICAgIHwgICAgIHRoaXMuYXR0cih7ZmlsbDogXFxcIiNmMDBcXFwifSk7XFxuICAgICB8IH07XFxuICAgICB8IFJhcGhhZWwuc3QucmVkID0gZnVuY3Rpb24gKCkge1xcbiAgICAgfCAgICAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xcbiAgICAgfCAgICAgICAgIGVsLnJlZCgpO1xcbiAgICAgfCAgICAgfSk7XFxuICAgICB8IH07XFxuICAgICB8IC8vIHRoZW4gdXNlIGl0XFxuICAgICB8IHBhcGVyLnNldChwYXBlci5jaXJjbGUoMTAwLCAxMDAsIDIwKSwgcGFwZXIuY2lyY2xlKDExMCwgMTAwLCAyMCkpLnJlZCgpO1xcbiAgICBcXFxcKi9cXG4gICAgUi5zdCA9IHNldHByb3RvO1xcblxcbiAgICBldmUub24oXFxcInJhcGhhZWwuRE9NbG9hZFxcXCIsIGZ1bmN0aW9uICgpIHtcXG4gICAgICAgIGxvYWRlZCA9IHRydWU7XFxuICAgIH0pO1xcblxcbiAgICAvLyBGaXJlZm94IDwzLjYgZml4OiBodHRwOi8vd2VicmVmbGVjdGlvbi5ibG9nc3BvdC5jb20vMjAwOS8xMS8xOTUtY2hhcnMtdG8taGVscC1sYXp5LWxvYWRpbmcuaHRtbFxcbiAgICAoZnVuY3Rpb24gKGRvYywgbG9hZGVkLCBmKSB7XFxuICAgICAgICBpZiAoZG9jLnJlYWR5U3RhdGUgPT0gbnVsbCAmJiBkb2MuYWRkRXZlbnRMaXN0ZW5lcil7XFxuICAgICAgICAgICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIobG9hZGVkLCBmID0gZnVuY3Rpb24gKCkge1xcbiAgICAgICAgICAgICAgICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcihsb2FkZWQsIGYsIGZhbHNlKTtcXG4gICAgICAgICAgICAgICAgZG9jLnJlYWR5U3RhdGUgPSBcXFwiY29tcGxldGVcXFwiO1xcbiAgICAgICAgICAgIH0sIGZhbHNlKTtcXG4gICAgICAgICAgICBkb2MucmVhZHlTdGF0ZSA9IFxcXCJsb2FkaW5nXFxcIjtcXG4gICAgICAgIH1cXG4gICAgICAgIGZ1bmN0aW9uIGlzTG9hZGVkKCkge1xcbiAgICAgICAgICAgICgvaW4vKS50ZXN0KGRvYy5yZWFkeVN0YXRlKSA/IHNldFRpbWVvdXQoaXNMb2FkZWQsIDkpIDogUi5ldmUoXFxcInJhcGhhZWwuRE9NbG9hZFxcXCIpO1xcbiAgICAgICAgfVxcbiAgICAgICAgaXNMb2FkZWQoKTtcXG4gICAgfSkoZG9jdW1lbnQsIFxcXCJET01Db250ZW50TG9hZGVkXFxcIik7XFxuXFxuICAgIHJldHVybiBSO1xcbn0pLmFwcGx5KGV4cG9ydHMsIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18pLFxcblxcdFxcdFxcdFxcdF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fICE9PSB1bmRlZmluZWQgJiYgKG1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18pKTtcXG4vLyMgc291cmNlVVJMPVttb2R1bGVdXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lMaTlrWlhZdmNtRndhR0ZsYkM1amIzSmxMbXB6TG1weklpd2ljMjkxY21ObGN5STZXeUozWldKd1lXTnJPaTh2VW1Gd2FHRmxiQzh1TDJSbGRpOXlZWEJvWVdWc0xtTnZjbVV1YW5NL09UUmtPU0pkTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKa1pXWnBibVVvVzF3aVpYWmxYQ0pkTENCbWRXNWpkR2x2YmlobGRtVXBJSHRjYmx4dUlDQWdJQzhxWEZ4Y2JpQWdJQ0FnS2lCU1lYQm9ZV1ZzWEc0Z0lDQWdJRnNnYldWMGFHOWtJRjFjYmlBZ0lDQWdLaXBjYmlBZ0lDQWdLaUJEY21WaGRHVnpJR0VnWTJGdWRtRnpJRzlpYW1WamRDQnZiaUIzYUdsamFDQjBieUJrY21GM0xseHVJQ0FnSUNBcUlGbHZkU0J0ZFhOMElHUnZJSFJvYVhNZ1ptbHljM1FzSUdGeklHRnNiQ0JtZFhSMWNtVWdZMkZzYkhNZ2RHOGdaSEpoZDJsdVp5QnRaWFJvYjJSelhHNGdJQ0FnSUNvZ1puSnZiU0IwYUdseklHbHVjM1JoYm1ObElIZHBiR3dnWW1VZ1ltOTFibVFnZEc4Z2RHaHBjeUJqWVc1MllYTXVYRzRnSUNBZ0lENGdVR0Z5WVcxbGRHVnljMXh1SUNBZ0lDQXFLbHh1SUNBZ0lDQXRJR052Ym5SaGFXNWxjaUFvU0ZSTlRFVnNaVzFsYm5SOGMzUnlhVzVuS1NCRVQwMGdaV3hsYldWdWRDQnZjaUJwZEhNZ1NVUWdkMmhwWTJnZ2FYTWdaMjlwYm1jZ2RHOGdZbVVnWVNCd1lYSmxiblFnWm05eUlHUnlZWGRwYm1jZ2MzVnlabUZqWlZ4dUlDQWdJQ0F0SUhkcFpIUm9JQ2h1ZFcxaVpYSXBYRzRnSUNBZ0lDMGdhR1ZwWjJoMElDaHVkVzFpWlhJcFhHNGdJQ0FnSUMwZ1kyRnNiR0poWTJzZ0tHWjFibU4wYVc5dUtTQWpiM0IwYVc5dVlXd2dZMkZzYkdKaFkyc2dablZ1WTNScGIyNGdkMmhwWTJnZ2FYTWdaMjlwYm1jZ2RHOGdZbVVnWlhobFkzVjBaV1FnYVc0Z2RHaGxJR052Ym5SbGVIUWdiMllnYm1WM2JIa2dZM0psWVhSbFpDQndZWEJsY2x4dUlDQWdJQ0FxSUc5eVhHNGdJQ0FnSUMwZ2VDQW9iblZ0WW1WeUtWeHVJQ0FnSUNBdElIa2dLRzUxYldKbGNpbGNiaUFnSUNBZ0xTQjNhV1IwYUNBb2JuVnRZbVZ5S1Z4dUlDQWdJQ0F0SUdobGFXZG9kQ0FvYm5WdFltVnlLVnh1SUNBZ0lDQXRJR05oYkd4aVlXTnJJQ2htZFc1amRHbHZiaWtnSTI5d2RHbHZibUZzSUdOaGJHeGlZV05ySUdaMWJtTjBhVzl1SUhkb2FXTm9JR2x6SUdkdmFXNW5JSFJ2SUdKbElHVjRaV04xZEdWa0lHbHVJSFJvWlNCamIyNTBaWGgwSUc5bUlHNWxkMng1SUdOeVpXRjBaV1FnY0dGd1pYSmNiaUFnSUNBZ0tpQnZjbHh1SUNBZ0lDQXRJR0ZzYkNBb1lYSnlZWGtwSUNobWFYSnpkQ0F6SUc5eUlEUWdaV3hsYldWdWRITWdhVzRnZEdobElHRnljbUY1SUdGeVpTQmxjWFZoYkNCMGJ5QmJZMjl1ZEdGcGJtVnlTVVFzSUhkcFpIUm9MQ0JvWldsbmFIUmRJRzl5SUZ0NExDQjVMQ0IzYVdSMGFDd2dhR1ZwWjJoMFhTNGdWR2hsSUhKbGMzUWdZWEpsSUdWc1pXMWxiblFnWkdWelkzSnBjSFJwYjI1eklHbHVJR1p2Y20xaGRDQjdkSGx3WlRvZ2RIbHdaU3dnUEdGMGRISnBZblYwWlhNK2ZTa3VJRk5sWlNCQVVHRndaWEl1WVdSa0xseHVJQ0FnSUNBdElHTmhiR3hpWVdOcklDaG1kVzVqZEdsdmJpa2dJMjl3ZEdsdmJtRnNJR05oYkd4aVlXTnJJR1oxYm1OMGFXOXVJSGRvYVdOb0lHbHpJR2R2YVc1bklIUnZJR0psSUdWNFpXTjFkR1ZrSUdsdUlIUm9aU0JqYjI1MFpYaDBJRzltSUc1bGQyeDVJR055WldGMFpXUWdjR0Z3WlhKY2JpQWdJQ0FnS2lCdmNseHVJQ0FnSUNBdElHOXVVbVZoWkhsRFlXeHNZbUZqYXlBb1puVnVZM1JwYjI0cElHWjFibU4wYVc5dUlIUm9ZWFFnYVhNZ1oyOXBibWNnZEc4Z1ltVWdZMkZzYkdWa0lHOXVJRVJQVFNCeVpXRmtlU0JsZG1WdWRDNGdXVzkxSUdOaGJpQmhiSE52SUhOMVluTmpjbWxpWlNCMGJ5QjBhR2x6SUdWMlpXNTBJSFpwWVNCRmRtWGlnSmx6SU9LQW5FUlBUVXh2WVdUaWdKMGdaWFpsYm5RdUlFbHVJSFJvYVhNZ1kyRnpaU0J0WlhSb2IyUWdjbVYwZFhKdWN5QmdkVzVrWldacGJtVmtZQzVjYmlBZ0lDQWdQU0FvYjJKcVpXTjBLU0JBVUdGd1pYSmNiaUFnSUNBZ1BpQlZjMkZuWlZ4dUlDQWdJQ0I4SUM4dklFVmhZMmdnYjJZZ2RHaGxJR1p2Ykd4dmQybHVaeUJsZUdGdGNHeGxjeUJqY21WaGRHVWdZU0JqWVc1MllYTmNiaUFnSUNBZ2ZDQXZMeUIwYUdGMElHbHpJRE15TUhCNElIZHBaR1VnWW5rZ01qQXdjSGdnYUdsbmFDNWNiaUFnSUNBZ2ZDQXZMeUJEWVc1MllYTWdhWE1nWTNKbFlYUmxaQ0JoZENCMGFHVWdkbWxsZDNCdmNuVGlnSmx6SURFd0xEVXdJR052YjNKa2FXNWhkR1V1WEc0Z0lDQWdJSHdnZG1GeUlIQmhjR1Z5SUQwZ1VtRndhR0ZsYkNneE1Dd2dOVEFzSURNeU1Dd2dNakF3S1R0Y2JpQWdJQ0FnZkNBdkx5QkRZVzUyWVhNZ2FYTWdZM0psWVhSbFpDQmhkQ0IwYUdVZ2RHOXdJR3hsWm5RZ1kyOXlibVZ5SUc5bUlIUm9aU0FqYm05MFpYQmhaQ0JsYkdWdFpXNTBYRzRnSUNBZ0lId2dMeThnS0c5eUlHbDBjeUIwYjNBZ2NtbG5hSFFnWTI5eWJtVnlJR2x1SUdScGNqMWNJbkowYkZ3aUlHVnNaVzFsYm5SektWeHVJQ0FnSUNCOElIWmhjaUJ3WVhCbGNpQTlJRkpoY0doaFpXd29aRzlqZFcxbGJuUXVaMlYwUld4bGJXVnVkRUo1U1dRb1hDSnViM1JsY0dGa1hDSXBMQ0F6TWpBc0lESXdNQ2s3WEc0Z0lDQWdJSHdnTHk4Z1UyRnRaU0JoY3lCaFltOTJaVnh1SUNBZ0lDQjhJSFpoY2lCd1lYQmxjaUE5SUZKaGNHaGhaV3dvWENKdWIzUmxjR0ZrWENJc0lETXlNQ3dnTWpBd0tUdGNiaUFnSUNBZ2ZDQXZMeUJKYldGblpTQmtkVzF3WEc0Z0lDQWdJSHdnZG1GeUlITmxkQ0E5SUZKaGNHaGhaV3dvVzF3aWJtOTBaWEJoWkZ3aUxDQXpNakFzSURJd01Dd2dlMXh1SUNBZ0lDQjhJQ0FnSUNCMGVYQmxPaUJjSW5KbFkzUmNJaXhjYmlBZ0lDQWdmQ0FnSUNBZ2VEb2dNVEFzWEc0Z0lDQWdJSHdnSUNBZ0lIazZJREV3TEZ4dUlDQWdJQ0I4SUNBZ0lDQjNhV1IwYURvZ01qVXNYRzRnSUNBZ0lId2dJQ0FnSUdobGFXZG9kRG9nTWpVc1hHNGdJQ0FnSUh3Z0lDQWdJSE4wY205clpUb2dYQ0lqWmpBd1hDSmNiaUFnSUNBZ2ZDQjlMQ0I3WEc0Z0lDQWdJSHdnSUNBZ0lIUjVjR1U2SUZ3aWRHVjRkRndpTEZ4dUlDQWdJQ0I4SUNBZ0lDQjRPaUF6TUN4Y2JpQWdJQ0FnZkNBZ0lDQWdlVG9nTkRBc1hHNGdJQ0FnSUh3Z0lDQWdJSFJsZUhRNklGd2lSSFZ0Y0Z3aVhHNGdJQ0FnSUh3Z2ZWMHBPMXh1SUNBZ0lGeGNLaTljYmlBZ0lDQm1kVzVqZEdsdmJpQlNLR1pwY25OMEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoU0xtbHpLR1pwY25OMExDQmNJbVoxYm1OMGFXOXVYQ0lwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdiRzloWkdWa0lEOGdabWx5YzNRb0tTQTZJR1YyWlM1dmJpaGNJbkpoY0doaFpXd3VSRTlOYkc5aFpGd2lMQ0JtYVhKemRDazdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvVWk1cGN5aG1hWEp6ZEN3Z1lYSnlZWGtwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdVaTVmWlc1bmFXNWxMbU55WldGMFpWdGhjSEJzZVYwb1Vpd2dabWx5YzNRdWMzQnNhV05sS0RBc0lETWdLeUJTTG1sektHWnBjbk4wV3pCZExDQnVkU2twS1M1aFpHUW9abWx5YzNRcE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHRnlaM01nUFNCQmNuSmhlUzV3Y205MGIzUjVjR1V1YzJ4cFkyVXVZMkZzYkNoaGNtZDFiV1Z1ZEhNc0lEQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRkl1YVhNb1lYSm5jMXRoY21kekxteGxibWQwYUNBdElERmRMQ0JjSW1aMWJtTjBhVzl1WENJcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdZZ1BTQmhjbWR6TG5CdmNDZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnNiMkZrWldRZ1B5Qm1MbU5oYkd3b1VpNWZaVzVuYVc1bExtTnlaV0YwWlZ0aGNIQnNlVjBvVWl3Z1lYSm5jeWtwSURvZ1pYWmxMbTl1S0Z3aWNtRndhR0ZsYkM1RVQwMXNiMkZrWENJc0lHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ppNWpZV3hzS0ZJdVgyVnVaMmx1WlM1amNtVmhkR1ZiWVhCd2JIbGRLRklzSUdGeVozTXBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlGSXVYMlZ1WjJsdVpTNWpjbVZoZEdWYllYQndiSGxkS0ZJc0lHRnlaM1Z0Wlc1MGN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnVWk1MlpYSnphVzl1SUQwZ1hDSXlMakl1TUZ3aU8xeHVJQ0FnSUZJdVpYWmxJRDBnWlhabE8xeHVJQ0FnSUhaaGNpQnNiMkZrWldRc1hHNGdJQ0FnSUNBZ0lITmxjR0Z5WVhSdmNpQTlJQzliTENCZEt5OHNYRzRnSUNBZ0lDQWdJR1ZzWlcxbGJuUnpJRDBnZTJOcGNtTnNaVG9nTVN3Z2NtVmpkRG9nTVN3Z2NHRjBhRG9nTVN3Z1pXeHNhWEJ6WlRvZ01Td2dkR1Y0ZERvZ01Td2dhVzFoWjJVNklERjlMRnh1SUNBZ0lDQWdJQ0JtYjNKdFlYUnlaeUE5SUM5Y1hIc29YRnhrS3lsY1hIMHZaeXhjYmlBZ0lDQWdJQ0FnY0hKdmRHOGdQU0JjSW5CeWIzUnZkSGx3WlZ3aUxGeHVJQ0FnSUNBZ0lDQm9ZWE1nUFNCY0ltaGhjMDkzYmxCeWIzQmxjblI1WENJc1hHNGdJQ0FnSUNBZ0lHY2dQU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtiMk02SUdSdlkzVnRaVzUwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdkMmx1T2lCM2FXNWtiM2RjYmlBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ2IyeGtVbUZ3YUdGbGJDQTlJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIZGhjem9nVDJKcVpXTjBMbkJ5YjNSdmRIbHdaVnRvWVhOZExtTmhiR3dvWnk1M2FXNHNJRndpVW1Gd2FHRmxiRndpS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJR2x6T2lCbkxuZHBiaTVTWVhCb1lXVnNYRzRnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUZCaGNHVnlJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHlwY1hGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNvZ1VHRndaWEl1WTJGY2JpQWdJQ0FnSUNBZ0lDQWdJQ0JiSUhCeWIzQmxjblI1SUNodlltcGxZM1FwSUYxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FxS2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ29nVTJodmNuUmpkWFFnWm05eUlFQlFZWEJsY2k1amRYTjBiMjFCZEhSeWFXSjFkR1Z6WEc0Z0lDQWdJQ0FnSUNBZ0lDQmNYQ292WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZLbHhjWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdLaUJRWVhCbGNpNWpkWE4wYjIxQmRIUnlhV0oxZEdWelhHNGdJQ0FnSUNBZ0lDQWdJQ0FnV3lCd2NtOXdaWEowZVNBb2IySnFaV04wS1NCZFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnS2lwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FxSUVsbUlIbHZkU0JvWVhabElHRWdjMlYwSUc5bUlHRjBkSEpwWW5WMFpYTWdkR2hoZENCNWIzVWdkMjkxYkdRZ2JHbHJaU0IwYnlCeVpYQnlaWE5sYm5SY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FxSUdGeklHRWdablZ1WTNScGIyNGdiMllnYzI5dFpTQnVkVzFpWlhJZ2VXOTFJR05oYmlCa2J5QnBkQ0JsWVhOcGJIa2dkMmwwYUNCamRYTjBiMjBnWVhSMGNtbGlkWFJsY3pwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0ErSUZWellXZGxYRzRnSUNBZ0lDQWdJQ0FnSUNBZ2ZDQndZWEJsY2k1amRYTjBiMjFCZEhSeWFXSjFkR1Z6TG1oMVpTQTlJR1oxYm1OMGFXOXVJQ2h1ZFcwcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNCOElDQWdJQ0J1ZFcwZ1BTQnVkVzBnSlNBeE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUh3Z0lDQWdJSEpsZEhWeWJpQjdabWxzYkRvZ1hDSm9jMklvWENJZ0t5QnVkVzBnS3lCY0lpd2dNQzQzTlN3Z01TbGNJbjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdmQ0I5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJSHdnTHk4Z1EzVnpkRzl0SUdGMGRISnBZblYwWlNEaWdKeG9kV1hpZ0owZ2QybHNiQ0JqYUdGdVoyVWdabWxzYkZ4dUlDQWdJQ0FnSUNBZ0lDQWdJSHdnTHk4Z2RHOGdZbVVnWjJsMlpXNGdhSFZsSUhkcGRHZ2dabWw0WldRZ2MyRjBkWEpoZEdsdmJpQmhibVFnWW5KcFoyaDBibVZ6Y3k1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0I4SUM4dklFNXZkeUI1YjNVZ1kyRnVJSFZ6WlNCcGRDQnNhV3RsSUhSb2FYTTZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ2ZDQjJZWElnWXlBOUlIQmhjR1Z5TG1OcGNtTnNaU2d4TUN3Z01UQXNJREV3S1M1aGRIUnlLSHRvZFdVNklDNDBOWDBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJSHdnTHk4Z2IzSWdaWFpsYmlCc2FXdGxJSFJvYVhNNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnZkNCakxtRnVhVzFoZEdVb2UyaDFaVG9nTVgwc0lERmxNeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdmRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lId2dMeThnV1c5MUlHTnZkV3hrSUdGc2MyOGdZM0psWVhSbElHTjFjM1J2YlNCaGRIUnlhV0oxZEdWY2JpQWdJQ0FnSUNBZ0lDQWdJQ0I4SUM4dklIZHBkR2dnYlhWc2RHbHdiR1VnY0dGeVlXMWxkR1Z5Y3pwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0I4SUhCaGNHVnlMbU4xYzNSdmJVRjBkSEpwWW5WMFpYTXVhSE5pSUQwZ1puVnVZM1JwYjI0Z0tHZ3NJSE1zSUdJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNCOElDQWdJQ0J5WlhSMWNtNGdlMlpwYkd3NklGd2lhSE5pS0Z3aUlDc2dXMmdzSUhNc0lHSmRMbXB2YVc0b1hDSXNYQ0lwSUNzZ1hDSXBYQ0o5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJSHdnZlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0I4SUdNdVlYUjBjaWg3YUhOaU9pQmNJakF1TlNBdU9DQXhYQ0o5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0I4SUdNdVlXNXBiV0YwWlNoN2FITmlPaUJiTVN3Z01Dd2dNQzQxWFgwc0lERmxNeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmNYQ292WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1OaElEMGdkR2hwY3k1amRYTjBiMjFCZEhSeWFXSjFkR1Z6SUQwZ2UzMDdYRzRnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUhCaGNHVnljSEp2ZEc4c1hHNGdJQ0FnSUNBZ0lHRndjR1Z1WkVOb2FXeGtJRDBnWENKaGNIQmxibVJEYUdsc1pGd2lMRnh1SUNBZ0lDQWdJQ0JoY0hCc2VTQTlJRndpWVhCd2JIbGNJaXhjYmlBZ0lDQWdJQ0FnWTI5dVkyRjBJRDBnWENKamIyNWpZWFJjSWl4Y2JpQWdJQ0FnSUNBZ0x5OTBZV3RsYmlCbWNtOXRJRTF2WkdWeWJtbDZjaUIwYjNWamFDQjBaWE4wT2lCb2RIUndjem92TDJkcGRHaDFZaTVqYjIwdlRXOWtaWEp1YVhweUwwMXZaR1Z5Ym1sNmNpOWliRzlpTDIxaGMzUmxjaTltWldGMGRYSmxMV1JsZEdWamRITXZkRzkxWTJobGRtVnVkSE11YW5NalREUXdYRzRnSUNBZ0lDQWdJSE4xY0hCdmNuUnpWRzkxWTJnZ1BTQW9KMjl1ZEc5MVkyaHpkR0Z5ZENjZ2FXNGdkMmx1Wkc5M0tTQjhmQ0IzYVc1a2IzY3VWRzkxWTJoRmRtVnVkQ0I4ZkNCM2FXNWtiM2N1Ukc5amRXMWxiblJVYjNWamFDQW1KaUJrYjJOMWJXVnVkQ0JwYm5OMFlXNWpaVzltSUVSdlkzVnRaVzUwVkc5MVkyZ3NYRzRnSUNBZ0lDQWdJRVVnUFNCY0lsd2lMRnh1SUNBZ0lDQWdJQ0JUSUQwZ1hDSWdYQ0lzWEc0Z0lDQWdJQ0FnSUZOMGNpQTlJRk4wY21sdVp5eGNiaUFnSUNBZ0lDQWdjM0JzYVhRZ1BTQmNJbk53YkdsMFhDSXNYRzRnSUNBZ0lDQWdJR1YyWlc1MGN5QTlJRndpWTJ4cFkyc2daR0pzWTJ4cFkyc2diVzkxYzJWa2IzZHVJRzF2ZFhObGJXOTJaU0J0YjNWelpXOTFkQ0J0YjNWelpXOTJaWElnYlc5MWMyVjFjQ0IwYjNWamFITjBZWEowSUhSdmRXTm9iVzkyWlNCMGIzVmphR1Z1WkNCMGIzVmphR05oYm1ObGJGd2lXM053YkdsMFhTaFRLU3hjYmlBZ0lDQWdJQ0FnZEc5MVkyaE5ZWEFnUFNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J0YjNWelpXUnZkMjQ2SUZ3aWRHOTFZMmh6ZEdGeWRGd2lMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2JXOTFjMlZ0YjNabE9pQmNJblJ2ZFdOb2JXOTJaVndpTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdiVzkxYzJWMWNEb2dYQ0owYjNWamFHVnVaRndpWEc0Z0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lHeHZkMlZ5UTJGelpTQTlJRk4wY2k1d2NtOTBiM1I1Y0dVdWRHOU1iM2RsY2tOaGMyVXNYRzRnSUNBZ0lDQWdJRzFoZEdnZ1BTQk5ZWFJvTEZ4dUlDQWdJQ0FnSUNCdGJXRjRJRDBnYldGMGFDNXRZWGdzWEc0Z0lDQWdJQ0FnSUcxdGFXNGdQU0J0WVhSb0xtMXBiaXhjYmlBZ0lDQWdJQ0FnWVdKeklEMGdiV0YwYUM1aFluTXNYRzRnSUNBZ0lDQWdJSEJ2ZHlBOUlHMWhkR2d1Y0c5M0xGeHVJQ0FnSUNBZ0lDQlFTU0E5SUcxaGRHZ3VVRWtzWEc0Z0lDQWdJQ0FnSUc1MUlEMGdYQ0p1ZFcxaVpYSmNJaXhjYmlBZ0lDQWdJQ0FnYzNSeWFXNW5JRDBnWENKemRISnBibWRjSWl4Y2JpQWdJQ0FnSUNBZ1lYSnlZWGtnUFNCY0ltRnljbUY1WENJc1hHNGdJQ0FnSUNBZ0lIUnZVM1J5YVc1bklEMGdYQ0owYjFOMGNtbHVaMXdpTEZ4dUlDQWdJQ0FnSUNCbWFXeHNVM1J5YVc1bklEMGdYQ0ptYVd4c1hDSXNYRzRnSUNBZ0lDQWdJRzlpYW1WamRGUnZVM1J5YVc1bklEMGdUMkpxWldOMExuQnliM1J2ZEhsd1pTNTBiMU4wY21sdVp5eGNiaUFnSUNBZ0lDQWdjR0Z3WlhJZ1BTQjdmU3hjYmlBZ0lDQWdJQ0FnY0hWemFDQTlJRndpY0hWemFGd2lMRnh1SUNBZ0lDQWdJQ0JKVTFWU1RDQTlJRkl1WDBsVFZWSk1JRDBnTDE1MWNteGNYQ2hiSjF3aVhUOG9MaXMvS1ZzblhDSmRQMXhjS1NRdmFTeGNiaUFnSUNBZ0lDQWdZMjlzYjNWeVVtVm5SWGh3SUQwZ0wxNWNYSE1xS0NnalcyRXRabHhjWkYxN05uMHBmQ2dqVzJFdFpseGNaRjE3TTMwcGZISm5ZbUUvWEZ3b1hGeHpLaWhiWEZ4a1hGd3VYU3NsUDF4Y2N5b3NYRnh6S2x0Y1hHUmNYQzVkS3lVL1hGeHpLaXhjWEhNcVcxeGNaRnhjTGwwckpUOG9QenBjWEhNcUxGeGNjeXBiWEZ4a1hGd3VYU3NsUHlrL0tWeGNjeXBjWENsOGFITmlZVDljWENoY1hITXFLRnRjWEdSY1hDNWRLeWcvT21SbFozeGNYSGhpTUh3bEtUOWNYSE1xTEZ4Y2N5cGJYRnhrWEZ3dVhTc2xQMXhjY3lvc1hGeHpLbHRjWEdSY1hDNWRLeWcvT2lVL1hGeHpLaXhjWEhNcVcxeGNaRnhjTGwwcktUOHBKVDljWEhNcVhGd3BmR2h6YkdFL1hGd29YRnh6S2loYlhGeGtYRnd1WFNzb1B6cGtaV2Q4WEZ4NFlqQjhKU2svWEZ4ektpeGNYSE1xVzF4Y1pGeGNMbDBySlQ5Y1hITXFMRnhjY3lwYlhGeGtYRnd1WFNzb1B6b2xQMXhjY3lvc1hGeHpLbHRjWEdSY1hDNWRLeWsvS1NVL1hGeHpLbHhjS1NsY1hITXFKQzlwTEZ4dUlDQWdJQ0FnSUNCcGMyNWhiaUE5SUh0Y0lrNWhUbHdpT2lBeExDQmNJa2x1Wm1sdWFYUjVYQ0k2SURFc0lGd2lMVWx1Wm1sdWFYUjVYQ0k2SURGOUxGeHVJQ0FnSUNBZ0lDQmlaWHBwWlhKeVp5QTlJQzllS0Q4NlkzVmlhV010S1Q5aVpYcHBaWEpjWENnb1cxNHNYU3NwTENoYlhpeGRLeWtzS0Z0ZUxGMHJLU3dvVzE1Y1hDbGRLeWxjWENrdkxGeHVJQ0FnSUNBZ0lDQnliM1Z1WkNBOUlHMWhkR2d1Y205MWJtUXNYRzRnSUNBZ0lDQWdJSE5sZEVGMGRISnBZblYwWlNBOUlGd2ljMlYwUVhSMGNtbGlkWFJsWENJc1hHNGdJQ0FnSUNBZ0lIUnZSbXh2WVhRZ1BTQndZWEp6WlVac2IyRjBMRnh1SUNBZ0lDQWdJQ0IwYjBsdWRDQTlJSEJoY25ObFNXNTBMRnh1SUNBZ0lDQWdJQ0IxY0hCbGNrTmhjMlVnUFNCVGRISXVjSEp2ZEc5MGVYQmxMblJ2VlhCd1pYSkRZWE5sTEZ4dUlDQWdJQ0FnSUNCaGRtRnBiR0ZpYkdWQmRIUnljeUE5SUZJdVgyRjJZV2xzWVdKc1pVRjBkSEp6SUQwZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWENKaGNuSnZkeTFsYm1SY0lqb2dYQ0p1YjI1bFhDSXNYRzRnSUNBZ0lDQWdJQ0FnSUNCY0ltRnljbTkzTFhOMFlYSjBYQ0k2SUZ3aWJtOXVaVndpTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdZbXgxY2pvZ01DeGNiaUFnSUNBZ0lDQWdJQ0FnSUZ3aVkyeHBjQzF5WldOMFhDSTZJRndpTUNBd0lERmxPU0F4WlRsY0lpeGNiaUFnSUNBZ0lDQWdJQ0FnSUdOMWNuTnZjam9nWENKa1pXWmhkV3gwWENJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqZURvZ01DeGNiaUFnSUNBZ0lDQWdJQ0FnSUdONU9pQXdMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1ptbHNiRG9nWENJalptWm1YQ0lzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmNJbVpwYkd3dGIzQmhZMmwwZVZ3aU9pQXhMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1ptOXVkRG9nSnpFd2NIZ2dYQ0pCY21saGJGd2lKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lGd2labTl1ZEMxbVlXMXBiSGxjSWpvZ0oxd2lRWEpwWVd4Y0lpY3NYRzRnSUNBZ0lDQWdJQ0FnSUNCY0ltWnZiblF0YzJsNlpWd2lPaUJjSWpFd1hDSXNYRzRnSUNBZ0lDQWdJQ0FnSUNCY0ltWnZiblF0YzNSNWJHVmNJam9nWENKdWIzSnRZV3hjSWl4Y2JpQWdJQ0FnSUNBZ0lDQWdJRndpWm05dWRDMTNaV2xuYUhSY0lqb2dOREF3TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdaM0poWkdsbGJuUTZJREFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQm9aV2xuYUhRNklEQXNYRzRnSUNBZ0lDQWdJQ0FnSUNCb2NtVm1PaUJjSW1oMGRIQTZMeTl5WVhCb1lXVnNhbk11WTI5dEwxd2lMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1hDSnNaWFIwWlhJdGMzQmhZMmx1WjF3aU9pQXdMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2IzQmhZMmwwZVRvZ01TeGNiaUFnSUNBZ0lDQWdJQ0FnSUhCaGRHZzZJRndpVFRBc01Gd2lMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2Nqb2dNQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lISjRPaUF3TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjbms2SURBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6Y21NNklGd2lYQ0lzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnpkSEp2YTJVNklGd2lJekF3TUZ3aUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnWENKemRISnZhMlV0WkdGemFHRnljbUY1WENJNklGd2lYQ0lzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmNJbk4wY205clpTMXNhVzVsWTJGd1hDSTZJRndpWW5WMGRGd2lMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1hDSnpkSEp2YTJVdGJHbHVaV3B2YVc1Y0lqb2dYQ0ppZFhSMFhDSXNYRzRnSUNBZ0lDQWdJQ0FnSUNCY0luTjBjbTlyWlMxdGFYUmxjbXhwYldsMFhDSTZJREFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmNJbk4wY205clpTMXZjR0ZqYVhSNVhDSTZJREVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmNJbk4wY205clpTMTNhV1IwYUZ3aU9pQXhMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHRnlaMlYwT2lCY0lsOWliR0Z1YTF3aUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnWENKMFpYaDBMV0Z1WTJodmNsd2lPaUJjSW0xcFpHUnNaVndpTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdkR2wwYkdVNklGd2lVbUZ3YUdGbGJGd2lMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RISmhibk5tYjNKdE9pQmNJbHdpTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdkMmxrZEdnNklEQXNYRzRnSUNBZ0lDQWdJQ0FnSUNCNE9pQXdMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2VUb2dNQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lGd2lZMnhoYzNOY0lqb2dYQ0pjSWx4dUlDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQmhkbUZwYkdGaWJHVkJibWx0UVhSMGNuTWdQU0JTTGw5aGRtRnBiR0ZpYkdWQmJtbHRRWFIwY25NZ1BTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCaWJIVnlPaUJ1ZFN4Y2JpQWdJQ0FnSUNBZ0lDQWdJRndpWTJ4cGNDMXlaV04wWENJNklGd2lZM04yWENJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqZURvZ2JuVXNYRzRnSUNBZ0lDQWdJQ0FnSUNCamVUb2diblVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQm1hV3hzT2lCY0ltTnZiRzkxY2x3aUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnWENKbWFXeHNMVzl3WVdOcGRIbGNJam9nYm5Vc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JjSW1admJuUXRjMmw2WlZ3aU9pQnVkU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHaGxhV2RvZERvZ2JuVXNYRzRnSUNBZ0lDQWdJQ0FnSUNCdmNHRmphWFI1T2lCdWRTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhCaGRHZzZJRndpY0dGMGFGd2lMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2Nqb2diblVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnllRG9nYm5Vc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5ZVRvZ2JuVXNYRzRnSUNBZ0lDQWdJQ0FnSUNCemRISnZhMlU2SUZ3aVkyOXNiM1Z5WENJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JjSW5OMGNtOXJaUzF2Y0dGamFYUjVYQ0k2SUc1MUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnWENKemRISnZhMlV0ZDJsa2RHaGNJam9nYm5Vc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwY21GdWMyWnZjbTA2SUZ3aWRISmhibk5tYjNKdFhDSXNYRzRnSUNBZ0lDQWdJQ0FnSUNCM2FXUjBhRG9nYm5Vc1hHNGdJQ0FnSUNBZ0lDQWdJQ0I0T2lCdWRTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhrNklHNTFYRzRnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUhkb2FYUmxjM0JoWTJVZ1BTQXZXMXhjZURBNVhGeDRNR0ZjWEhnd1lseGNlREJqWEZ4NE1HUmNYSGd5TUZ4Y2VHRXdYRngxTVRZNE1GeGNkVEU0TUdWY1hIVXlNREF3WEZ4MU1qQXdNVnhjZFRJd01ESmNYSFV5TURBelhGeDFNakF3TkZ4Y2RUSXdNRFZjWEhVeU1EQTJYRngxTWpBd04xeGNkVEl3TURoY1hIVXlNREE1WEZ4MU1qQXdZVnhjZFRJd01tWmNYSFV5TURWbVhGeDFNekF3TUZ4Y2RUSXdNamhjWEhVeU1ESTVYUzluTEZ4dUlDQWdJQ0FnSUNCamIyMXRZVk53WVdObGN5QTlJQzliWEZ4NE1EbGNYSGd3WVZ4Y2VEQmlYRng0TUdOY1hIZ3daRnhjZURJd1hGeDRZVEJjWEhVeE5qZ3dYRngxTVRnd1pWeGNkVEl3TURCY1hIVXlNREF4WEZ4MU1qQXdNbHhjZFRJd01ETmNYSFV5TURBMFhGeDFNakF3TlZ4Y2RUSXdNRFpjWEhVeU1EQTNYRngxTWpBd09GeGNkVEl3TURsY1hIVXlNREJoWEZ4MU1qQXlabHhjZFRJd05XWmNYSFV6TURBd1hGeDFNakF5T0Z4Y2RUSXdNamxkS2l4YlhGeDRNRGxjWEhnd1lWeGNlREJpWEZ4NE1HTmNYSGd3WkZ4Y2VESXdYRng0WVRCY1hIVXhOamd3WEZ4MU1UZ3daVnhjZFRJd01EQmNYSFV5TURBeFhGeDFNakF3TWx4Y2RUSXdNRE5jWEhVeU1EQTBYRngxTWpBd05WeGNkVEl3TURaY1hIVXlNREEzWEZ4MU1qQXdPRnhjZFRJd01EbGNYSFV5TURCaFhGeDFNakF5Wmx4Y2RUSXdOV1pjWEhVek1EQXdYRngxTWpBeU9GeGNkVEl3TWpsZEtpOHNYRzRnSUNBZ0lDQWdJR2h6Y21jZ1BTQjdhSE02SURFc0lISm5PaUF4ZlN4Y2JpQWdJQ0FnSUNBZ2NESnpJRDBnTHl3L0tGdGhZMmhzYlhGeWMzUjJlSHBkS1N3L0wyZHBMRnh1SUNBZ0lDQWdJQ0J3WVhSb1EyOXRiV0Z1WkNBOUlDOG9XMkZqYUd4dGNuRnpkSFo2WFNsYlhGeDRNRGxjWEhnd1lWeGNlREJpWEZ4NE1HTmNYSGd3WkZ4Y2VESXdYRng0WVRCY1hIVXhOamd3WEZ4MU1UZ3daVnhjZFRJd01EQmNYSFV5TURBeFhGeDFNakF3TWx4Y2RUSXdNRE5jWEhVeU1EQTBYRngxTWpBd05WeGNkVEl3TURaY1hIVXlNREEzWEZ4MU1qQXdPRnhjZFRJd01EbGNYSFV5TURCaFhGeDFNakF5Wmx4Y2RUSXdOV1pjWEhVek1EQXdYRngxTWpBeU9GeGNkVEl3TWprc1hTb29LQzAvWEZ4a0tseGNMajljWEdRcUtEODZaVnRjWEMwclhUOWNYR1FyS1Q5YlhGeDRNRGxjWEhnd1lWeGNlREJpWEZ4NE1HTmNYSGd3WkZ4Y2VESXdYRng0WVRCY1hIVXhOamd3WEZ4MU1UZ3daVnhjZFRJd01EQmNYSFV5TURBeFhGeDFNakF3TWx4Y2RUSXdNRE5jWEhVeU1EQTBYRngxTWpBd05WeGNkVEl3TURaY1hIVXlNREEzWEZ4MU1qQXdPRnhjZFRJd01EbGNYSFV5TURCaFhGeDFNakF5Wmx4Y2RUSXdOV1pjWEhVek1EQXdYRngxTWpBeU9GeGNkVEl3TWpsZEtpdy9XMXhjZURBNVhGeDRNR0ZjWEhnd1lseGNlREJqWEZ4NE1HUmNYSGd5TUZ4Y2VHRXdYRngxTVRZNE1GeGNkVEU0TUdWY1hIVXlNREF3WEZ4MU1qQXdNVnhjZFRJd01ESmNYSFV5TURBelhGeDFNakF3TkZ4Y2RUSXdNRFZjWEhVeU1EQTJYRngxTWpBd04xeGNkVEl3TURoY1hIVXlNREE1WEZ4MU1qQXdZVnhjZFRJd01tWmNYSFV5TURWbVhGeDFNekF3TUZ4Y2RUSXdNamhjWEhVeU1ESTVYU29wS3lrdmFXY3NYRzRnSUNBZ0lDQWdJSFJEYjIxdFlXNWtJRDBnTHloYmNuTjBiVjBwVzF4Y2VEQTVYRng0TUdGY1hIZ3dZbHhjZURCalhGeDRNR1JjWEhneU1GeGNlR0V3WEZ4MU1UWTRNRnhjZFRFNE1HVmNYSFV5TURBd1hGeDFNakF3TVZ4Y2RUSXdNREpjWEhVeU1EQXpYRngxTWpBd05GeGNkVEl3TURWY1hIVXlNREEyWEZ4MU1qQXdOMXhjZFRJd01EaGNYSFV5TURBNVhGeDFNakF3WVZ4Y2RUSXdNbVpjWEhVeU1EVm1YRngxTXpBd01GeGNkVEl3TWpoY1hIVXlNREk1TEYwcUtDZ3RQMXhjWkNwY1hDNC9YRnhrS2lnL09tVmJYRnd0SzEwL1hGeGtLeWsvVzF4Y2VEQTVYRng0TUdGY1hIZ3dZbHhjZURCalhGeDRNR1JjWEhneU1GeGNlR0V3WEZ4MU1UWTRNRnhjZFRFNE1HVmNYSFV5TURBd1hGeDFNakF3TVZ4Y2RUSXdNREpjWEhVeU1EQXpYRngxTWpBd05GeGNkVEl3TURWY1hIVXlNREEyWEZ4MU1qQXdOMXhjZFRJd01EaGNYSFV5TURBNVhGeDFNakF3WVZ4Y2RUSXdNbVpjWEhVeU1EVm1YRngxTXpBd01GeGNkVEl3TWpoY1hIVXlNREk1WFNvc1AxdGNYSGd3T1Z4Y2VEQmhYRng0TUdKY1hIZ3dZMXhjZURCa1hGeDRNakJjWEhoaE1GeGNkVEUyT0RCY1hIVXhPREJsWEZ4MU1qQXdNRnhjZFRJd01ERmNYSFV5TURBeVhGeDFNakF3TTF4Y2RUSXdNRFJjWEhVeU1EQTFYRngxTWpBd05seGNkVEl3TURkY1hIVXlNREE0WEZ4MU1qQXdPVnhjZFRJd01HRmNYSFV5TURKbVhGeDFNakExWmx4Y2RUTXdNREJjWEhVeU1ESTRYRngxTWpBeU9WMHFLU3NwTDJsbkxGeHVJQ0FnSUNBZ0lDQndZWFJvVm1Gc2RXVnpJRDBnTHlndFAxeGNaQ3BjWEM0L1hGeGtLaWcvT21WYlhGd3RLMTAvWEZ4a0t5ay9LVnRjWEhnd09WeGNlREJoWEZ4NE1HSmNYSGd3WTF4Y2VEQmtYRng0TWpCY1hIaGhNRnhjZFRFMk9EQmNYSFV4T0RCbFhGeDFNakF3TUZ4Y2RUSXdNREZjWEhVeU1EQXlYRngxTWpBd00xeGNkVEl3TURSY1hIVXlNREExWEZ4MU1qQXdObHhjZFRJd01EZGNYSFV5TURBNFhGeDFNakF3T1Z4Y2RUSXdNR0ZjWEhVeU1ESm1YRngxTWpBMVpseGNkVE13TURCY1hIVXlNREk0WEZ4MU1qQXlPVjBxTEQ5YlhGeDRNRGxjWEhnd1lWeGNlREJpWEZ4NE1HTmNYSGd3WkZ4Y2VESXdYRng0WVRCY1hIVXhOamd3WEZ4MU1UZ3daVnhjZFRJd01EQmNYSFV5TURBeFhGeDFNakF3TWx4Y2RUSXdNRE5jWEhVeU1EQTBYRngxTWpBd05WeGNkVEl3TURaY1hIVXlNREEzWEZ4MU1qQXdPRnhjZFRJd01EbGNYSFV5TURCaFhGeDFNakF5Wmx4Y2RUSXdOV1pjWEhVek1EQXdYRngxTWpBeU9GeGNkVEl3TWpsZEtpOXBaeXhjYmlBZ0lDQWdJQ0FnY21Ga2FXRnNYMmR5WVdScFpXNTBJRDBnVWk1ZmNtRmthV0ZzWDJkeVlXUnBaVzUwSUQwZ0wxNXlLRDg2WEZ3b0tGdGVMRjByUHlsYlhGeDRNRGxjWEhnd1lWeGNlREJpWEZ4NE1HTmNYSGd3WkZ4Y2VESXdYRng0WVRCY1hIVXhOamd3WEZ4MU1UZ3daVnhjZFRJd01EQmNYSFV5TURBeFhGeDFNakF3TWx4Y2RUSXdNRE5jWEhVeU1EQTBYRngxTWpBd05WeGNkVEl3TURaY1hIVXlNREEzWEZ4MU1qQXdPRnhjZFRJd01EbGNYSFV5TURCaFhGeDFNakF5Wmx4Y2RUSXdOV1pjWEhVek1EQXdYRngxTWpBeU9GeGNkVEl3TWpsZEtpeGJYRng0TURsY1hIZ3dZVnhjZURCaVhGeDRNR05jWEhnd1pGeGNlREl3WEZ4NFlUQmNYSFV4Tmpnd1hGeDFNVGd3WlZ4Y2RUSXdNREJjWEhVeU1EQXhYRngxTWpBd01seGNkVEl3TUROY1hIVXlNREEwWEZ4MU1qQXdOVnhjZFRJd01EWmNYSFV5TURBM1hGeDFNakF3T0Z4Y2RUSXdNRGxjWEhVeU1EQmhYRngxTWpBeVpseGNkVEl3TldaY1hIVXpNREF3WEZ4MU1qQXlPRnhjZFRJd01qbGRLaWhiWGx4Y0tWMHJQeWxjWENrcFB5OHNYRzRnSUNBZ0lDQWdJR1ZzWkdGMFlTQTlJSHQ5TEZ4dUlDQWdJQ0FnSUNCemIzSjBRbmxMWlhrZ1BTQm1kVzVqZEdsdmJpQW9ZU3dnWWlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR0V1YTJWNUlDMGdZaTVyWlhrN1hHNGdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJSE52Y25SQ2VVNTFiV0psY2lBOUlHWjFibU4wYVc5dUlDaGhMQ0JpS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkRzlHYkc5aGRDaGhLU0F0SUhSdlJteHZZWFFvWWlrN1hHNGdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJR1oxYmlBOUlHWjFibU4wYVc5dUlDZ3BJSHQ5TEZ4dUlDQWdJQ0FnSUNCd2FYQmxJRDBnWm5WdVkzUnBiMjRnS0hncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUI0TzF4dUlDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQnlaV04wVUdGMGFDQTlJRkl1WDNKbFkzUlFZWFJvSUQwZ1puVnVZM1JwYjI0Z0tIZ3NJSGtzSUhjc0lHZ3NJSElwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoeUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlGdGJYQ0pOWENJc0lIZ2dLeUJ5TENCNVhTd2dXMXdpYkZ3aUxDQjNJQzBnY2lBcUlESXNJREJkTENCYlhDSmhYQ0lzSUhJc0lISXNJREFzSURBc0lERXNJSElzSUhKZExDQmJYQ0pzWENJc0lEQXNJR2dnTFNCeUlDb2dNbDBzSUZ0Y0ltRmNJaXdnY2l3Z2Npd2dNQ3dnTUN3Z01Td2dMWElzSUhKZExDQmJYQ0pzWENJc0lISWdLaUF5SUMwZ2R5d2dNRjBzSUZ0Y0ltRmNJaXdnY2l3Z2Npd2dNQ3dnTUN3Z01Td2dMWElzSUMxeVhTd2dXMXdpYkZ3aUxDQXdMQ0J5SUNvZ01pQXRJR2hkTENCYlhDSmhYQ0lzSUhJc0lISXNJREFzSURBc0lERXNJSElzSUMxeVhTd2dXMXdpZWx3aVhWMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdXMXRjSWsxY0lpd2dlQ3dnZVYwc0lGdGNJbXhjSWl3Z2R5d2dNRjBzSUZ0Y0lteGNJaXdnTUN3Z2FGMHNJRnRjSW14Y0lpd2dMWGNzSURCZExDQmJYQ0o2WENKZFhUdGNiaUFnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnWld4c2FYQnpaVkJoZEdnZ1BTQm1kVzVqZEdsdmJpQW9lQ3dnZVN3Z2NuZ3NJSEo1S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2Nua2dQVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEo1SUQwZ2NuZzdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdXMXRjSWsxY0lpd2dlQ3dnZVYwc0lGdGNJbTFjSWl3Z01Dd2dMWEo1WFN3Z1cxd2lZVndpTENCeWVDd2djbmtzSURBc0lERXNJREVzSURBc0lESWdLaUJ5ZVYwc0lGdGNJbUZjSWl3Z2NuZ3NJSEo1TENBd0xDQXhMQ0F4TENBd0xDQXRNaUFxSUhKNVhTd2dXMXdpZWx3aVhWMDdYRzRnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUdkbGRGQmhkR2dnUFNCU0xsOW5aWFJRWVhSb0lEMGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NHRjBhRG9nWm5WdVkzUnBiMjRnS0dWc0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHVnNMbUYwZEhJb1hDSndZWFJvWENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR05wY21Oc1pUb2dablZ1WTNScGIyNGdLR1ZzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR0VnUFNCbGJDNWhkSFJ5Y3p0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWld4c2FYQnpaVkJoZEdnb1lTNWplQ3dnWVM1amVTd2dZUzV5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmxiR3hwY0hObE9pQm1kVzVqZEdsdmJpQW9aV3dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdZU0E5SUdWc0xtRjBkSEp6TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJsYkd4cGNITmxVR0YwYUNoaExtTjRMQ0JoTG1ONUxDQmhMbko0TENCaExuSjVLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpXTjBPaUJtZFc1amRHbHZiaUFvWld3cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnWVNBOUlHVnNMbUYwZEhKek8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCeVpXTjBVR0YwYUNoaExuZ3NJR0V1ZVN3Z1lTNTNhV1IwYUN3Z1lTNW9aV2xuYUhRc0lHRXVjaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2FXMWhaMlU2SUdaMWJtTjBhVzl1SUNobGJDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCaElEMGdaV3d1WVhSMGNuTTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlISmxZM1JRWVhSb0tHRXVlQ3dnWVM1NUxDQmhMbmRwWkhSb0xDQmhMbWhsYVdkb2RDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdWNGREb2dablZ1WTNScGIyNGdLR1ZzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR0ppYjNnZ1BTQmxiQzVmWjJWMFFrSnZlQ2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ5WldOMFVHRjBhQ2hpWW05NExuZ3NJR0ppYjNndWVTd2dZbUp2ZUM1M2FXUjBhQ3dnWW1KdmVDNW9aV2xuYUhRcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSE5sZENBNklHWjFibU4wYVc5dUtHVnNLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHSmliM2dnUFNCbGJDNWZaMlYwUWtKdmVDZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnlaV04wVUdGMGFDaGlZbTk0TG5nc0lHSmliM2d1ZVN3Z1ltSnZlQzUzYVdSMGFDd2dZbUp2ZUM1b1pXbG5hSFFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNBdktseGNYRzRnSUNBZ0lDQWdJQ0FxSUZKaGNHaGhaV3d1YldGd1VHRjBhRnh1SUNBZ0lDQWdJQ0FnV3lCdFpYUm9iMlFnWFZ4dUlDQWdJQ0FnSUNBZ0tpcGNiaUFnSUNBZ0lDQWdJQ29nVkhKaGJuTm1iM0p0SUhSb1pTQndZWFJvSUhOMGNtbHVaeUIzYVhSb0lHZHBkbVZ1SUcxaGRISnBlQzVjYmlBZ0lDQWdJQ0FnSUQ0Z1VHRnlZVzFsZEdWeWMxeHVJQ0FnSUNBZ0lDQWdMU0J3WVhSb0lDaHpkSEpwYm1jcElIQmhkR2dnYzNSeWFXNW5YRzRnSUNBZ0lDQWdJQ0F0SUcxaGRISnBlQ0FvYjJKcVpXTjBLU0J6WldVZ1FFMWhkSEpwZUZ4dUlDQWdJQ0FnSUNBZ1BTQW9jM1J5YVc1bktTQjBjbUZ1YzJadmNtMWxaQ0J3WVhSb0lITjBjbWx1WjF4dUlDQWdJQ0FnSUNCY1hDb3ZYRzRnSUNBZ0lDQWdJRzFoY0ZCaGRHZ2dQU0JTTG0xaGNGQmhkR2dnUFNCbWRXNWpkR2x2YmlBb2NHRjBhQ3dnYldGMGNtbDRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVcxaGRISnBlQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ3WVhSb08xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhnc0lIa3NJR2tzSUdvc0lHbHBMQ0JxYWl3Z2NHRjBhR2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQndZWFJvSUQwZ2NHRjBhREpqZFhKMlpTaHdZWFJvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2FTQTlJREFzSUdscElEMGdjR0YwYUM1c1pXNW5kR2c3SUdrZ1BDQnBhVHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjR0YwYUdrZ1BTQndZWFJvVzJsZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUFvYWlBOUlERXNJR3BxSUQwZ2NHRjBhR2t1YkdWdVozUm9PeUJxSUR3Z2FtbzdJR29nS3owZ01pa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCNElEMGdiV0YwY21sNExuZ29jR0YwYUdsYmFsMHNJSEJoZEdocFcyb2dLeUF4WFNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGtnUFNCdFlYUnlhWGd1ZVNod1lYUm9hVnRxWFN3Z2NHRjBhR2xiYWlBcklERmRLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NHRjBhR2xiYWwwZ1BTQjRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd1lYUm9hVnRxSUNzZ01WMGdQU0I1TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCd1lYUm9PMXh1SUNBZ0lDQWdJQ0I5TzF4dVhHNGdJQ0FnVWk1Zlp5QTlJR2M3WEc0Z0lDQWdMeXBjWEZ4dUlDQWdJQ0FxSUZKaGNHaGhaV3d1ZEhsd1pWeHVJQ0FnSUNCYklIQnliM0JsY25SNUlDaHpkSEpwYm1jcElGMWNiaUFnSUNBZ0tpcGNiaUFnSUNBZ0tpQkRZVzRnWW1VZzRvQ2NVMVpING9DZExDRGlnSnhXVFV6aWdKMGdiM0lnWlcxd2RIa3NJR1JsY0dWdVpHbHVaeUJ2YmlCaWNtOTNjMlZ5SUhOMWNIQnZjblF1WEc0Z0lDQWdYRndxTDF4dUlDQWdJRkl1ZEhsd1pTQTlJQ2huTG5kcGJpNVRWa2RCYm1kc1pTQjhmQ0JuTG1Sdll5NXBiWEJzWlcxbGJuUmhkR2x2Ymk1b1lYTkdaV0YwZFhKbEtGd2lhSFIwY0RvdkwzZDNkeTUzTXk1dmNtY3ZWRkl2VTFaSE1URXZabVZoZEhWeVpTTkNZWE5wWTFOMGNuVmpkSFZ5WlZ3aUxDQmNJakV1TVZ3aUtTQS9JRndpVTFaSFhDSWdPaUJjSWxaTlRGd2lLVHRjYmlBZ0lDQnBaaUFvVWk1MGVYQmxJRDA5SUZ3aVZrMU1YQ0lwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR1FnUFNCbkxtUnZZeTVqY21WaGRHVkZiR1Z0Wlc1MEtGd2laR2wyWENJcExGeHVJQ0FnSUNBZ0lDQWdJQ0FnWWp0Y2JpQWdJQ0FnSUNBZ1pDNXBibTVsY2toVVRVd2dQU0FuUEhZNmMyaGhjR1VnWVdScVBWd2lNVndpTHo0bk8xeHVJQ0FnSUNBZ0lDQmlJRDBnWkM1bWFYSnpkRU5vYVd4a08xeHVJQ0FnSUNBZ0lDQmlMbk4wZVd4bExtSmxhR0YyYVc5eUlEMGdYQ0oxY213b0kyUmxabUYxYkhRalZrMU1LVndpTzF4dUlDQWdJQ0FnSUNCcFppQW9JU2hpSUNZbUlIUjVjR1Z2WmlCaUxtRmthaUE5UFNCY0ltOWlhbVZqZEZ3aUtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUNoU0xuUjVjR1VnUFNCRktUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JrSUQwZ2JuVnNiRHRjYmlBZ0lDQjlYRzRnSUNBZ0x5cGNYRnh1SUNBZ0lDQXFJRkpoY0doaFpXd3VjM1puWEc0Z0lDQWdJRnNnY0hKdmNHVnlkSGtnS0dKdmIyeGxZVzRwSUYxY2JpQWdJQ0FnS2lwY2JpQWdJQ0FnS2lCZ2RISjFaV0FnYVdZZ1luSnZkM05sY2lCemRYQndiM0owY3lCVFZrY3VYRzRnSUNBZ1hGd3FMMXh1SUNBZ0lDOHFYRnhjYmlBZ0lDQWdLaUJTWVhCb1lXVnNMblp0YkZ4dUlDQWdJQ0JiSUhCeWIzQmxjblI1SUNoaWIyOXNaV0Z1S1NCZFhHNGdJQ0FnSUNvcVhHNGdJQ0FnSUNvZ1lIUnlkV1ZnSUdsbUlHSnliM2R6WlhJZ2MzVndjRzl5ZEhNZ1ZrMU1MbHh1SUNBZ0lGeGNLaTljYmlBZ0lDQlNMbk4yWnlBOUlDRW9VaTUyYld3Z1BTQlNMblI1Y0dVZ1BUMGdYQ0pXVFV4Y0lpazdYRzRnSUNBZ1VpNWZVR0Z3WlhJZ1BTQlFZWEJsY2p0Y2JpQWdJQ0F2S2x4Y1hHNGdJQ0FnSUNvZ1VtRndhR0ZsYkM1bWJseHVJQ0FnSUNCYklIQnliM0JsY25SNUlDaHZZbXBsWTNRcElGMWNiaUFnSUNBZ0tpcGNiaUFnSUNBZ0tpQlpiM1VnWTJGdUlHRmtaQ0I1YjNWeUlHOTNiaUJ0WlhSb2IyUWdkRzhnZEdobElHTmhiblpoY3k0Z1JtOXlJR1Y0WVcxd2JHVWdhV1lnZVc5MUlIZGhiblFnZEc4Z1pISmhkeUJoSUhCcFpTQmphR0Z5ZEN4Y2JpQWdJQ0FnS2lCNWIzVWdZMkZ1SUdOeVpXRjBaU0I1YjNWeUlHOTNiaUJ3YVdVZ1kyaGhjblFnWm5WdVkzUnBiMjRnWVc1a0lITm9hWEFnYVhRZ1lYTWdZU0JTWVhCb1ljT3JiQ0J3YkhWbmFXNHVJRlJ2SUdSdklIUm9hWE5jYmlBZ0lDQWdLaUI1YjNVZ2JtVmxaQ0IwYnlCbGVIUmxibVFnZEdobElHQlNZWEJvWVdWc0xtWnVZQ0J2WW1wbFkzUXVJRmx2ZFNCemFHOTFiR1FnYlc5a2FXWjVJSFJvWlNCZ1ptNWdJRzlpYW1WamRDQmlaV1p2Y21VZ1lWeHVJQ0FnSUNBcUlGSmhjR2hodzZ0c0lHbHVjM1JoYm1ObElHbHpJR055WldGMFpXUXNJRzkwYUdWeWQybHpaU0JwZENCM2FXeHNJSFJoYTJVZ2JtOGdaV1ptWldOMExpQlFiR1ZoYzJVZ2JtOTBaU0IwYUdGMElIUm9aVnh1SUNBZ0lDQXFJR0ZpYVd4cGRIa2dabTl5SUc1aGJXVnpjR0ZqWldRZ2NHeDFaMmx1Y3lCM1lYTWdjbVZ0YjNabFpDQnBiaUJTWVhCb1lXVnNJREl1TUM0Z1NYUWdhWE1nZFhBZ2RHOGdkR2hsSUhCc2RXZHBiaUIwYjF4dUlDQWdJQ0FxSUdWdWMzVnlaU0JoYm5rZ2JtRnRaWE53WVdOcGJtY2daVzV6ZFhKbGN5QndjbTl3WlhJZ1kyOXVkR1Y0ZEM1Y2JpQWdJQ0FnUGlCVmMyRm5aVnh1SUNBZ0lDQjhJRkpoY0doaFpXd3VabTR1WVhKeWIzY2dQU0JtZFc1amRHbHZiaUFvZURFc0lIa3hMQ0I0TWl3Z2VUSXNJSE5wZW1VcElIdGNiaUFnSUNBZ2ZDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWNHRjBhQ2dnTGk0dUlDazdYRzRnSUNBZ0lId2dmVHRjYmlBZ0lDQWdmQ0F2THlCdmNpQmpjbVZoZEdVZ2JtRnRaWE53WVdObFhHNGdJQ0FnSUh3Z1VtRndhR0ZsYkM1bWJpNXRlWE4wZFdabUlEMGdlMXh1SUNBZ0lDQjhJQ0FnSUNCaGNuSnZkem9nWm5WdVkzUnBiMjRnS0NrZ2UrS0FwbjBzWEc0Z0lDQWdJSHdnSUNBZ0lITjBZWEk2SUdaMWJtTjBhVzl1SUNncElIdmlnS1o5TEZ4dUlDQWdJQ0I4SUNBZ0lDQXZMeUJsZEdQaWdLWmNiaUFnSUNBZ2ZDQjlPMXh1SUNBZ0lDQjhJSFpoY2lCd1lYQmxjaUE5SUZKaGNHaGhaV3dvTVRBc0lERXdMQ0EyTXpBc0lEUTRNQ2s3WEc0Z0lDQWdJSHdnTHk4Z2RHaGxiaUIxYzJVZ2FYUmNiaUFnSUNBZ2ZDQndZWEJsY2k1aGNuSnZkeWd4TUN3Z01UQXNJRE13TENBek1Dd2dOU2t1WVhSMGNpaDdabWxzYkRvZ1hDSWpaakF3WENKOUtUdGNiaUFnSUNBZ2ZDQndZWEJsY2k1dGVYTjBkV1ptTG1GeWNtOTNLQ2s3WEc0Z0lDQWdJSHdnY0dGd1pYSXViWGx6ZEhWbVppNXpkR0Z5S0NrN1hHNGdJQ0FnWEZ3cUwxeHVJQ0FnSUZJdVptNGdQU0J3WVhCbGNuQnliM1J2SUQwZ1VHRndaWEl1Y0hKdmRHOTBlWEJsSUQwZ1VpNXdjbTkwYjNSNWNHVTdYRzRnSUNBZ1VpNWZhV1FnUFNBd08xeHVJQ0FnSUM4cVhGeGNiaUFnSUNBZ0tpQlNZWEJvWVdWc0xtbHpYRzRnSUNBZ0lGc2diV1YwYUc5a0lGMWNiaUFnSUNBZ0tpcGNiaUFnSUNBZ0tpQklZVzVrWm5Wc0lHOW1JSEpsY0d4aFkyVnRaVzUwY3lCbWIzSWdZSFI1Y0dWdlptQWdiM0JsY21GMGIzSXVYRzRnSUNBZ0lENGdVR0Z5WVcxbGRHVnljMXh1SUNBZ0lDQXRJRzhnS09LQXBpa2dZVzU1SUc5aWFtVmpkQ0J2Y2lCd2NtbHRhWFJwZG1WY2JpQWdJQ0FnTFNCMGVYQmxJQ2h6ZEhKcGJtY3BJRzVoYldVZ2IyWWdkR2hsSUhSNWNHVXNJR2t1WlM0ZzRvQ2NjM1J5YVc1bjRvQ2RMQ0RpZ0p4bWRXNWpkR2x2YnVLQW5Td2c0b0NjYm5WdFltVnk0b0NkTENCbGRHTXVYRzRnSUNBZ0lEMGdLR0p2YjJ4bFlXNHBJR2x6SUdkcGRtVnVJSFpoYkhWbElHbHpJRzltSUdkcGRtVnVJSFI1Y0dWY2JpQWdJQ0JjWENvdlhHNGdJQ0FnVWk1cGN5QTlJR1oxYm1OMGFXOXVJQ2h2TENCMGVYQmxLU0I3WEc0Z0lDQWdJQ0FnSUhSNWNHVWdQU0JzYjNkbGNrTmhjMlV1WTJGc2JDaDBlWEJsS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dVZ1BUMGdYQ0ptYVc1cGRHVmNJaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlDRnBjMjVoYmx0b1lYTmRLQ3R2S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pTQTlQU0JjSW1GeWNtRjVYQ0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnZJR2x1YzNSaGJtTmxiMllnUVhKeVlYazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJQ0FvZEhsd1pTQTlQU0JjSW01MWJHeGNJaUFtSmlCdklEMDlQU0J1ZFd4c0tTQjhmRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2gwZVhCbElEMDlJSFI1Y0dWdlppQnZJQ1ltSUc4Z0lUMDlJRzUxYkd3cElIeDhYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLSFI1Y0dVZ1BUMGdYQ0p2WW1wbFkzUmNJaUFtSmlCdklEMDlQU0JQWW1wbFkzUW9ieWtwSUh4OFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tIUjVjR1VnUFQwZ1hDSmhjbkpoZVZ3aUlDWW1JRUZ5Y21GNUxtbHpRWEp5WVhrZ0ppWWdRWEp5WVhrdWFYTkJjbkpoZVNodktTa2dmSHhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J2WW1wbFkzUlViMU4wY21sdVp5NWpZV3hzS0c4cExuTnNhV05sS0Rnc0lDMHhLUzUwYjB4dmQyVnlRMkZ6WlNncElEMDlJSFI1Y0dVN1hHNGdJQ0FnZlR0Y2JseHVJQ0FnSUdaMWJtTjBhVzl1SUdOc2IyNWxLRzlpYWlrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JRzlpYWlBOVBTQmNJbVoxYm1OMGFXOXVYQ0lnZkh3Z1QySnFaV04wS0c5aWFpa2dJVDA5SUc5aWFpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUc5aWFqdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0IyWVhJZ2NtVnpJRDBnYm1WM0lHOWlhaTVqYjI1emRISjFZM1J2Y2p0Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2EyVjVJR2x1SUc5aWFpa2dhV1lnS0c5aWFsdG9ZWE5kS0d0bGVTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxjMXRyWlhsZElEMGdZMnh2Ym1Vb2IySnFXMnRsZVYwcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnlaWE03WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeXBjWEZ4dUlDQWdJQ0FxSUZKaGNHaGhaV3d1WVc1bmJHVmNiaUFnSUNBZ1d5QnRaWFJvYjJRZ1hWeHVJQ0FnSUNBcUtseHVJQ0FnSUNBcUlGSmxkSFZ5Ym5NZ1lXNW5iR1VnWW1WMGQyVmxiaUIwZDI4Z2IzSWdkR2h5WldVZ2NHOXBiblJ6WEc0Z0lDQWdJRDRnVUdGeVlXMWxkR1Z5YzF4dUlDQWdJQ0F0SUhneElDaHVkVzFpWlhJcElIZ2dZMjl2Y21RZ2IyWWdabWx5YzNRZ2NHOXBiblJjYmlBZ0lDQWdMU0I1TVNBb2JuVnRZbVZ5S1NCNUlHTnZiM0prSUc5bUlHWnBjbk4wSUhCdmFXNTBYRzRnSUNBZ0lDMGdlRElnS0c1MWJXSmxjaWtnZUNCamIyOXlaQ0J2WmlCelpXTnZibVFnY0c5cGJuUmNiaUFnSUNBZ0xTQjVNaUFvYm5WdFltVnlLU0I1SUdOdmIzSmtJRzltSUhObFkyOXVaQ0J3YjJsdWRGeHVJQ0FnSUNBdElIZ3pJQ2h1ZFcxaVpYSXBJQ052Y0hScGIyNWhiQ0I0SUdOdmIzSmtJRzltSUhSb2FYSmtJSEJ2YVc1MFhHNGdJQ0FnSUMwZ2VUTWdLRzUxYldKbGNpa2dJMjl3ZEdsdmJtRnNJSGtnWTI5dmNtUWdiMllnZEdocGNtUWdjRzlwYm5SY2JpQWdJQ0FnUFNBb2JuVnRZbVZ5S1NCaGJtZHNaU0JwYmlCa1pXZHlaV1Z6TGx4dUlDQWdJRnhjS2k5Y2JpQWdJQ0JTTG1GdVoyeGxJRDBnWm5WdVkzUnBiMjRnS0hneExDQjVNU3dnZURJc0lIa3lMQ0I0TXl3Z2VUTXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIZ3pJRDA5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUI0SUQwZ2VERWdMU0I0TWl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCNUlEMGdlVEVnTFNCNU1qdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hlQ0FtSmlBaGVTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQXdPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJQ2d4T0RBZ0t5QnRZWFJvTG1GMFlXNHlLQzE1TENBdGVDa2dLaUF4T0RBZ0x5QlFTU0FySURNMk1Da2dKU0F6TmpBN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdVaTVoYm1kc1pTaDRNU3dnZVRFc0lIZ3pMQ0I1TXlrZ0xTQlNMbUZ1WjJ4bEtIZ3lMQ0I1TWl3Z2VETXNJSGt6S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgwN1hHNGdJQ0FnTHlwY1hGeHVJQ0FnSUNBcUlGSmhjR2hoWld3dWNtRmtYRzRnSUNBZ0lGc2diV1YwYUc5a0lGMWNiaUFnSUNBZ0tpcGNiaUFnSUNBZ0tpQlVjbUZ1YzJadmNtMGdZVzVuYkdVZ2RHOGdjbUZrYVdGdWMxeHVJQ0FnSUNBK0lGQmhjbUZ0WlhSbGNuTmNiaUFnSUNBZ0xTQmtaV2NnS0c1MWJXSmxjaWtnWVc1bmJHVWdhVzRnWkdWbmNtVmxjMXh1SUNBZ0lDQTlJQ2h1ZFcxaVpYSXBJR0Z1WjJ4bElHbHVJSEpoWkdsaGJuTXVYRzRnSUNBZ1hGd3FMMXh1SUNBZ0lGSXVjbUZrSUQwZ1puVnVZM1JwYjI0Z0tHUmxaeWtnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWkdWbklDVWdNell3SUNvZ1VFa2dMeUF4T0RBN1hHNGdJQ0FnZlR0Y2JpQWdJQ0F2S2x4Y1hHNGdJQ0FnSUNvZ1VtRndhR0ZsYkM1a1pXZGNiaUFnSUNBZ1d5QnRaWFJvYjJRZ1hWeHVJQ0FnSUNBcUtseHVJQ0FnSUNBcUlGUnlZVzV6Wm05eWJTQmhibWRzWlNCMGJ5QmtaV2R5WldWelhHNGdJQ0FnSUQ0Z1VHRnlZVzFsZEdWeWMxeHVJQ0FnSUNBdElISmhaQ0FvYm5WdFltVnlLU0JoYm1kc1pTQnBiaUJ5WVdScFlXNXpYRzRnSUNBZ0lEMGdLRzUxYldKbGNpa2dZVzVuYkdVZ2FXNGdaR1ZuY21WbGN5NWNiaUFnSUNCY1hDb3ZYRzRnSUNBZ1VpNWtaV2NnUFNCbWRXNWpkR2x2YmlBb2NtRmtLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJOWVhSb0xuSnZkVzVrSUNnb2NtRmtJQ29nTVRnd0lDOGdVRWtsSURNMk1Da3FJREV3TURBcElDOGdNVEF3TUR0Y2JpQWdJQ0I5TzF4dUlDQWdJQzhxWEZ4Y2JpQWdJQ0FnS2lCU1lYQm9ZV1ZzTG5OdVlYQlViMXh1SUNBZ0lDQmJJRzFsZEdodlpDQmRYRzRnSUNBZ0lDb3FYRzRnSUNBZ0lDb2dVMjVoY0hNZ1oybDJaVzRnZG1Gc2RXVWdkRzhnWjJsMlpXNGdaM0pwWkM1Y2JpQWdJQ0FnUGlCUVlYSmhiV1YwWlhKelhHNGdJQ0FnSUMwZ2RtRnNkV1Z6SUNoaGNuSmhlWHh1ZFcxaVpYSXBJR2RwZG1WdUlHRnljbUY1SUc5bUlIWmhiSFZsY3lCdmNpQnpkR1Z3SUc5bUlIUm9aU0JuY21sa1hHNGdJQ0FnSUMwZ2RtRnNkV1VnS0c1MWJXSmxjaWtnZG1Gc2RXVWdkRzhnWVdScWRYTjBYRzRnSUNBZ0lDMGdkRzlzWlhKaGJtTmxJQ2h1ZFcxaVpYSXBJQ052Y0hScGIyNWhiQ0IwYjJ4bGNtRnVZMlVnWm05eUlITnVZWEJ3YVc1bkxpQkVaV1poZFd4MElHbHpJR0F4TUdBdVhHNGdJQ0FnSUQwZ0tHNTFiV0psY2lrZ1lXUnFkWE4wWldRZ2RtRnNkV1V1WEc0Z0lDQWdYRndxTDF4dUlDQWdJRkl1YzI1aGNGUnZJRDBnWm5WdVkzUnBiMjRnS0haaGJIVmxjeXdnZG1Gc2RXVXNJSFJ2YkdWeVlXNWpaU2tnZTF4dUlDQWdJQ0FnSUNCMGIyeGxjbUZ1WTJVZ1BTQlNMbWx6S0hSdmJHVnlZVzVqWlN3Z1hDSm1hVzVwZEdWY0lpa2dQeUIwYjJ4bGNtRnVZMlVnT2lBeE1EdGNiaUFnSUNBZ0lDQWdhV1lnS0ZJdWFYTW9kbUZzZFdWekxDQmhjbkpoZVNrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQnBJRDBnZG1Gc2RXVnpMbXhsYm1kMGFEdGNiaUFnSUNBZ0lDQWdJQ0FnSUhkb2FXeGxJQ2hwTFMwcElHbG1JQ2hoWW5Nb2RtRnNkV1Z6VzJsZElDMGdkbUZzZFdVcElEdzlJSFJ2YkdWeVlXNWpaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIyWVd4MVpYTmJhVjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaWE1nUFNBcmRtRnNkV1Z6TzF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhKbGJTQTlJSFpoYkhWbElDVWdkbUZzZFdWek8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tISmxiU0E4SUhSdmJHVnlZVzVqWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMllXeDFaU0F0SUhKbGJUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoeVpXMGdQaUIyWVd4MVpYTWdMU0IwYjJ4bGNtRnVZMlVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZG1Gc2RXVWdMU0J5WlcwZ0t5QjJZV3gxWlhNN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhaaGJIVmxPMXh1SUNBZ0lIMDdYRzVjYmlBZ0lDQXZLbHhjWEc0Z0lDQWdJQ29nVW1Gd2FHRmxiQzVqY21WaGRHVlZWVWxFWEc0Z0lDQWdJRnNnYldWMGFHOWtJRjFjYmlBZ0lDQWdLaXBjYmlBZ0lDQWdLaUJTWlhSMWNtNXpJRkpHUXpReE1qSXNJSFpsY25OcGIyNGdOQ0JKUkZ4dUlDQWdJRnhjS2k5Y2JpQWdJQ0IyWVhJZ1kzSmxZWFJsVlZWSlJDQTlJRkl1WTNKbFlYUmxWVlZKUkNBOUlDaG1kVzVqZEdsdmJpQW9kWFZwWkZKbFowVjRMQ0IxZFdsa1VtVndiR0ZqWlhJcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCY0luaDRlSGg0ZUhoNExYaDRlSGd0TkhoNGVDMTVlSGg0TFhoNGVIaDRlSGg0ZUhoNGVGd2lMbkpsY0d4aFkyVW9kWFZwWkZKbFowVjRMQ0IxZFdsa1VtVndiR0ZqWlhJcExuUnZWWEJ3WlhKRFlYTmxLQ2s3WEc0Z0lDQWdJQ0FnSUgwN1hHNGdJQ0FnZlNrb0wxdDRlVjB2Wnl3Z1puVnVZM1JwYjI0Z0tHTXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlISWdQU0J0WVhSb0xuSmhibVJ2YlNncElDb2dNVFlnZkNBd0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnZGlBOUlHTWdQVDBnWENKNFhDSWdQeUJ5SURvZ0tISWdKaUF6SUh3Z09DazdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjJMblJ2VTNSeWFXNW5LREUyS1R0Y2JpQWdJQ0I5S1R0Y2JseHVJQ0FnSUM4cVhGeGNiaUFnSUNBZ0tpQlNZWEJvWVdWc0xuTmxkRmRwYm1SdmQxeHVJQ0FnSUNCYklHMWxkR2h2WkNCZFhHNGdJQ0FnSUNvcVhHNGdJQ0FnSUNvZ1ZYTmxaQ0IzYUdWdUlIbHZkU0J1WldWa0lIUnZJR1J5WVhjZ2FXNGdZQ1pzZER0cFpuSmhiV1UrWUM0Z1UzZHBkR05vWldRZ2QybHVaRzkzSUhSdklIUm9aU0JwWm5KaGJXVWdiMjVsTGx4dUlDQWdJQ0ErSUZCaGNtRnRaWFJsY25OY2JpQWdJQ0FnTFNCdVpYZDNhVzRnS0hkcGJtUnZkeWtnYm1WM0lIZHBibVJ2ZHlCdlltcGxZM1JjYmlBZ0lDQmNYQ292WEc0Z0lDQWdVaTV6WlhSWGFXNWtiM2NnUFNCbWRXNWpkR2x2YmlBb2JtVjNkMmx1S1NCN1hHNGdJQ0FnSUNBZ0lHVjJaU2hjSW5KaGNHaGhaV3d1YzJWMFYybHVaRzkzWENJc0lGSXNJR2N1ZDJsdUxDQnVaWGQzYVc0cE8xeHVJQ0FnSUNBZ0lDQm5MbmRwYmlBOUlHNWxkM2RwYmp0Y2JpQWdJQ0FnSUNBZ1p5NWtiMk1nUFNCbkxuZHBiaTVrYjJOMWJXVnVkRHRjYmlBZ0lDQWdJQ0FnYVdZZ0tGSXVYMlZ1WjJsdVpTNXBibWwwVjJsdUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCU0xsOWxibWRwYm1VdWFXNXBkRmRwYmlobkxuZHBiaWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5TzF4dUlDQWdJSFpoY2lCMGIwaGxlQ0E5SUdaMWJtTjBhVzl1SUNoamIyeHZjaWtnZTF4dUlDQWdJQ0FnSUNCcFppQW9VaTUyYld3cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklHaDBkSEE2THk5a1pXRnVMbVZrZDJGeVpITXVibUZ0WlM5M1pXSnNiMmN2TWpBd09TOHhNQzlqYjI1MlpYSjBMV0Z1ZVMxamIyeHZkWEl0ZG1Gc2RXVXRkRzh0YUdWNExXbHVMVzF6YVdVdlhHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2RISnBiU0E5SUM5ZVhGeHpLM3hjWEhNckpDOW5PMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR0p2WkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR1J2WTNWdElEMGdibVYzSUVGamRHbDJaVmhQWW1wbFkzUW9YQ0pvZEcxc1ptbHNaVndpS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa2IyTjFiUzUzY21sMFpTaGNJanhpYjJSNVBsd2lLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrYjJOMWJTNWpiRzl6WlNncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnZaQ0E5SUdSdlkzVnRMbUp2WkhrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5SUdOaGRHTm9LR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWIyUWdQU0JqY21WaGRHVlFiM0IxY0NncExtUnZZM1Z0Wlc1MExtSnZaSGs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdjbUZ1WjJVZ1BTQmliMlF1WTNKbFlYUmxWR1Y0ZEZKaGJtZGxLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBiMGhsZUNBOUlHTmhZMmhsY2lobWRXNWpkR2x2YmlBb1kyOXNiM0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWIyUXVjM1I1YkdVdVkyOXNiM0lnUFNCVGRISW9ZMjlzYjNJcExuSmxjR3hoWTJVb2RISnBiU3dnUlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCMllXeDFaU0E5SUhKaGJtZGxMbkYxWlhKNVEyOXRiV0Z1WkZaaGJIVmxLRndpUm05eVpVTnZiRzl5WENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpTQTlJQ2dvZG1Gc2RXVWdKaUF5TlRVcElEdzhJREUyS1NCOElDaDJZV3gxWlNBbUlEWTFNamd3S1NCOElDZ29kbUZzZFdVZ0ppQXhOamN4TVRZNE1Da2dQajQrSURFMktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRndpSTF3aUlDc2dLRndpTURBd01EQXdYQ0lnS3lCMllXeDFaUzUwYjFOMGNtbHVaeWd4TmlrcExuTnNhV05sS0MwMktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR05oZEdOb0tHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUZ3aWJtOXVaVndpTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdrZ1BTQm5MbVJ2WXk1amNtVmhkR1ZGYkdWdFpXNTBLRndpYVZ3aUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdrdWRHbDBiR1VnUFNCY0lsSmhjR2hoWEZ4NFpXSnNJRU52Ykc5MWNpQlFhV05yWlhKY0lqdGNiaUFnSUNBZ0lDQWdJQ0FnSUdrdWMzUjViR1V1WkdsemNHeGhlU0E5SUZ3aWJtOXVaVndpTzF4dUlDQWdJQ0FnSUNBZ0lDQWdaeTVrYjJNdVltOWtlUzVoY0hCbGJtUkRhR2xzWkNocEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSdlNHVjRJRDBnWTJGamFHVnlLR1oxYm1OMGFXOXVJQ2hqYjJ4dmNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2t1YzNSNWJHVXVZMjlzYjNJZ1BTQmpiMnh2Y2p0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWnk1a2IyTXVaR1ZtWVhWc2RGWnBaWGN1WjJWMFEyOXRjSFYwWldSVGRIbHNaU2hwTENCRktTNW5aWFJRY205d1pYSjBlVlpoYkhWbEtGd2lZMjlzYjNKY0lpazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkRzlJWlhnb1kyOXNiM0lwTzF4dUlDQWdJSDBzWEc0Z0lDQWdhSE5pZEc5VGRISnBibWNnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmNJbWh6WWloY0lpQXJJRnQwYUdsekxtZ3NJSFJvYVhNdWN5d2dkR2hwY3k1aVhTQXJJRndpS1Z3aU8xeHVJQ0FnSUgwc1hHNGdJQ0FnYUhOc2RHOVRkSEpwYm1jZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJjSW1oemJDaGNJaUFySUZ0MGFHbHpMbWdzSUhSb2FYTXVjeXdnZEdocGN5NXNYU0FySUZ3aUtWd2lPMXh1SUNBZ0lIMHNYRzRnSUNBZ2NtZGlkRzlUZEhKcGJtY2dQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbWhsZUR0Y2JpQWdJQ0I5TEZ4dUlDQWdJSEJ5WlhCaGNtVlNSMElnUFNCbWRXNWpkR2x2YmlBb2Npd2daeXdnWWlrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvWnlBOVBTQnVkV3hzSUNZbUlGSXVhWE1vY2l3Z1hDSnZZbXBsWTNSY0lpa2dKaVlnWENKeVhDSWdhVzRnY2lBbUppQmNJbWRjSWlCcGJpQnlJQ1ltSUZ3aVlsd2lJR2x1SUhJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdJZ1BTQnlMbUk3WEc0Z0lDQWdJQ0FnSUNBZ0lDQm5JRDBnY2k1bk8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY2lBOUlISXVjanRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCcFppQW9aeUE5UFNCdWRXeHNJQ1ltSUZJdWFYTW9jaXdnYzNSeWFXNW5LU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdOc2NpQTlJRkl1WjJWMFVrZENLSElwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjaUE5SUdOc2NpNXlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1p5QTlJR05zY2k1bk8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWWlBOUlHTnNjaTVpTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHbG1JQ2h5SUQ0Z01TQjhmQ0JuSUQ0Z01TQjhmQ0JpSUQ0Z01Ta2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NpQXZQU0F5TlRVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JuSUM4OUlESTFOVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHSWdMejBnTWpVMU8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRnR5TENCbkxDQmlYVHRjYmlBZ0lDQjlMRnh1SUNBZ0lIQmhZMnRoWjJWU1IwSWdQU0JtZFc1amRHbHZiaUFvY2l3Z1p5d2dZaXdnYnlrZ2UxeHVJQ0FnSUNBZ0lDQnlJQ285SURJMU5UdGNiaUFnSUNBZ0lDQWdaeUFxUFNBeU5UVTdYRzRnSUNBZ0lDQWdJR0lnS2owZ01qVTFPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2NtZGlJRDBnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjam9nY2l4Y2JpQWdJQ0FnSUNBZ0lDQWdJR2M2SUdjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JpT2lCaUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnYUdWNE9pQlNMbkpuWWloeUxDQm5MQ0JpS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJ2VTNSeWFXNW5PaUJ5WjJKMGIxTjBjbWx1WjF4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ0lDQlNMbWx6S0c4c0lGd2labWx1YVhSbFhDSXBJQ1ltSUNoeVoySXViM0JoWTJsMGVTQTlJRzhwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnY21kaU8xeHVJQ0FnSUgwN1hHNWNiaUFnSUNBdktseGNYRzRnSUNBZ0lDb2dVbUZ3YUdGbGJDNWpiMnh2Y2x4dUlDQWdJQ0JiSUcxbGRHaHZaQ0JkWEc0Z0lDQWdJQ29xWEc0Z0lDQWdJQ29nVUdGeWMyVnpJSFJvWlNCamIyeHZjaUJ6ZEhKcGJtY2dZVzVrSUhKbGRIVnlibk1nYjJKcVpXTjBJSGRwZEdnZ1lXeHNJSFpoYkhWbGN5Qm1iM0lnZEdobElHZHBkbVZ1SUdOdmJHOXlMbHh1SUNBZ0lDQStJRkJoY21GdFpYUmxjbk5jYmlBZ0lDQWdMU0JqYkhJZ0tITjBjbWx1WnlrZ1kyOXNiM0lnYzNSeWFXNW5JR2x1SUc5dVpTQnZaaUIwYUdVZ2MzVndjRzl5ZEdWa0lHWnZjbTFoZEhNZ0tITmxaU0JBVW1Gd2FHRmxiQzVuWlhSU1IwSXBYRzRnSUNBZ0lEMGdLRzlpYW1WamRDa2dRMjl0WW1sdVpXUWdVa2RDSUNZZ1NGTkNJRzlpYW1WamRDQnBiaUJtYjNKdFlYUTZYRzRnSUNBZ0lHOGdlMXh1SUNBZ0lDQnZJQ0FnSUNCeUlDaHVkVzFpWlhJcElISmxaQ3hjYmlBZ0lDQWdieUFnSUNBZ1p5QW9iblZ0WW1WeUtTQm5jbVZsYml4Y2JpQWdJQ0FnYnlBZ0lDQWdZaUFvYm5WdFltVnlLU0JpYkhWbExGeHVJQ0FnSUNCdklDQWdJQ0JvWlhnZ0tITjBjbWx1WnlrZ1kyOXNiM0lnYVc0Z1NGUk5UQzlEVTFNZ1ptOXliV0YwT2lBajRvQ2k0b0NpNG9DaTRvQ2k0b0NpNG9DaUxGeHVJQ0FnSUNCdklDQWdJQ0JsY25KdmNpQW9ZbTl2YkdWaGJpa2dZSFJ5ZFdWZ0lHbG1JSE4wY21sdVp5QmpZVzdpZ0psMElHSmxJSEJoY25ObFpDeGNiaUFnSUNBZ2J5QWdJQ0FnYUNBb2JuVnRZbVZ5S1NCb2RXVXNYRzRnSUNBZ0lHOGdJQ0FnSUhNZ0tHNTFiV0psY2lrZ2MyRjBkWEpoZEdsdmJpeGNiaUFnSUNBZ2J5QWdJQ0FnZGlBb2JuVnRZbVZ5S1NCMllXeDFaU0FvWW5KcFoyaDBibVZ6Y3lrc1hHNGdJQ0FnSUc4Z0lDQWdJR3dnS0c1MWJXSmxjaWtnYkdsbmFIUnVaWE56WEc0Z0lDQWdJRzhnZlZ4dUlDQWdJRnhjS2k5Y2JpQWdJQ0JTTG1OdmJHOXlJRDBnWm5WdVkzUnBiMjRnS0dOc2Npa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2NtZGlPMXh1SUNBZ0lDQWdJQ0JwWmlBb1VpNXBjeWhqYkhJc0lGd2liMkpxWldOMFhDSXBJQ1ltSUZ3aWFGd2lJR2x1SUdOc2NpQW1KaUJjSW5OY0lpQnBiaUJqYkhJZ0ppWWdYQ0ppWENJZ2FXNGdZMnh5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WjJJZ1BTQlNMbWh6WWpKeVoySW9ZMnh5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05zY2k1eUlEMGdjbWRpTG5JN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYkhJdVp5QTlJSEpuWWk1bk8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJ4eUxtSWdQU0J5WjJJdVlqdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOc2NpNW9aWGdnUFNCeVoySXVhR1Y0TzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tGSXVhWE1vWTJ4eUxDQmNJbTlpYW1WamRGd2lLU0FtSmlCY0ltaGNJaUJwYmlCamJISWdKaVlnWENKelhDSWdhVzRnWTJ4eUlDWW1JRndpYkZ3aUlHbHVJR05zY2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21kaUlEMGdVaTVvYzJ3eWNtZGlLR05zY2lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYkhJdWNpQTlJSEpuWWk1eU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJ4eUxtY2dQU0J5WjJJdVp6dGNiaUFnSUNBZ0lDQWdJQ0FnSUdOc2NpNWlJRDBnY21kaUxtSTdYRzRnSUNBZ0lDQWdJQ0FnSUNCamJISXVhR1Y0SUQwZ2NtZGlMbWhsZUR0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoU0xtbHpLR05zY2l3Z1hDSnpkSEpwYm1kY0lpa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYkhJZ1BTQlNMbWRsZEZKSFFpaGpiSElwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRkl1YVhNb1kyeHlMQ0JjSW05aWFtVmpkRndpS1NBbUppQmNJbkpjSWlCcGJpQmpiSElnSmlZZ1hDSm5YQ0lnYVc0Z1kyeHlJQ1ltSUZ3aVlsd2lJR2x1SUdOc2Npa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpuWWlBOUlGSXVjbWRpTW1oemJDaGpiSElwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOc2NpNW9JRDBnY21kaUxtZzdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMnh5TG5NZ1BTQnlaMkl1Y3p0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamJISXViQ0E5SUhKbllpNXNPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpuWWlBOUlGSXVjbWRpTW1oellpaGpiSElwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOc2NpNTJJRDBnY21kaUxtSTdYRzRnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOc2NpQTlJSHRvWlhnNklGd2libTl1WlZ3aWZUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiSEl1Y2lBOUlHTnNjaTVuSUQwZ1kyeHlMbUlnUFNCamJISXVhQ0E5SUdOc2NpNXpJRDBnWTJ4eUxuWWdQU0JqYkhJdWJDQTlJQzB4TzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdOc2NpNTBiMU4wY21sdVp5QTlJSEpuWW5SdlUzUnlhVzVuTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWTJ4eU8xeHVJQ0FnSUgwN1hHNGdJQ0FnTHlwY1hGeHVJQ0FnSUNBcUlGSmhjR2hoWld3dWFITmlNbkpuWWx4dUlDQWdJQ0JiSUcxbGRHaHZaQ0JkWEc0Z0lDQWdJQ29xWEc0Z0lDQWdJQ29nUTI5dWRtVnlkSE1nU0ZOQ0lIWmhiSFZsY3lCMGJ5QlNSMElnYjJKcVpXTjBMbHh1SUNBZ0lDQStJRkJoY21GdFpYUmxjbk5jYmlBZ0lDQWdMU0JvSUNodWRXMWlaWElwSUdoMVpWeHVJQ0FnSUNBdElITWdLRzUxYldKbGNpa2djMkYwZFhKaGRHbHZibHh1SUNBZ0lDQXRJSFlnS0c1MWJXSmxjaWtnZG1Gc2RXVWdiM0lnWW5KcFoyaDBibVZ6YzF4dUlDQWdJQ0E5SUNodlltcGxZM1FwSUZKSFFpQnZZbXBsWTNRZ2FXNGdabTl5YldGME9seHVJQ0FnSUNCdklIdGNiaUFnSUNBZ2J5QWdJQ0FnY2lBb2JuVnRZbVZ5S1NCeVpXUXNYRzRnSUNBZ0lHOGdJQ0FnSUdjZ0tHNTFiV0psY2lrZ1ozSmxaVzRzWEc0Z0lDQWdJRzhnSUNBZ0lHSWdLRzUxYldKbGNpa2dZbXgxWlN4Y2JpQWdJQ0FnYnlBZ0lDQWdhR1Y0SUNoemRISnBibWNwSUdOdmJHOXlJR2x1SUVoVVRVd3ZRMU5USUdadmNtMWhkRG9nSStLQW91S0FvdUtBb3VLQW91S0FvdUtBb2x4dUlDQWdJQ0J2SUgxY2JpQWdJQ0JjWENvdlhHNGdJQ0FnVWk1b2MySXljbWRpSUQwZ1puVnVZM1JwYjI0Z0tHZ3NJSE1zSUhZc0lHOHBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11YVhNb2FDd2dYQ0p2WW1wbFkzUmNJaWtnSmlZZ1hDSm9YQ0lnYVc0Z2FDQW1KaUJjSW5OY0lpQnBiaUJvSUNZbUlGd2lZbHdpSUdsdUlHZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWWdQU0JvTG1JN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6SUQwZ2FDNXpPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2J5QTlJR2d1Ynp0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2dnUFNCb0xtZzdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYUNBcVBTQXpOakE3WEc0Z0lDQWdJQ0FnSUhaaGNpQlNMQ0JITENCQ0xDQllMQ0JETzF4dUlDQWdJQ0FnSUNCb0lEMGdLR2dnSlNBek5qQXBJQzhnTmpBN1hHNGdJQ0FnSUNBZ0lFTWdQU0IySUNvZ2N6dGNiaUFnSUNBZ0lDQWdXQ0E5SUVNZ0tpQW9NU0F0SUdGaWN5aG9JQ1VnTWlBdElERXBLVHRjYmlBZ0lDQWdJQ0FnVWlBOUlFY2dQU0JDSUQwZ2RpQXRJRU03WEc1Y2JpQWdJQ0FnSUNBZ2FDQTlJSDUrYUR0Y2JpQWdJQ0FnSUNBZ1VpQXJQU0JiUXl3Z1dDd2dNQ3dnTUN3Z1dDd2dRMTFiYUYwN1hHNGdJQ0FnSUNBZ0lFY2dLejBnVzFnc0lFTXNJRU1zSUZnc0lEQXNJREJkVzJoZE8xeHVJQ0FnSUNBZ0lDQkNJQ3M5SUZzd0xDQXdMQ0JZTENCRExDQkRMQ0JZWFZ0b1hUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIQmhZMnRoWjJWU1IwSW9VaXdnUnl3Z1Fpd2dieWs3WEc0Z0lDQWdmVHRjYmlBZ0lDQXZLbHhjWEc0Z0lDQWdJQ29nVW1Gd2FHRmxiQzVvYzJ3eWNtZGlYRzRnSUNBZ0lGc2diV1YwYUc5a0lGMWNiaUFnSUNBZ0tpcGNiaUFnSUNBZ0tpQkRiMjUyWlhKMGN5QklVMHdnZG1Gc2RXVnpJSFJ2SUZKSFFpQnZZbXBsWTNRdVhHNGdJQ0FnSUQ0Z1VHRnlZVzFsZEdWeWMxeHVJQ0FnSUNBdElHZ2dLRzUxYldKbGNpa2dhSFZsWEc0Z0lDQWdJQzBnY3lBb2JuVnRZbVZ5S1NCellYUjFjbUYwYVc5dVhHNGdJQ0FnSUMwZ2JDQW9iblZ0WW1WeUtTQnNkVzFwYm05emFYUjVYRzRnSUNBZ0lEMGdLRzlpYW1WamRDa2dVa2RDSUc5aWFtVmpkQ0JwYmlCbWIzSnRZWFE2WEc0Z0lDQWdJRzhnZTF4dUlDQWdJQ0J2SUNBZ0lDQnlJQ2h1ZFcxaVpYSXBJSEpsWkN4Y2JpQWdJQ0FnYnlBZ0lDQWdaeUFvYm5WdFltVnlLU0JuY21WbGJpeGNiaUFnSUNBZ2J5QWdJQ0FnWWlBb2JuVnRZbVZ5S1NCaWJIVmxMRnh1SUNBZ0lDQnZJQ0FnSUNCb1pYZ2dLSE4wY21sdVp5a2dZMjlzYjNJZ2FXNGdTRlJOVEM5RFUxTWdabTl5YldGME9pQWo0b0NpNG9DaTRvQ2k0b0NpNG9DaTRvQ2lYRzRnSUNBZ0lHOGdmVnh1SUNBZ0lGeGNLaTljYmlBZ0lDQlNMbWh6YkRKeVoySWdQU0JtZFc1amRHbHZiaUFvYUN3Z2N5d2diQ3dnYnlrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NXBjeWhvTENCY0ltOWlhbVZqZEZ3aUtTQW1KaUJjSW1oY0lpQnBiaUJvSUNZbUlGd2ljMXdpSUdsdUlHZ2dKaVlnWENKc1hDSWdhVzRnYUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYkNBOUlHZ3ViRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITWdQU0JvTG5NN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JvSUQwZ2FDNW9PMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUlDaG9JRDRnTVNCOGZDQnpJRDRnTVNCOGZDQnNJRDRnTVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYUNBdlBTQXpOakE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpJQzg5SURFd01EdGNiaUFnSUNBZ0lDQWdJQ0FnSUd3Z0x6MGdNVEF3TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHZ2dLajBnTXpZd08xeHVJQ0FnSUNBZ0lDQjJZWElnVWl3Z1J5d2dRaXdnV0N3Z1F6dGNiaUFnSUNBZ0lDQWdhQ0E5SUNob0lDVWdNell3S1NBdklEWXdPMXh1SUNBZ0lDQWdJQ0JESUQwZ01pQXFJSE1nS2lBb2JDQThJQzQxSUQ4Z2JDQTZJREVnTFNCc0tUdGNiaUFnSUNBZ0lDQWdXQ0E5SUVNZ0tpQW9NU0F0SUdGaWN5aG9JQ1VnTWlBdElERXBLVHRjYmlBZ0lDQWdJQ0FnVWlBOUlFY2dQU0JDSUQwZ2JDQXRJRU1nTHlBeU8xeHVYRzRnSUNBZ0lDQWdJR2dnUFNCK2ZtZzdYRzRnSUNBZ0lDQWdJRklnS3owZ1cwTXNJRmdzSURBc0lEQXNJRmdzSUVOZFcyaGRPMXh1SUNBZ0lDQWdJQ0JISUNzOUlGdFlMQ0JETENCRExDQllMQ0F3TENBd1hWdG9YVHRjYmlBZ0lDQWdJQ0FnUWlBclBTQmJNQ3dnTUN3Z1dDd2dReXdnUXl3Z1dGMWJhRjA3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ3WVdOcllXZGxVa2RDS0ZJc0lFY3NJRUlzSUc4cE8xeHVJQ0FnSUgwN1hHNGdJQ0FnTHlwY1hGeHVJQ0FnSUNBcUlGSmhjR2hoWld3dWNtZGlNbWh6WWx4dUlDQWdJQ0JiSUcxbGRHaHZaQ0JkWEc0Z0lDQWdJQ29xWEc0Z0lDQWdJQ29nUTI5dWRtVnlkSE1nVWtkQ0lIWmhiSFZsY3lCMGJ5QklVMElnYjJKcVpXTjBMbHh1SUNBZ0lDQStJRkJoY21GdFpYUmxjbk5jYmlBZ0lDQWdMU0J5SUNodWRXMWlaWElwSUhKbFpGeHVJQ0FnSUNBdElHY2dLRzUxYldKbGNpa2daM0psWlc1Y2JpQWdJQ0FnTFNCaUlDaHVkVzFpWlhJcElHSnNkV1ZjYmlBZ0lDQWdQU0FvYjJKcVpXTjBLU0JJVTBJZ2IySnFaV04wSUdsdUlHWnZjbTFoZERwY2JpQWdJQ0FnYnlCN1hHNGdJQ0FnSUc4Z0lDQWdJR2dnS0c1MWJXSmxjaWtnYUhWbFhHNGdJQ0FnSUc4Z0lDQWdJSE1nS0c1MWJXSmxjaWtnYzJGMGRYSmhkR2x2Ymx4dUlDQWdJQ0J2SUNBZ0lDQmlJQ2h1ZFcxaVpYSXBJR0p5YVdkb2RHNWxjM05jYmlBZ0lDQWdieUI5WEc0Z0lDQWdYRndxTDF4dUlDQWdJRkl1Y21kaU1taHpZaUE5SUdaMWJtTjBhVzl1SUNoeUxDQm5MQ0JpS1NCN1hHNGdJQ0FnSUNBZ0lHSWdQU0J3Y21Wd1lYSmxVa2RDS0hJc0lHY3NJR0lwTzF4dUlDQWdJQ0FnSUNCeUlEMGdZbHN3WFR0Y2JpQWdJQ0FnSUNBZ1p5QTlJR0piTVYwN1hHNGdJQ0FnSUNBZ0lHSWdQU0JpV3pKZE8xeHVYRzRnSUNBZ0lDQWdJSFpoY2lCSUxDQlRMQ0JXTENCRE8xeHVJQ0FnSUNBZ0lDQldJRDBnYlcxaGVDaHlMQ0JuTENCaUtUdGNiaUFnSUNBZ0lDQWdReUE5SUZZZ0xTQnRiV2x1S0hJc0lHY3NJR0lwTzF4dUlDQWdJQ0FnSUNCSUlEMGdLRU1nUFQwZ01DQS9JRzUxYkd3Z09seHVJQ0FnSUNBZ0lDQWdJQ0FnSUZZZ1BUMGdjaUEvSUNobklDMGdZaWtnTHlCRElEcGNiaUFnSUNBZ0lDQWdJQ0FnSUNCV0lEMDlJR2NnUHlBb1lpQXRJSElwSUM4Z1F5QXJJRElnT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2h5SUMwZ1p5a2dMeUJESUNzZ05GeHVJQ0FnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ1NDQTlJQ2dvU0NBcklETTJNQ2tnSlNBMktTQXFJRFl3SUM4Z016WXdPMXh1SUNBZ0lDQWdJQ0JUSUQwZ1F5QTlQU0F3SUQ4Z01DQTZJRU1nTHlCV08xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2UyZzZJRWdzSUhNNklGTXNJR0k2SUZZc0lIUnZVM1J5YVc1bk9pQm9jMkowYjFOMGNtbHVaMzA3WEc0Z0lDQWdmVHRjYmlBZ0lDQXZLbHhjWEc0Z0lDQWdJQ29nVW1Gd2FHRmxiQzV5WjJJeWFITnNYRzRnSUNBZ0lGc2diV1YwYUc5a0lGMWNiaUFnSUNBZ0tpcGNiaUFnSUNBZ0tpQkRiMjUyWlhKMGN5QlNSMElnZG1Gc2RXVnpJSFJ2SUVoVFRDQnZZbXBsWTNRdVhHNGdJQ0FnSUQ0Z1VHRnlZVzFsZEdWeWMxeHVJQ0FnSUNBdElISWdLRzUxYldKbGNpa2djbVZrWEc0Z0lDQWdJQzBnWnlBb2JuVnRZbVZ5S1NCbmNtVmxibHh1SUNBZ0lDQXRJR0lnS0c1MWJXSmxjaWtnWW14MVpWeHVJQ0FnSUNBOUlDaHZZbXBsWTNRcElFaFRUQ0J2WW1wbFkzUWdhVzRnWm05eWJXRjBPbHh1SUNBZ0lDQnZJSHRjYmlBZ0lDQWdieUFnSUNBZ2FDQW9iblZ0WW1WeUtTQm9kV1ZjYmlBZ0lDQWdieUFnSUNBZ2N5QW9iblZ0WW1WeUtTQnpZWFIxY21GMGFXOXVYRzRnSUNBZ0lHOGdJQ0FnSUd3Z0tHNTFiV0psY2lrZ2JIVnRhVzV2YzJsMGVWeHVJQ0FnSUNCdklIMWNiaUFnSUNCY1hDb3ZYRzRnSUNBZ1VpNXlaMkl5YUhOc0lEMGdablZ1WTNScGIyNGdLSElzSUdjc0lHSXBJSHRjYmlBZ0lDQWdJQ0FnWWlBOUlIQnlaWEJoY21WU1IwSW9jaXdnWnl3Z1lpazdYRzRnSUNBZ0lDQWdJSElnUFNCaVd6QmRPMXh1SUNBZ0lDQWdJQ0JuSUQwZ1lsc3hYVHRjYmlBZ0lDQWdJQ0FnWWlBOUlHSmJNbDA3WEc1Y2JpQWdJQ0FnSUNBZ2RtRnlJRWdzSUZNc0lFd3NJRTBzSUcwc0lFTTdYRzRnSUNBZ0lDQWdJRTBnUFNCdGJXRjRLSElzSUdjc0lHSXBPMXh1SUNBZ0lDQWdJQ0J0SUQwZ2JXMXBiaWh5TENCbkxDQmlLVHRjYmlBZ0lDQWdJQ0FnUXlBOUlFMGdMU0J0TzF4dUlDQWdJQ0FnSUNCSUlEMGdLRU1nUFQwZ01DQS9JRzUxYkd3Z09seHVJQ0FnSUNBZ0lDQWdJQ0FnSUUwZ1BUMGdjaUEvSUNobklDMGdZaWtnTHlCRElEcGNiaUFnSUNBZ0lDQWdJQ0FnSUNCTklEMDlJR2NnUHlBb1lpQXRJSElwSUM4Z1F5QXJJRElnT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2h5SUMwZ1p5a2dMeUJESUNzZ05DazdYRzRnSUNBZ0lDQWdJRWdnUFNBb0tFZ2dLeUF6TmpBcElDVWdOaWtnS2lBMk1DQXZJRE0yTUR0Y2JpQWdJQ0FnSUNBZ1RDQTlJQ2hOSUNzZ2JTa2dMeUF5TzF4dUlDQWdJQ0FnSUNCVElEMGdLRU1nUFQwZ01DQS9JREFnT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJRXdnUENBdU5TQS9JRU1nTHlBb01pQXFJRXdwSURwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JESUM4Z0tESWdMU0F5SUNvZ1RDa3BPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdlMmc2SUVnc0lITTZJRk1zSUd3NklFd3NJSFJ2VTNSeWFXNW5PaUJvYzJ4MGIxTjBjbWx1WjMwN1hHNGdJQ0FnZlR0Y2JpQWdJQ0JTTGw5d1lYUm9Nbk4wY21sdVp5QTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVhbTlwYmloY0lpeGNJaWt1Y21Wd2JHRmpaU2h3TW5Nc0lGd2lKREZjSWlrN1hHNGdJQ0FnZlR0Y2JpQWdJQ0JtZFc1amRHbHZiaUJ5WlhCMWMyZ29ZWEp5WVhrc0lHbDBaVzBwSUh0Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREFzSUdscElEMGdZWEp5WVhrdWJHVnVaM1JvT3lCcElEd2dhV2s3SUdrckt5a2dhV1lnS0dGeWNtRjVXMmxkSUQwOVBTQnBkR1Z0S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdZWEp5WVhrdWNIVnphQ2hoY25KaGVTNXpjR3hwWTJVb2FTd2dNU2xiTUYwcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUdaMWJtTjBhVzl1SUdOaFkyaGxjaWhtTENCelkyOXdaU3dnY0c5emRIQnliMk5sYzNOdmNpa2dlMXh1SUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUJ1WlhkbUtDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR0Z5WnlBOUlFRnljbUY1TG5CeWIzUnZkSGx3WlM1emJHbGpaUzVqWVd4c0tHRnlaM1Z0Wlc1MGN5d2dNQ2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVhKbmN5QTlJR0Z5Wnk1cWIybHVLRndpWEZ4MU1qUXdNRndpS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallXTm9aU0E5SUc1bGQyWXVZMkZqYUdVZ1BTQnVaWGRtTG1OaFkyaGxJSHg4SUh0OUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZkVzUwSUQwZ2JtVjNaaTVqYjNWdWRDQTlJRzVsZDJZdVkyOTFiblFnZkh3Z1cxMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ZMkZqYUdWYmFHRnpYU2hoY21kektTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsY0hWemFDaGpiM1Z1ZEN3Z1lYSm5jeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSEJ2YzNSd2NtOWpaWE56YjNJZ1B5QndiM04wY0hKdlkyVnpjMjl5S0dOaFkyaGxXMkZ5WjNOZEtTQTZJR05oWTJobFcyRnlaM05kTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOTFiblF1YkdWdVozUm9JRDQ5SURGbE15QW1KaUJrWld4bGRHVWdZMkZqYUdWYlkyOTFiblF1YzJocFpuUW9LVjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiM1Z1ZEM1d2RYTm9LR0Z5WjNNcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGamFHVmJZWEpuYzEwZ1BTQm1XMkZ3Y0d4NVhTaHpZMjl3WlN3Z1lYSm5LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCd2IzTjBjSEp2WTJWemMyOXlJRDhnY0c5emRIQnliMk5sYzNOdmNpaGpZV05vWlZ0aGNtZHpYU2tnT2lCallXTm9aVnRoY21kelhUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzWmp0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IyWVhJZ2NISmxiRzloWkNBOUlGSXVYM0J5Wld4dllXUWdQU0JtZFc1amRHbHZiaUFvYzNKakxDQm1LU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQnBiV2NnUFNCbkxtUnZZeTVqY21WaGRHVkZiR1Z0Wlc1MEtGd2lhVzFuWENJcE8xeHVJQ0FnSUNBZ0lDQnBiV2N1YzNSNWJHVXVZM056VkdWNGRDQTlJRndpY0c5emFYUnBiMjQ2WVdKemIyeDFkR1U3YkdWbWREb3RPVGs1T1dWdE8zUnZjRG90T1RrNU9XVnRYQ0k3WEc0Z0lDQWdJQ0FnSUdsdFp5NXZibXh2WVdRZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1MbU5oYkd3b2RHaHBjeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG05dWJHOWhaQ0E5SUc1MWJHdzdYRzRnSUNBZ0lDQWdJQ0FnSUNCbkxtUnZZeTVpYjJSNUxuSmxiVzkyWlVOb2FXeGtLSFJvYVhNcE8xeHVJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdJQ0JwYldjdWIyNWxjbkp2Y2lBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHY3VaRzlqTG1KdlpIa3VjbVZ0YjNabFEyaHBiR1FvZEdocGN5azdYRzRnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0FnSUdjdVpHOWpMbUp2WkhrdVlYQndaVzVrUTJocGJHUW9hVzFuS1R0Y2JpQWdJQ0FnSUNBZ2FXMW5Mbk55WXlBOUlITnlZenRjYmlBZ0lDQjlPMXh1WEc0Z0lDQWdablZ1WTNScGIyNGdZMnh5Vkc5VGRISnBibWNvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbWhsZUR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2x4Y1hHNGdJQ0FnSUNvZ1VtRndhR0ZsYkM1blpYUlNSMEpjYmlBZ0lDQWdXeUJ0WlhSb2IyUWdYVnh1SUNBZ0lDQXFLbHh1SUNBZ0lDQXFJRkJoY25ObGN5QmpiMnh2ZFhJZ2MzUnlhVzVuSUdGeklGSkhRaUJ2WW1wbFkzUmNiaUFnSUNBZ1BpQlFZWEpoYldWMFpYSnpYRzRnSUNBZ0lDMGdZMjlzYjNWeUlDaHpkSEpwYm1jcElHTnZiRzkxY2lCemRISnBibWNnYVc0Z2IyNWxJRzltSUdadmNtMWhkSE02WEc0Z0lDQWdJQ01nUEhWc1BseHVJQ0FnSUNBaklDQWdJQ0E4YkdrK1EyOXNiM1Z5SUc1aGJXVWdLT0tBbkR4amIyUmxQbkpsWkR3dlkyOWtaVDdpZ0owc0lPS0FuRHhqYjJSbFBtZHlaV1Z1UEM5amIyUmxQdUtBblN3ZzRvQ2NQR052WkdVK1kyOXlibVpzYjNkbGNtSnNkV1U4TDJOdlpHVSs0b0NkTENCbGRHTXBQQzlzYVQ1Y2JpQWdJQ0FnSXlBZ0lDQWdQR3hwUGlQaWdLTGlnS0xpZ0tJZzRvQ1VJSE5vYjNKMFpXNWxaQ0JJVkUxTUlHTnZiRzkxY2pvZ0tPS0FuRHhqYjJSbFBpTXdNREE4TDJOdlpHVSs0b0NkTENEaWdKdzhZMjlrWlQ0alptTXdQQzlqYjJSbFB1S0FuU3dnWlhSaktUd3ZiR2srWEc0Z0lDQWdJQ01nSUNBZ0lEeHNhVDRqNG9DaTRvQ2k0b0NpNG9DaTRvQ2k0b0NpSU9LQWxDQm1kV3hzSUd4bGJtZDBhQ0JJVkUxTUlHTnZiRzkxY2pvZ0tPS0FuRHhqYjJSbFBpTXdNREF3TURBOEwyTnZaR1UrNG9DZExDRGlnSnc4WTI5a1pUNGpZbVF5TXpBd1BDOWpiMlJsUHVLQW5TazhMMnhwUGx4dUlDQWdJQ0FqSUNBZ0lDQThiR2srY21kaUtPS0FvdUtBb3VLQW9pd2c0b0NpNG9DaTRvQ2lMQ0RpZ0tMaWdLTGlnS0lwSU9LQWxDQnlaV1FzSUdkeVpXVnVJR0Z1WkNCaWJIVmxJR05vWVc1dVpXeHo0b0NaSUhaaGJIVmxjem9nS09LQW5EeGpiMlJsUG5KbllpZ3lNREFzSm01aWMzQTdNVEF3TENadVluTndPekFwUEM5amIyUmxQdUtBblNrOEwyeHBQbHh1SUNBZ0lDQWpJQ0FnSUNBOGJHaytjbWRpS09LQW91S0FvdUtBb2lVc0lPS0FvdUtBb3VLQW9pVXNJT0tBb3VLQW91S0FvaVVwSU9LQWxDQnpZVzFsSUdGeklHRmliM1psTENCaWRYUWdhVzRnSlRvZ0tPS0FuRHhqYjJSbFBuSm5ZaWd4TURBbExDWnVZbk53T3pFM05TVXNKbTVpYzNBN01DVXBQQzlqYjJSbFB1S0FuU2s4TDJ4cFBseHVJQ0FnSUNBaklDQWdJQ0E4YkdrK2FITmlLT0tBb3VLQW91S0FvaXdnNG9DaTRvQ2k0b0NpTENEaWdLTGlnS0xpZ0tJcElPS0FsQ0JvZFdVc0lITmhkSFZ5WVhScGIyNGdZVzVrSUdKeWFXZG9kRzVsYzNNZ2RtRnNkV1Z6T2lBbzRvQ2NQR052WkdVK2FITmlLREF1TlN3bWJtSnpjRHN3TGpJMUxDWnVZbk53T3pFcFBDOWpiMlJsUHVLQW5TazhMMnhwUGx4dUlDQWdJQ0FqSUNBZ0lDQThiR2srYUhOaUtPS0FvdUtBb3VLQW9pVXNJT0tBb3VLQW91S0FvaVVzSU9LQW91S0FvdUtBb2lVcElPS0FsQ0J6WVcxbElHRnpJR0ZpYjNabExDQmlkWFFnYVc0Z0pUd3ZiR2srWEc0Z0lDQWdJQ01nSUNBZ0lEeHNhVDVvYzJ3bzRvQ2k0b0NpNG9DaUxDRGlnS0xpZ0tMaWdLSXNJT0tBb3VLQW91S0FvaWtnNG9DVUlITmhiV1VnWVhNZ2FITmlQQzlzYVQ1Y2JpQWdJQ0FnSXlBZ0lDQWdQR3hwUG1oemJDamlnS0xpZ0tMaWdLSWxMQ0RpZ0tMaWdLTGlnS0lsTENEaWdLTGlnS0xpZ0tJbEtTRGlnSlFnYzJGdFpTQmhjeUJvYzJJOEwyeHBQbHh1SUNBZ0lDQWpJRHd2ZFd3K1hHNGdJQ0FnSUQwZ0tHOWlhbVZqZENrZ1VrZENJRzlpYW1WamRDQnBiaUJtYjNKdFlYUTZYRzRnSUNBZ0lHOGdlMXh1SUNBZ0lDQnZJQ0FnSUNCeUlDaHVkVzFpWlhJcElISmxaQ3hjYmlBZ0lDQWdieUFnSUNBZ1p5QW9iblZ0WW1WeUtTQm5jbVZsYml4Y2JpQWdJQ0FnYnlBZ0lDQWdZaUFvYm5WdFltVnlLU0JpYkhWbFhHNGdJQ0FnSUc4Z0lDQWdJR2hsZUNBb2MzUnlhVzVuS1NCamIyeHZjaUJwYmlCSVZFMU1MME5UVXlCbWIzSnRZWFE2SUNQaWdLTGlnS0xpZ0tMaWdLTGlnS0xpZ0tJc1hHNGdJQ0FnSUc4Z0lDQWdJR1Z5Y205eUlDaGliMjlzWldGdUtTQjBjblZsSUdsbUlITjBjbWx1WnlCallXN2lnSmwwSUdKbElIQmhjbk5sWkZ4dUlDQWdJQ0J2SUgxY2JpQWdJQ0JjWENvdlhHNGdJQ0FnVWk1blpYUlNSMElnUFNCallXTm9aWElvWm5WdVkzUnBiMjRnS0dOdmJHOTFjaWtnZTF4dUlDQWdJQ0FnSUNCcFppQW9JV052Ykc5MWNpQjhmQ0FoSVNnb1kyOXNiM1Z5SUQwZ1UzUnlLR052Ykc5MWNpa3BMbWx1WkdWNFQyWW9YQ0l0WENJcElDc2dNU2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjdjam9nTFRFc0lHYzZJQzB4TENCaU9pQXRNU3dnYUdWNE9pQmNJbTV2Ym1WY0lpd2daWEp5YjNJNklERXNJSFJ2VTNSeWFXNW5PaUJqYkhKVWIxTjBjbWx1WjMwN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lnS0dOdmJHOTFjaUE5UFNCY0ltNXZibVZjSWlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSHR5T2lBdE1Td2daem9nTFRFc0lHSTZJQzB4TENCb1pYZzZJRndpYm05dVpWd2lMQ0IwYjFOMGNtbHVaem9nWTJ4eVZHOVRkSEpwYm1kOU8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0VvYUhOeVoxdG9ZWE5kS0dOdmJHOTFjaTUwYjB4dmQyVnlRMkZ6WlNncExuTjFZbk4wY21sdVp5Z3dMQ0F5S1NrZ2ZId2dZMjlzYjNWeUxtTm9ZWEpCZENncElEMDlJRndpSTF3aUtTQW1KaUFvWTI5c2IzVnlJRDBnZEc5SVpYZ29ZMjlzYjNWeUtTazdYRzRnSUNBZ0lDQWdJSFpoY2lCeVpYTXNYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpXUXNYRzRnSUNBZ0lDQWdJQ0FnSUNCbmNtVmxiaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lHSnNkV1VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnZjR0ZqYVhSNUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnZEN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbGN5eGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbllpQTlJR052Ykc5MWNpNXRZWFJqYUNoamIyeHZkWEpTWldkRmVIQXBPMXh1SUNBZ0lDQWdJQ0JwWmlBb2NtZGlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY21kaVd6SmRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW14MVpTQTlJSFJ2U1c1MEtISm5ZbHN5WFM1emRXSnpkSEpwYm1jb05Ta3NJREUyS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbmNtVmxiaUE5SUhSdlNXNTBLSEpuWWxzeVhTNXpkV0p6ZEhKcGJtY29NeXdnTlNrc0lERTJLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WldRZ1BTQjBiMGx1ZENoeVoySmJNbDB1YzNWaWMzUnlhVzVuS0RFc0lETXBMQ0F4TmlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY21kaVd6TmRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW14MVpTQTlJSFJ2U1c1MEtDaDBJRDBnY21kaVd6TmRMbU5vWVhKQmRDZ3pLU2tnS3lCMExDQXhOaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWjNKbFpXNGdQU0IwYjBsdWRDZ29kQ0E5SUhKbllsc3pYUzVqYUdGeVFYUW9NaWtwSUNzZ2RDd2dNVFlwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbFpDQTlJSFJ2U1c1MEtDaDBJRDBnY21kaVd6TmRMbU5vWVhKQmRDZ3hLU2tnS3lCMExDQXhOaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jbWRpV3pSZEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdWeklEMGdjbWRpV3pSZFczTndiR2wwWFNoamIyMXRZVk53WVdObGN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZrSUQwZ2RHOUdiRzloZENoMllXeDFaWE5iTUYwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsYzFzd1hTNXpiR2xqWlNndE1Ta2dQVDBnWENJbFhDSWdKaVlnS0hKbFpDQXFQU0F5TGpVMUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm5jbVZsYmlBOUlIUnZSbXh2WVhRb2RtRnNkV1Z6V3pGZEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlhOYk1WMHVjMnhwWTJVb0xURXBJRDA5SUZ3aUpWd2lJQ1ltSUNobmNtVmxiaUFxUFNBeUxqVTFLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpYkhWbElEMGdkRzlHYkc5aGRDaDJZV3gxWlhOYk1sMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbGMxc3lYUzV6YkdsalpTZ3RNU2tnUFQwZ1hDSWxYQ0lnSmlZZ0tHSnNkV1VnS2owZ01pNDFOU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21kaVd6RmRMblJ2VEc5M1pYSkRZWE5sS0NrdWMyeHBZMlVvTUN3Z05Da2dQVDBnWENKeVoySmhYQ0lnSmlZZ0tHOXdZV05wZEhrZ1BTQjBiMFpzYjJGMEtIWmhiSFZsYzFzelhTa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbGMxc3pYU0FtSmlCMllXeDFaWE5iTTEwdWMyeHBZMlVvTFRFcElEMDlJRndpSlZ3aUlDWW1JQ2h2Y0dGamFYUjVJQzg5SURFd01DazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NtZGlXelZkS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1Z6SUQwZ2NtZGlXelZkVzNOd2JHbDBYU2hqYjIxdFlWTndZV05sY3lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVmtJRDBnZEc5R2JHOWhkQ2gyWVd4MVpYTmJNRjBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxjMXN3WFM1emJHbGpaU2d0TVNrZ1BUMGdYQ0lsWENJZ0ppWWdLSEpsWkNBcVBTQXlMalUxS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbmNtVmxiaUE5SUhSdlJteHZZWFFvZG1Gc2RXVnpXekZkS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaWE5iTVYwdWMyeHBZMlVvTFRFcElEMDlJRndpSlZ3aUlDWW1JQ2huY21WbGJpQXFQU0F5TGpVMUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmliSFZsSUQwZ2RHOUdiRzloZENoMllXeDFaWE5iTWwwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsYzFzeVhTNXpiR2xqWlNndE1Ta2dQVDBnWENJbFhDSWdKaVlnS0dKc2RXVWdLajBnTWk0MU5TazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLSFpoYkhWbGMxc3dYUzV6YkdsalpTZ3RNeWtnUFQwZ1hDSmtaV2RjSWlCOGZDQjJZV3gxWlhOYk1GMHVjMnhwWTJVb0xURXBJRDA5SUZ3aVhGeDRZakJjSWlrZ0ppWWdLSEpsWkNBdlBTQXpOakFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbllsc3hYUzUwYjB4dmQyVnlRMkZ6WlNncExuTnNhV05sS0RBc0lEUXBJRDA5SUZ3aWFITmlZVndpSUNZbUlDaHZjR0ZqYVhSNUlEMGdkRzlHYkc5aGRDaDJZV3gxWlhOYk0xMHBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpYTmJNMTBnSmlZZ2RtRnNkV1Z6V3pOZExuTnNhV05sS0MweEtTQTlQU0JjSWlWY0lpQW1KaUFvYjNCaFkybDBlU0F2UFNBeE1EQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQlNMbWh6WWpKeVoySW9jbVZrTENCbmNtVmxiaXdnWW14MVpTd2diM0JoWTJsMGVTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NtZGlXelpkS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1Z6SUQwZ2NtZGlXelpkVzNOd2JHbDBYU2hqYjIxdFlWTndZV05sY3lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVmtJRDBnZEc5R2JHOWhkQ2gyWVd4MVpYTmJNRjBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxjMXN3WFM1emJHbGpaU2d0TVNrZ1BUMGdYQ0lsWENJZ0ppWWdLSEpsWkNBcVBTQXlMalUxS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbmNtVmxiaUE5SUhSdlJteHZZWFFvZG1Gc2RXVnpXekZkS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaWE5iTVYwdWMyeHBZMlVvTFRFcElEMDlJRndpSlZ3aUlDWW1JQ2huY21WbGJpQXFQU0F5TGpVMUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmliSFZsSUQwZ2RHOUdiRzloZENoMllXeDFaWE5iTWwwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsYzFzeVhTNXpiR2xqWlNndE1Ta2dQVDBnWENJbFhDSWdKaVlnS0dKc2RXVWdLajBnTWk0MU5TazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLSFpoYkhWbGMxc3dYUzV6YkdsalpTZ3RNeWtnUFQwZ1hDSmtaV2RjSWlCOGZDQjJZV3gxWlhOYk1GMHVjMnhwWTJVb0xURXBJRDA5SUZ3aVhGeDRZakJjSWlrZ0ppWWdLSEpsWkNBdlBTQXpOakFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbllsc3hYUzUwYjB4dmQyVnlRMkZ6WlNncExuTnNhV05sS0RBc0lEUXBJRDA5SUZ3aWFITnNZVndpSUNZbUlDaHZjR0ZqYVhSNUlEMGdkRzlHYkc5aGRDaDJZV3gxWlhOYk0xMHBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpYTmJNMTBnSmlZZ2RtRnNkV1Z6V3pOZExuTnNhV05sS0MweEtTQTlQU0JjSWlWY0lpQW1KaUFvYjNCaFkybDBlU0F2UFNBeE1EQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQlNMbWh6YkRKeVoySW9jbVZrTENCbmNtVmxiaXdnWW14MVpTd2diM0JoWTJsMGVTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WjJJZ1BTQjdjam9nY21Wa0xDQm5PaUJuY21WbGJpd2dZam9nWW14MVpTd2dkRzlUZEhKcGJtYzZJR05zY2xSdlUzUnlhVzVuZlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpuWWk1b1pYZ2dQU0JjSWlOY0lpQXJJQ2d4TmpjM056SXhOaUI4SUdKc2RXVWdmQ0FvWjNKbFpXNGdQRHdnT0NrZ2ZDQW9jbVZrSUR3OElERTJLU2t1ZEc5VGRISnBibWNvTVRZcExuTnNhV05sS0RFcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnVWk1cGN5aHZjR0ZqYVhSNUxDQmNJbVpwYm1sMFpWd2lLU0FtSmlBb2NtZGlMbTl3WVdOcGRIa2dQU0J2Y0dGamFYUjVLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCeVoySTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSHR5T2lBdE1Td2daem9nTFRFc0lHSTZJQzB4TENCb1pYZzZJRndpYm05dVpWd2lMQ0JsY25KdmNqb2dNU3dnZEc5VGRISnBibWM2SUdOc2NsUnZVM1J5YVc1bmZUdGNiaUFnSUNCOUxDQlNLVHRjYmlBZ0lDQXZLbHhjWEc0Z0lDQWdJQ29nVW1Gd2FHRmxiQzVvYzJKY2JpQWdJQ0FnV3lCdFpYUm9iMlFnWFZ4dUlDQWdJQ0FxS2x4dUlDQWdJQ0FxSUVOdmJuWmxjblJ6SUVoVFFpQjJZV3gxWlhNZ2RHOGdhR1Y0SUhKbGNISmxjMlZ1ZEdGMGFXOXVJRzltSUhSb1pTQmpiMnh2ZFhJdVhHNGdJQ0FnSUQ0Z1VHRnlZVzFsZEdWeWMxeHVJQ0FnSUNBdElHZ2dLRzUxYldKbGNpa2dhSFZsWEc0Z0lDQWdJQzBnY3lBb2JuVnRZbVZ5S1NCellYUjFjbUYwYVc5dVhHNGdJQ0FnSUMwZ1lpQW9iblZ0WW1WeUtTQjJZV3gxWlNCdmNpQmljbWxuYUhSdVpYTnpYRzRnSUNBZ0lEMGdLSE4wY21sdVp5a2dhR1Y0SUhKbGNISmxjMlZ1ZEdGMGFXOXVJRzltSUhSb1pTQmpiMnh2ZFhJdVhHNGdJQ0FnWEZ3cUwxeHVJQ0FnSUZJdWFITmlJRDBnWTJGamFHVnlLR1oxYm1OMGFXOXVJQ2hvTENCekxDQmlLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJTTG1oellqSnlaMklvYUN3Z2N5d2dZaWt1YUdWNE8xeHVJQ0FnSUgwcE8xeHVJQ0FnSUM4cVhGeGNiaUFnSUNBZ0tpQlNZWEJvWVdWc0xtaHpiRnh1SUNBZ0lDQmJJRzFsZEdodlpDQmRYRzRnSUNBZ0lDb3FYRzRnSUNBZ0lDb2dRMjl1ZG1WeWRITWdTRk5NSUhaaGJIVmxjeUIwYnlCb1pYZ2djbVZ3Y21WelpXNTBZWFJwYjI0Z2IyWWdkR2hsSUdOdmJHOTFjaTVjYmlBZ0lDQWdQaUJRWVhKaGJXVjBaWEp6WEc0Z0lDQWdJQzBnYUNBb2JuVnRZbVZ5S1NCb2RXVmNiaUFnSUNBZ0xTQnpJQ2h1ZFcxaVpYSXBJSE5oZEhWeVlYUnBiMjVjYmlBZ0lDQWdMU0JzSUNodWRXMWlaWElwSUd4MWJXbHViM05wZEhsY2JpQWdJQ0FnUFNBb2MzUnlhVzVuS1NCb1pYZ2djbVZ3Y21WelpXNTBZWFJwYjI0Z2IyWWdkR2hsSUdOdmJHOTFjaTVjYmlBZ0lDQmNYQ292WEc0Z0lDQWdVaTVvYzJ3Z1BTQmpZV05vWlhJb1puVnVZM1JwYjI0Z0tHZ3NJSE1zSUd3cElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlGSXVhSE5zTW5KbllpaG9MQ0J6TENCc0tTNW9aWGc3WEc0Z0lDQWdmU2s3WEc0Z0lDQWdMeXBjWEZ4dUlDQWdJQ0FxSUZKaGNHaGhaV3d1Y21kaVhHNGdJQ0FnSUZzZ2JXVjBhRzlrSUYxY2JpQWdJQ0FnS2lwY2JpQWdJQ0FnS2lCRGIyNTJaWEowY3lCU1IwSWdkbUZzZFdWeklIUnZJR2hsZUNCeVpYQnlaWE5sYm5SaGRHbHZiaUJ2WmlCMGFHVWdZMjlzYjNWeUxseHVJQ0FnSUNBK0lGQmhjbUZ0WlhSbGNuTmNiaUFnSUNBZ0xTQnlJQ2h1ZFcxaVpYSXBJSEpsWkZ4dUlDQWdJQ0F0SUdjZ0tHNTFiV0psY2lrZ1ozSmxaVzVjYmlBZ0lDQWdMU0JpSUNodWRXMWlaWElwSUdKc2RXVmNiaUFnSUNBZ1BTQW9jM1J5YVc1bktTQm9aWGdnY21Wd2NtVnpaVzUwWVhScGIyNGdiMllnZEdobElHTnZiRzkxY2k1Y2JpQWdJQ0JjWENvdlhHNGdJQ0FnVWk1eVoySWdQU0JqWVdOb1pYSW9ablZ1WTNScGIyNGdLSElzSUdjc0lHSXBJSHRjYmlBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnY205MWJtUW9lQ2tnZXlCeVpYUjFjbTRnS0hnZ0t5QXdMalVwSUh3Z01Ec2dmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdYQ0lqWENJZ0t5QW9NVFkzTnpjeU1UWWdmQ0J5YjNWdVpDaGlLU0I4SUNoeWIzVnVaQ2huS1NBOFBDQTRLU0I4SUNoeWIzVnVaQ2h5S1NBOFBDQXhOaWtwTG5SdlUzUnlhVzVuS0RFMktTNXpiR2xqWlNneEtUdGNiaUFnSUNCOUtUdGNiaUFnSUNBdktseGNYRzRnSUNBZ0lDb2dVbUZ3YUdGbGJDNW5aWFJEYjJ4dmNseHVJQ0FnSUNCYklHMWxkR2h2WkNCZFhHNGdJQ0FnSUNvcVhHNGdJQ0FnSUNvZ1QyNGdaV0ZqYUNCallXeHNJSEpsZEhWeWJuTWdibVY0ZENCamIyeHZkWElnYVc0Z2RHaGxJSE53WldOMGNuVnRMaUJVYnlCeVpYTmxkQ0JwZENCaVlXTnJJSFJ2SUhKbFpDQmpZV3hzSUVCU1lYQm9ZV1ZzTG1kbGRFTnZiRzl5TG5KbGMyVjBYRzRnSUNBZ0lENGdVR0Z5WVcxbGRHVnljMXh1SUNBZ0lDQXRJSFpoYkhWbElDaHVkVzFpWlhJcElDTnZjSFJwYjI1aGJDQmljbWxuYUhSdVpYTnpMQ0JrWldaaGRXeDBJR2x6SUdBd0xqYzFZRnh1SUNBZ0lDQTlJQ2h6ZEhKcGJtY3BJR2hsZUNCeVpYQnlaWE5sYm5SaGRHbHZiaUJ2WmlCMGFHVWdZMjlzYjNWeUxseHVJQ0FnSUZ4Y0tpOWNiaUFnSUNCU0xtZGxkRU52Ykc5eUlEMGdablZ1WTNScGIyNGdLSFpoYkhWbEtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCemRHRnlkQ0E5SUhSb2FYTXVaMlYwUTI5c2IzSXVjM1JoY25RZ1BTQjBhR2x6TG1kbGRFTnZiRzl5TG5OMFlYSjBJSHg4SUh0b09pQXdMQ0J6T2lBeExDQmlPaUIyWVd4MVpTQjhmQ0F1TnpWOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnY21kaUlEMGdkR2hwY3k1b2MySXljbWRpS0hOMFlYSjBMbWdzSUhOMFlYSjBMbk1zSUhOMFlYSjBMbUlwTzF4dUlDQWdJQ0FnSUNCemRHRnlkQzVvSUNzOUlDNHdOelU3WEc0Z0lDQWdJQ0FnSUdsbUlDaHpkR0Z5ZEM1b0lENGdNU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjM1JoY25RdWFDQTlJREE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpkR0Z5ZEM1eklDMDlJQzR5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdjM1JoY25RdWN5QThQU0F3SUNZbUlDaDBhR2x6TG1kbGRFTnZiRzl5TG5OMFlYSjBJRDBnZTJnNklEQXNJSE02SURFc0lHSTZJSE4wWVhKMExtSjlLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnY21kaUxtaGxlRHRjYmlBZ0lDQjlPMXh1SUNBZ0lDOHFYRnhjYmlBZ0lDQWdLaUJTWVhCb1lXVnNMbWRsZEVOdmJHOXlMbkpsYzJWMFhHNGdJQ0FnSUZzZ2JXVjBhRzlrSUYxY2JpQWdJQ0FnS2lwY2JpQWdJQ0FnS2lCU1pYTmxkSE1nYzNCbFkzUnlkVzBnY0c5emFYUnBiMjRnWm05eUlFQlNZWEJvWVdWc0xtZGxkRU52Ykc5eUlHSmhZMnNnZEc4Z2NtVmtMbHh1SUNBZ0lGeGNLaTljYmlBZ0lDQlNMbWRsZEVOdmJHOXlMbkpsYzJWMElEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNCa1pXeGxkR1VnZEdocGN5NXpkR0Z5ZER0Y2JpQWdJQ0I5TzF4dVhHNGdJQ0FnTHk4Z2FIUjBjRG92TDNOamFHVndaWEp6TG1OakwyZGxkSFJwYm1jdGRHOHRkR2hsTFhCdmFXNTBYRzRnSUNBZ1puVnVZM1JwYjI0Z1kyRjBiWFZzYkZKdmJUSmlaWHBwWlhJb1kzSndMQ0I2S1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJrSUQwZ1cxMDdYRzRnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd0xDQnBUR1Z1SUQwZ1kzSndMbXhsYm1kMGFEc2dhVXhsYmlBdElESWdLaUFoZWlBK0lHazdJR2tnS3owZ01pa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSEFnUFNCYlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCN2VEb2dLMk55Y0Z0cElDMGdNbDBzSUhrNklDdGpjbkJiYVNBdElERmRmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHQ0T2lBclkzSndXMmxkTENBZ0lDQWdlVG9nSzJOeWNGdHBJQ3NnTVYxOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2UzZzZJQ3RqY25CYmFTQXJJREpkTENCNU9pQXJZM0p3VzJrZ0t5QXpYWDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I3ZURvZ0syTnljRnRwSUNzZ05GMHNJSGs2SUN0amNuQmJhU0FySURWZGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hvcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVdrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0Zzd1hTQTlJSHQ0T2lBclkzSndXMmxNWlc0Z0xTQXlYU3dnZVRvZ0syTnljRnRwVEdWdUlDMGdNVjE5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2FVeGxiaUF0SURRZ1BUMGdhU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndXek5kSUQwZ2UzZzZJQ3RqY25CYk1GMHNJSGs2SUN0amNuQmJNVjE5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2FVeGxiaUF0SURJZ1BUMGdhU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndXekpkSUQwZ2UzZzZJQ3RqY25CYk1GMHNJSGs2SUN0amNuQmJNVjE5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndXek5kSUQwZ2UzZzZJQ3RqY25CYk1sMHNJSGs2SUN0amNuQmJNMTE5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dsTVpXNGdMU0EwSUQwOUlHa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NGc3pYU0E5SUhCYk1sMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2doYVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3V3pCZElEMGdlM2c2SUN0amNuQmJhVjBzSUhrNklDdGpjbkJiYVNBcklERmRmVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCa0xuQjFjMmdvVzF3aVExd2lMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS0Mxd1d6QmRMbmdnS3lBMklDb2djRnN4WFM1NElDc2djRnN5WFM1NEtTQXZJRFlzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBb0xYQmJNRjB1ZVNBcklEWWdLaUJ3V3pGZExua2dLeUJ3V3pKZExua3BJQzhnTml4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDaHdXekZkTG5nZ0t5QTJJQ29nY0ZzeVhTNTRJQzBnY0ZzelhTNTRLU0F2SURZc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW9jRnN4WFM1NUlDc2dOaXB3V3pKZExua2dMU0J3V3pOZExua3BJQzhnTml4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQmJNbDB1ZUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQmJNbDB1ZVZ4dUlDQWdJQ0FnSUNBZ0lDQWdYU2s3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1pEdGNiaUFnSUNCOVhHNGdJQ0FnTHlwY1hGeHVJQ0FnSUNBcUlGSmhjR2hoWld3dWNHRnljMlZRWVhSb1UzUnlhVzVuWEc0Z0lDQWdJRnNnYldWMGFHOWtJRjFjYmlBZ0lDQWdLaXBjYmlBZ0lDQWdLaUJWZEdsc2FYUjVJRzFsZEdodlpGeHVJQ0FnSUNBcUtseHVJQ0FnSUNBcUlGQmhjbk5sY3lCbmFYWmxiaUJ3WVhSb0lITjBjbWx1WnlCcGJuUnZJR0Z1SUdGeWNtRjVJRzltSUdGeWNtRjVjeUJ2WmlCd1lYUm9JSE5sWjIxbGJuUnpMbHh1SUNBZ0lDQStJRkJoY21GdFpYUmxjbk5jYmlBZ0lDQWdMU0J3WVhSb1UzUnlhVzVuSUNoemRISnBibWQ4WVhKeVlYa3BJSEJoZEdnZ2MzUnlhVzVuSUc5eUlHRnljbUY1SUc5bUlITmxaMjFsYm5SeklDaHBiaUIwYUdVZ2JHRnpkQ0JqWVhObElHbDBJSGRwYkd3Z1ltVWdjbVYwZFhKdVpXUWdjM1J5WVdsbmFIUWdZWGRoZVNsY2JpQWdJQ0FnUFNBb1lYSnlZWGtwSUdGeWNtRjVJRzltSUhObFoyMWxiblJ6TGx4dUlDQWdJRnhjS2k5Y2JpQWdJQ0JTTG5CaGNuTmxVR0YwYUZOMGNtbHVaeUE5SUdaMWJtTjBhVzl1SUNod1lYUm9VM1J5YVc1bktTQjdYRzRnSUNBZ0lDQWdJR2xtSUNnaGNHRjBhRk4wY21sdVp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1MWJHdzdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZG1GeUlIQjBhQ0E5SUhCaGRHaHpLSEJoZEdoVGRISnBibWNwTzF4dUlDQWdJQ0FnSUNCcFppQW9jSFJvTG1GeWNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhCaGRHaERiRzl1WlNod2RHZ3VZWEp5S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSFpoY2lCd1lYSmhiVU52ZFc1MGN5QTlJSHRoT2lBM0xDQmpPaUEyTENCb09pQXhMQ0JzT2lBeUxDQnRPaUF5TENCeU9pQTBMQ0J4T2lBMExDQnpPaUEwTENCME9pQXlMQ0IyT2lBeExDQjZPaUF3ZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR1JoZEdFZ1BTQmJYVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tGSXVhWE1vY0dGMGFGTjBjbWx1Wnl3Z1lYSnlZWGtwSUNZbUlGSXVhWE1vY0dGMGFGTjBjbWx1WjFzd1hTd2dZWEp5WVhrcEtTQjdJQzh2SUhKdmRXZG9JR0Z6YzNWdGNIUnBiMjVjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmhkR0VnUFNCd1lYUm9RMnh2Ym1Vb2NHRjBhRk4wY21sdVp5azdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYVdZZ0tDRmtZWFJoTG14bGJtZDBhQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdVM1J5S0hCaGRHaFRkSEpwYm1jcExuSmxjR3hoWTJVb2NHRjBhRU52YlcxaGJtUXNJR1oxYm1OMGFXOXVJQ2hoTENCaUxDQmpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIQmhjbUZ0Y3lBOUlGdGRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdVlXMWxJRDBnWWk1MGIweHZkMlZ5UTJGelpTZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR011Y21Wd2JHRmpaU2h3WVhSb1ZtRnNkV1Z6TENCbWRXNWpkR2x2YmlBb1lTd2dZaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmlJQ1ltSUhCaGNtRnRjeTV3ZFhOb0tDdGlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ibUZ0WlNBOVBTQmNJbTFjSWlBbUppQndZWEpoYlhNdWJHVnVaM1JvSUQ0Z01pa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1lYUmhMbkIxYzJnb1cySmRXMk52Ym1OaGRGMG9jR0Z5WVcxekxuTndiR2xqWlNnd0xDQXlLU2twTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnVZVzFsSUQwZ1hDSnNYQ0k3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSWdQU0JpSUQwOUlGd2liVndpSUQ4Z1hDSnNYQ0lnT2lCY0lreGNJanRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHNWhiV1VnUFQwZ1hDSnlYQ0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR0YwWVM1d2RYTm9LRnRpWFZ0amIyNWpZWFJkS0hCaGNtRnRjeWtwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0IzYUdsc1pTQW9jR0Z5WVcxekxteGxibWQwYUNBK1BTQndZWEpoYlVOdmRXNTBjMXR1WVcxbFhTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1lYUmhMbkIxYzJnb1cySmRXMk52Ym1OaGRGMG9jR0Z5WVcxekxuTndiR2xqWlNnd0xDQndZWEpoYlVOdmRXNTBjMXR1WVcxbFhTa3BLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0Z3WVhKaGJVTnZkVzUwYzF0dVlXMWxYU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmtZWFJoTG5SdlUzUnlhVzVuSUQwZ1VpNWZjR0YwYURKemRISnBibWM3WEc0Z0lDQWdJQ0FnSUhCMGFDNWhjbklnUFNCd1lYUm9RMnh2Ym1Vb1pHRjBZU2s3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJrWVhSaE8xeHVJQ0FnSUgwN1hHNGdJQ0FnTHlwY1hGeHVJQ0FnSUNBcUlGSmhjR2hoWld3dWNHRnljMlZVY21GdWMyWnZjbTFUZEhKcGJtZGNiaUFnSUNBZ1d5QnRaWFJvYjJRZ1hWeHVJQ0FnSUNBcUtseHVJQ0FnSUNBcUlGVjBhV3hwZEhrZ2JXVjBhRzlrWEc0Z0lDQWdJQ29xWEc0Z0lDQWdJQ29nVUdGeWMyVnpJR2RwZG1WdUlIQmhkR2dnYzNSeWFXNW5JR2x1ZEc4Z1lXNGdZWEp5WVhrZ2IyWWdkSEpoYm5ObWIzSnRZWFJwYjI1ekxseHVJQ0FnSUNBK0lGQmhjbUZ0WlhSbGNuTmNiaUFnSUNBZ0xTQlVVM1J5YVc1bklDaHpkSEpwYm1kOFlYSnlZWGtwSUhSeVlXNXpabTl5YlNCemRISnBibWNnYjNJZ1lYSnlZWGtnYjJZZ2RISmhibk5tYjNKdFlYUnBiMjV6SUNocGJpQjBhR1VnYkdGemRDQmpZWE5sSUdsMElIZHBiR3dnWW1VZ2NtVjBkWEp1WldRZ2MzUnlZV2xuYUhRZ1lYZGhlU2xjYmlBZ0lDQWdQU0FvWVhKeVlYa3BJR0Z5Y21GNUlHOW1JSFJ5WVc1elptOXliV0YwYVc5dWN5NWNiaUFnSUNCY1hDb3ZYRzRnSUNBZ1VpNXdZWEp6WlZSeVlXNXpabTl5YlZOMGNtbHVaeUE5SUdOaFkyaGxjaWhtZFc1amRHbHZiaUFvVkZOMGNtbHVaeWtnZTF4dUlDQWdJQ0FnSUNCcFppQW9JVlJUZEhKcGJtY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhaaGNpQndZWEpoYlVOdmRXNTBjeUE5SUh0eU9pQXpMQ0J6T2lBMExDQjBPaUF5TENCdE9pQTJmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmhkR0VnUFNCYlhUdGNiaUFnSUNBZ0lDQWdhV1lnS0ZJdWFYTW9WRk4wY21sdVp5d2dZWEp5WVhrcElDWW1JRkl1YVhNb1ZGTjBjbWx1WjFzd1hTd2dZWEp5WVhrcEtTQjdJQzh2SUhKdmRXZG9JR0Z6YzNWdGNIUnBiMjVjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmhkR0VnUFNCd1lYUm9RMnh2Ym1Vb1ZGTjBjbWx1WnlrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lnS0NGa1lYUmhMbXhsYm1kMGFDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1UzUnlLRlJUZEhKcGJtY3BMbkpsY0d4aFkyVW9kRU52YlcxaGJtUXNJR1oxYm1OMGFXOXVJQ2hoTENCaUxDQmpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIQmhjbUZ0Y3lBOUlGdGRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdVlXMWxJRDBnYkc5M1pYSkRZWE5sTG1OaGJHd29ZaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWXk1eVpYQnNZV05sS0hCaGRHaFdZV3gxWlhNc0lHWjFibU4wYVc5dUlDaGhMQ0JpS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0lnSmlZZ2NHRnlZVzF6TG5CMWMyZ29LMklwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmhkR0V1Y0hWemFDaGJZbDFiWTI5dVkyRjBYU2h3WVhKaGJYTXBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdSaGRHRXVkRzlUZEhKcGJtY2dQU0JTTGw5d1lYUm9Nbk4wY21sdVp6dGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHUmhkR0U3WEc0Z0lDQWdmU3dnZEdocGN5d2dablZ1WTNScGIyNG9aV3hsYlNrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvSVdWc1pXMHBJSEpsZEhWeWJpQmxiR1Z0TzF4dUlDQWdJQ0FnSUNCMllYSWdibVYzUkdGMFlTQTlJRnRkTzF4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElHVnNaVzB1YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQnVaWGRNWlhabGJDQTlJRnRkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdabTl5SUNoMllYSWdhaUE5SURBN0lHb2dQQ0JsYkdWdFcybGRMbXhsYm1kMGFEc2dhaXNyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JtVjNUR1YyWld3dWNIVnphQ2hsYkdWdFcybGRXMnBkS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHNWxkMFJoZEdFdWNIVnphQ2h1WlhkTVpYWmxiQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUhKbGRIVnliaUJ1WlhkRVlYUmhPeUI5SUNrN1hHNGdJQ0FnTHk4Z1VFRlVTRk5jYmlBZ0lDQjJZWElnY0dGMGFITWdQU0JtZFc1amRHbHZiaUFvY0hNcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUhBZ1BTQndZWFJvY3k1d2N5QTlJSEJoZEdoekxuQnpJSHg4SUh0OU8xeHVJQ0FnSUNBZ0lDQnBaaUFvY0Z0d2MxMHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIQmJjSE5kTG5Oc1pXVndJRDBnTVRBd08xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY0Z0d2MxMGdQU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJ4bFpYQTZJREV3TUZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCelpYUlVhVzFsYjNWMEtHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlHdGxlU0JwYmlCd0tTQnBaaUFvY0Z0b1lYTmRLR3RsZVNrZ0ppWWdhMlY1SUNFOUlIQnpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0Z0clpYbGRMbk5zWldWd0xTMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJWEJiYTJWNVhTNXpiR1ZsY0NBbUppQmtaV3hsZEdVZ2NGdHJaWGxkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhCYmNITmRPMXh1SUNBZ0lIMDdYRzRnSUNBZ0x5cGNYRnh1SUNBZ0lDQXFJRkpoY0doaFpXd3VabWx1WkVSdmRITkJkRk5sWjIxbGJuUmNiaUFnSUNBZ1d5QnRaWFJvYjJRZ1hWeHVJQ0FnSUNBcUtseHVJQ0FnSUNBcUlGVjBhV3hwZEhrZ2JXVjBhRzlrWEc0Z0lDQWdJQ29xWEc0Z0lDQWdJQ29nUm1sdVpDQmtiM1FnWTI5dmNtUnBibUYwWlhNZ2IyNGdkR2hsSUdkcGRtVnVJR04xWW1saklHSmxlbWxsY2lCamRYSjJaU0JoZENCMGFHVWdaMmwyWlc0Z2RDNWNiaUFnSUNBZ1BpQlFZWEpoYldWMFpYSnpYRzRnSUNBZ0lDMGdjREY0SUNodWRXMWlaWElwSUhnZ2IyWWdkR2hsSUdacGNuTjBJSEJ2YVc1MElHOW1JSFJvWlNCamRYSjJaVnh1SUNBZ0lDQXRJSEF4ZVNBb2JuVnRZbVZ5S1NCNUlHOW1JSFJvWlNCbWFYSnpkQ0J3YjJsdWRDQnZaaUIwYUdVZ1kzVnlkbVZjYmlBZ0lDQWdMU0JqTVhnZ0tHNTFiV0psY2lrZ2VDQnZaaUIwYUdVZ1ptbHljM1FnWVc1amFHOXlJRzltSUhSb1pTQmpkWEoyWlZ4dUlDQWdJQ0F0SUdNeGVTQW9iblZ0WW1WeUtTQjVJRzltSUhSb1pTQm1hWEp6ZENCaGJtTm9iM0lnYjJZZ2RHaGxJR04xY25abFhHNGdJQ0FnSUMwZ1l6SjRJQ2h1ZFcxaVpYSXBJSGdnYjJZZ2RHaGxJSE5sWTI5dVpDQmhibU5vYjNJZ2IyWWdkR2hsSUdOMWNuWmxYRzRnSUNBZ0lDMGdZeko1SUNodWRXMWlaWElwSUhrZ2IyWWdkR2hsSUhObFkyOXVaQ0JoYm1Ob2IzSWdiMllnZEdobElHTjFjblpsWEc0Z0lDQWdJQzBnY0RKNElDaHVkVzFpWlhJcElIZ2diMllnZEdobElITmxZMjl1WkNCd2IybHVkQ0J2WmlCMGFHVWdZM1Z5ZG1WY2JpQWdJQ0FnTFNCd01ua2dLRzUxYldKbGNpa2dlU0J2WmlCMGFHVWdjMlZqYjI1a0lIQnZhVzUwSUc5bUlIUm9aU0JqZFhKMlpWeHVJQ0FnSUNBdElIUWdLRzUxYldKbGNpa2djRzl6YVhScGIyNGdiMjRnZEdobElHTjFjblpsSUNnd0xpNHhLVnh1SUNBZ0lDQTlJQ2h2WW1wbFkzUXBJSEJ2YVc1MElHbHVabTl5YldGMGFXOXVJR2x1SUdadmNtMWhkRHBjYmlBZ0lDQWdieUI3WEc0Z0lDQWdJRzhnSUNBZ0lIZzZJQ2h1ZFcxaVpYSXBJSGdnWTI5dmNtUnBibUYwWlNCdlppQjBhR1VnY0c5cGJuUmNiaUFnSUNBZ2J5QWdJQ0FnZVRvZ0tHNTFiV0psY2lrZ2VTQmpiMjl5WkdsdVlYUmxJRzltSUhSb1pTQndiMmx1ZEZ4dUlDQWdJQ0J2SUNBZ0lDQnRPaUI3WEc0Z0lDQWdJRzhnSUNBZ0lDQWdJQ0I0T2lBb2JuVnRZbVZ5S1NCNElHTnZiM0prYVc1aGRHVWdiMllnZEdobElHeGxablFnWVc1amFHOXlYRzRnSUNBZ0lHOGdJQ0FnSUNBZ0lDQjVPaUFvYm5WdFltVnlLU0I1SUdOdmIzSmthVzVoZEdVZ2IyWWdkR2hsSUd4bFpuUWdZVzVqYUc5eVhHNGdJQ0FnSUc4Z0lDQWdJSDFjYmlBZ0lDQWdieUFnSUNBZ2Jqb2dlMXh1SUNBZ0lDQnZJQ0FnSUNBZ0lDQWdlRG9nS0c1MWJXSmxjaWtnZUNCamIyOXlaR2x1WVhSbElHOW1JSFJvWlNCeWFXZG9kQ0JoYm1Ob2IzSmNiaUFnSUNBZ2J5QWdJQ0FnSUNBZ0lIazZJQ2h1ZFcxaVpYSXBJSGtnWTI5dmNtUnBibUYwWlNCdlppQjBhR1VnY21sbmFIUWdZVzVqYUc5eVhHNGdJQ0FnSUc4Z0lDQWdJSDFjYmlBZ0lDQWdieUFnSUNBZ2MzUmhjblE2SUh0Y2JpQWdJQ0FnYnlBZ0lDQWdJQ0FnSUhnNklDaHVkVzFpWlhJcElIZ2dZMjl2Y21ScGJtRjBaU0J2WmlCMGFHVWdjM1JoY25RZ2IyWWdkR2hsSUdOMWNuWmxYRzRnSUNBZ0lHOGdJQ0FnSUNBZ0lDQjVPaUFvYm5WdFltVnlLU0I1SUdOdmIzSmthVzVoZEdVZ2IyWWdkR2hsSUhOMFlYSjBJRzltSUhSb1pTQmpkWEoyWlZ4dUlDQWdJQ0J2SUNBZ0lDQjlYRzRnSUNBZ0lHOGdJQ0FnSUdWdVpEb2dlMXh1SUNBZ0lDQnZJQ0FnSUNBZ0lDQWdlRG9nS0c1MWJXSmxjaWtnZUNCamIyOXlaR2x1WVhSbElHOW1JSFJvWlNCbGJtUWdiMllnZEdobElHTjFjblpsWEc0Z0lDQWdJRzhnSUNBZ0lDQWdJQ0I1T2lBb2JuVnRZbVZ5S1NCNUlHTnZiM0prYVc1aGRHVWdiMllnZEdobElHVnVaQ0J2WmlCMGFHVWdZM1Z5ZG1WY2JpQWdJQ0FnYnlBZ0lDQWdmVnh1SUNBZ0lDQnZJQ0FnSUNCaGJIQm9ZVG9nS0c1MWJXSmxjaWtnWVc1bmJHVWdiMllnZEdobElHTjFjblpsSUdSbGNtbDJZWFJwZG1VZ1lYUWdkR2hsSUhCdmFXNTBYRzRnSUNBZ0lHOGdmVnh1SUNBZ0lGeGNLaTljYmlBZ0lDQlNMbVpwYm1SRWIzUnpRWFJUWldkdFpXNTBJRDBnWm5WdVkzUnBiMjRnS0hBeGVDd2djREY1TENCak1YZ3NJR014ZVN3Z1l6SjRMQ0JqTW5rc0lIQXllQ3dnY0RKNUxDQjBLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQjBNU0E5SURFZ0xTQjBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RERXpJRDBnY0c5M0tIUXhMQ0F6S1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJSFF4TWlBOUlIQnZkeWgwTVN3Z01pa3NYRzRnSUNBZ0lDQWdJQ0FnSUNCME1pQTlJSFFnS2lCMExGeHVJQ0FnSUNBZ0lDQWdJQ0FnZERNZ1BTQjBNaUFxSUhRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0I0SUQwZ2RERXpJQ29nY0RGNElDc2dkREV5SUNvZ015QXFJSFFnS2lCak1YZ2dLeUIwTVNBcUlETWdLaUIwSUNvZ2RDQXFJR015ZUNBcklIUXpJQ29nY0RKNExGeHVJQ0FnSUNBZ0lDQWdJQ0FnZVNBOUlIUXhNeUFxSUhBeGVTQXJJSFF4TWlBcUlETWdLaUIwSUNvZ1l6RjVJQ3NnZERFZ0tpQXpJQ29nZENBcUlIUWdLaUJqTW5rZ0t5QjBNeUFxSUhBeWVTeGNiaUFnSUNBZ0lDQWdJQ0FnSUcxNElEMGdjREY0SUNzZ01pQXFJSFFnS2lBb1l6RjRJQzBnY0RGNEtTQXJJSFF5SUNvZ0tHTXllQ0F0SURJZ0tpQmpNWGdnS3lCd01YZ3BMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2JYa2dQU0J3TVhrZ0t5QXlJQ29nZENBcUlDaGpNWGtnTFNCd01Ya3BJQ3NnZERJZ0tpQW9Zeko1SUMwZ01pQXFJR014ZVNBcklIQXhlU2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnVlQ0E5SUdNeGVDQXJJRElnS2lCMElDb2dLR015ZUNBdElHTXhlQ2tnS3lCME1pQXFJQ2h3TW5nZ0xTQXlJQ29nWXpKNElDc2dZekY0S1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJRzU1SUQwZ1l6RjVJQ3NnTWlBcUlIUWdLaUFvWXpKNUlDMGdZekY1S1NBcklIUXlJQ29nS0hBeWVTQXRJRElnS2lCak1ua2dLeUJqTVhrcExGeHVJQ0FnSUNBZ0lDQWdJQ0FnWVhnZ1BTQjBNU0FxSUhBeGVDQXJJSFFnS2lCak1YZ3NYRzRnSUNBZ0lDQWdJQ0FnSUNCaGVTQTlJSFF4SUNvZ2NERjVJQ3NnZENBcUlHTXhlU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHTjRJRDBnZERFZ0tpQmpNbmdnS3lCMElDb2djREo0TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdZM2tnUFNCME1TQXFJR015ZVNBcklIUWdLaUJ3TW5rc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JoYkhCb1lTQTlJQ2c1TUNBdElHMWhkR2d1WVhSaGJqSW9iWGdnTFNCdWVDd2diWGtnTFNCdWVTa2dLaUF4T0RBZ0x5QlFTU2s3WEc0Z0lDQWdJQ0FnSUNodGVDQStJRzU0SUh4OElHMTVJRHdnYm5rcElDWW1JQ2hoYkhCb1lTQXJQU0F4T0RBcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZURvZ2VDeGNiaUFnSUNBZ0lDQWdJQ0FnSUhrNklIa3NYRzRnSUNBZ0lDQWdJQ0FnSUNCdE9pQjdlRG9nYlhnc0lIazZJRzE1ZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJRzQ2SUh0NE9pQnVlQ3dnZVRvZ2JubDlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2MzUmhjblE2SUh0NE9pQmhlQ3dnZVRvZ1lYbDlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1pXNWtPaUI3ZURvZ1kzZ3NJSGs2SUdONWZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUdGc2NHaGhPaUJoYkhCb1lWeHVJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lIMDdYRzRnSUNBZ0x5cGNYRnh1SUNBZ0lDQXFJRkpoY0doaFpXd3VZbVY2YVdWeVFrSnZlRnh1SUNBZ0lDQmJJRzFsZEdodlpDQmRYRzRnSUNBZ0lDb3FYRzRnSUNBZ0lDb2dWWFJwYkdsMGVTQnRaWFJvYjJSY2JpQWdJQ0FnS2lwY2JpQWdJQ0FnS2lCU1pYUjFjbTRnWW05MWJtUnBibWNnWW05NElHOW1JR0VnWjJsMlpXNGdZM1ZpYVdNZ1ltVjZhV1Z5SUdOMWNuWmxYRzRnSUNBZ0lENGdVR0Z5WVcxbGRHVnljMXh1SUNBZ0lDQXRJSEF4ZUNBb2JuVnRZbVZ5S1NCNElHOW1JSFJvWlNCbWFYSnpkQ0J3YjJsdWRDQnZaaUIwYUdVZ1kzVnlkbVZjYmlBZ0lDQWdMU0J3TVhrZ0tHNTFiV0psY2lrZ2VTQnZaaUIwYUdVZ1ptbHljM1FnY0c5cGJuUWdiMllnZEdobElHTjFjblpsWEc0Z0lDQWdJQzBnWXpGNElDaHVkVzFpWlhJcElIZ2diMllnZEdobElHWnBjbk4wSUdGdVkyaHZjaUJ2WmlCMGFHVWdZM1Z5ZG1WY2JpQWdJQ0FnTFNCak1Ya2dLRzUxYldKbGNpa2dlU0J2WmlCMGFHVWdabWx5YzNRZ1lXNWphRzl5SUc5bUlIUm9aU0JqZFhKMlpWeHVJQ0FnSUNBdElHTXllQ0FvYm5WdFltVnlLU0I0SUc5bUlIUm9aU0J6WldOdmJtUWdZVzVqYUc5eUlHOW1JSFJvWlNCamRYSjJaVnh1SUNBZ0lDQXRJR015ZVNBb2JuVnRZbVZ5S1NCNUlHOW1JSFJvWlNCelpXTnZibVFnWVc1amFHOXlJRzltSUhSb1pTQmpkWEoyWlZ4dUlDQWdJQ0F0SUhBeWVDQW9iblZ0WW1WeUtTQjRJRzltSUhSb1pTQnpaV052Ym1RZ2NHOXBiblFnYjJZZ2RHaGxJR04xY25abFhHNGdJQ0FnSUMwZ2NESjVJQ2h1ZFcxaVpYSXBJSGtnYjJZZ2RHaGxJSE5sWTI5dVpDQndiMmx1ZENCdlppQjBhR1VnWTNWeWRtVmNiaUFnSUNBZ0tpQnZjbHh1SUNBZ0lDQXRJR0psZWlBb1lYSnlZWGtwSUdGeWNtRjVJRzltSUhOcGVDQndiMmx1ZEhNZ1ptOXlJR0psZW1sbGNpQmpkWEoyWlZ4dUlDQWdJQ0E5SUNodlltcGxZM1FwSUhCdmFXNTBJR2x1Wm05eWJXRjBhVzl1SUdsdUlHWnZjbTFoZERwY2JpQWdJQ0FnYnlCN1hHNGdJQ0FnSUc4Z0lDQWdJRzFwYmpvZ2UxeHVJQ0FnSUNCdklDQWdJQ0FnSUNBZ2VEb2dLRzUxYldKbGNpa2dlQ0JqYjI5eVpHbHVZWFJsSUc5bUlIUm9aU0JzWldaMElIQnZhVzUwWEc0Z0lDQWdJRzhnSUNBZ0lDQWdJQ0I1T2lBb2JuVnRZbVZ5S1NCNUlHTnZiM0prYVc1aGRHVWdiMllnZEdobElIUnZjQ0J3YjJsdWRGeHVJQ0FnSUNCdklDQWdJQ0I5WEc0Z0lDQWdJRzhnSUNBZ0lHMWhlRG9nZTF4dUlDQWdJQ0J2SUNBZ0lDQWdJQ0FnZURvZ0tHNTFiV0psY2lrZ2VDQmpiMjl5WkdsdVlYUmxJRzltSUhSb1pTQnlhV2RvZENCd2IybHVkRnh1SUNBZ0lDQnZJQ0FnSUNBZ0lDQWdlVG9nS0c1MWJXSmxjaWtnZVNCamIyOXlaR2x1WVhSbElHOW1JSFJvWlNCaWIzUjBiMjBnY0c5cGJuUmNiaUFnSUNBZ2J5QWdJQ0FnZlZ4dUlDQWdJQ0J2SUgxY2JpQWdJQ0JjWENvdlhHNGdJQ0FnVWk1aVpYcHBaWEpDUW05NElEMGdablZ1WTNScGIyNGdLSEF4ZUN3Z2NERjVMQ0JqTVhnc0lHTXhlU3dnWXpKNExDQmpNbmtzSUhBeWVDd2djREo1S1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2doVWk1cGN5aHdNWGdzSUZ3aVlYSnlZWGxjSWlrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhBeGVDQTlJRnR3TVhnc0lIQXhlU3dnWXpGNExDQmpNWGtzSUdNeWVDd2dZeko1TENCd01uZ3NJSEF5ZVYwN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkbUZ5SUdKaWIzZ2dQU0JqZFhKMlpVUnBiUzVoY0hCc2VTaHVkV3hzTENCd01YZ3BPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2VEb2dZbUp2ZUM1dGFXNHVlQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lIazZJR0ppYjNndWJXbHVMbmtzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjRNam9nWW1KdmVDNXRZWGd1ZUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSGt5T2lCaVltOTRMbTFoZUM1NUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnZDJsa2RHZzZJR0ppYjNndWJXRjRMbmdnTFNCaVltOTRMbTFwYmk1NExGeHVJQ0FnSUNBZ0lDQWdJQ0FnYUdWcFoyaDBPaUJpWW05NExtMWhlQzU1SUMwZ1ltSnZlQzV0YVc0dWVWeHVJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lIMDdYRzRnSUNBZ0x5cGNYRnh1SUNBZ0lDQXFJRkpoY0doaFpXd3VhWE5RYjJsdWRFbHVjMmxrWlVKQ2IzaGNiaUFnSUNBZ1d5QnRaWFJvYjJRZ1hWeHVJQ0FnSUNBcUtseHVJQ0FnSUNBcUlGVjBhV3hwZEhrZ2JXVjBhRzlrWEc0Z0lDQWdJQ29xWEc0Z0lDQWdJQ29nVW1WMGRYSnVjeUJnZEhKMVpXQWdhV1lnWjJsMlpXNGdjRzlwYm5RZ2FYTWdhVzV6YVdSbElHSnZkVzVrYVc1bklHSnZlR1Z6TGx4dUlDQWdJQ0ErSUZCaGNtRnRaWFJsY25OY2JpQWdJQ0FnTFNCaVltOTRJQ2h6ZEhKcGJtY3BJR0p2ZFc1a2FXNW5JR0p2ZUZ4dUlDQWdJQ0F0SUhnZ0tITjBjbWx1WnlrZ2VDQmpiMjl5WkdsdVlYUmxJRzltSUhSb1pTQndiMmx1ZEZ4dUlDQWdJQ0F0SUhrZ0tITjBjbWx1WnlrZ2VTQmpiMjl5WkdsdVlYUmxJRzltSUhSb1pTQndiMmx1ZEZ4dUlDQWdJQ0E5SUNoaWIyOXNaV0Z1S1NCZ2RISjFaV0FnYVdZZ2NHOXBiblFnYVc1emFXUmxYRzRnSUNBZ1hGd3FMMXh1SUNBZ0lGSXVhWE5RYjJsdWRFbHVjMmxrWlVKQ2IzZ2dQU0JtZFc1amRHbHZiaUFvWW1KdmVDd2dlQ3dnZVNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2VDQStQU0JpWW05NExuZ2dKaVlnZUNBOFBTQmlZbTk0TG5neUlDWW1JSGtnUGowZ1ltSnZlQzU1SUNZbUlIa2dQRDBnWW1KdmVDNTVNanRjYmlBZ0lDQjlPMXh1SUNBZ0lDOHFYRnhjYmlBZ0lDQWdLaUJTWVhCb1lXVnNMbWx6UWtKdmVFbHVkR1Z5YzJWamRGeHVJQ0FnSUNCYklHMWxkR2h2WkNCZFhHNGdJQ0FnSUNvcVhHNGdJQ0FnSUNvZ1ZYUnBiR2wwZVNCdFpYUm9iMlJjYmlBZ0lDQWdLaXBjYmlBZ0lDQWdLaUJTWlhSMWNtNXpJR0IwY25WbFlDQnBaaUIwZDI4Z1ltOTFibVJwYm1jZ1ltOTRaWE1nYVc1MFpYSnpaV04wWEc0Z0lDQWdJRDRnVUdGeVlXMWxkR1Z5YzF4dUlDQWdJQ0F0SUdKaWIzZ3hJQ2h6ZEhKcGJtY3BJR1pwY25OMElHSnZkVzVrYVc1bklHSnZlRnh1SUNBZ0lDQXRJR0ppYjNneUlDaHpkSEpwYm1jcElITmxZMjl1WkNCaWIzVnVaR2x1WnlCaWIzaGNiaUFnSUNBZ1BTQW9ZbTl2YkdWaGJpa2dZSFJ5ZFdWZ0lHbG1JSFJvWlhrZ2FXNTBaWEp6WldOMFhHNGdJQ0FnWEZ3cUwxeHVJQ0FnSUZJdWFYTkNRbTk0U1c1MFpYSnpaV04wSUQwZ1puVnVZM1JwYjI0Z0tHSmliM2d4TENCaVltOTRNaWtnZTF4dUlDQWdJQ0FnSUNCMllYSWdhU0E5SUZJdWFYTlFiMmx1ZEVsdWMybGtaVUpDYjNnN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCcEtHSmliM2d5TENCaVltOTRNUzU0TENCaVltOTRNUzU1S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdmSHdnYVNoaVltOTRNaXdnWW1KdmVERXVlRElzSUdKaWIzZ3hMbmtwWEc0Z0lDQWdJQ0FnSUNBZ0lDQjhmQ0JwS0dKaWIzZ3lMQ0JpWW05NE1TNTRMQ0JpWW05NE1TNTVNaWxjYmlBZ0lDQWdJQ0FnSUNBZ0lIeDhJR2tvWW1KdmVESXNJR0ppYjNneExuZ3lMQ0JpWW05NE1TNTVNaWxjYmlBZ0lDQWdJQ0FnSUNBZ0lIeDhJR2tvWW1KdmVERXNJR0ppYjNneUxuZ3NJR0ppYjNneUxua3BYRzRnSUNBZ0lDQWdJQ0FnSUNCOGZDQnBLR0ppYjNneExDQmlZbTk0TWk1NE1pd2dZbUp2ZURJdWVTbGNiaUFnSUNBZ0lDQWdJQ0FnSUh4OElHa29ZbUp2ZURFc0lHSmliM2d5TG5nc0lHSmliM2d5TG5reUtWeHVJQ0FnSUNBZ0lDQWdJQ0FnZkh3Z2FTaGlZbTk0TVN3Z1ltSnZlREl1ZURJc0lHSmliM2d5TG5reUtWeHVJQ0FnSUNBZ0lDQWdJQ0FnZkh3Z0tHSmliM2d4TG5nZ1BDQmlZbTk0TWk1NE1pQW1KaUJpWW05NE1TNTRJRDRnWW1KdmVESXVlQ0I4ZkNCaVltOTRNaTU0SUR3Z1ltSnZlREV1ZURJZ0ppWWdZbUp2ZURJdWVDQStJR0ppYjNneExuZ3BYRzRnSUNBZ0lDQWdJQ0FnSUNBbUppQW9ZbUp2ZURFdWVTQThJR0ppYjNneUxua3lJQ1ltSUdKaWIzZ3hMbmtnUGlCaVltOTRNaTU1SUh4OElHSmliM2d5TG5rZ1BDQmlZbTk0TVM1NU1pQW1KaUJpWW05NE1pNTVJRDRnWW1KdmVERXVlU2s3WEc0Z0lDQWdmVHRjYmlBZ0lDQm1kVzVqZEdsdmJpQmlZWE5sTXloMExDQndNU3dnY0RJc0lIQXpMQ0J3TkNrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnZERFZ1BTQXRNeUFxSUhBeElDc2dPU0FxSUhBeUlDMGdPU0FxSUhBeklDc2dNeUFxSUhBMExGeHVJQ0FnSUNBZ0lDQWdJQ0FnZERJZ1BTQjBJQ29nZERFZ0t5QTJJQ29nY0RFZ0xTQXhNaUFxSUhBeUlDc2dOaUFxSUhBek8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RDQXFJSFF5SUMwZ015QXFJSEF4SUNzZ015QXFJSEF5TzF4dUlDQWdJSDFjYmlBZ0lDQm1kVzVqZEdsdmJpQmlaWHBzWlc0b2VERXNJSGt4TENCNE1pd2dlVElzSUhnekxDQjVNeXdnZURRc0lIazBMQ0I2S1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2g2SUQwOUlHNTFiR3dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSG9nUFNBeE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSG9nUFNCNklENGdNU0EvSURFZ09pQjZJRHdnTUNBL0lEQWdPaUI2TzF4dUlDQWdJQ0FnSUNCMllYSWdlaklnUFNCNklDOGdNaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lHNGdQU0F4TWl4Y2JpQWdJQ0FnSUNBZ0lDQWdJRlIyWVd4MVpYTWdQU0JiTFRBdU1USTFNaXd3TGpFeU5USXNMVEF1TXpZM09Dd3dMak0yTnpnc0xUQXVOVGczTXl3d0xqVTROek1zTFRBdU56WTVPU3d3TGpjMk9Ua3NMVEF1T1RBME1Td3dMamt3TkRFc0xUQXVPVGd4Tml3d0xqazRNVFpkTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdRM1poYkhWbGN5QTlJRnN3TGpJME9URXNNQzR5TkRreExEQXVNak16TlN3d0xqSXpNelVzTUM0eU1ETXlMREF1TWpBek1pd3dMakUyTURFc01DNHhOakF4TERBdU1UQTJPU3d3TGpFd05qa3NNQzR3TkRjeUxEQXVNRFEzTWwwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6ZFcwZ1BTQXdPMXh1SUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUc0N0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdOMElEMGdlaklnS2lCVWRtRnNkV1Z6VzJsZElDc2dlaklzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZUdKaGMyVWdQU0JpWVhObE15aGpkQ3dnZURFc0lIZ3lMQ0I0TXl3Z2VEUXBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGxpWVhObElEMGdZbUZ6WlRNb1kzUXNJSGt4TENCNU1pd2dlVE1zSUhrMEtTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjFpSUQwZ2VHSmhjMlVnS2lCNFltRnpaU0FySUhsaVlYTmxJQ29nZVdKaGMyVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCemRXMGdLejBnUTNaaGJIVmxjMXRwWFNBcUlHMWhkR2d1YzNGeWRDaGpiMjFpS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2VqSWdLaUJ6ZFcwN1hHNGdJQ0FnZlZ4dUlDQWdJR1oxYm1OMGFXOXVJR2RsZEZSaGRFeGxiaWg0TVN3Z2VURXNJSGd5TENCNU1pd2dlRE1zSUhrekxDQjROQ3dnZVRRc0lHeHNLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaHNiQ0E4SURBZ2ZId2dZbVY2YkdWdUtIZ3hMQ0I1TVN3Z2VESXNJSGt5TENCNE15d2dlVE1zSUhnMExDQjVOQ2tnUENCc2JDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIWmhjaUIwSUQwZ01TeGNiaUFnSUNBZ0lDQWdJQ0FnSUhOMFpYQWdQU0IwSUM4Z01peGNiaUFnSUNBZ0lDQWdJQ0FnSUhReUlEMGdkQ0F0SUhOMFpYQXNYRzRnSUNBZ0lDQWdJQ0FnSUNCc0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnWlNBOUlDNHdNVHRjYmlBZ0lDQWdJQ0FnYkNBOUlHSmxlbXhsYmloNE1Td2dlVEVzSUhneUxDQjVNaXdnZURNc0lIa3pMQ0I0TkN3Z2VUUXNJSFF5S1R0Y2JpQWdJQ0FnSUNBZ2QyaHBiR1VnS0dGaWN5aHNJQzBnYkd3cElENGdaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjM1JsY0NBdlBTQXlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RESWdLejBnS0d3Z1BDQnNiQ0EvSURFZ09pQXRNU2tnS2lCemRHVndPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JDQTlJR0psZW14bGJpaDRNU3dnZVRFc0lIZ3lMQ0I1TWl3Z2VETXNJSGt6TENCNE5Dd2dlVFFzSUhReUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkREk3WEc0Z0lDQWdmVnh1SUNBZ0lHWjFibU4wYVc5dUlHbHVkR1Z5YzJWamRDaDRNU3dnZVRFc0lIZ3lMQ0I1TWl3Z2VETXNJSGt6TENCNE5Dd2dlVFFwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLRnh1SUNBZ0lDQWdJQ0FnSUNBZ2JXMWhlQ2g0TVN3Z2VESXBJRHdnYlcxcGJpaDRNeXdnZURRcElIeDhYRzRnSUNBZ0lDQWdJQ0FnSUNCdGJXbHVLSGd4TENCNE1pa2dQaUJ0YldGNEtIZ3pMQ0I0TkNrZ2ZIeGNiaUFnSUNBZ0lDQWdJQ0FnSUcxdFlYZ29lVEVzSUhreUtTQThJRzF0YVc0b2VUTXNJSGswS1NCOGZGeHVJQ0FnSUNBZ0lDQWdJQ0FnYlcxcGJpaDVNU3dnZVRJcElENGdiVzFoZUNoNU15d2dlVFFwWEc0Z0lDQWdJQ0FnSUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhaaGNpQnVlQ0E5SUNoNE1TQXFJSGt5SUMwZ2VURWdLaUI0TWlrZ0tpQW9lRE1nTFNCNE5Da2dMU0FvZURFZ0xTQjRNaWtnS2lBb2VETWdLaUI1TkNBdElIa3pJQ29nZURRcExGeHVJQ0FnSUNBZ0lDQWdJQ0FnYm5rZ1BTQW9lREVnS2lCNU1pQXRJSGt4SUNvZ2VESXBJQ29nS0hreklDMGdlVFFwSUMwZ0tIa3hJQzBnZVRJcElDb2dLSGd6SUNvZ2VUUWdMU0I1TXlBcUlIZzBLU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmxibTl0YVc1aGRHOXlJRDBnS0hneElDMGdlRElwSUNvZ0tIa3pJQzBnZVRRcElDMGdLSGt4SUMwZ2VUSXBJQ29nS0hneklDMGdlRFFwTzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2doWkdWdWIyMXBibUYwYjNJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCMllYSWdjSGdnUFNCdWVDQXZJR1JsYm05dGFXNWhkRzl5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjSGtnUFNCdWVTQXZJR1JsYm05dGFXNWhkRzl5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjSGd5SUQwZ0szQjRMblJ2Um1sNFpXUW9NaWtzWEc0Z0lDQWdJQ0FnSUNBZ0lDQndlVElnUFNBcmNIa3VkRzlHYVhobFpDZ3lLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnY0hneUlEd2dLMjF0YVc0b2VERXNJSGd5S1M1MGIwWnBlR1ZrS0RJcElIeDhYRzRnSUNBZ0lDQWdJQ0FnSUNCd2VESWdQaUFyYlcxaGVDaDRNU3dnZURJcExuUnZSbWw0WldRb01pa2dmSHhjYmlBZ0lDQWdJQ0FnSUNBZ0lIQjRNaUE4SUN0dGJXbHVLSGd6TENCNE5Da3VkRzlHYVhobFpDZ3lLU0I4ZkZ4dUlDQWdJQ0FnSUNBZ0lDQWdjSGd5SUQ0Z0syMXRZWGdvZURNc0lIZzBLUzUwYjBacGVHVmtLRElwSUh4OFhHNGdJQ0FnSUNBZ0lDQWdJQ0J3ZVRJZ1BDQXJiVzFwYmloNU1Td2dlVElwTG5SdlJtbDRaV1FvTWlrZ2ZIeGNiaUFnSUNBZ0lDQWdJQ0FnSUhCNU1pQStJQ3R0YldGNEtIa3hMQ0I1TWlrdWRHOUdhWGhsWkNneUtTQjhmRnh1SUNBZ0lDQWdJQ0FnSUNBZ2NIa3lJRHdnSzIxdGFXNG9lVE1zSUhrMEtTNTBiMFpwZUdWa0tESXBJSHg4WEc0Z0lDQWdJQ0FnSUNBZ0lDQndlVElnUGlBcmJXMWhlQ2g1TXl3Z2VUUXBMblJ2Um1sNFpXUW9NaWxjYmlBZ0lDQWdJQ0FnS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSHQ0T2lCd2VDd2dlVG9nY0hsOU8xeHVJQ0FnSUgxY2JpQWdJQ0JtZFc1amRHbHZiaUJwYm5SbGNpaGlaWG94TENCaVpYb3lLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJwYm5SbGNraGxiSEJsY2loaVpYb3hMQ0JpWlhveUtUdGNiaUFnSUNCOVhHNGdJQ0FnWm5WdVkzUnBiMjRnYVc1MFpYSkRiM1Z1ZENoaVpYb3hMQ0JpWlhveUtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnBiblJsY2tobGJIQmxjaWhpWlhveExDQmlaWG95TENBeEtUdGNiaUFnSUNCOVhHNGdJQ0FnWm5WdVkzUnBiMjRnYVc1MFpYSklaV3h3WlhJb1ltVjZNU3dnWW1WNk1pd2dhblZ6ZEVOdmRXNTBLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQmlZbTk0TVNBOUlGSXVZbVY2YVdWeVFrSnZlQ2hpWlhveEtTeGNiaUFnSUNBZ0lDQWdJQ0FnSUdKaWIzZ3lJRDBnVWk1aVpYcHBaWEpDUW05NEtHSmxlaklwTzF4dUlDQWdJQ0FnSUNCcFppQW9JVkl1YVhOQ1FtOTRTVzUwWlhKelpXTjBLR0ppYjNneExDQmlZbTk0TWlrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJxZFhOMFEyOTFiblFnUHlBd0lEb2dXMTA3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2RtRnlJR3d4SUQwZ1ltVjZiR1Z1TG1Gd2NHeDVLREFzSUdKbGVqRXBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2JESWdQU0JpWlhwc1pXNHVZWEJ3Ykhrb01Dd2dZbVY2TWlrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J1TVNBOUlHMXRZWGdvZm40b2JERWdMeUExS1N3Z01Ta3NYRzRnSUNBZ0lDQWdJQ0FnSUNCdU1pQTlJRzF0WVhnb2ZuNG9iRElnTHlBMUtTd2dNU2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmtiM1J6TVNBOUlGdGRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1pHOTBjeklnUFNCYlhTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhoNUlEMGdlMzBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWE1nUFNCcWRYTjBRMjkxYm5RZ1B5QXdJRG9nVzEwN1hHNGdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2diakVnS3lBeE95QnBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCd0lEMGdVaTVtYVc1a1JHOTBjMEYwVTJWbmJXVnVkQzVoY0hCc2VTaFNMQ0JpWlhveExtTnZibU5oZENocElDOGdiakVwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1J2ZEhNeExuQjFjMmdvZTNnNklIQXVlQ3dnZVRvZ2NDNTVMQ0IwT2lCcElDOGdiakY5S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQm1iM0lnS0drZ1BTQXdPeUJwSUR3Z2JqSWdLeUF4T3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIQWdQU0JTTG1acGJtUkViM1J6UVhSVFpXZHRaVzUwTG1Gd2NHeDVLRklzSUdKbGVqSXVZMjl1WTJGMEtHa2dMeUJ1TWlrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWkc5MGN6SXVjSFZ6YUNoN2VEb2djQzU0TENCNU9pQndMbmtzSUhRNklHa2dMeUJ1TW4wcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR1p2Y2lBb2FTQTlJREE3SUdrZ1BDQnVNVHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCcUlEMGdNRHNnYWlBOElHNHlPeUJxS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnWkdrZ1BTQmtiM1J6TVZ0cFhTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdreElEMGdaRzkwY3pGYmFTQXJJREZkTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmthaUE5SUdSdmRITXlXMnBkTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmthakVnUFNCa2IzUnpNbHRxSUNzZ01WMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOcElEMGdZV0p6S0dScE1TNTRJQzBnWkdrdWVDa2dQQ0F1TURBeElEOGdYQ0o1WENJZ09pQmNJbmhjSWl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMm9nUFNCaFluTW9aR294TG5nZ0xTQmthaTU0S1NBOElDNHdNREVnUHlCY0lubGNJaUE2SUZ3aWVGd2lMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGN5QTlJR2x1ZEdWeWMyVmpkQ2hrYVM1NExDQmthUzU1TENCa2FURXVlQ3dnWkdreExua3NJR1JxTG5nc0lHUnFMbmtzSUdScU1TNTRMQ0JrYWpFdWVTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dsektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDRlVnRwY3k1NExuUnZSbWw0WldRb05DbGRJRDA5SUdsekxua3VkRzlHYVhobFpDZzBLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWRHbHVkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZUhsYmFYTXVlQzUwYjBacGVHVmtLRFFwWFNBOUlHbHpMbmt1ZEc5R2FYaGxaQ2cwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhReElEMGdaR2t1ZENBcklHRmljeWdvYVhOYlkybGRJQzBnWkdsYlkybGRLU0F2SUNoa2FURmJZMmxkSUMwZ1pHbGJZMmxkS1NrZ0tpQW9aR2t4TG5RZ0xTQmthUzUwS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhReUlEMGdaR291ZENBcklHRmljeWdvYVhOYlkycGRJQzBnWkdwYlkycGRLU0F2SUNoa2FqRmJZMnBkSUMwZ1pHcGJZMnBkS1NrZ0tpQW9aR294TG5RZ0xTQmthaTUwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hReElENDlJREFnSmlZZ2RERWdQRDBnTVM0d01ERWdKaVlnZERJZ1BqMGdNQ0FtSmlCME1pQThQU0F4TGpBd01Ta2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dwMWMzUkRiM1Z1ZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsY3lzck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWE11Y0hWemFDaDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZzZJR2x6TG5nc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhrNklHbHpMbmtzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFF4T2lCdGJXbHVLSFF4TENBeEtTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RESTZJRzF0YVc0b2RESXNJREVwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhKbGN6dGNiaUFnSUNCOVhHNGdJQ0FnTHlwY1hGeHVJQ0FnSUNBcUlGSmhjR2hoWld3dWNHRjBhRWx1ZEdWeWMyVmpkR2x2Ymx4dUlDQWdJQ0JiSUcxbGRHaHZaQ0JkWEc0Z0lDQWdJQ29xWEc0Z0lDQWdJQ29nVlhScGJHbDBlU0J0WlhSb2IyUmNiaUFnSUNBZ0tpcGNiaUFnSUNBZ0tpQkdhVzVrY3lCcGJuUmxjbk5sWTNScGIyNXpJRzltSUhSM2J5QndZWFJvYzF4dUlDQWdJQ0ErSUZCaGNtRnRaWFJsY25OY2JpQWdJQ0FnTFNCd1lYUm9NU0FvYzNSeWFXNW5LU0J3WVhSb0lITjBjbWx1WjF4dUlDQWdJQ0F0SUhCaGRHZ3lJQ2h6ZEhKcGJtY3BJSEJoZEdnZ2MzUnlhVzVuWEc0Z0lDQWdJRDBnS0dGeWNtRjVLU0JrYjNSeklHOW1JR2x1ZEdWeWMyVmpkR2x2Ymx4dUlDQWdJQ0J2SUZ0Y2JpQWdJQ0FnYnlBZ0lDQWdlMXh1SUNBZ0lDQnZJQ0FnSUNBZ0lDQWdlRG9nS0c1MWJXSmxjaWtnZUNCamIyOXlaR2x1WVhSbElHOW1JSFJvWlNCd2IybHVkRnh1SUNBZ0lDQnZJQ0FnSUNBZ0lDQWdlVG9nS0c1MWJXSmxjaWtnZVNCamIyOXlaR2x1WVhSbElHOW1JSFJvWlNCd2IybHVkRnh1SUNBZ0lDQnZJQ0FnSUNBZ0lDQWdkREU2SUNodWRXMWlaWElwSUhRZ2RtRnNkV1VnWm05eUlITmxaMjFsYm5RZ2IyWWdjR0YwYURGY2JpQWdJQ0FnYnlBZ0lDQWdJQ0FnSUhReU9pQW9iblZ0WW1WeUtTQjBJSFpoYkhWbElHWnZjaUJ6WldkdFpXNTBJRzltSUhCaGRHZ3lYRzRnSUNBZ0lHOGdJQ0FnSUNBZ0lDQnpaV2R0Wlc1ME1Ub2dLRzUxYldKbGNpa2diM0prWlhJZ2JuVnRZbVZ5SUdadmNpQnpaV2R0Wlc1MElHOW1JSEJoZEdneFhHNGdJQ0FnSUc4Z0lDQWdJQ0FnSUNCelpXZHRaVzUwTWpvZ0tHNTFiV0psY2lrZ2IzSmtaWElnYm5WdFltVnlJR1p2Y2lCelpXZHRaVzUwSUc5bUlIQmhkR2d5WEc0Z0lDQWdJRzhnSUNBZ0lDQWdJQ0JpWlhveE9pQW9ZWEp5WVhrcElHVnBaMmgwSUdOdmIzSmthVzVoZEdWeklISmxjSEpsYzJWdWRHbHVaeUJpWlhwcHc2bHlJR04xY25abElHWnZjaUIwYUdVZ2MyVm5iV1Z1ZENCdlppQndZWFJvTVZ4dUlDQWdJQ0J2SUNBZ0lDQWdJQ0FnWW1WNk1qb2dLR0Z5Y21GNUtTQmxhV2RvZENCamIyOXlaR2x1WVhSbGN5QnlaWEJ5WlhObGJuUnBibWNnWW1WNmFjT3BjaUJqZFhKMlpTQm1iM0lnZEdobElITmxaMjFsYm5RZ2IyWWdjR0YwYURKY2JpQWdJQ0FnYnlBZ0lDQWdmVnh1SUNBZ0lDQnZJRjFjYmlBZ0lDQmNYQ292WEc0Z0lDQWdVaTV3WVhSb1NXNTBaWEp6WldOMGFXOXVJRDBnWm5WdVkzUnBiMjRnS0hCaGRHZ3hMQ0J3WVhSb01pa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdhVzUwWlhKUVlYUm9TR1ZzY0dWeUtIQmhkR2d4TENCd1lYUm9NaWs3WEc0Z0lDQWdmVHRjYmlBZ0lDQlNMbkJoZEdoSmJuUmxjbk5sWTNScGIyNU9kVzFpWlhJZ1BTQm1kVzVqZEdsdmJpQW9jR0YwYURFc0lIQmhkR2d5S1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCcGJuUmxjbEJoZEdoSVpXeHdaWElvY0dGMGFERXNJSEJoZEdneUxDQXhLVHRjYmlBZ0lDQjlPMXh1SUNBZ0lHWjFibU4wYVc5dUlHbHVkR1Z5VUdGMGFFaGxiSEJsY2lod1lYUm9NU3dnY0dGMGFESXNJR3AxYzNSRGIzVnVkQ2tnZTF4dUlDQWdJQ0FnSUNCd1lYUm9NU0E5SUZJdVgzQmhkR2d5WTNWeWRtVW9jR0YwYURFcE8xeHVJQ0FnSUNBZ0lDQndZWFJvTWlBOUlGSXVYM0JoZEdneVkzVnlkbVVvY0dGMGFESXBPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2VERXNJSGt4TENCNE1pd2dlVElzSUhneGJTd2dlVEZ0TENCNE1tMHNJSGt5YlN3Z1ltVjZNU3dnWW1WNk1peGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGN5QTlJR3AxYzNSRGIzVnVkQ0EvSURBZ09pQmJYVHRjYmlBZ0lDQWdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQXNJR2xwSUQwZ2NHRjBhREV1YkdWdVozUm9PeUJwSUR3Z2FXazdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIQnBJRDBnY0dGMGFERmJhVjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY0dsYk1GMGdQVDBnWENKTlhDSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I0TVNBOUlIZ3hiU0E5SUhCcFd6RmRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGt4SUQwZ2VURnRJRDBnY0dsYk1sMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHdhVnN3WFNBOVBTQmNJa05jSWlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpWlhveElEMGdXM2d4TENCNU1WMHVZMjl1WTJGMEtIQnBMbk5zYVdObEtERXBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2VERWdQU0JpWlhveFd6WmRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCNU1TQTlJR0psZWpGYk4xMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW1WNk1TQTlJRnQ0TVN3Z2VURXNJSGd4TENCNU1Td2dlREZ0TENCNU1XMHNJSGd4YlN3Z2VURnRYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2VERWdQU0I0TVcwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGt4SUQwZ2VURnRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJxSUQwZ01Dd2dhbW9nUFNCd1lYUm9NaTVzWlc1bmRHZzdJR29nUENCcWFqc2dhaXNyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCd2FpQTlJSEJoZEdneVcycGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jR3BiTUYwZ1BUMGdYQ0pOWENJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZ3lJRDBnZURKdElEMGdjR3BiTVYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCNU1pQTlJSGt5YlNBOUlIQnFXekpkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSEJxV3pCZElEMDlJRndpUTF3aUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW1WNk1pQTlJRnQ0TWl3Z2VUSmRMbU52Ym1OaGRDaHdhaTV6YkdsalpTZ3hLU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2VESWdQU0JpWlhveVd6WmRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhreUlEMGdZbVY2TWxzM1hUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbVY2TWlBOUlGdDRNaXdnZVRJc0lIZ3lMQ0I1TWl3Z2VESnRMQ0I1TW0wc0lIZ3liU3dnZVRKdFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I0TWlBOUlIZ3liVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCNU1pQTlJSGt5YlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQnBiblJ5SUQwZ2FXNTBaWEpJWld4d1pYSW9ZbVY2TVN3Z1ltVjZNaXdnYW5WemRFTnZkVzUwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHFkWE4wUTI5MWJuUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYTWdLejBnYVc1MGNqdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5SUNoMllYSWdheUE5SURBc0lHdHJJRDBnYVc1MGNpNXNaVzVuZEdnN0lHc2dQQ0JyYXpzZ2F5c3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2x1ZEhKYmExMHVjMlZuYldWdWRERWdQU0JwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwYm5SeVcydGRMbk5sWjIxbGJuUXlJRDBnYWp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVc1MGNsdHJYUzVpWlhveElEMGdZbVY2TVR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVc1MGNsdHJYUzVpWlhveUlEMGdZbVY2TWp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WeklEMGdjbVZ6TG1OdmJtTmhkQ2hwYm5SeUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnY21Wek8xeHVJQ0FnSUgxY2JpQWdJQ0F2S2x4Y1hHNGdJQ0FnSUNvZ1VtRndhR0ZsYkM1cGMxQnZhVzUwU1c1emFXUmxVR0YwYUZ4dUlDQWdJQ0JiSUcxbGRHaHZaQ0JkWEc0Z0lDQWdJQ29xWEc0Z0lDQWdJQ29nVlhScGJHbDBlU0J0WlhSb2IyUmNiaUFnSUNBZ0tpcGNiaUFnSUNBZ0tpQlNaWFIxY201eklHQjBjblZsWUNCcFppQm5hWFpsYmlCd2IybHVkQ0JwY3lCcGJuTnBaR1VnWVNCbmFYWmxiaUJqYkc5elpXUWdjR0YwYUM1Y2JpQWdJQ0FnUGlCUVlYSmhiV1YwWlhKelhHNGdJQ0FnSUMwZ2NHRjBhQ0FvYzNSeWFXNW5LU0J3WVhSb0lITjBjbWx1WjF4dUlDQWdJQ0F0SUhnZ0tHNTFiV0psY2lrZ2VDQnZaaUIwYUdVZ2NHOXBiblJjYmlBZ0lDQWdMU0I1SUNodWRXMWlaWElwSUhrZ2IyWWdkR2hsSUhCdmFXNTBYRzRnSUNBZ0lEMGdLR0p2YjJ4bFlXNHBJSFJ5ZFdVc0lHbG1JSEJ2YVc1MElHbHpJR2x1YzJsa1pTQjBhR1VnY0dGMGFGeHVJQ0FnSUZ4Y0tpOWNiaUFnSUNCU0xtbHpVRzlwYm5SSmJuTnBaR1ZRWVhSb0lEMGdablZ1WTNScGIyNGdLSEJoZEdnc0lIZ3NJSGtwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR0ppYjNnZ1BTQlNMbkJoZEdoQ1FtOTRLSEJoZEdncE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1VpNXBjMUJ2YVc1MFNXNXphV1JsUWtKdmVDaGlZbTk0TENCNExDQjVLU0FtSmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVc1MFpYSlFZWFJvU0dWc2NHVnlLSEJoZEdnc0lGdGJYQ0pOWENJc0lIZ3NJSGxkTENCYlhDSklYQ0lzSUdKaWIzZ3VlRElnS3lBeE1GMWRMQ0F4S1NBbElESWdQVDBnTVR0Y2JpQWdJQ0I5TzF4dUlDQWdJRkl1WDNKbGJXOTJaV1JHWVdOMGIzSjVJRDBnWm5WdVkzUnBiMjRnS0cxbGRHaHZaRzVoYldVcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHVjJaU2hjSW5KaGNHaGhaV3d1Ykc5blhDSXNJRzUxYkd3c0lGd2lVbUZ3YUdGY1hIaGxZbXc2SUhsdmRTQmhjbVVnWTJGc2JHbHVaeUIwYnlCdFpYUm9iMlFnWEZ4MU1qQXhZMXdpSUNzZ2JXVjBhRzlrYm1GdFpTQXJJRndpWEZ4MU1qQXhaQ0J2WmlCeVpXMXZkbVZrSUc5aWFtVmpkRndpTENCdFpYUm9iMlJ1WVcxbEtUdGNiaUFnSUNBZ0lDQWdmVHRjYmlBZ0lDQjlPMXh1SUNBZ0lDOHFYRnhjYmlBZ0lDQWdLaUJTWVhCb1lXVnNMbkJoZEdoQ1FtOTRYRzRnSUNBZ0lGc2diV1YwYUc5a0lGMWNiaUFnSUNBZ0tpcGNiaUFnSUNBZ0tpQlZkR2xzYVhSNUlHMWxkR2h2WkZ4dUlDQWdJQ0FxS2x4dUlDQWdJQ0FxSUZKbGRIVnliaUJpYjNWdVpHbHVaeUJpYjNnZ2IyWWdZU0JuYVhabGJpQndZWFJvWEc0Z0lDQWdJRDRnVUdGeVlXMWxkR1Z5YzF4dUlDQWdJQ0F0SUhCaGRHZ2dLSE4wY21sdVp5a2djR0YwYUNCemRISnBibWRjYmlBZ0lDQWdQU0FvYjJKcVpXTjBLU0JpYjNWdVpHbHVaeUJpYjNoY2JpQWdJQ0FnYnlCN1hHNGdJQ0FnSUc4Z0lDQWdJSGc2SUNodWRXMWlaWElwSUhnZ1kyOXZjbVJwYm1GMFpTQnZaaUIwYUdVZ2JHVm1kQ0IwYjNBZ2NHOXBiblFnYjJZZ2RHaGxJR0p2ZUZ4dUlDQWdJQ0J2SUNBZ0lDQjVPaUFvYm5WdFltVnlLU0I1SUdOdmIzSmthVzVoZEdVZ2IyWWdkR2hsSUd4bFpuUWdkRzl3SUhCdmFXNTBJRzltSUhSb1pTQmliM2hjYmlBZ0lDQWdieUFnSUNBZ2VESTZJQ2h1ZFcxaVpYSXBJSGdnWTI5dmNtUnBibUYwWlNCdlppQjBhR1VnY21sbmFIUWdZbTkwZEc5dElIQnZhVzUwSUc5bUlIUm9aU0JpYjNoY2JpQWdJQ0FnYnlBZ0lDQWdlVEk2SUNodWRXMWlaWElwSUhrZ1kyOXZjbVJwYm1GMFpTQnZaaUIwYUdVZ2NtbG5hSFFnWW05MGRHOXRJSEJ2YVc1MElHOW1JSFJvWlNCaWIzaGNiaUFnSUNBZ2J5QWdJQ0FnZDJsa2RHZzZJQ2h1ZFcxaVpYSXBJSGRwWkhSb0lHOW1JSFJvWlNCaWIzaGNiaUFnSUNBZ2J5QWdJQ0FnYUdWcFoyaDBPaUFvYm5WdFltVnlLU0JvWldsbmFIUWdiMllnZEdobElHSnZlRnh1SUNBZ0lDQnZJQ0FnSUNCamVEb2dLRzUxYldKbGNpa2dlQ0JqYjI5eVpHbHVZWFJsSUc5bUlIUm9aU0JqWlc1MFpYSWdiMllnZEdobElHSnZlRnh1SUNBZ0lDQnZJQ0FnSUNCamVUb2dLRzUxYldKbGNpa2dlU0JqYjI5eVpHbHVZWFJsSUc5bUlIUm9aU0JqWlc1MFpYSWdiMllnZEdobElHSnZlRnh1SUNBZ0lDQnZJSDFjYmlBZ0lDQmNYQ292WEc0Z0lDQWdkbUZ5SUhCaGRHaEVhVzFsYm5OcGIyNXpJRDBnVWk1d1lYUm9Ra0p2ZUNBOUlHWjFibU4wYVc5dUlDaHdZWFJvS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ3ZEdnZ1BTQndZWFJvY3lod1lYUm9LVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIQjBhQzVpWW05NEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWTJ4dmJtVW9jSFJvTG1KaWIzZ3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hjR0YwYUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSHQ0T2lBd0xDQjVPaUF3TENCM2FXUjBhRG9nTUN3Z2FHVnBaMmgwT2lBd0xDQjRNam9nTUN3Z2VUSTZJREI5TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIQmhkR2dnUFNCd1lYUm9NbU4xY25abEtIQmhkR2dwTzF4dUlDQWdJQ0FnSUNCMllYSWdlQ0E5SURBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0I1SUQwZ01DeGNiaUFnSUNBZ0lDQWdJQ0FnSUZnZ1BTQmJYU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lGa2dQU0JiWFN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSEE3WEc0Z0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdMQ0JwYVNBOUlIQmhkR2d1YkdWdVozUm9PeUJwSUR3Z2FXazdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY0NBOUlIQmhkR2hiYVYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NGc3dYU0E5UFNCY0lrMWNJaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhnZ1BTQndXekZkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhrZ1BTQndXekpkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZndWNIVnphQ2g0S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCWkxuQjFjMmdvZVNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCa2FXMGdQU0JqZFhKMlpVUnBiU2g0TENCNUxDQndXekZkTENCd1d6SmRMQ0J3V3pOZExDQndXelJkTENCd1d6VmRMQ0J3V3paZEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQllJRDBnV0Z0amIyNWpZWFJkS0dScGJTNXRhVzR1ZUN3Z1pHbHRMbTFoZUM1NEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQlpJRDBnV1Z0amIyNWpZWFJkS0dScGJTNXRhVzR1ZVN3Z1pHbHRMbTFoZUM1NUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjRJRDBnY0ZzMVhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjVJRDBnY0ZzMlhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjJZWElnZUcxcGJpQTlJRzF0YVc1YllYQndiSGxkS0RBc0lGZ3BMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2VXMXBiaUE5SUcxdGFXNWJZWEJ3YkhsZEtEQXNJRmtwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdlRzFoZUNBOUlHMXRZWGhiWVhCd2JIbGRLREFzSUZncExGeHVJQ0FnSUNBZ0lDQWdJQ0FnZVcxaGVDQTlJRzF0WVhoYllYQndiSGxkS0RBc0lGa3BMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2QybGtkR2dnUFNCNGJXRjRJQzBnZUcxcGJpeGNiaUFnSUNBZ0lDQWdJQ0FnSUdobGFXZG9kQ0E5SUhsdFlYZ2dMU0I1YldsdUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSmlJRDBnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhnNklIaHRhVzRzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZVRvZ2VXMXBiaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I0TWpvZ2VHMWhlQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I1TWpvZ2VXMWhlQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IzYVdSMGFEb2dkMmxrZEdnc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FHVnBaMmgwT2lCb1pXbG5hSFFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTNnNklIaHRhVzRnS3lCM2FXUjBhQ0F2SURJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kzazZJSGx0YVc0Z0t5Qm9aV2xuYUhRZ0x5QXlYRzRnSUNBZ0lDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ0lDQndkR2d1WW1KdmVDQTlJR05zYjI1bEtHSmlLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR0ppTzF4dUlDQWdJSDBzWEc0Z0lDQWdJQ0FnSUhCaGRHaERiRzl1WlNBOUlHWjFibU4wYVc5dUlDaHdZWFJvUVhKeVlYa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ5WlhNZ1BTQmpiRzl1WlNod1lYUm9RWEp5WVhrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WekxuUnZVM1J5YVc1bklEMGdVaTVmY0dGMGFESnpkSEpwYm1jN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbVZ6TzF4dUlDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQndZWFJvVkc5U1pXeGhkR2wyWlNBOUlGSXVYM0JoZEdoVWIxSmxiR0YwYVhabElEMGdablZ1WTNScGIyNGdLSEJoZEdoQmNuSmhlU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhCMGFDQTlJSEJoZEdoektIQmhkR2hCY25KaGVTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jSFJvTG5KbGJDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQndZWFJvUTJ4dmJtVW9jSFJvTG5KbGJDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lWSXVhWE1vY0dGMGFFRnljbUY1TENCaGNuSmhlU2tnZkh3Z0lWSXVhWE1vY0dGMGFFRnljbUY1SUNZbUlIQmhkR2hCY25KaGVWc3dYU3dnWVhKeVlYa3BLU0I3SUM4dklISnZkV2RvSUdGemMzVnRjSFJwYjI1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd1lYUm9RWEp5WVhrZ1BTQlNMbkJoY25ObFVHRjBhRk4wY21sdVp5aHdZWFJvUVhKeVlYa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlISmxjeUE5SUZ0ZExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZ2dQU0F3TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhrZ1BTQXdMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzE0SUQwZ01DeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRlU0E5SURBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzUmhjblFnUFNBd08xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIQmhkR2hCY25KaGVWc3dYVnN3WFNBOVBTQmNJazFjSWlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZ2dQU0J3WVhSb1FYSnlZWGxiTUYxYk1WMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlU0E5SUhCaGRHaEJjbkpoZVZzd1hWc3lYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J0ZUNBOUlIZzdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiWGtnUFNCNU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITjBZWEowS3lzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVnpMbkIxYzJnb1cxd2lUVndpTENCNExDQjVYU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCcElEMGdjM1JoY25Rc0lHbHBJRDBnY0dGMGFFRnljbUY1TG14bGJtZDBhRHNnYVNBOElHbHBPeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnY2lBOUlISmxjMXRwWFNBOUlGdGRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd1lTQTlJSEJoZEdoQmNuSmhlVnRwWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jR0ZiTUYwZ0lUMGdiRzkzWlhKRFlYTmxMbU5oYkd3b2NHRmJNRjBwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpiTUYwZ1BTQnNiM2RsY2tOaGMyVXVZMkZzYkNod1lWc3dYU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITjNhWFJqYUNBb2Nsc3dYU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQmNJbUZjSWpwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlXekZkSUQwZ2NHRmJNVjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2Nsc3lYU0E5SUhCaFd6SmRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKYk0xMGdQU0J3WVZzelhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5V3pSZElEMGdjR0ZiTkYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbHMxWFNBOUlIQmhXelZkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmJObDBnUFNBcktIQmhXelpkSUMwZ2VDa3VkRzlHYVhobFpDZ3pLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVd6ZGRJRDBnS3lod1lWczNYU0F0SUhrcExuUnZSbWw0WldRb015azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUZ3aWRsd2lPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKYk1WMGdQU0FyS0hCaFd6RmRJQzBnZVNrdWRHOUdhWGhsWkNnektUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnWENKdFhDSTZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYlhnZ1BTQndZVnN4WFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRlU0E5SUhCaFd6SmRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR1ZtWVhWc2REcGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJxSUQwZ01Td2dhbW9nUFNCd1lTNXNaVzVuZEdnN0lHb2dQQ0JxYWpzZ2Fpc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpiYWwwZ1BTQXJLSEJoVzJwZElDMGdLQ2hxSUNVZ01pa2dQeUI0SURvZ2VTa3BMblJ2Um1sNFpXUW9NeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NpQTlJSEpsYzF0cFhTQTlJRnRkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY0dGYk1GMGdQVDBnWENKdFhDSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzE0SUQwZ2NHRmJNVjBnS3lCNE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JYa2dQU0J3WVZzeVhTQXJJSGs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUlDaDJZWElnYXlBOUlEQXNJR3RySUQwZ2NHRXViR1Z1WjNSb095QnJJRHdnYTJzN0lHc3JLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WelcybGRXMnRkSUQwZ2NHRmJhMTA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUd4bGJpQTlJSEpsYzF0cFhTNXNaVzVuZEdnN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzZHBkR05vSUNoeVpYTmJhVjFiTUYwcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQmNJbnBjSWpwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhnZ1BTQnRlRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGtnUFNCdGVUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUZ3aWFGd2lPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlQ0FyUFNBcmNtVnpXMmxkVzJ4bGJpQXRJREZkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdYQ0oyWENJNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCNUlDczlJQ3R5WlhOYmFWMWJiR1Z1SUMwZ01WMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR1ZtWVhWc2REcGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZ2dLejBnSzNKbGMxdHBYVnRzWlc0Z0xTQXlYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGtnS3owZ0szSmxjMXRwWFZ0c1pXNGdMU0F4WFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWE11ZEc5VGRISnBibWNnUFNCU0xsOXdZWFJvTW5OMGNtbHVaenRjYmlBZ0lDQWdJQ0FnSUNBZ0lIQjBhQzV5Wld3Z1BTQndZWFJvUTJ4dmJtVW9jbVZ6S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnlaWE03WEc0Z0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lIQmhkR2hVYjBGaWMyOXNkWFJsSUQwZ1VpNWZjR0YwYUZSdlFXSnpiMngxZEdVZ1BTQm1kVzVqZEdsdmJpQW9jR0YwYUVGeWNtRjVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnY0hSb0lEMGdjR0YwYUhNb2NHRjBhRUZ5Y21GNUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHdkR2d1WVdKektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIQmhkR2hEYkc5dVpTaHdkR2d1WVdKektUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaFVpNXBjeWh3WVhSb1FYSnlZWGtzSUdGeWNtRjVLU0I4ZkNBaFVpNXBjeWh3WVhSb1FYSnlZWGtnSmlZZ2NHRjBhRUZ5Y21GNVd6QmRMQ0JoY25KaGVTa3BJSHNnTHk4Z2NtOTFaMmdnWVhOemRXMXdkR2x2Ymx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCaGRHaEJjbkpoZVNBOUlGSXVjR0Z5YzJWUVlYUm9VM1J5YVc1bktIQmhkR2hCY25KaGVTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lYQmhkR2hCY25KaGVTQjhmQ0FoY0dGMGFFRnljbUY1TG14bGJtZDBhQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJiVzF3aVRWd2lMQ0F3TENBd1hWMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2NtVnpJRDBnVzEwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2VDQTlJREFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZVNBOUlEQXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiWGdnUFNBd0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMTVJRDBnTUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemRHRnlkQ0E5SURBN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NHRjBhRUZ5Y21GNVd6QmRXekJkSUQwOUlGd2lUVndpS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2VDQTlJQ3R3WVhSb1FYSnlZWGxiTUYxYk1WMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlU0E5SUN0d1lYUm9RWEp5WVhsYk1GMWJNbDA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYlhnZ1BTQjRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzE1SUQwZ2VUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpkR0Z5ZENzck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxjMXN3WFNBOUlGdGNJazFjSWl3Z2VDd2dlVjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdZM0o2SUQwZ2NHRjBhRUZ5Y21GNUxteGxibWQwYUNBOVBTQXpJQ1ltSUhCaGRHaEJjbkpoZVZzd1hWc3dYU0E5UFNCY0lrMWNJaUFtSmlCd1lYUm9RWEp5WVhsYk1WMWJNRjB1ZEc5VmNIQmxja05oYzJVb0tTQTlQU0JjSWxKY0lpQW1KaUJ3WVhSb1FYSnlZWGxiTWwxYk1GMHVkRzlWY0hCbGNrTmhjMlVvS1NBOVBTQmNJbHBjSWp0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJSElzSUhCaExDQnBJRDBnYzNSaGNuUXNJR2xwSUQwZ2NHRjBhRUZ5Y21GNUxteGxibWQwYURzZ2FTQThJR2xwT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhNdWNIVnphQ2h5SUQwZ1cxMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJoSUQwZ2NHRjBhRUZ5Y21GNVcybGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNod1lWc3dYU0FoUFNCMWNIQmxja05oYzJVdVkyRnNiQ2h3WVZzd1hTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2Nsc3dYU0E5SUhWd2NHVnlRMkZ6WlM1allXeHNLSEJoV3pCZEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNkcGRHTm9JQ2h5V3pCZEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUZ3aVFWd2lPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKYk1WMGdQU0J3WVZzeFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5V3pKZElEMGdjR0ZiTWwwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbHN6WFNBOUlIQmhXek5kTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmJORjBnUFNCd1lWczBYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVd6VmRJRDBnY0dGYk5WMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY2xzMlhTQTlJQ3NvY0dGYk5sMGdLeUI0S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlXemRkSUQwZ0t5aHdZVnMzWFNBcklIa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCY0lsWmNJanBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVd6RmRJRDBnSzNCaFd6RmRJQ3NnZVR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdYQ0pJWENJNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbHN4WFNBOUlDdHdZVnN4WFNBcklIZzdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUZ3aVVsd2lPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQmtiM1J6SUQwZ1czZ3NJSGxkVzJOdmJtTmhkRjBvY0dFdWMyeHBZMlVvTVNrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR29nUFNBeUxDQnFhaUE5SUdSdmRITXViR1Z1WjNSb095QnFJRHdnYW1vN0lHb3JLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrYjNSelcycGRJRDBnSzJSdmRITmJhbDBnS3lCNE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa2IzUnpXeXNyYWwwZ1BTQXJaRzkwYzF0cVhTQXJJSGs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsY3k1d2IzQW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYTWdQU0J5WlhOYlkyOXVZMkYwWFNoallYUnRkV3hzVW05dE1tSmxlbWxsY2loa2IzUnpMQ0JqY25vcEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnWENKTlhDSTZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYlhnZ1BTQXJjR0ZiTVYwZ0t5QjRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxNUlEMGdLM0JoV3pKZElDc2dlVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JsWm1GMWJIUTZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUlDaHFJRDBnTVN3Z2Ftb2dQU0J3WVM1c1pXNW5kR2c3SUdvZ1BDQnFhanNnYWlzcktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmJhbDBnUFNBcmNHRmJhbDBnS3lBb0tHb2dKU0F5S1NBL0lIZ2dPaUI1S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tIQmhXekJkSUQwOUlGd2lVbHdpS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1J2ZEhNZ1BTQmJlQ3dnZVYxYlkyOXVZMkYwWFNod1lTNXpiR2xqWlNneEtTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGN5NXdiM0FvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZ6SUQwZ2NtVnpXMk52Ym1OaGRGMG9ZMkYwYlhWc2JGSnZiVEppWlhwcFpYSW9aRzkwY3l3Z1kzSjZLU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISWdQU0JiWENKU1hDSmRXMk52Ym1OaGRGMG9jR0V1YzJ4cFkyVW9MVElwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnJJRDBnTUN3Z2Eyc2dQU0J3WVM1c1pXNW5kR2c3SUdzZ1BDQnJhenNnYXlzcktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlXMnRkSUQwZ2NHRmJhMTA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM2RwZEdOb0lDaHlXekJkS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1hDSmFYQ0k2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I0SUQwZ2JYZzdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjVJRDBnYlhrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0JjSWtoY0lqcGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZ2dQU0J5V3pGZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnWENKV1hDSTZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjVJRDBnY2xzeFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUZ3aVRWd2lPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiWGdnUFNCeVczSXViR1Z1WjNSb0lDMGdNbDA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J0ZVNBOUlISmJjaTVzWlc1bmRHZ2dMU0F4WFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR1ZtWVhWc2REcGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZ2dQU0J5VzNJdWJHVnVaM1JvSUMwZ01sMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjVJRDBnY2x0eUxteGxibWQwYUNBdElERmRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGN5NTBiMU4wY21sdVp5QTlJRkl1WDNCaGRHZ3ljM1J5YVc1bk8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY0hSb0xtRmljeUE5SUhCaGRHaERiRzl1WlNoeVpYTXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhKbGN6dGNiaUFnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnYkRKaklEMGdablZ1WTNScGIyNGdLSGd4TENCNU1Td2dlRElzSUhreUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnVzNneExDQjVNU3dnZURJc0lIa3lMQ0I0TWl3Z2VUSmRPMXh1SUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNCeE1tTWdQU0JtZFc1amRHbHZiaUFvZURFc0lIa3hMQ0JoZUN3Z1lYa3NJSGd5TENCNU1pa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJRjh4TXlBOUlERWdMeUF6TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUY4eU15QTlJRElnTHlBek8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRnRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1h6RXpJQ29nZURFZ0t5QmZNak1nS2lCaGVDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWHpFeklDb2dlVEVnS3lCZk1qTWdLaUJoZVN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYekV6SUNvZ2VESWdLeUJmTWpNZ0tpQmhlQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1h6RXpJQ29nZVRJZ0t5QmZNak1nS2lCaGVTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZURJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGt5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWFR0Y2JpQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdZVEpqSUQwZ1puVnVZM1JwYjI0Z0tIZ3hMQ0I1TVN3Z2NuZ3NJSEo1TENCaGJtZHNaU3dnYkdGeVoyVmZZWEpqWDJac1lXY3NJSE4zWldWd1gyWnNZV2NzSUhneUxDQjVNaXdnY21WamRYSnphWFpsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCbWIzSWdiVzl5WlNCcGJtWnZjbTFoZEdsdmJpQnZaaUIzYUdWeVpTQjBhR2x6SUcxaGRHZ2dZMkZ0WlNCbWNtOXRJSFpwYzJsME9seHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2FIUjBjRG92TDNkM2R5NTNNeTV2Y21jdlZGSXZVMVpITVRFdmFXMXdiRzV2ZEdVdWFIUnRiQ05CY21OSmJYQnNaVzFsYm5SaGRHbHZiazV2ZEdWelhHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1h6RXlNQ0E5SUZCSklDb2dNVEl3SUM4Z01UZ3dMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpoWkNBOUlGQkpJQzhnTVRnd0lDb2dLQ3RoYm1kc1pTQjhmQ0F3S1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYTWdQU0JiWFN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCNGVTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnliM1JoZEdVZ1BTQmpZV05vWlhJb1puVnVZM1JwYjI0Z0tIZ3NJSGtzSUhKaFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdXQ0E5SUhnZ0tpQnRZWFJvTG1OdmN5aHlZV1FwSUMwZ2VTQXFJRzFoZEdndWMybHVLSEpoWkNrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCWklEMGdlQ0FxSUcxaGRHZ3VjMmx1S0hKaFpDa2dLeUI1SUNvZ2JXRjBhQzVqYjNNb2NtRmtLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUh0NE9pQllMQ0I1T2lCWmZUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doY21WamRYSnphWFpsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2VIa2dQU0J5YjNSaGRHVW9lREVzSUhreExDQXRjbUZrS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCNE1TQTlJSGg1TG5nN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2VURWdQU0I0ZVM1NU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIaDVJRDBnY205MFlYUmxLSGd5TENCNU1pd2dMWEpoWkNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2VESWdQU0I0ZVM1NE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIa3lJRDBnZUhrdWVUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnWTI5eklEMGdiV0YwYUM1amIzTW9VRWtnTHlBeE9EQWdLaUJoYm1kc1pTa3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOcGJpQTlJRzFoZEdndWMybHVLRkJKSUM4Z01UZ3dJQ29nWVc1bmJHVXBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCNElEMGdLSGd4SUMwZ2VESXBJQzhnTWl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlU0E5SUNoNU1TQXRJSGt5S1NBdklESTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdnZ1BTQW9lQ0FxSUhncElDOGdLSEo0SUNvZ2NuZ3BJQ3NnS0hrZ0tpQjVLU0F2SUNoeWVTQXFJSEo1S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9hQ0ErSURFcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYUNBOUlHMWhkR2d1YzNGeWRDaG9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NuZ2dQU0JvSUNvZ2NuZzdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKNUlEMGdhQ0FxSUhKNU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnY25neUlEMGdjbmdnS2lCeWVDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY25reUlEMGdjbmtnS2lCeWVTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYXlBOUlDaHNZWEpuWlY5aGNtTmZabXhoWnlBOVBTQnpkMlZsY0Y5bWJHRm5JRDhnTFRFZ09pQXhLU0FxWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J0WVhSb0xuTnhjblFvWVdKektDaHllRElnS2lCeWVUSWdMU0J5ZURJZ0tpQjVJQ29nZVNBdElISjVNaUFxSUhnZ0tpQjRLU0F2SUNoeWVESWdLaUI1SUNvZ2VTQXJJSEo1TWlBcUlIZ2dLaUI0S1NrcExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqZUNBOUlHc2dLaUJ5ZUNBcUlIa2dMeUJ5ZVNBcklDaDRNU0FySUhneUtTQXZJRElzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTjVJRDBnYXlBcUlDMXllU0FxSUhnZ0x5QnllQ0FySUNoNU1TQXJJSGt5S1NBdklESXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdZeElEMGdiV0YwYUM1aGMybHVLQ2dvZVRFZ0xTQmplU2tnTHlCeWVTa3VkRzlHYVhobFpDZzVLU2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWXlJRDBnYldGMGFDNWhjMmx1S0Nnb2VUSWdMU0JqZVNrZ0x5QnllU2t1ZEc5R2FYaGxaQ2c1S1NrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1NU0E5SUhneElEd2dZM2dnUHlCUVNTQXRJR1l4SURvZ1pqRTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaaklnUFNCNE1pQThJR040SUQ4Z1VFa2dMU0JtTWlBNklHWXlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1l4SUR3Z01DQW1KaUFvWmpFZ1BTQlFTU0FxSURJZ0t5Qm1NU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWmpJZ1BDQXdJQ1ltSUNobU1pQTlJRkJKSUNvZ01pQXJJR1l5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jM2RsWlhCZlpteGhaeUFtSmlCbU1TQStJR1l5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1l4SUQwZ1pqRWdMU0JRU1NBcUlESTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaGMzZGxaWEJmWm14aFp5QW1KaUJtTWlBK0lHWXhLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWXlJRDBnWmpJZ0xTQlFTU0FxSURJN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtTVNBOUlISmxZM1Z5YzJsMlpWc3dYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtTWlBOUlISmxZM1Z5YzJsMlpWc3hYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqZUNBOUlISmxZM1Z5YzJsMlpWc3lYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqZVNBOUlISmxZM1Z5YzJsMlpWc3pYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQmtaaUE5SUdZeUlDMGdaakU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWVdKektHUm1LU0ErSUY4eE1qQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1pqSnZiR1FnUFNCbU1peGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZURKdmJHUWdQU0I0TWl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlVEp2YkdRZ1BTQjVNanRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtTWlBOUlHWXhJQ3NnWHpFeU1DQXFJQ2h6ZDJWbGNGOW1iR0ZuSUNZbUlHWXlJRDRnWmpFZ1B5QXhJRG9nTFRFcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZ3lJRDBnWTNnZ0t5QnllQ0FxSUcxaGRHZ3VZMjl6S0dZeUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjVNaUE5SUdONUlDc2djbmtnS2lCdFlYUm9Mbk5wYmlobU1pazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZ6SUQwZ1lUSmpLSGd5TENCNU1pd2djbmdzSUhKNUxDQmhibWRzWlN3Z01Dd2djM2RsWlhCZlpteGhaeXdnZURKdmJHUXNJSGt5YjJ4a0xDQmJaaklzSUdZeWIyeGtMQ0JqZUN3Z1kzbGRLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUdSbUlEMGdaaklnTFNCbU1UdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQmpNU0E5SUcxaGRHZ3VZMjl6S0dZeEtTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpNU0E5SUcxaGRHZ3VjMmx1S0dZeEtTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpNaUE5SUcxaGRHZ3VZMjl6S0dZeUtTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpNaUE5SUcxaGRHZ3VjMmx1S0dZeUtTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBJRDBnYldGMGFDNTBZVzRvWkdZZ0x5QTBLU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JvZUNBOUlEUWdMeUF6SUNvZ2NuZ2dLaUIwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdoNUlEMGdOQ0F2SURNZ0tpQnllU0FxSUhRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JURWdQU0JiZURFc0lIa3hYU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J0TWlBOUlGdDRNU0FySUdoNElDb2djekVzSUhreElDMGdhSGtnS2lCak1WMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiVE1nUFNCYmVESWdLeUJvZUNBcUlITXlMQ0I1TWlBdElHaDVJQ29nWXpKZExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMDBJRDBnVzNneUxDQjVNbDA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnRNbHN3WFNBOUlESWdLaUJ0TVZzd1hTQXRJRzB5V3pCZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYlRKYk1WMGdQU0F5SUNvZ2JURmJNVjBnTFNCdE1sc3hYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h5WldOMWNuTnBkbVVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnVzIweUxDQnRNeXdnYlRSZFcyTnZibU5oZEYwb2NtVnpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVnpJRDBnVzIweUxDQnRNeXdnYlRSZFcyTnZibU5oZEYwb2NtVnpLUzVxYjJsdUtDbGJjM0JzYVhSZEtGd2lMRndpS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdibVYzY21WeklEMGdXMTA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQXNJR2xwSUQwZ2NtVnpMbXhsYm1kMGFEc2dhU0E4SUdscE95QnBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdibVYzY21WelcybGRJRDBnYVNBbElESWdQeUJ5YjNSaGRHVW9jbVZ6VzJrZ0xTQXhYU3dnY21WelcybGRMQ0J5WVdRcExua2dPaUJ5YjNSaGRHVW9jbVZ6VzJsZExDQnlaWE5iYVNBcklERmRMQ0J5WVdRcExuZzdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGR5WlhNN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lHWnBibVJFYjNSQmRGTmxaMjFsYm5RZ1BTQm1kVzVqZEdsdmJpQW9jREY0TENCd01Ya3NJR014ZUN3Z1l6RjVMQ0JqTW5nc0lHTXllU3dnY0RKNExDQndNbmtzSUhRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQjBNU0E5SURFZ0xTQjBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCNE9pQndiM2NvZERFc0lETXBJQ29nY0RGNElDc2djRzkzS0hReExDQXlLU0FxSURNZ0tpQjBJQ29nWXpGNElDc2dkREVnS2lBeklDb2dkQ0FxSUhRZ0tpQmpNbmdnS3lCd2IzY29kQ3dnTXlrZ0tpQndNbmdzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZVRvZ2NHOTNLSFF4TENBektTQXFJSEF4ZVNBcklIQnZkeWgwTVN3Z01pa2dLaUF6SUNvZ2RDQXFJR014ZVNBcklIUXhJQ29nTXlBcUlIUWdLaUIwSUNvZ1l6SjVJQ3NnY0c5M0tIUXNJRE1wSUNvZ2NESjVYRzRnSUNBZ0lDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0JqZFhKMlpVUnBiU0E5SUdOaFkyaGxjaWhtZFc1amRHbHZiaUFvY0RGNExDQndNWGtzSUdNeGVDd2dZekY1TENCak1uZ3NJR015ZVN3Z2NESjRMQ0J3TW5rcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQmhJRDBnS0dNeWVDQXRJRElnS2lCak1YZ2dLeUJ3TVhncElDMGdLSEF5ZUNBdElESWdLaUJqTW5nZ0t5QmpNWGdwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdJZ1BTQXlJQ29nS0dNeGVDQXRJSEF4ZUNrZ0xTQXlJQ29nS0dNeWVDQXRJR014ZUNrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1l5QTlJSEF4ZUNBdElHTXhlQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwTVNBOUlDZ3RZaUFySUcxaGRHZ3VjM0Z5ZENoaUlDb2dZaUF0SURRZ0tpQmhJQ29nWXlrcElDOGdNaUF2SUdFc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RESWdQU0FvTFdJZ0xTQnRZWFJvTG5OeGNuUW9ZaUFxSUdJZ0xTQTBJQ29nWVNBcUlHTXBLU0F2SURJZ0x5QmhMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGtnUFNCYmNERjVMQ0J3TW5sZExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZ2dQU0JiY0RGNExDQndNbmhkTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSdmREdGNiaUFnSUNBZ0lDQWdJQ0FnSUdGaWN5aDBNU2tnUGlCY0lqRmxNVEpjSWlBbUppQW9kREVnUFNBdU5TazdYRzRnSUNBZ0lDQWdJQ0FnSUNCaFluTW9kRElwSUQ0Z1hDSXhaVEV5WENJZ0ppWWdLSFF5SUQwZ0xqVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFF4SUQ0Z01DQW1KaUIwTVNBOElERXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrYjNRZ1BTQm1hVzVrUkc5MFFYUlRaV2R0Wlc1MEtIQXhlQ3dnY0RGNUxDQmpNWGdzSUdNeGVTd2dZeko0TENCak1ua3NJSEF5ZUN3Z2NESjVMQ0IwTVNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2VDNXdkWE5vS0dSdmRDNTRLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I1TG5CMWMyZ29aRzkwTG5rcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hReUlENGdNQ0FtSmlCME1pQThJREVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa2IzUWdQU0JtYVc1a1JHOTBRWFJUWldkdFpXNTBLSEF4ZUN3Z2NERjVMQ0JqTVhnc0lHTXhlU3dnWXpKNExDQmpNbmtzSUhBeWVDd2djREo1TENCME1pazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlQzV3ZFhOb0tHUnZkQzU0S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCNUxuQjFjMmdvWkc5MExua3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnWVNBOUlDaGpNbmtnTFNBeUlDb2dZekY1SUNzZ2NERjVLU0F0SUNod01ua2dMU0F5SUNvZ1l6SjVJQ3NnWXpGNUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdJZ1BTQXlJQ29nS0dNeGVTQXRJSEF4ZVNrZ0xTQXlJQ29nS0dNeWVTQXRJR014ZVNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqSUQwZ2NERjVJQzBnWXpGNU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZERFZ1BTQW9MV0lnS3lCdFlYUm9Mbk54Y25Rb1lpQXFJR0lnTFNBMElDb2dZU0FxSUdNcEtTQXZJRElnTHlCaE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZERJZ1BTQW9MV0lnTFNCdFlYUm9Mbk54Y25Rb1lpQXFJR0lnTFNBMElDb2dZU0FxSUdNcEtTQXZJRElnTHlCaE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWVdKektIUXhLU0ErSUZ3aU1XVXhNbHdpSUNZbUlDaDBNU0E5SUM0MUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdGaWN5aDBNaWtnUGlCY0lqRmxNVEpjSWlBbUppQW9kRElnUFNBdU5TazdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kREVnUGlBd0lDWW1JSFF4SUR3Z01Ta2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1J2ZENBOUlHWnBibVJFYjNSQmRGTmxaMjFsYm5Rb2NERjRMQ0J3TVhrc0lHTXhlQ3dnWXpGNUxDQmpNbmdzSUdNeWVTd2djREo0TENCd01ua3NJSFF4S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCNExuQjFjMmdvWkc5MExuZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGt1Y0hWemFDaGtiM1F1ZVNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZERJZ1BpQXdJQ1ltSUhReUlEd2dNU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSdmRDQTlJR1pwYm1SRWIzUkJkRk5sWjIxbGJuUW9jREY0TENCd01Ya3NJR014ZUN3Z1l6RjVMQ0JqTW5nc0lHTXllU3dnY0RKNExDQndNbmtzSUhReUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjRMbkIxYzJnb1pHOTBMbmdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhrdWNIVnphQ2hrYjNRdWVTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzFwYmpvZ2UzZzZJRzF0YVc1YllYQndiSGxkS0RBc0lIZ3BMQ0I1T2lCdGJXbHVXMkZ3Y0d4NVhTZ3dMQ0I1S1gwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXRjRPaUI3ZURvZ2JXMWhlRnRoY0hCc2VWMG9NQ3dnZUNrc0lIazZJRzF0WVhoYllYQndiSGxkS0RBc0lIa3BmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lDQWdmU2tzWEc0Z0lDQWdJQ0FnSUhCaGRHZ3lZM1Z5ZG1VZ1BTQlNMbDl3WVhSb01tTjFjblpsSUQwZ1kyRmphR1Z5S0daMWJtTjBhVzl1SUNod1lYUm9MQ0J3WVhSb01pa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSEIwYUNBOUlDRndZWFJvTWlBbUppQndZWFJvY3lod1lYUm9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doY0dGMGFESWdKaVlnY0hSb0xtTjFjblpsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhCaGRHaERiRzl1WlNod2RHZ3VZM1Z5ZG1VcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhBZ1BTQndZWFJvVkc5QlluTnZiSFYwWlNod1lYUm9LU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3TWlBOUlIQmhkR2d5SUNZbUlIQmhkR2hVYjBGaWMyOXNkWFJsS0hCaGRHZ3lLU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoZEhSeWN5QTlJSHQ0T2lBd0xDQjVPaUF3TENCaWVEb2dNQ3dnWW5rNklEQXNJRmc2SURBc0lGazZJREFzSUhGNE9pQnVkV3hzTENCeGVUb2diblZzYkgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lYUjBjbk15SUQwZ2UzZzZJREFzSUhrNklEQXNJR0o0T2lBd0xDQmllVG9nTUN3Z1dEb2dNQ3dnV1RvZ01Dd2djWGc2SUc1MWJHd3NJSEY1T2lCdWRXeHNmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3Y205alpYTnpVR0YwYUNBOUlHWjFibU4wYVc5dUlDaHdZWFJvTENCa0xDQndZMjl0S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCdWVDd2dibmtzSUhSeElEMGdlMVE2TVN3Z1VUb3hmVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0Z3WVhSb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1cxd2lRMXdpTENCa0xuZ3NJR1F1ZVN3Z1pDNTRMQ0JrTG5rc0lHUXVlQ3dnWkM1NVhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWhLSEJoZEdoYk1GMGdhVzRnZEhFcElDWW1JQ2hrTG5GNElEMGdaQzV4ZVNBOUlHNTFiR3dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpkMmwwWTJnZ0tIQmhkR2hiTUYwcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnWENKTlhDSTZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkM1WUlEMGdjR0YwYUZzeFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrTGxrZ1BTQndZWFJvV3pKZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0JjSWtGY0lqcGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3WVhSb0lEMGdXMXdpUTF3aVhWdGpiMjVqWVhSZEtHRXlZMXRoY0hCc2VWMG9NQ3dnVzJRdWVDd2daQzU1WFZ0amIyNWpZWFJkS0hCaGRHZ3VjMnhwWTJVb01Ta3BLU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElGd2lVMXdpT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h3WTI5dElEMDlJRndpUTF3aUlIeDhJSEJqYjIwZ1BUMGdYQ0pUWENJcElIc2dMeThnU1c0Z1hDSlRYQ0lnWTJGelpTQjNaU0JvWVhabElIUnZJSFJoYTJVZ2FXNTBieUJoWTJOdmRXNTBMQ0JwWmlCMGFHVWdjSEpsZG1sdmRYTWdZMjl0YldGdVpDQnBjeUJETDFNdVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc1NElEMGdaQzU0SUNvZ01pQXRJR1F1WW5nN0lDQWdJQ0FnSUNBZ0lDOHZJRUZ1WkNCeVpXWnNaV04wSUhSb1pTQndjbVYyYVc5MWMxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdWVTQTlJR1F1ZVNBcUlESWdMU0JrTG1KNU95QWdJQ0FnSUNBZ0lDQXZMeUJqYjIxdFlXNWtKM01nWTI5dWRISnZiQ0J3YjJsdWRDQnlaV3hoZEdsMlpTQjBieUIwYUdVZ1kzVnljbVZ1ZENCd2IybHVkQzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCN0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRzl5SUhOdmJXVWdaV3h6WlNCdmNpQnViM1JvYVc1blhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc1NElEMGdaQzU0TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J1ZVNBOUlHUXVlVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjR0YwYUNBOUlGdGNJa05jSWl3Z2JuZ3NJRzU1WFZ0amIyNWpZWFJkS0hCaGRHZ3VjMnhwWTJVb01Ta3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCY0lsUmNJanBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jR052YlNBOVBTQmNJbEZjSWlCOGZDQndZMjl0SUQwOUlGd2lWRndpS1NCN0lDOHZJRWx1SUZ3aVZGd2lJR05oYzJVZ2QyVWdhR0YyWlNCMGJ5QjBZV3RsSUdsdWRHOGdZV05qYjNWdWRDd2dhV1lnZEdobElIQnlaWFpwYjNWeklHTnZiVzFoYm1RZ2FYTWdVUzlVTGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrTG5GNElEMGdaQzU0SUNvZ01pQXRJR1F1Y1hnN0lDQWdJQ0FnSUNBdkx5QkJibVFnYldGclpTQmhJSEpsWm14bFkzUnBiMjRnYzJsdGFXeGhjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtMbkY1SUQwZ1pDNTVJQ29nTWlBdElHUXVjWGs3SUNBZ0lDQWdJQ0F2THlCMGJ5QmpZWE5sSUZ3aVUxd2lMbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUhzZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdiM0lnYzI5dFpYUm9hVzVuSUdWc2MyVWdiM0lnYm05MGFHbHVaMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtMbkY0SUQwZ1pDNTRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtMbkY1SUQwZ1pDNTVPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndZWFJvSUQwZ1cxd2lRMXdpWFZ0amIyNWpZWFJkS0hFeVl5aGtMbmdzSUdRdWVTd2daQzV4ZUN3Z1pDNXhlU3dnY0dGMGFGc3hYU3dnY0dGMGFGc3lYU2twTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQmNJbEZjSWpwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtMbkY0SUQwZ2NHRjBhRnN4WFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtMbkY1SUQwZ2NHRjBhRnN5WFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndZWFJvSUQwZ1cxd2lRMXdpWFZ0amIyNWpZWFJkS0hFeVl5aGtMbmdzSUdRdWVTd2djR0YwYUZzeFhTd2djR0YwYUZzeVhTd2djR0YwYUZzelhTd2djR0YwYUZzMFhTa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCY0lreGNJanBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd1lYUm9JRDBnVzF3aVExd2lYVnRqYjI1allYUmRLR3d5WXloa0xuZ3NJR1F1ZVN3Z2NHRjBhRnN4WFN3Z2NHRjBhRnN5WFNrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0JjSWtoY0lqcGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3WVhSb0lEMGdXMXdpUTF3aVhWdGpiMjVqWVhSZEtHd3lZeWhrTG5nc0lHUXVlU3dnY0dGMGFGc3hYU3dnWkM1NUtTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUZ3aVZsd2lPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCaGRHZ2dQU0JiWENKRFhDSmRXMk52Ym1OaGRGMG9iREpqS0dRdWVDd2daQzU1TENCa0xuZ3NJSEJoZEdoYk1WMHBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1hDSmFYQ0k2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NHRjBhQ0E5SUZ0Y0lrTmNJbDFiWTI5dVkyRjBYU2hzTW1Nb1pDNTRMQ0JrTG5rc0lHUXVXQ3dnWkM1WktTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIQmhkR2c3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWFYaEJjbU1nUFNCbWRXNWpkR2x2YmlBb2NIQXNJR2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hCd1cybGRMbXhsYm1kMGFDQStJRGNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCd1cybGRMbk5vYVdaMEtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnY0drZ1BTQndjRnRwWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhkb2FXeGxJQ2h3YVM1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndZMjl0Y3pGYmFWMDlYQ0pCWENJN0lDOHZJR2xtSUdOeVpXRjBaV1FnYlhWc2RHbHdiR1VnUXpwekxDQjBhR1ZwY2lCdmNtbG5hVzVoYkNCelpXY2dhWE1nYzJGMlpXUmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3TWlBbUppQW9jR052YlhNeVcybGRQVndpUVZ3aUtUc2dMeThnZEdobElITmhiV1VnWVhNZ1lXSnZkbVZjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2NDNXpjR3hwWTJVb2FTc3JMQ0F3TENCYlhDSkRYQ0pkVzJOdmJtTmhkRjBvY0drdWMzQnNhV05sS0RBc0lEWXBLU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3Y0M1emNHeHBZMlVvYVN3Z01TazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBhU0E5SUcxdFlYZ29jQzVzWlc1bmRHZ3NJSEF5SUNZbUlIQXlMbXhsYm1kMGFDQjhmQ0F3S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm1sNFRTQTlJR1oxYm1OMGFXOXVJQ2h3WVhSb01Td2djR0YwYURJc0lHRXhMQ0JoTWl3Z2FTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jR0YwYURFZ0ppWWdjR0YwYURJZ0ppWWdjR0YwYURGYmFWMWJNRjBnUFQwZ1hDSk5YQ0lnSmlZZ2NHRjBhREpiYVYxYk1GMGdJVDBnWENKTlhDSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJoZEdneUxuTndiR2xqWlNocExDQXdMQ0JiWENKTlhDSXNJR0V5TG5nc0lHRXlMbmxkS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdFeExtSjRJRDBnTUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdFeExtSjVJRDBnTUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdFeExuZ2dQU0J3WVhSb01WdHBYVnN4WFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdFeExua2dQU0J3WVhSb01WdHBYVnN5WFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdscElEMGdiVzFoZUNod0xteGxibWQwYUN3Z2NESWdKaVlnY0RJdWJHVnVaM1JvSUh4OElEQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndZMjl0Y3pFZ1BTQmJYU3dnTHk4Z2NHRjBhQ0JqYjIxdFlXNWtjeUJ2WmlCdmNtbG5hVzVoYkNCd1lYUm9JSEJjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3WTI5dGN6SWdQU0JiWFN3Z0x5OGdjR0YwYUNCamIyMXRZVzVrY3lCdlppQnZjbWxuYVc1aGJDQndZWFJvSUhBeVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NHWnBjbk4wSUQwZ1hDSmNJaXdnTHk4Z2RHVnRjRzl5WVhKNUlHaHZiR1JsY2lCbWIzSWdiM0pwWjJsdVlXd2djR0YwYUNCamIyMXRZVzVrWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0dOdmJTQTlJRndpWENJN0lDOHZJR2h2YkdSbGNpQm1iM0lnY0hKbGRtbHZkWE1nY0dGMGFDQmpiMjF0WVc1a0lHOW1JRzl5YVdkcGJtRnNJSEJoZEdoY2JpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd0xDQnBhU0E5SUcxdFlYZ29jQzVzWlc1bmRHZ3NJSEF5SUNZbUlIQXlMbXhsYm1kMGFDQjhmQ0F3S1RzZ2FTQThJR2xwT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3VzJsZElDWW1JQ2h3Wm1seWMzUWdQU0J3VzJsZFd6QmRLVHNnTHk4Z2MyRjJaU0JqZFhKeVpXNTBJSEJoZEdnZ1kyOXRiV0Z1WkZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSEJtYVhKemRDQWhQU0JjSWtOY0lpa2dMeThnUXlCcGN5QnViM1FnYzJGMlpXUWdlV1YwTENCaVpXTmhkWE5sSUdsMElHMWhlU0JpWlNCeVpYTjFiSFFnYjJZZ1kyOXVkbVZ5YzJsdmJseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0dOdmJYTXhXMmxkSUQwZ2NHWnBjbk4wT3lBdkx5QlRZWFpsSUdOMWNuSmxiblFnY0dGMGFDQmpiMjF0WVc1a1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2tnSmlZZ0tDQndZMjl0SUQwZ2NHTnZiWE14VzJrdE1WMHBPeUF2THlCSFpYUWdjSEpsZG1sdmRYTWdjR0YwYUNCamIyMXRZVzVrSUhCamIyMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjRnRwWFNBOUlIQnliMk5sYzNOUVlYUm9LSEJiYVYwc0lHRjBkSEp6TENCd1kyOXRLVHNnTHk4Z1VISmxkbWx2ZFhNZ2NHRjBhQ0JqYjIxdFlXNWtJR2x6SUdsdWNIVjBkR1ZrSUhSdklIQnliMk5sYzNOUVlYUm9YRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NHTnZiWE14VzJsZElDRTlJRndpUVZ3aUlDWW1JSEJtYVhKemRDQTlQU0JjSWtOY0lpa2djR052YlhNeFcybGRJRDBnWENKRFhDSTdJQzh2SUVFZ2FYTWdkR2hsSUc5dWJIa2dZMjl0YldGdVpGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJSGRvYVdOb0lHMWhlU0J3Y205a2RXTmxJRzExYkhScGNHeGxJRU02YzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklITnZJSGRsSUdoaGRtVWdkRzhnYldGclpTQnpkWEpsSUhSb1lYUWdReUJwY3lCaGJITnZJRU1nYVc0Z2IzSnBaMmx1WVd3Z2NHRjBhRnh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm1sNFFYSmpLSEFzSUdrcE95QXZMeUJtYVhoQmNtTWdZV1JrY3lCaGJITnZJSFJvWlNCeWFXZG9kQ0JoYlc5MWJuUWdiMllnUVRweklIUnZJSEJqYjIxek1WeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hBeUtTQjdJQzh2SUhSb1pTQnpZVzFsSUhCeWIyTmxaSFZ5WlhNZ2FYTWdaRzl1WlNCMGJ5QndNbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd01sdHBYU0FtSmlBb2NHWnBjbk4wSUQwZ2NESmJhVjFiTUYwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NHWnBjbk4wSUNFOUlGd2lRMXdpS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndZMjl0Y3pKYmFWMGdQU0J3Wm1seWMzUTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBJQ1ltSUNod1kyOXRJRDBnY0dOdmJYTXlXMmt0TVYwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQXlXMmxkSUQwZ2NISnZZMlZ6YzFCaGRHZ29jREpiYVYwc0lHRjBkSEp6TWl3Z2NHTnZiU2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hCamIyMXpNbHRwWFNFOVhDSkJYQ0lnSmlZZ2NHWnBjbk4wUFQxY0lrTmNJaWtnY0dOdmJYTXlXMmxkUFZ3aVExd2lPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnBlRUZ5WXlod01pd2dhU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdacGVFMG9jQ3dnY0RJc0lHRjBkSEp6TENCaGRIUnljeklzSUdrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnBlRTBvY0RJc0lIQXNJR0YwZEhKek1pd2dZWFIwY25Nc0lHa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCelpXY2dQU0J3VzJsZExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6WldjeUlEMGdjRElnSmlZZ2NESmJhVjBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmxaMnhsYmlBOUlITmxaeTVzWlc1bmRHZ3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhObFp6SnNaVzRnUFNCd01pQW1KaUJ6WldjeUxteGxibWQwYUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaGRIUnljeTU0SUQwZ2MyVm5XM05sWjJ4bGJpQXRJREpkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdGMGRISnpMbmtnUFNCelpXZGJjMlZuYkdWdUlDMGdNVjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVhSMGNuTXVZbmdnUFNCMGIwWnNiMkYwS0hObFoxdHpaV2RzWlc0Z0xTQTBYU2tnZkh3Z1lYUjBjbk11ZUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaGRIUnljeTVpZVNBOUlIUnZSbXh2WVhRb2MyVm5XM05sWjJ4bGJpQXRJRE5kS1NCOGZDQmhkSFJ5Y3k1NU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRjBkSEp6TWk1aWVDQTlJSEF5SUNZbUlDaDBiMFpzYjJGMEtITmxaekpiYzJWbk1teGxiaUF0SURSZEtTQjhmQ0JoZEhSeWN6SXVlQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVhSMGNuTXlMbUo1SUQwZ2NESWdKaVlnS0hSdlJteHZZWFFvYzJWbk1sdHpaV2N5YkdWdUlDMGdNMTBwSUh4OElHRjBkSEp6TWk1NUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhkSFJ5Y3pJdWVDQTlJSEF5SUNZbUlITmxaekpiYzJWbk1teGxiaUF0SURKZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRjBkSEp6TWk1NUlEMGdjRElnSmlZZ2MyVm5NbHR6WldjeWJHVnVJQzBnTVYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVhBeUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjSFJvTG1OMWNuWmxJRDBnY0dGMGFFTnNiMjVsS0hBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIQXlJRDhnVzNBc0lIQXlYU0E2SUhBN1hHNGdJQ0FnSUNBZ0lIMHNJRzUxYkd3c0lIQmhkR2hEYkc5dVpTa3NYRzRnSUNBZ0lDQWdJSEJoY25ObFJHOTBjeUE5SUZJdVgzQmhjbk5sUkc5MGN5QTlJR05oWTJobGNpaG1kVzVqZEdsdmJpQW9aM0poWkdsbGJuUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJrYjNSeklEMGdXMTA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTUN3Z2FXa2dQU0JuY21Ga2FXVnVkQzVzWlc1bmRHZzdJR2tnUENCcGFUc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR1J2ZENBOUlIdDlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd1lYSWdQU0JuY21Ga2FXVnVkRnRwWFM1dFlYUmphQ2d2WGloYlhqcGRLaWs2UHloYlhGeGtYRnd1WFNvcEx5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaRzkwTG1OdmJHOXlJRDBnVWk1blpYUlNSMElvY0dGeVd6RmRLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1pHOTBMbU52Ykc5eUxtVnljbTl5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnVkV3hzTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa2IzUXViM0JoWTJsMGVTQTlJR1J2ZEM1amIyeHZjaTV2Y0dGamFYUjVPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1J2ZEM1amIyeHZjaUE5SUdSdmRDNWpiMnh2Y2k1b1pYZzdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjR0Z5V3pKZElDWW1JQ2hrYjNRdWIyWm1jMlYwSUQwZ2NHRnlXekpkSUNzZ1hDSWxYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSdmRITXVjSFZ6YUNoa2IzUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnWm05eUlDaHBJRDBnTVN3Z2FXa2dQU0JrYjNSekxteGxibWQwYUNBdElERTdJR2tnUENCcGFUc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0ZrYjNSelcybGRMbTltWm5ObGRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdjM1JoY25RZ1BTQjBiMFpzYjJGMEtHUnZkSE5iYVNBdElERmRMbTltWm5ObGRDQjhmQ0F3S1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWdVpDQTlJREE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlHb2dQU0JwSUNzZ01Uc2dhaUE4SUdscE95QnFLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaGtiM1J6VzJwZExtOW1abk5sZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1Z1WkNBOUlHUnZkSE5iYWwwdWIyWm1jMlYwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2haVzVrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJtUWdQU0F4TURBN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcUlEMGdhV2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWlc1a0lEMGdkRzlHYkc5aGRDaGxibVFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnWkNBOUlDaGxibVFnTFNCemRHRnlkQ2tnTHlBb2FpQXRJR2tnS3lBeEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUlDZzdJR2tnUENCcU95QnBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOMFlYSjBJQ3M5SUdRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa2IzUnpXMmxkTG05bVpuTmxkQ0E5SUhOMFlYSjBJQ3NnWENJbFhDSTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1pHOTBjenRjYmlBZ0lDQWdJQ0FnZlNrc1hHNGdJQ0FnSUNBZ0lIUmxZWElnUFNCU0xsOTBaV0Z5SUQwZ1puVnVZM1JwYjI0Z0tHVnNMQ0J3WVhCbGNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pXd2dQVDBnY0dGd1pYSXVkRzl3SUNZbUlDaHdZWEJsY2k1MGIzQWdQU0JsYkM1d2NtVjJLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnNJRDA5SUhCaGNHVnlMbUp2ZEhSdmJTQW1KaUFvY0dGd1pYSXVZbTkwZEc5dElEMGdaV3d1Ym1WNGRDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCbGJDNXVaWGgwSUNZbUlDaGxiQzV1WlhoMExuQnlaWFlnUFNCbGJDNXdjbVYyS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1ZzTG5CeVpYWWdKaVlnS0dWc0xuQnlaWFl1Ym1WNGRDQTlJR1ZzTG01bGVIUXBPMXh1SUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNCMGIyWnliMjUwSUQwZ1VpNWZkRzltY205dWRDQTlJR1oxYm1OMGFXOXVJQ2hsYkN3Z2NHRndaWElwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNod1lYQmxjaTUwYjNBZ1BUMDlJR1ZzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHVmhjaWhsYkN3Z2NHRndaWElwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdaV3d1Ym1WNGRDQTlJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lDQWdJQ0JsYkM1d2NtVjJJRDBnY0dGd1pYSXVkRzl3TzF4dUlDQWdJQ0FnSUNBZ0lDQWdjR0Z3WlhJdWRHOXdMbTVsZUhRZ1BTQmxiRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIQmhjR1Z5TG5SdmNDQTlJR1ZzTzF4dUlDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQjBiMkpoWTJzZ1BTQlNMbDkwYjJKaFkyc2dQU0JtZFc1amRHbHZiaUFvWld3c0lIQmhjR1Z5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NHRndaWEl1WW05MGRHOXRJRDA5UFNCbGJDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSFJsWVhJb1pXd3NJSEJoY0dWeUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdWc0xtNWxlSFFnUFNCd1lYQmxjaTVpYjNSMGIyMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCbGJDNXdjbVYySUQwZ2JuVnNiRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIQmhjR1Z5TG1KdmRIUnZiUzV3Y21WMklEMGdaV3c3WEc0Z0lDQWdJQ0FnSUNBZ0lDQndZWEJsY2k1aWIzUjBiMjBnUFNCbGJEdGNiaUFnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnYVc1elpYSjBZV1owWlhJZ1BTQlNMbDlwYm5ObGNuUmhablJsY2lBOUlHWjFibU4wYVc5dUlDaGxiQ3dnWld3eUxDQndZWEJsY2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdWaGNpaGxiQ3dnY0dGd1pYSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pXd3lJRDA5SUhCaGNHVnlMblJ2Y0NBbUppQW9jR0Z3WlhJdWRHOXdJRDBnWld3cE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWld3eUxtNWxlSFFnSmlZZ0tHVnNNaTV1WlhoMExuQnlaWFlnUFNCbGJDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCbGJDNXVaWGgwSUQwZ1pXd3lMbTVsZUhRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JsYkM1d2NtVjJJRDBnWld3eU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWld3eUxtNWxlSFFnUFNCbGJEdGNiaUFnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnYVc1elpYSjBZbVZtYjNKbElEMGdVaTVmYVc1elpYSjBZbVZtYjNKbElEMGdablZ1WTNScGIyNGdLR1ZzTENCbGJESXNJSEJoY0dWeUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMFpXRnlLR1ZzTENCd1lYQmxjaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxiRElnUFQwZ2NHRndaWEl1WW05MGRHOXRJQ1ltSUNod1lYQmxjaTVpYjNSMGIyMGdQU0JsYkNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JsYkRJdWNISmxkaUFtSmlBb1pXd3lMbkJ5WlhZdWJtVjRkQ0E5SUdWc0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdWc0xuQnlaWFlnUFNCbGJESXVjSEpsZGp0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1ZzTWk1d2NtVjJJRDBnWld3N1hHNGdJQ0FnSUNBZ0lDQWdJQ0JsYkM1dVpYaDBJRDBnWld3eU8xeHVJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0F2S2x4Y1hHNGdJQ0FnSUNBZ0lDQXFJRkpoY0doaFpXd3VkRzlOWVhSeWFYaGNiaUFnSUNBZ0lDQWdJRnNnYldWMGFHOWtJRjFjYmlBZ0lDQWdJQ0FnSUNvcVhHNGdJQ0FnSUNBZ0lDQXFJRlYwYVd4cGRIa2diV1YwYUc5a1hHNGdJQ0FnSUNBZ0lDQXFLbHh1SUNBZ0lDQWdJQ0FnS2lCU1pYUjFjbTV6SUcxaGRISnBlQ0J2WmlCMGNtRnVjMlp2Y20xaGRHbHZibk1nWVhCd2JHbGxaQ0IwYnlCaElHZHBkbVZ1SUhCaGRHaGNiaUFnSUNBZ0lDQWdJRDRnVUdGeVlXMWxkR1Z5YzF4dUlDQWdJQ0FnSUNBZ0xTQndZWFJvSUNoemRISnBibWNwSUhCaGRHZ2djM1J5YVc1blhHNGdJQ0FnSUNBZ0lDQXRJSFJ5WVc1elptOXliU0FvYzNSeWFXNW5mR0Z5Y21GNUtTQjBjbUZ1YzJadmNtMWhkR2x2YmlCemRISnBibWRjYmlBZ0lDQWdJQ0FnSUQwZ0tHOWlhbVZqZENrZ1FFMWhkSEpwZUZ4dUlDQWdJQ0FnSUNCY1hDb3ZYRzRnSUNBZ0lDQWdJSFJ2VFdGMGNtbDRJRDBnVWk1MGIwMWhkSEpwZUNBOUlHWjFibU4wYVc5dUlDaHdZWFJvTENCMGNtRnVjMlp2Y20wcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQmlZaUE5SUhCaGRHaEVhVzFsYm5OcGIyNXpLSEJoZEdncExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnNJRDBnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmZPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwY21GdWMyWnZjbTA2SUVWY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1oyVjBRa0p2ZURvZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHSmlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdWNGRISmhZM1JVY21GdWMyWnZjbTBvWld3c0lIUnlZVzV6Wm05eWJTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWld3dWJXRjBjbWw0TzF4dUlDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQXZLbHhjWEc0Z0lDQWdJQ0FnSUNBcUlGSmhjR2hoWld3dWRISmhibk5tYjNKdFVHRjBhRnh1SUNBZ0lDQWdJQ0FnV3lCdFpYUm9iMlFnWFZ4dUlDQWdJQ0FnSUNBZ0tpcGNiaUFnSUNBZ0lDQWdJQ29nVlhScGJHbDBlU0J0WlhSb2IyUmNiaUFnSUNBZ0lDQWdJQ29xWEc0Z0lDQWdJQ0FnSUNBcUlGSmxkSFZ5Ym5NZ2NHRjBhQ0IwY21GdWMyWnZjbTFsWkNCaWVTQmhJR2RwZG1WdUlIUnlZVzV6Wm05eWJXRjBhVzl1WEc0Z0lDQWdJQ0FnSUNBK0lGQmhjbUZ0WlhSbGNuTmNiaUFnSUNBZ0lDQWdJQzBnY0dGMGFDQW9jM1J5YVc1bktTQndZWFJvSUhOMGNtbHVaMXh1SUNBZ0lDQWdJQ0FnTFNCMGNtRnVjMlp2Y20wZ0tITjBjbWx1WjN4aGNuSmhlU2tnZEhKaGJuTm1iM0p0WVhScGIyNGdjM1J5YVc1blhHNGdJQ0FnSUNBZ0lDQTlJQ2h6ZEhKcGJtY3BJSEJoZEdoY2JpQWdJQ0FnSUNBZ1hGd3FMMXh1SUNBZ0lDQWdJQ0IwY21GdWMyWnZjbTFRWVhSb0lEMGdVaTUwY21GdWMyWnZjbTFRWVhSb0lEMGdablZ1WTNScGIyNGdLSEJoZEdnc0lIUnlZVzV6Wm05eWJTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUcxaGNGQmhkR2dvY0dGMGFDd2dkRzlOWVhSeWFYZ29jR0YwYUN3Z2RISmhibk5tYjNKdEtTazdYRzRnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUdWNGRISmhZM1JVY21GdWMyWnZjbTBnUFNCU0xsOWxlSFJ5WVdOMFZISmhibk5tYjNKdElEMGdablZ1WTNScGIyNGdLR1ZzTENCMGMzUnlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEhOMGNpQTlQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHVnNMbDh1ZEhKaGJuTm1iM0p0TzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RITjBjaUE5SUZOMGNpaDBjM1J5S1M1eVpYQnNZV05sS0M5Y1hDNTdNMzE4WEZ4MU1qQXlOaTluTENCbGJDNWZMblJ5WVc1elptOXliU0I4ZkNCRktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQjBaR0YwWVNBOUlGSXVjR0Z5YzJWVWNtRnVjMlp2Y20xVGRISnBibWNvZEhOMGNpa3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR1ZuSUQwZ01DeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtlQ0E5SURBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pIa2dQU0F3TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhONElEMGdNU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6ZVNBOUlERXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYeUE5SUdWc0xsOHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiU0E5SUc1bGR5Qk5ZWFJ5YVhnN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JmTG5SeVlXNXpabTl5YlNBOUlIUmtZWFJoSUh4OElGdGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJrWVhSaEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURBc0lHbHBJRDBnZEdSaGRHRXViR1Z1WjNSb095QnBJRHdnYVdrN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnZENBOUlIUmtZWFJoVzJsZExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHeGxiaUE5SUhRdWJHVnVaM1JvTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dGJXRnVaQ0E5SUZOMGNpaDBXekJkS1M1MGIweHZkMlZ5UTJGelpTZ3BMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZV0p6YjJ4MWRHVWdQU0IwV3pCZElDRTlJR052YlcxaGJtUXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBiblpsY2lBOUlHRmljMjlzZFhSbElEOGdiUzVwYm5abGNuUW9LU0E2SURBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCNE1TeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIa3hMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlRElzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I1TWl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKaU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1kyOXRiV0Z1WkNBOVBTQmNJblJjSWlBbUppQjBiR1Z1SUQwOUlETXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoaFluTnZiSFYwWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGd4SUQwZ2FXNTJaWEl1ZUNnd0xDQXdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCNU1TQTlJR2x1ZG1WeUxua29NQ3dnTUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlRElnUFNCcGJuWmxjaTU0S0hSYk1WMHNJSFJiTWwwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGt5SUQwZ2FXNTJaWEl1ZVNoMFd6RmRMQ0IwV3pKZEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J0TG5SeVlXNXpiR0YwWlNoNE1pQXRJSGd4TENCNU1pQXRJSGt4S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JTNTBjbUZ1YzJ4aGRHVW9kRnN4WFN3Z2RGc3lYU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9ZMjl0YldGdVpDQTlQU0JjSW5KY0lpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSc1pXNGdQVDBnTWlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0ppSUQwZ1ltSWdmSHdnWld3dVoyVjBRa0p2ZUNneEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J0TG5KdmRHRjBaU2gwV3pGZExDQmlZaTU0SUNzZ1ltSXVkMmxrZEdnZ0x5QXlMQ0JpWWk1NUlDc2dZbUl1YUdWcFoyaDBJQzhnTWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR1ZuSUNzOUlIUmJNVjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hSc1pXNGdQVDBnTkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoaFluTnZiSFYwWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCNE1pQTlJR2x1ZG1WeUxuZ29kRnN5WFN3Z2RGc3pYU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGt5SUQwZ2FXNTJaWEl1ZVNoMFd6SmRMQ0IwV3pOZEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JTNXliM1JoZEdVb2RGc3hYU3dnZURJc0lIa3lLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J0TG5KdmRHRjBaU2gwV3pGZExDQjBXekpkTENCMFd6TmRLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR1ZuSUNzOUlIUmJNVjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9ZMjl0YldGdVpDQTlQU0JjSW5OY0lpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSc1pXNGdQVDBnTWlCOGZDQjBiR1Z1SUQwOUlETXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaVlpQTlJR0ppSUh4OElHVnNMbWRsZEVKQ2IzZ29NU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JTNXpZMkZzWlNoMFd6RmRMQ0IwVzNSc1pXNGdMU0F4WFN3Z1ltSXVlQ0FySUdKaUxuZHBaSFJvSUM4Z01pd2dZbUl1ZVNBcklHSmlMbWhsYVdkb2RDQXZJRElwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITjRJQ285SUhSYk1WMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNrZ0tqMGdkRnQwYkdWdUlDMGdNVjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hSc1pXNGdQVDBnTlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoaFluTnZiSFYwWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCNE1pQTlJR2x1ZG1WeUxuZ29kRnN6WFN3Z2RGczBYU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGt5SUQwZ2FXNTJaWEl1ZVNoMFd6TmRMQ0IwV3pSZEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JTNXpZMkZzWlNoMFd6RmRMQ0IwV3pKZExDQjRNaXdnZVRJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMHVjMk5oYkdVb2RGc3hYU3dnZEZzeVhTd2dkRnN6WFN3Z2RGczBYU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE40SUNvOUlIUmJNVjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2Mza2dLajBnZEZzeVhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNoamIyMXRZVzVrSUQwOUlGd2liVndpSUNZbUlIUnNaVzRnUFQwZ055a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiUzVoWkdRb2RGc3hYU3dnZEZzeVhTd2dkRnN6WFN3Z2RGczBYU3dnZEZzMVhTd2dkRnMyWFNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1h5NWthWEowZVZRZ1BTQXhPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJDNXRZWFJ5YVhnZ1BTQnRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5cGNYRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDb2dSV3hsYldWdWRDNXRZWFJ5YVhoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0JiSUhCeWIzQmxjblI1SUNodlltcGxZM1FwSUYxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FxS2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ29nUzJWbGNITWdRRTFoZEhKcGVDQnZZbXBsWTNRc0lIZG9hV05vSUhKbGNISmxjMlZ1ZEhNZ1pXeGxiV1Z1ZENCMGNtRnVjMlp2Y20xaGRHbHZibHh1SUNBZ0lDQWdJQ0FnSUNBZ1hGd3FMMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pXd3ViV0YwY21sNElEMGdiVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdYeTV6ZUNBOUlITjRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1h5NXplU0E5SUhONU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWHk1a1pXY2dQU0JrWldjN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JmTG1SNElEMGdaSGdnUFNCdExtVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCZkxtUjVJRDBnWkhrZ1BTQnRMbVk3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoemVDQTlQU0F4SUNZbUlITjVJRDA5SURFZ0ppWWdJV1JsWnlBbUppQmZMbUppYjNncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmZMbUppYjNndWVDQXJQU0FyWkhnN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1h5NWlZbTk0TG5rZ0t6MGdLMlI1TzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmZMbVJwY25SNVZDQTlJREU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUdkbGRFVnRjSFI1SUQwZ1puVnVZM1JwYjI0Z0tHbDBaVzBwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCc0lEMGdhWFJsYlZzd1hUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhOM2FYUmphQ0FvYkM1MGIweHZkMlZ5UTJGelpTZ3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQmNJblJjSWpvZ2NtVjBkWEp1SUZ0c0xDQXdMQ0F3WFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRndpYlZ3aU9pQnlaWFIxY200Z1cyd3NJREVzSURBc0lEQXNJREVzSURBc0lEQmRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1hDSnlYQ0k2SUdsbUlDaHBkR1Z0TG14bGJtZDBhQ0E5UFNBMEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJiYkN3Z01Dd2dhWFJsYlZzeVhTd2dhWFJsYlZzelhWMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRnRzTENBd1hUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCY0luTmNJam9nYVdZZ0tHbDBaVzB1YkdWdVozUm9JRDA5SURVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRnRzTENBeExDQXhMQ0JwZEdWdFd6TmRMQ0JwZEdWdFd6UmRYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0dsMFpXMHViR1Z1WjNSb0lEMDlJRE1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlGdHNMQ0F4TENBeFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdXMndzSURGZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdaWEYxWVd4cGMyVlVjbUZ1YzJadmNtMGdQU0JTTGw5bGNYVmhiR2x6WlZSeVlXNXpabTl5YlNBOUlHWjFibU4wYVc5dUlDaDBNU3dnZERJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhReUlEMGdVM1J5S0hReUtTNXlaWEJzWVdObEtDOWNYQzU3TTMxOFhGeDFNakF5Tmk5bkxDQjBNU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBNU0E5SUZJdWNHRnljMlZVY21GdWMyWnZjbTFUZEhKcGJtY29kREVwSUh4OElGdGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RESWdQU0JTTG5CaGNuTmxWSEpoYm5ObWIzSnRVM1J5YVc1bktIUXlLU0I4ZkNCYlhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQnRZWGhzWlc1bmRHZ2dQU0J0YldGNEtIUXhMbXhsYm1kMGFDd2dkREl1YkdWdVozUm9LU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtY205dElEMGdXMTBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEc4Z1BTQmJYU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwSUQwZ01Dd2dhaXdnYW1vc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RIUXhMQ0IwZERJN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tEc2dhU0E4SUcxaGVHeGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhReElEMGdkREZiYVYwZ2ZId2daMlYwUlcxd2RIa29kREpiYVYwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUjBNaUE5SUhReVcybGRJSHg4SUdkbGRFVnRjSFI1S0hSME1TazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NoMGRERmJNRjBnSVQwZ2RIUXlXekJkS1NCOGZGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FvZEhReFd6QmRMblJ2VEc5M1pYSkRZWE5sS0NrZ1BUMGdYQ0p5WENJZ0ppWWdLSFIwTVZzeVhTQWhQU0IwZERKYk1sMGdmSHdnZEhReFd6TmRJQ0U5SUhSME1sc3pYU2twSUh4OFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2gwZERGYk1GMHVkRzlNYjNkbGNrTmhjMlVvS1NBOVBTQmNJbk5jSWlBbUppQW9kSFF4V3pOZElDRTlJSFIwTWxzelhTQjhmQ0IwZERGYk5GMGdJVDBnZEhReVd6UmRLU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm5KdmJWdHBYU0E5SUZ0ZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnZXMmxkSUQwZ1cxMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5SUNocUlEMGdNQ3dnYW1vZ1BTQnRiV0Y0S0hSME1TNXNaVzVuZEdnc0lIUjBNaTVzWlc1bmRHZ3BPeUJxSUR3Z2FtbzdJR29yS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JxSUdsdUlIUjBNU0FtSmlBb1puSnZiVnRwWFZ0cVhTQTlJSFIwTVZ0cVhTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdvZ2FXNGdkSFF5SUNZbUlDaDBiMXRwWFZ0cVhTQTlJSFIwTWx0cVhTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtY205dE9pQm1jbTl0TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSdk9pQjBiMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lDQWdmVHRjYmlBZ0lDQlNMbDluWlhSRGIyNTBZV2x1WlhJZ1BTQm1kVzVqZEdsdmJpQW9lQ3dnZVN3Z2R5d2dhQ2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdZMjl1ZEdGcGJtVnlPMXh1SUNBZ0lDQWdJQ0JqYjI1MFlXbHVaWElnUFNCb0lEMDlJRzUxYkd3Z0ppWWdJVkl1YVhNb2VDd2dYQ0p2WW1wbFkzUmNJaWtnUHlCbkxtUnZZeTVuWlhSRmJHVnRaVzUwUW5sSlpDaDRLU0E2SUhnN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hqYjI1MFlXbHVaWElnUFQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR2xtSUNoamIyNTBZV2x1WlhJdWRHRm5UbUZ0WlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIa2dQVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuUmhhVzVsY2pvZ1kyOXVkR0ZwYm1WeUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IzYVdSMGFEb2dZMjl1ZEdGcGJtVnlMbk4wZVd4bExuQnBlR1ZzVjJsa2RHZ2dmSHdnWTI5dWRHRnBibVZ5TG05bVpuTmxkRmRwWkhSb0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JvWldsbmFIUTZJR052Ym5SaGFXNWxjaTV6ZEhsc1pTNXdhWGhsYkVobGFXZG9kQ0I4ZkNCamIyNTBZV2x1WlhJdWIyWm1jMlYwU0dWcFoyaDBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1ZEdGcGJtVnlPaUJqYjI1MFlXbHVaWElzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZHBaSFJvT2lCNUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JvWldsbmFIUTZJSGRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjUwWVdsdVpYSTZJREVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjRPaUI0TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdlVG9nZVN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSGRwWkhSb09pQjNMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2FHVnBaMmgwT2lCb1hHNGdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ2ZUdGNiaUFnSUNBdktseGNYRzRnSUNBZ0lDb2dVbUZ3YUdGbGJDNXdZWFJvVkc5U1pXeGhkR2wyWlZ4dUlDQWdJQ0JiSUcxbGRHaHZaQ0JkWEc0Z0lDQWdJQ29xWEc0Z0lDQWdJQ29nVlhScGJHbDBlU0J0WlhSb2IyUmNiaUFnSUNBZ0tpcGNiaUFnSUNBZ0tpQkRiMjUyWlhKMGN5QndZWFJvSUhSdklISmxiR0YwYVhabElHWnZjbTFjYmlBZ0lDQWdQaUJRWVhKaGJXVjBaWEp6WEc0Z0lDQWdJQzBnY0dGMGFGTjBjbWx1WnlBb2MzUnlhVzVuZkdGeWNtRjVLU0J3WVhSb0lITjBjbWx1WnlCdmNpQmhjbkpoZVNCdlppQnpaV2R0Wlc1MGMxeHVJQ0FnSUNBOUlDaGhjbkpoZVNrZ1lYSnlZWGtnYjJZZ2MyVm5iV1Z1ZEhNdVhHNGdJQ0FnWEZ3cUwxeHVJQ0FnSUZJdWNHRjBhRlJ2VW1Wc1lYUnBkbVVnUFNCd1lYUm9WRzlTWld4aGRHbDJaVHRjYmlBZ0lDQlNMbDlsYm1kcGJtVWdQU0I3ZlR0Y2JpQWdJQ0F2S2x4Y1hHNGdJQ0FnSUNvZ1VtRndhR0ZsYkM1d1lYUm9NbU4xY25abFhHNGdJQ0FnSUZzZ2JXVjBhRzlrSUYxY2JpQWdJQ0FnS2lwY2JpQWdJQ0FnS2lCVmRHbHNhWFI1SUcxbGRHaHZaRnh1SUNBZ0lDQXFLbHh1SUNBZ0lDQXFJRU52Ym5abGNuUnpJSEJoZEdnZ2RHOGdZU0J1WlhjZ2NHRjBhQ0IzYUdWeVpTQmhiR3dnYzJWbmJXVnVkSE1nWVhKbElHTjFZbWxqSUdKbGVtbGxjaUJqZFhKMlpYTXVYRzRnSUNBZ0lENGdVR0Z5WVcxbGRHVnljMXh1SUNBZ0lDQXRJSEJoZEdoVGRISnBibWNnS0hOMGNtbHVaM3hoY25KaGVTa2djR0YwYUNCemRISnBibWNnYjNJZ1lYSnlZWGtnYjJZZ2MyVm5iV1Z1ZEhOY2JpQWdJQ0FnUFNBb1lYSnlZWGtwSUdGeWNtRjVJRzltSUhObFoyMWxiblJ6TGx4dUlDQWdJRnhjS2k5Y2JpQWdJQ0JTTG5CaGRHZ3lZM1Z5ZG1VZ1BTQndZWFJvTW1OMWNuWmxPMXh1SUNBZ0lDOHFYRnhjYmlBZ0lDQWdLaUJTWVhCb1lXVnNMbTFoZEhKcGVGeHVJQ0FnSUNCYklHMWxkR2h2WkNCZFhHNGdJQ0FnSUNvcVhHNGdJQ0FnSUNvZ1ZYUnBiR2wwZVNCdFpYUm9iMlJjYmlBZ0lDQWdLaXBjYmlBZ0lDQWdLaUJTWlhSMWNtNXpJRzFoZEhKcGVDQmlZWE5sWkNCdmJpQm5hWFpsYmlCd1lYSmhiV1YwWlhKekxseHVJQ0FnSUNBK0lGQmhjbUZ0WlhSbGNuTmNiaUFnSUNBZ0xTQmhJQ2h1ZFcxaVpYSXBYRzRnSUNBZ0lDMGdZaUFvYm5WdFltVnlLVnh1SUNBZ0lDQXRJR01nS0c1MWJXSmxjaWxjYmlBZ0lDQWdMU0JrSUNodWRXMWlaWElwWEc0Z0lDQWdJQzBnWlNBb2JuVnRZbVZ5S1Z4dUlDQWdJQ0F0SUdZZ0tHNTFiV0psY2lsY2JpQWdJQ0FnUFNBb2IySnFaV04wS1NCQVRXRjBjbWw0WEc0Z0lDQWdYRndxTDF4dUlDQWdJRkl1YldGMGNtbDRJRDBnWm5WdVkzUnBiMjRnS0dFc0lHSXNJR01zSUdRc0lHVXNJR1lwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5Qk5ZWFJ5YVhnb1lTd2dZaXdnWXl3Z1pDd2daU3dnWmlrN1hHNGdJQ0FnZlR0Y2JpQWdJQ0JtZFc1amRHbHZiaUJOWVhSeWFYZ29ZU3dnWWl3Z1l5d2daQ3dnWlN3Z1ppa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb1lTQWhQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbUVnUFNBcllUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZaUE5SUN0aU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWpJRDBnSzJNN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtUWdQU0FyWkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVpTQTlJQ3RsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1bUlEMGdLMlk3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1FZ1BTQXhPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVpSUQwZ01EdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZeUE5SURBN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtUWdQU0F4TzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1bElEMGdNRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WmlBOUlEQTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ0tHWjFibU4wYVc5dUlDaHRZWFJ5YVhod2NtOTBieWtnZTF4dUlDQWdJQ0FnSUNBdktseGNYRzRnSUNBZ0lDQWdJQ0FxSUUxaGRISnBlQzVoWkdSY2JpQWdJQ0FnSUNBZ0lGc2diV1YwYUc5a0lGMWNiaUFnSUNBZ0lDQWdJQ29xWEc0Z0lDQWdJQ0FnSUNBcUlFRmtaSE1nWjJsMlpXNGdiV0YwY21sNElIUnZJR1Y0YVhOMGFXNW5JRzl1WlM1Y2JpQWdJQ0FnSUNBZ0lENGdVR0Z5WVcxbGRHVnljMXh1SUNBZ0lDQWdJQ0FnTFNCaElDaHVkVzFpWlhJcFhHNGdJQ0FnSUNBZ0lDQXRJR0lnS0c1MWJXSmxjaWxjYmlBZ0lDQWdJQ0FnSUMwZ1l5QW9iblZ0WW1WeUtWeHVJQ0FnSUNBZ0lDQWdMU0JrSUNodWRXMWlaWElwWEc0Z0lDQWdJQ0FnSUNBdElHVWdLRzUxYldKbGNpbGNiaUFnSUNBZ0lDQWdJQzBnWmlBb2JuVnRZbVZ5S1Z4dUlDQWdJQ0FnSUNBZ2IzSmNiaUFnSUNBZ0lDQWdJQzBnYldGMGNtbDRJQ2h2WW1wbFkzUXBJRUJOWVhSeWFYaGNiaUFnSUNBZ0lDQWdYRndxTDF4dUlDQWdJQ0FnSUNCdFlYUnlhWGh3Y205MGJ5NWhaR1FnUFNCbWRXNWpkR2x2YmlBb1lTd2dZaXdnWXl3Z1pDd2daU3dnWmlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHOTFkQ0E5SUZ0YlhTd2dXMTBzSUZ0ZFhTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRJRDBnVzF0MGFHbHpMbUVzSUhSb2FYTXVZeXdnZEdocGN5NWxYU3dnVzNSb2FYTXVZaXdnZEdocGN5NWtMQ0IwYUdsekxtWmRMQ0JiTUN3Z01Dd2dNVjFkTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxaGRISnBlQ0E5SUZ0YllTd2dZeXdnWlYwc0lGdGlMQ0JrTENCbVhTd2dXekFzSURBc0lERmRYU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I0TENCNUxDQjZMQ0J5WlhNN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaGhJQ1ltSUdFZ2FXNXpkR0Z1WTJWdlppQk5ZWFJ5YVhncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRZWFJ5YVhnZ1BTQmJXMkV1WVN3Z1lTNWpMQ0JoTG1WZExDQmJZUzVpTENCaExtUXNJR0V1Wmwwc0lGc3dMQ0F3TENBeFhWMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUdadmNpQW9lQ0E5SURBN0lIZ2dQQ0F6T3lCNEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tIa2dQU0F3T3lCNUlEd2dNenNnZVNzcktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGN5QTlJREE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUFvZWlBOUlEQTdJSG9nUENBek95QjZLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGN5QXJQU0J0VzNoZFczcGRJQ29nYldGMGNtbDRXM3BkVzNsZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOTFkRnQ0WFZ0NVhTQTlJSEpsY3p0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1FZ1BTQnZkWFJiTUYxYk1GMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbUlnUFNCdmRYUmJNVjFiTUYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtTWdQU0J2ZFhSYk1GMWJNVjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1RZ1BTQnZkWFJiTVYxYk1WMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbVVnUFNCdmRYUmJNRjFiTWwwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtWWdQU0J2ZFhSYk1WMWJNbDA3WEc0Z0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUNBZ0lDOHFYRnhjYmlBZ0lDQWdJQ0FnSUNvZ1RXRjBjbWw0TG1sdWRtVnlkRnh1SUNBZ0lDQWdJQ0FnV3lCdFpYUm9iMlFnWFZ4dUlDQWdJQ0FnSUNBZ0tpcGNiaUFnSUNBZ0lDQWdJQ29nVW1WMGRYSnVjeUJwYm5abGNuUmxaQ0IyWlhKemFXOXVJRzltSUhSb1pTQnRZWFJ5YVhoY2JpQWdJQ0FnSUNBZ0lEMGdLRzlpYW1WamRDa2dRRTFoZEhKcGVGeHVJQ0FnSUNBZ0lDQmNYQ292WEc0Z0lDQWdJQ0FnSUcxaGRISnBlSEJ5YjNSdkxtbHVkbVZ5ZENBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ0WlNBOUlIUm9hWE1zWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZUNBOUlHMWxMbUVnS2lCdFpTNWtJQzBnYldVdVlpQXFJRzFsTG1NN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUUxaGRISnBlQ2h0WlM1a0lDOGdlQ3dnTFcxbExtSWdMeUI0TENBdGJXVXVZeUF2SUhnc0lHMWxMbUVnTHlCNExDQW9iV1V1WXlBcUlHMWxMbVlnTFNCdFpTNWtJQ29nYldVdVpTa2dMeUI0TENBb2JXVXVZaUFxSUcxbExtVWdMU0J0WlM1aElDb2diV1V1WmlrZ0x5QjRLVHRjYmlBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUNBZ0x5cGNYRnh1SUNBZ0lDQWdJQ0FnS2lCTllYUnlhWGd1WTJ4dmJtVmNiaUFnSUNBZ0lDQWdJRnNnYldWMGFHOWtJRjFjYmlBZ0lDQWdJQ0FnSUNvcVhHNGdJQ0FnSUNBZ0lDQXFJRkpsZEhWeWJuTWdZMjl3ZVNCdlppQjBhR1VnYldGMGNtbDRYRzRnSUNBZ0lDQWdJQ0E5SUNodlltcGxZM1FwSUVCTllYUnlhWGhjYmlBZ0lDQWdJQ0FnWEZ3cUwxeHVJQ0FnSUNBZ0lDQnRZWFJ5YVhod2NtOTBieTVqYkc5dVpTQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnVFdGMGNtbDRLSFJvYVhNdVlTd2dkR2hwY3k1aUxDQjBhR2x6TG1Nc0lIUm9hWE11WkN3Z2RHaHBjeTVsTENCMGFHbHpMbVlwTzF4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ0lDQXZLbHhjWEc0Z0lDQWdJQ0FnSUNBcUlFMWhkSEpwZUM1MGNtRnVjMnhoZEdWY2JpQWdJQ0FnSUNBZ0lGc2diV1YwYUc5a0lGMWNiaUFnSUNBZ0lDQWdJQ29xWEc0Z0lDQWdJQ0FnSUNBcUlGUnlZVzV6YkdGMFpTQjBhR1VnYldGMGNtbDRYRzRnSUNBZ0lDQWdJQ0ErSUZCaGNtRnRaWFJsY25OY2JpQWdJQ0FnSUNBZ0lDMGdlQ0FvYm5WdFltVnlLVnh1SUNBZ0lDQWdJQ0FnTFNCNUlDaHVkVzFpWlhJcFhHNGdJQ0FnSUNBZ0lGeGNLaTljYmlBZ0lDQWdJQ0FnYldGMGNtbDRjSEp2ZEc4dWRISmhibk5zWVhSbElEMGdablZ1WTNScGIyNGdLSGdzSUhrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZV1JrS0RFc0lEQXNJREFzSURFc0lIZ3NJSGtwTzF4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ0lDQXZLbHhjWEc0Z0lDQWdJQ0FnSUNBcUlFMWhkSEpwZUM1elkyRnNaVnh1SUNBZ0lDQWdJQ0FnV3lCdFpYUm9iMlFnWFZ4dUlDQWdJQ0FnSUNBZ0tpcGNiaUFnSUNBZ0lDQWdJQ29nVTJOaGJHVnpJSFJvWlNCdFlYUnlhWGhjYmlBZ0lDQWdJQ0FnSUQ0Z1VHRnlZVzFsZEdWeWMxeHVJQ0FnSUNBZ0lDQWdMU0I0SUNodWRXMWlaWElwWEc0Z0lDQWdJQ0FnSUNBdElIa2dLRzUxYldKbGNpa2dJMjl3ZEdsdmJtRnNYRzRnSUNBZ0lDQWdJQ0F0SUdONElDaHVkVzFpWlhJcElDTnZjSFJwYjI1aGJGeHVJQ0FnSUNBZ0lDQWdMU0JqZVNBb2JuVnRZbVZ5S1NBamIzQjBhVzl1WVd4Y2JpQWdJQ0FnSUNBZ1hGd3FMMXh1SUNBZ0lDQWdJQ0J0WVhSeWFYaHdjbTkwYnk1elkyRnNaU0E5SUdaMWJtTjBhVzl1SUNoNExDQjVMQ0JqZUN3Z1kza3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIa2dQVDBnYm5Wc2JDQW1KaUFvZVNBOUlIZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0tHTjRJSHg4SUdONUtTQW1KaUIwYUdsekxtRmtaQ2d4TENBd0xDQXdMQ0F4TENCamVDd2dZM2twTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1aFpHUW9lQ3dnTUN3Z01Dd2dlU3dnTUN3Z01DazdYRzRnSUNBZ0lDQWdJQ0FnSUNBb1kzZ2dmSHdnWTNrcElDWW1JSFJvYVhNdVlXUmtLREVzSURBc0lEQXNJREVzSUMxamVDd2dMV041S1R0Y2JpQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lDQWdMeXBjWEZ4dUlDQWdJQ0FnSUNBZ0tpQk5ZWFJ5YVhndWNtOTBZWFJsWEc0Z0lDQWdJQ0FnSUNCYklHMWxkR2h2WkNCZFhHNGdJQ0FnSUNBZ0lDQXFLbHh1SUNBZ0lDQWdJQ0FnS2lCU2IzUmhkR1Z6SUhSb1pTQnRZWFJ5YVhoY2JpQWdJQ0FnSUNBZ0lENGdVR0Z5WVcxbGRHVnljMXh1SUNBZ0lDQWdJQ0FnTFNCaElDaHVkVzFpWlhJcFhHNGdJQ0FnSUNBZ0lDQXRJSGdnS0c1MWJXSmxjaWxjYmlBZ0lDQWdJQ0FnSUMwZ2VTQW9iblZ0WW1WeUtWeHVJQ0FnSUNBZ0lDQmNYQ292WEc0Z0lDQWdJQ0FnSUcxaGRISnBlSEJ5YjNSdkxuSnZkR0YwWlNBOUlHWjFibU4wYVc5dUlDaGhMQ0I0TENCNUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCaElEMGdVaTV5WVdRb1lTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCNElEMGdlQ0I4ZkNBd08xeHVJQ0FnSUNBZ0lDQWdJQ0FnZVNBOUlIa2dmSHdnTUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCamIzTWdQU0FyYldGMGFDNWpiM01vWVNrdWRHOUdhWGhsWkNnNUtTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnphVzRnUFNBcmJXRjBhQzV6YVc0b1lTa3VkRzlHYVhobFpDZzVLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WVdSa0tHTnZjeXdnYzJsdUxDQXRjMmx1TENCamIzTXNJSGdzSUhrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWhaR1FvTVN3Z01Dd2dNQ3dnTVN3Z0xYZ3NJQzE1S1R0Y2JpQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lDQWdMeXBjWEZ4dUlDQWdJQ0FnSUNBZ0tpQk5ZWFJ5YVhndWVGeHVJQ0FnSUNBZ0lDQWdXeUJ0WlhSb2IyUWdYVnh1SUNBZ0lDQWdJQ0FnS2lwY2JpQWdJQ0FnSUNBZ0lDb2dVbVYwZFhKdUlIZ2dZMjl2Y21ScGJtRjBaU0JtYjNJZ1oybDJaVzRnY0c5cGJuUWdZV1owWlhJZ2RISmhibk5tYjNKdFlYUnBiMjRnWkdWelkzSnBZbVZrSUdKNUlIUm9aU0J0WVhSeWFYZ3VJRk5sWlNCaGJITnZJRUJOWVhSeWFYZ3VlVnh1SUNBZ0lDQWdJQ0FnUGlCUVlYSmhiV1YwWlhKelhHNGdJQ0FnSUNBZ0lDQXRJSGdnS0c1MWJXSmxjaWxjYmlBZ0lDQWdJQ0FnSUMwZ2VTQW9iblZ0WW1WeUtWeHVJQ0FnSUNBZ0lDQWdQU0FvYm5WdFltVnlLU0I0WEc0Z0lDQWdJQ0FnSUZ4Y0tpOWNiaUFnSUNBZ0lDQWdiV0YwY21sNGNISnZkRzh1ZUNBOUlHWjFibU4wYVc5dUlDaDRMQ0I1S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdlQ0FxSUhSb2FYTXVZU0FySUhrZ0tpQjBhR2x6TG1NZ0t5QjBhR2x6TG1VN1hHNGdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ0lDQWdJQzhxWEZ4Y2JpQWdJQ0FnSUNBZ0lDb2dUV0YwY21sNExubGNiaUFnSUNBZ0lDQWdJRnNnYldWMGFHOWtJRjFjYmlBZ0lDQWdJQ0FnSUNvcVhHNGdJQ0FnSUNBZ0lDQXFJRkpsZEhWeWJpQjVJR052YjNKa2FXNWhkR1VnWm05eUlHZHBkbVZ1SUhCdmFXNTBJR0ZtZEdWeUlIUnlZVzV6Wm05eWJXRjBhVzl1SUdSbGMyTnlhV0psWkNCaWVTQjBhR1VnYldGMGNtbDRMaUJUWldVZ1lXeHpieUJBVFdGMGNtbDRMbmhjYmlBZ0lDQWdJQ0FnSUQ0Z1VHRnlZVzFsZEdWeWMxeHVJQ0FnSUNBZ0lDQWdMU0I0SUNodWRXMWlaWElwWEc0Z0lDQWdJQ0FnSUNBdElIa2dLRzUxYldKbGNpbGNiaUFnSUNBZ0lDQWdJRDBnS0c1MWJXSmxjaWtnZVZ4dUlDQWdJQ0FnSUNCY1hDb3ZYRzRnSUNBZ0lDQWdJRzFoZEhKcGVIQnliM1J2TG5rZ1BTQm1kVzVqZEdsdmJpQW9lQ3dnZVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSGdnS2lCMGFHbHpMbUlnS3lCNUlDb2dkR2hwY3k1a0lDc2dkR2hwY3k1bU8xeHVJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdJQ0J0WVhSeWFYaHdjbTkwYnk1blpYUWdQU0JtZFc1amRHbHZiaUFvYVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJQ3QwYUdselcxTjBjaTVtY205dFEyaGhja052WkdVb09UY2dLeUJwS1YwdWRHOUdhWGhsWkNnMEtUdGNiaUFnSUNBZ0lDQWdmVHRjYmlBZ0lDQWdJQ0FnYldGMGNtbDRjSEp2ZEc4dWRHOVRkSEpwYm1jZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1VpNXpkbWNnUDF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZ3aWJXRjBjbWw0S0Z3aUlDc2dXM1JvYVhNdVoyVjBLREFwTENCMGFHbHpMbWRsZENneEtTd2dkR2hwY3k1blpYUW9NaWtzSUhSb2FYTXVaMlYwS0RNcExDQjBhR2x6TG1kbGRDZzBLU3dnZEdocGN5NW5aWFFvTlNsZExtcHZhVzRvS1NBcklGd2lLVndpSURwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCYmRHaHBjeTVuWlhRb01Da3NJSFJvYVhNdVoyVjBLRElwTENCMGFHbHpMbWRsZENneEtTd2dkR2hwY3k1blpYUW9NeWtzSURBc0lEQmRMbXB2YVc0b0tUdGNiaUFnSUNBZ0lDQWdmVHRjYmlBZ0lDQWdJQ0FnYldGMGNtbDRjSEp2ZEc4dWRHOUdhV3gwWlhJZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1hDSndjbTluYVdRNlJGaEpiV0ZuWlZSeVlXNXpabTl5YlM1TmFXTnliM052Wm5RdVRXRjBjbWw0S0UweE1UMWNJaUFySUhSb2FYTXVaMlYwS0RBcElDdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmNJaXdnVFRFeVBWd2lJQ3NnZEdocGN5NW5aWFFvTWlrZ0t5QmNJaXdnVFRJeFBWd2lJQ3NnZEdocGN5NW5aWFFvTVNrZ0t5QmNJaXdnVFRJeVBWd2lJQ3NnZEdocGN5NW5aWFFvTXlrZ0sxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGd2lMQ0JFZUQxY0lpQXJJSFJvYVhNdVoyVjBLRFFwSUNzZ1hDSXNJRVI1UFZ3aUlDc2dkR2hwY3k1blpYUW9OU2tnS3lCY0lpd2djMmw2YVc1bmJXVjBhRzlrUFNkaGRYUnZJR1Y0Y0dGdVpDY3BYQ0k3WEc0Z0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUNBZ0lHMWhkSEpwZUhCeWIzUnZMbTltWm5ObGRDQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmJkR2hwY3k1bExuUnZSbWw0WldRb05Da3NJSFJvYVhNdVppNTBiMFpwZUdWa0tEUXBYVHRjYmlBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z2JtOXliU2hoS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdZVnN3WFNBcUlHRmJNRjBnS3lCaFd6RmRJQ29nWVZzeFhUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUJ1YjNKdFlXeHBlbVVvWVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHMWhaeUE5SUcxaGRHZ3VjM0Z5ZENodWIzSnRLR0VwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR0ZiTUYwZ0ppWWdLR0ZiTUYwZ0x6MGdiV0ZuS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR0ZiTVYwZ0ppWWdLR0ZiTVYwZ0x6MGdiV0ZuS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQXZLbHhjWEc0Z0lDQWdJQ0FnSUNBcUlFMWhkSEpwZUM1emNHeHBkRnh1SUNBZ0lDQWdJQ0FnV3lCdFpYUm9iMlFnWFZ4dUlDQWdJQ0FnSUNBZ0tpcGNiaUFnSUNBZ0lDQWdJQ29nVTNCc2FYUnpJRzFoZEhKcGVDQnBiblJ2SUhCeWFXMXBkR2wyWlNCMGNtRnVjMlp2Y20xaGRHbHZibk5jYmlBZ0lDQWdJQ0FnSUQwZ0tHOWlhbVZqZENrZ2FXNGdabTl5YldGME9seHVJQ0FnSUNBZ0lDQWdieUJrZUNBb2JuVnRZbVZ5S1NCMGNtRnVjMnhoZEdsdmJpQmllU0I0WEc0Z0lDQWdJQ0FnSUNCdklHUjVJQ2h1ZFcxaVpYSXBJSFJ5WVc1emJHRjBhVzl1SUdKNUlIbGNiaUFnSUNBZ0lDQWdJRzhnYzJOaGJHVjRJQ2h1ZFcxaVpYSXBJSE5qWVd4bElHSjVJSGhjYmlBZ0lDQWdJQ0FnSUc4Z2MyTmhiR1Y1SUNodWRXMWlaWElwSUhOallXeGxJR0o1SUhsY2JpQWdJQ0FnSUNBZ0lHOGdjMmhsWVhJZ0tHNTFiV0psY2lrZ2MyaGxZWEpjYmlBZ0lDQWdJQ0FnSUc4Z2NtOTBZWFJsSUNodWRXMWlaWElwSUhKdmRHRjBhVzl1SUdsdUlHUmxaMXh1SUNBZ0lDQWdJQ0FnYnlCcGMxTnBiWEJzWlNBb1ltOXZiR1ZoYmlrZ1kyOTFiR1FnYVhRZ1ltVWdjbVZ3Y21WelpXNTBaV1FnZG1saElITnBiWEJzWlNCMGNtRnVjMlp2Y20xaGRHbHZibk5jYmlBZ0lDQWdJQ0FnWEZ3cUwxeHVJQ0FnSUNBZ0lDQnRZWFJ5YVhod2NtOTBieTV6Y0d4cGRDQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCdmRYUWdQU0I3ZlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUhSeVlXNXpiR0YwYVc5dVhHNGdJQ0FnSUNBZ0lDQWdJQ0J2ZFhRdVpIZ2dQU0IwYUdsekxtVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCdmRYUXVaSGtnUFNCMGFHbHpMbVk3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUhOallXeGxJR0Z1WkNCemFHVmhjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSEp2ZHlBOUlGdGJkR2hwY3k1aExDQjBhR2x6TG1OZExDQmJkR2hwY3k1aUxDQjBhR2x6TG1SZFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUc5MWRDNXpZMkZzWlhnZ1BTQnRZWFJvTG5OeGNuUW9ibTl5YlNoeWIzZGJNRjBwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJRzV2Y20xaGJHbDZaU2h5YjNkYk1GMHBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnZkWFF1YzJobFlYSWdQU0J5YjNkYk1GMWJNRjBnS2lCeWIzZGJNVjFiTUYwZ0t5QnliM2RiTUYxYk1WMGdLaUJ5YjNkYk1WMWJNVjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnliM2RiTVYwZ1BTQmJjbTkzV3pGZFd6QmRJQzBnY205M1d6QmRXekJkSUNvZ2IzVjBMbk5vWldGeUxDQnliM2RiTVYxYk1WMGdMU0J5YjNkYk1GMWJNVjBnS2lCdmRYUXVjMmhsWVhKZE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCdmRYUXVjMk5oYkdWNUlEMGdiV0YwYUM1emNYSjBLRzV2Y20wb2NtOTNXekZkS1NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J1YjNKdFlXeHBlbVVvY205M1d6RmRLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHOTFkQzV6YUdWaGNpQXZQU0J2ZFhRdWMyTmhiR1Y1TzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCeWIzUmhkR2x2Ymx4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhOcGJpQTlJQzF5YjNkYk1GMWJNVjBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5eklEMGdjbTkzV3pGZFd6RmRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR052Y3lBOElEQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J2ZFhRdWNtOTBZWFJsSUQwZ1VpNWtaV2NvYldGMGFDNWhZMjl6S0dOdmN5a3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoemFXNGdQQ0F3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzkxZEM1eWIzUmhkR1VnUFNBek5qQWdMU0J2ZFhRdWNtOTBZWFJsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiM1YwTG5KdmRHRjBaU0E5SUZJdVpHVm5LRzFoZEdndVlYTnBiaWh6YVc0cEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJQ0FnYjNWMExtbHpVMmx0Y0d4bElEMGdJU3R2ZFhRdWMyaGxZWEl1ZEc5R2FYaGxaQ2c1S1NBbUppQW9iM1YwTG5OallXeGxlQzUwYjBacGVHVmtLRGtwSUQwOUlHOTFkQzV6WTJGc1pYa3VkRzlHYVhobFpDZzVLU0I4ZkNBaGIzVjBMbkp2ZEdGMFpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCdmRYUXVhWE5UZFhCbGNsTnBiWEJzWlNBOUlDRXJiM1YwTG5Ob1pXRnlMblJ2Um1sNFpXUW9PU2tnSmlZZ2IzVjBMbk5qWVd4bGVDNTBiMFpwZUdWa0tEa3BJRDA5SUc5MWRDNXpZMkZzWlhrdWRHOUdhWGhsWkNnNUtTQW1KaUFoYjNWMExuSnZkR0YwWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJRzkxZEM1dWIxSnZkR0YwYVc5dUlEMGdJU3R2ZFhRdWMyaGxZWEl1ZEc5R2FYaGxaQ2c1S1NBbUppQWhiM1YwTG5KdmRHRjBaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCdmRYUTdYRzRnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0FnSUM4cVhGeGNiaUFnSUNBZ0lDQWdJQ29nVFdGMGNtbDRMblJ2VkhKaGJuTm1iM0p0VTNSeWFXNW5YRzRnSUNBZ0lDQWdJQ0JiSUcxbGRHaHZaQ0JkWEc0Z0lDQWdJQ0FnSUNBcUtseHVJQ0FnSUNBZ0lDQWdLaUJTWlhSMWNtNGdkSEpoYm5ObWIzSnRJSE4wY21sdVp5QjBhR0YwSUhKbGNISmxjMlZ1ZEhNZ1oybDJaVzRnYldGMGNtbDRYRzRnSUNBZ0lDQWdJQ0E5SUNoemRISnBibWNwSUhSeVlXNXpabTl5YlNCemRISnBibWRjYmlBZ0lDQWdJQ0FnWEZ3cUwxeHVJQ0FnSUNBZ0lDQnRZWFJ5YVhod2NtOTBieTUwYjFSeVlXNXpabTl5YlZOMGNtbHVaeUE5SUdaMWJtTjBhVzl1SUNoemFHOXlkR1Z5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2N5QTlJSE5vYjNKMFpYSWdmSHdnZEdocGMxdHpjR3hwZEYwb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHpMbWx6VTJsdGNHeGxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY3k1elkyRnNaWGdnUFNBcmN5NXpZMkZzWlhndWRHOUdhWGhsWkNnMEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpMbk5qWVd4bGVTQTlJQ3R6TG5OallXeGxlUzUwYjBacGVHVmtLRFFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhNdWNtOTBZWFJsSUQwZ0szTXVjbTkwWVhSbExuUnZSbWw0WldRb05DazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlDQW9jeTVrZUNCOGZDQnpMbVI1SUQ4Z1hDSjBYQ0lnS3lCYmN5NWtlQ3dnY3k1a2VWMGdPaUJGS1NBclhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBb2N5NXpZMkZzWlhnZ0lUMGdNU0I4ZkNCekxuTmpZV3hsZVNBaFBTQXhJRDhnWENKelhDSWdLeUJiY3k1elkyRnNaWGdzSUhNdWMyTmhiR1Y1TENBd0xDQXdYU0E2SUVVcElDdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDaHpMbkp2ZEdGMFpTQS9JRndpY2x3aUlDc2dXM011Y205MFlYUmxMQ0F3TENBd1hTQTZJRVVwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1hDSnRYQ0lnS3lCYmRHaHBjeTVuWlhRb01Da3NJSFJvYVhNdVoyVjBLREVwTENCMGFHbHpMbWRsZENneUtTd2dkR2hwY3k1blpYUW9NeWtzSUhSb2FYTXVaMlYwS0RRcExDQjBhR2x6TG1kbGRDZzFLVjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdmU2tvVFdGMGNtbDRMbkJ5YjNSdmRIbHdaU2s3WEc1Y2JpQWdJQ0IyWVhJZ2NISmxkbVZ1ZEVSbFptRjFiSFFnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWNtVjBkWEp1Vm1Gc2RXVWdQU0JtWVd4elpUdGNiaUFnSUNCOUxGeHVJQ0FnSUhCeVpYWmxiblJVYjNWamFDQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXViM0pwWjJsdVlXeEZkbVZ1ZEM1d2NtVjJaVzUwUkdWbVlYVnNkQ2dwTzF4dUlDQWdJSDBzWEc0Z0lDQWdjM1J2Y0ZCeWIzQmhaMkYwYVc5dUlEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbU5oYm1ObGJFSjFZbUpzWlNBOUlIUnlkV1U3WEc0Z0lDQWdmU3hjYmlBZ0lDQnpkRzl3Vkc5MVkyZ2dQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbTl5YVdkcGJtRnNSWFpsYm5RdWMzUnZjRkJ5YjNCaFoyRjBhVzl1S0NrN1hHNGdJQ0FnZlN4Y2JpQWdJQ0JuWlhSRmRtVnVkRkJ2YzJsMGFXOXVJRDBnWm5WdVkzUnBiMjRnS0dVcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUhOamNtOXNiRmtnUFNCbkxtUnZZeTVrYjJOMWJXVnVkRVZzWlcxbGJuUXVjMk55YjJ4c1ZHOXdJSHg4SUdjdVpHOWpMbUp2WkhrdWMyTnliMnhzVkc5d0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnYzJOeWIyeHNXQ0E5SUdjdVpHOWpMbVJ2WTNWdFpXNTBSV3hsYldWdWRDNXpZM0p2Ykd4TVpXWjBJSHg4SUdjdVpHOWpMbUp2WkhrdWMyTnliMnhzVEdWbWREdGNibHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2VEb2daUzVqYkdsbGJuUllJQ3NnYzJOeWIyeHNXQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lIazZJR1V1WTJ4cFpXNTBXU0FySUhOamNtOXNiRmxjYmlBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0I5TEZ4dUlDQWdJR0ZrWkVWMlpXNTBJRDBnS0daMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdhV1lnS0djdVpHOWpMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlBb2IySnFMQ0IwZVhCbExDQm1iaXdnWld4bGJXVnVkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQm1JRDBnWm5WdVkzUnBiMjRnS0dVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIQnZjeUE5SUdkbGRFVjJaVzUwVUc5emFYUnBiMjRvWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm1iaTVqWVd4c0tHVnNaVzFsYm5Rc0lHVXNJSEJ2Y3k1NExDQndiM011ZVNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZZbW91WVdSa1JYWmxiblJNYVhOMFpXNWxjaWgwZVhCbExDQm1MQ0JtWVd4elpTazdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2MzVndjRzl5ZEhOVWIzVmphQ0FtSmlCMGIzVmphRTFoY0Z0MGVYQmxYU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnWDJZZ1BTQm1kVzVqZEdsdmJpQW9aU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIQnZjeUE5SUdkbGRFVjJaVzUwVUc5emFYUnBiMjRvWlNrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiMnhrWlNBOUlHVTdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd0xDQnBhU0E5SUdVdWRHRnlaMlYwVkc5MVkyaGxjeUFtSmlCbExuUmhjbWRsZEZSdmRXTm9aWE11YkdWdVozUm9PeUJwSUR3Z2FXazdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNobExuUmhjbWRsZEZSdmRXTm9aWE5iYVYwdWRHRnlaMlYwSUQwOUlHOWlhaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsSUQwZ1pTNTBZWEpuWlhSVWIzVmphR1Z6VzJsZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbExtOXlhV2RwYm1Gc1JYWmxiblFnUFNCdmJHUmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxMbkJ5WlhabGJuUkVaV1poZFd4MElEMGdjSEpsZG1WdWRGUnZkV05vTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsTG5OMGIzQlFjbTl3WVdkaGRHbHZiaUE5SUhOMGIzQlViM1ZqYUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWm00dVkyRnNiQ2hsYkdWdFpXNTBMQ0JsTENCd2IzTXVlQ3dnY0c5ekxua3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J2WW1vdVlXUmtSWFpsYm5STWFYTjBaVzVsY2loMGIzVmphRTFoY0Z0MGVYQmxYU3dnWDJZc0lHWmhiSE5sS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdlltb3VjbVZ0YjNabFJYWmxiblJNYVhOMFpXNWxjaWgwZVhCbExDQm1MQ0JtWVd4elpTazdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSE4xY0hCdmNuUnpWRzkxWTJnZ0ppWWdkRzkxWTJoTllYQmJkSGx3WlYwcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdlltb3VjbVZ0YjNabFJYWmxiblJNYVhOMFpXNWxjaWgwYjNWamFFMWhjRnQwZVhCbFhTd2dYMllzSUdaaGJITmxLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RISjFaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNobkxtUnZZeTVoZEhSaFkyaEZkbVZ1ZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1oxYm1OMGFXOXVJQ2h2WW1vc0lIUjVjR1VzSUdadUxDQmxiR1Z0Wlc1MEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdZZ1BTQm1kVzVqZEdsdmJpQW9aU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxJRDBnWlNCOGZDQm5MbmRwYmk1bGRtVnVkRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSE5qY205c2JGa2dQU0JuTG1Sdll5NWtiMk4xYldWdWRFVnNaVzFsYm5RdWMyTnliMnhzVkc5d0lIeDhJR2N1Wkc5akxtSnZaSGt1YzJOeWIyeHNWRzl3TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJOeWIyeHNXQ0E5SUdjdVpHOWpMbVJ2WTNWdFpXNTBSV3hsYldWdWRDNXpZM0p2Ykd4TVpXWjBJSHg4SUdjdVpHOWpMbUp2WkhrdWMyTnliMnhzVEdWbWRDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZ2dQU0JsTG1Oc2FXVnVkRmdnS3lCelkzSnZiR3hZTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZVNBOUlHVXVZMnhwWlc1MFdTQXJJSE5qY205c2JGazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdVdWNISmxkbVZ1ZEVSbFptRjFiSFFnUFNCbExuQnlaWFpsYm5SRVpXWmhkV3gwSUh4OElIQnlaWFpsYm5SRVpXWmhkV3gwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxMbk4wYjNCUWNtOXdZV2RoZEdsdmJpQTlJR1V1YzNSdmNGQnliM0JoWjJGMGFXOXVJSHg4SUhOMGIzQlFjbTl3WVdkaGRHbHZianRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdadUxtTmhiR3dvWld4bGJXVnVkQ3dnWlN3Z2VDd2dlU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdlltb3VZWFIwWVdOb1JYWmxiblFvWENKdmJsd2lJQ3NnZEhsd1pTd2daaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHUmxkR0ZqYUdWeUlEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZZbW91WkdWMFlXTm9SWFpsYm5Rb1hDSnZibHdpSUNzZ2RIbHdaU3dnWmlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBjblZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdSbGRHRmphR1Z5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDBwS0Nrc1hHNGdJQ0FnWkhKaFp5QTlJRnRkTEZ4dUlDQWdJR1J5WVdkTmIzWmxJRDBnWm5WdVkzUnBiMjRnS0dVcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUhnZ1BTQmxMbU5zYVdWdWRGZ3NYRzRnSUNBZ0lDQWdJQ0FnSUNCNUlEMGdaUzVqYkdsbGJuUlpMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2MyTnliMnhzV1NBOUlHY3VaRzlqTG1SdlkzVnRaVzUwUld4bGJXVnVkQzV6WTNKdmJHeFViM0FnZkh3Z1p5NWtiMk11WW05a2VTNXpZM0p2Ykd4VWIzQXNYRzRnSUNBZ0lDQWdJQ0FnSUNCelkzSnZiR3hZSUQwZ1p5NWtiMk11Wkc5amRXMWxiblJGYkdWdFpXNTBMbk5qY205c2JFeGxablFnZkh3Z1p5NWtiMk11WW05a2VTNXpZM0p2Ykd4TVpXWjBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1pISmhaMmtzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnFJRDBnWkhKaFp5NXNaVzVuZEdnN1hHNGdJQ0FnSUNBZ0lIZG9hV3hsSUNocUxTMHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHUnlZV2RwSUQwZ1pISmhaMXRxWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoemRYQndiM0owYzFSdmRXTm9JQ1ltSUdVdWRHOTFZMmhsY3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJwSUQwZ1pTNTBiM1ZqYUdWekxteGxibWQwYUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkRzkxWTJnN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2QyaHBiR1VnS0drdExTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGIzVmphQ0E5SUdVdWRHOTFZMmhsYzF0cFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUnZkV05vTG1sa1pXNTBhV1pwWlhJZ1BUMGdaSEpoWjJrdVpXd3VYMlJ5WVdjdWFXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGdnUFNCMGIzVmphQzVqYkdsbGJuUllPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlU0E5SUhSdmRXTm9MbU5zYVdWdWRGazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW9aUzV2Y21sbmFXNWhiRVYyWlc1MElEOGdaUzV2Y21sbmFXNWhiRVYyWlc1MElEb2daU2t1Y0hKbGRtVnVkRVJsWm1GMWJIUW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxMbkJ5WlhabGJuUkVaV1poZFd4MEtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2JtOWtaU0E5SUdSeVlXZHBMbVZzTG01dlpHVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdieXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J1WlhoMElEMGdibTlrWlM1dVpYaDBVMmxpYkdsdVp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndZWEpsYm5RZ1BTQnViMlJsTG5CaGNtVnVkRTV2WkdVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHbHpjR3hoZVNBOUlHNXZaR1V1YzNSNWJHVXVaR2x6Y0d4aGVUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdjdWQybHVMbTl3WlhKaElDWW1JSEJoY21WdWRDNXlaVzF2ZG1WRGFHbHNaQ2h1YjJSbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUc1dlpHVXVjM1I1YkdVdVpHbHpjR3hoZVNBOUlGd2libTl1WlZ3aU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYnlBOUlHUnlZV2RwTG1Wc0xuQmhjR1Z5TG1kbGRFVnNaVzFsYm5SQ2VWQnZhVzUwS0hnc0lIa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JtOWtaUzV6ZEhsc1pTNWthWE53YkdGNUlEMGdaR2x6Y0d4aGVUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdjdWQybHVMbTl3WlhKaElDWW1JQ2h1WlhoMElEOGdjR0Z5Wlc1MExtbHVjMlZ5ZEVKbFptOXlaU2h1YjJSbExDQnVaWGgwS1NBNklIQmhjbVZ1ZEM1aGNIQmxibVJEYUdsc1pDaHViMlJsS1NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J2SUNZbUlHVjJaU2hjSW5KaGNHaGhaV3d1WkhKaFp5NXZkbVZ5TGx3aUlDc2daSEpoWjJrdVpXd3VhV1FzSUdSeVlXZHBMbVZzTENCdktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhnZ0t6MGdjMk55YjJ4c1dEdGNiaUFnSUNBZ0lDQWdJQ0FnSUhrZ0t6MGdjMk55YjJ4c1dUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdWMlpTaGNJbkpoY0doaFpXd3VaSEpoWnk1dGIzWmxMbHdpSUNzZ1pISmhaMmt1Wld3dWFXUXNJR1J5WVdkcExtMXZkbVZmYzJOdmNHVWdmSHdnWkhKaFoya3VaV3dzSUhnZ0xTQmtjbUZuYVM1bGJDNWZaSEpoWnk1NExDQjVJQzBnWkhKaFoya3VaV3d1WDJSeVlXY3VlU3dnZUN3Z2VTd2daU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5TEZ4dUlDQWdJR1J5WVdkVmNDQTlJR1oxYm1OMGFXOXVJQ2hsS1NCN1hHNGdJQ0FnSUNBZ0lGSXVkVzV0YjNWelpXMXZkbVVvWkhKaFowMXZkbVVwTG5WdWJXOTFjMlYxY0Noa2NtRm5WWEFwTzF4dUlDQWdJQ0FnSUNCMllYSWdhU0E5SUdSeVlXY3ViR1Z1WjNSb0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnWkhKaFoyazdYRzRnSUNBZ0lDQWdJSGRvYVd4bElDaHBMUzBwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1J5WVdkcElEMGdaSEpoWjF0cFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdSeVlXZHBMbVZzTGw5a2NtRm5JRDBnZTMwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JsZG1Vb1hDSnlZWEJvWVdWc0xtUnlZV2N1Wlc1a0xsd2lJQ3NnWkhKaFoya3VaV3d1YVdRc0lHUnlZV2RwTG1WdVpGOXpZMjl3WlNCOGZDQmtjbUZuYVM1emRHRnlkRjl6WTI5d1pTQjhmQ0JrY21GbmFTNXRiM1psWDNOamIzQmxJSHg4SUdSeVlXZHBMbVZzTENCbEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JrY21GbklEMGdXMTA3WEc0Z0lDQWdmU3hjYmlBZ0lDQXZLbHhjWEc0Z0lDQWdJQ29nVW1Gd2FHRmxiQzVsYkZ4dUlDQWdJQ0JiSUhCeWIzQmxjblI1SUNodlltcGxZM1FwSUYxY2JpQWdJQ0FnS2lwY2JpQWdJQ0FnS2lCWmIzVWdZMkZ1SUdGa1pDQjViM1Z5SUc5M2JpQnRaWFJvYjJRZ2RHOGdaV3hsYldWdWRITXVJRlJvYVhNZ2FYTWdkWE5sWm5Wc0lIZG9aVzRnZVc5MUlIZGhiblFnZEc4Z2FHRmpheUJrWldaaGRXeDBJR1oxYm1OMGFXOXVZV3hwZEhrZ2IzSmNiaUFnSUNBZ0tpQjNZVzUwSUhSdklIZHlZWEFnYzI5dFpTQmpiMjF0YjI0Z2RISmhibk5tYjNKdFlYUnBiMjRnYjNJZ1lYUjBjbWxpZFhSbGN5QnBiaUJ2Ym1VZ2JXVjBhRzlrTGlCSmJpQmthV1ptWlhKbGJtTmxJSFJ2SUdOaGJuWmhjeUJ0WlhSb2IyUnpMRnh1SUNBZ0lDQXFJSGx2ZFNCallXNGdjbVZrWldacGJtVWdaV3hsYldWdWRDQnRaWFJvYjJRZ1lYUWdZVzU1SUhScGJXVXVJRVY0Y0dWdVpHbHVaeUJsYkdWdFpXNTBJRzFsZEdodlpITWdkMjkxYkdSdTRvQ1pkQ0JoWm1abFkzUWdjMlYwTGx4dUlDQWdJQ0ErSUZWellXZGxYRzRnSUNBZ0lId2dVbUZ3YUdGbGJDNWxiQzV5WldRZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJSHdnSUNBZ0lIUm9hWE11WVhSMGNpaDdabWxzYkRvZ1hDSWpaakF3WENKOUtUdGNiaUFnSUNBZ2ZDQjlPMXh1SUNBZ0lDQjhJQzh2SUhSb1pXNGdkWE5sSUdsMFhHNGdJQ0FnSUh3Z2NHRndaWEl1WTJseVkyeGxLREV3TUN3Z01UQXdMQ0F5TUNrdWNtVmtLQ2s3WEc0Z0lDQWdYRndxTDF4dUlDQWdJR1ZzY0hKdmRHOGdQU0JTTG1Wc0lEMGdlMzA3WEc0Z0lDQWdMeXBjWEZ4dUlDQWdJQ0FxSUVWc1pXMWxiblF1WTJ4cFkydGNiaUFnSUNBZ1d5QnRaWFJvYjJRZ1hWeHVJQ0FnSUNBcUtseHVJQ0FnSUNBcUlFRmtaSE1nWlhabGJuUWdhR0Z1Wkd4bGNpQm1iM0lnWTJ4cFkyc2dabTl5SUhSb1pTQmxiR1Z0Wlc1MExseHVJQ0FnSUNBK0lGQmhjbUZ0WlhSbGNuTmNiaUFnSUNBZ0xTQm9ZVzVrYkdWeUlDaG1kVzVqZEdsdmJpa2dhR0Z1Wkd4bGNpQm1iM0lnZEdobElHVjJaVzUwWEc0Z0lDQWdJRDBnS0c5aWFtVmpkQ2tnUUVWc1pXMWxiblJjYmlBZ0lDQmNYQ292WEc0Z0lDQWdMeXBjWEZ4dUlDQWdJQ0FxSUVWc1pXMWxiblF1ZFc1amJHbGphMXh1SUNBZ0lDQmJJRzFsZEdodlpDQmRYRzRnSUNBZ0lDb3FYRzRnSUNBZ0lDb2dVbVZ0YjNabGN5QmxkbVZ1ZENCb1lXNWtiR1Z5SUdadmNpQmpiR2xqYXlCbWIzSWdkR2hsSUdWc1pXMWxiblF1WEc0Z0lDQWdJRDRnVUdGeVlXMWxkR1Z5YzF4dUlDQWdJQ0F0SUdoaGJtUnNaWElnS0daMWJtTjBhVzl1S1NBamIzQjBhVzl1WVd3Z2FHRnVaR3hsY2lCbWIzSWdkR2hsSUdWMlpXNTBYRzRnSUNBZ0lEMGdLRzlpYW1WamRDa2dRRVZzWlcxbGJuUmNiaUFnSUNCY1hDb3ZYRzVjYmlBZ0lDQXZLbHhjWEc0Z0lDQWdJQ29nUld4bGJXVnVkQzVrWW14amJHbGphMXh1SUNBZ0lDQmJJRzFsZEdodlpDQmRYRzRnSUNBZ0lDb3FYRzRnSUNBZ0lDb2dRV1JrY3lCbGRtVnVkQ0JvWVc1a2JHVnlJR1p2Y2lCa2IzVmliR1VnWTJ4cFkyc2dabTl5SUhSb1pTQmxiR1Z0Wlc1MExseHVJQ0FnSUNBK0lGQmhjbUZ0WlhSbGNuTmNiaUFnSUNBZ0xTQm9ZVzVrYkdWeUlDaG1kVzVqZEdsdmJpa2dhR0Z1Wkd4bGNpQm1iM0lnZEdobElHVjJaVzUwWEc0Z0lDQWdJRDBnS0c5aWFtVmpkQ2tnUUVWc1pXMWxiblJjYmlBZ0lDQmNYQ292WEc0Z0lDQWdMeXBjWEZ4dUlDQWdJQ0FxSUVWc1pXMWxiblF1ZFc1a1lteGpiR2xqYTF4dUlDQWdJQ0JiSUcxbGRHaHZaQ0JkWEc0Z0lDQWdJQ29xWEc0Z0lDQWdJQ29nVW1WdGIzWmxjeUJsZG1WdWRDQm9ZVzVrYkdWeUlHWnZjaUJrYjNWaWJHVWdZMnhwWTJzZ1ptOXlJSFJvWlNCbGJHVnRaVzUwTGx4dUlDQWdJQ0ErSUZCaGNtRnRaWFJsY25OY2JpQWdJQ0FnTFNCb1lXNWtiR1Z5SUNobWRXNWpkR2x2YmlrZ0kyOXdkR2x2Ym1Gc0lHaGhibVJzWlhJZ1ptOXlJSFJvWlNCbGRtVnVkRnh1SUNBZ0lDQTlJQ2h2WW1wbFkzUXBJRUJGYkdWdFpXNTBYRzRnSUNBZ1hGd3FMMXh1WEc0Z0lDQWdMeXBjWEZ4dUlDQWdJQ0FxSUVWc1pXMWxiblF1Ylc5MWMyVmtiM2R1WEc0Z0lDQWdJRnNnYldWMGFHOWtJRjFjYmlBZ0lDQWdLaXBjYmlBZ0lDQWdLaUJCWkdSeklHVjJaVzUwSUdoaGJtUnNaWElnWm05eUlHMXZkWE5sWkc5M2JpQm1iM0lnZEdobElHVnNaVzFsYm5RdVhHNGdJQ0FnSUQ0Z1VHRnlZVzFsZEdWeWMxeHVJQ0FnSUNBdElHaGhibVJzWlhJZ0tHWjFibU4wYVc5dUtTQm9ZVzVrYkdWeUlHWnZjaUIwYUdVZ1pYWmxiblJjYmlBZ0lDQWdQU0FvYjJKcVpXTjBLU0JBUld4bGJXVnVkRnh1SUNBZ0lGeGNLaTljYmlBZ0lDQXZLbHhjWEc0Z0lDQWdJQ29nUld4bGJXVnVkQzUxYm0xdmRYTmxaRzkzYmx4dUlDQWdJQ0JiSUcxbGRHaHZaQ0JkWEc0Z0lDQWdJQ29xWEc0Z0lDQWdJQ29nVW1WdGIzWmxjeUJsZG1WdWRDQm9ZVzVrYkdWeUlHWnZjaUJ0YjNWelpXUnZkMjRnWm05eUlIUm9aU0JsYkdWdFpXNTBMbHh1SUNBZ0lDQStJRkJoY21GdFpYUmxjbk5jYmlBZ0lDQWdMU0JvWVc1a2JHVnlJQ2htZFc1amRHbHZiaWtnSTI5d2RHbHZibUZzSUdoaGJtUnNaWElnWm05eUlIUm9aU0JsZG1WdWRGeHVJQ0FnSUNBOUlDaHZZbXBsWTNRcElFQkZiR1Z0Wlc1MFhHNGdJQ0FnWEZ3cUwxeHVYRzRnSUNBZ0x5cGNYRnh1SUNBZ0lDQXFJRVZzWlcxbGJuUXViVzkxYzJWdGIzWmxYRzRnSUNBZ0lGc2diV1YwYUc5a0lGMWNiaUFnSUNBZ0tpcGNiaUFnSUNBZ0tpQkJaR1J6SUdWMlpXNTBJR2hoYm1Sc1pYSWdabTl5SUcxdmRYTmxiVzkyWlNCbWIzSWdkR2hsSUdWc1pXMWxiblF1WEc0Z0lDQWdJRDRnVUdGeVlXMWxkR1Z5YzF4dUlDQWdJQ0F0SUdoaGJtUnNaWElnS0daMWJtTjBhVzl1S1NCb1lXNWtiR1Z5SUdadmNpQjBhR1VnWlhabGJuUmNiaUFnSUNBZ1BTQW9iMkpxWldOMEtTQkFSV3hsYldWdWRGeHVJQ0FnSUZ4Y0tpOWNiaUFnSUNBdktseGNYRzRnSUNBZ0lDb2dSV3hsYldWdWRDNTFibTF2ZFhObGJXOTJaVnh1SUNBZ0lDQmJJRzFsZEdodlpDQmRYRzRnSUNBZ0lDb3FYRzRnSUNBZ0lDb2dVbVZ0YjNabGN5QmxkbVZ1ZENCb1lXNWtiR1Z5SUdadmNpQnRiM1Z6WlcxdmRtVWdabTl5SUhSb1pTQmxiR1Z0Wlc1MExseHVJQ0FnSUNBK0lGQmhjbUZ0WlhSbGNuTmNiaUFnSUNBZ0xTQm9ZVzVrYkdWeUlDaG1kVzVqZEdsdmJpa2dJMjl3ZEdsdmJtRnNJR2hoYm1Sc1pYSWdabTl5SUhSb1pTQmxkbVZ1ZEZ4dUlDQWdJQ0E5SUNodlltcGxZM1FwSUVCRmJHVnRaVzUwWEc0Z0lDQWdYRndxTDF4dVhHNGdJQ0FnTHlwY1hGeHVJQ0FnSUNBcUlFVnNaVzFsYm5RdWJXOTFjMlZ2ZFhSY2JpQWdJQ0FnV3lCdFpYUm9iMlFnWFZ4dUlDQWdJQ0FxS2x4dUlDQWdJQ0FxSUVGa1pITWdaWFpsYm5RZ2FHRnVaR3hsY2lCbWIzSWdiVzkxYzJWdmRYUWdabTl5SUhSb1pTQmxiR1Z0Wlc1MExseHVJQ0FnSUNBK0lGQmhjbUZ0WlhSbGNuTmNiaUFnSUNBZ0xTQm9ZVzVrYkdWeUlDaG1kVzVqZEdsdmJpa2dhR0Z1Wkd4bGNpQm1iM0lnZEdobElHVjJaVzUwWEc0Z0lDQWdJRDBnS0c5aWFtVmpkQ2tnUUVWc1pXMWxiblJjYmlBZ0lDQmNYQ292WEc0Z0lDQWdMeXBjWEZ4dUlDQWdJQ0FxSUVWc1pXMWxiblF1ZFc1dGIzVnpaVzkxZEZ4dUlDQWdJQ0JiSUcxbGRHaHZaQ0JkWEc0Z0lDQWdJQ29xWEc0Z0lDQWdJQ29nVW1WdGIzWmxjeUJsZG1WdWRDQm9ZVzVrYkdWeUlHWnZjaUJ0YjNWelpXOTFkQ0JtYjNJZ2RHaGxJR1ZzWlcxbGJuUXVYRzRnSUNBZ0lENGdVR0Z5WVcxbGRHVnljMXh1SUNBZ0lDQXRJR2hoYm1Sc1pYSWdLR1oxYm1OMGFXOXVLU0FqYjNCMGFXOXVZV3dnYUdGdVpHeGxjaUJtYjNJZ2RHaGxJR1YyWlc1MFhHNGdJQ0FnSUQwZ0tHOWlhbVZqZENrZ1FFVnNaVzFsYm5SY2JpQWdJQ0JjWENvdlhHNWNiaUFnSUNBdktseGNYRzRnSUNBZ0lDb2dSV3hsYldWdWRDNXRiM1Z6Wlc5MlpYSmNiaUFnSUNBZ1d5QnRaWFJvYjJRZ1hWeHVJQ0FnSUNBcUtseHVJQ0FnSUNBcUlFRmtaSE1nWlhabGJuUWdhR0Z1Wkd4bGNpQm1iM0lnYlc5MWMyVnZkbVZ5SUdadmNpQjBhR1VnWld4bGJXVnVkQzVjYmlBZ0lDQWdQaUJRWVhKaGJXVjBaWEp6WEc0Z0lDQWdJQzBnYUdGdVpHeGxjaUFvWm5WdVkzUnBiMjRwSUdoaGJtUnNaWElnWm05eUlIUm9aU0JsZG1WdWRGeHVJQ0FnSUNBOUlDaHZZbXBsWTNRcElFQkZiR1Z0Wlc1MFhHNGdJQ0FnWEZ3cUwxeHVJQ0FnSUM4cVhGeGNiaUFnSUNBZ0tpQkZiR1Z0Wlc1MExuVnViVzkxYzJWdmRtVnlYRzRnSUNBZ0lGc2diV1YwYUc5a0lGMWNiaUFnSUNBZ0tpcGNiaUFnSUNBZ0tpQlNaVzF2ZG1WeklHVjJaVzUwSUdoaGJtUnNaWElnWm05eUlHMXZkWE5sYjNabGNpQm1iM0lnZEdobElHVnNaVzFsYm5RdVhHNGdJQ0FnSUQ0Z1VHRnlZVzFsZEdWeWMxeHVJQ0FnSUNBdElHaGhibVJzWlhJZ0tHWjFibU4wYVc5dUtTQWpiM0IwYVc5dVlXd2dhR0Z1Wkd4bGNpQm1iM0lnZEdobElHVjJaVzUwWEc0Z0lDQWdJRDBnS0c5aWFtVmpkQ2tnUUVWc1pXMWxiblJjYmlBZ0lDQmNYQ292WEc1Y2JpQWdJQ0F2S2x4Y1hHNGdJQ0FnSUNvZ1JXeGxiV1Z1ZEM1dGIzVnpaWFZ3WEc0Z0lDQWdJRnNnYldWMGFHOWtJRjFjYmlBZ0lDQWdLaXBjYmlBZ0lDQWdLaUJCWkdSeklHVjJaVzUwSUdoaGJtUnNaWElnWm05eUlHMXZkWE5sZFhBZ1ptOXlJSFJvWlNCbGJHVnRaVzUwTGx4dUlDQWdJQ0ErSUZCaGNtRnRaWFJsY25OY2JpQWdJQ0FnTFNCb1lXNWtiR1Z5SUNobWRXNWpkR2x2YmlrZ2FHRnVaR3hsY2lCbWIzSWdkR2hsSUdWMlpXNTBYRzRnSUNBZ0lEMGdLRzlpYW1WamRDa2dRRVZzWlcxbGJuUmNiaUFnSUNCY1hDb3ZYRzRnSUNBZ0x5cGNYRnh1SUNBZ0lDQXFJRVZzWlcxbGJuUXVkVzV0YjNWelpYVndYRzRnSUNBZ0lGc2diV1YwYUc5a0lGMWNiaUFnSUNBZ0tpcGNiaUFnSUNBZ0tpQlNaVzF2ZG1WeklHVjJaVzUwSUdoaGJtUnNaWElnWm05eUlHMXZkWE5sZFhBZ1ptOXlJSFJvWlNCbGJHVnRaVzUwTGx4dUlDQWdJQ0ErSUZCaGNtRnRaWFJsY25OY2JpQWdJQ0FnTFNCb1lXNWtiR1Z5SUNobWRXNWpkR2x2YmlrZ0kyOXdkR2x2Ym1Gc0lHaGhibVJzWlhJZ1ptOXlJSFJvWlNCbGRtVnVkRnh1SUNBZ0lDQTlJQ2h2WW1wbFkzUXBJRUJGYkdWdFpXNTBYRzRnSUNBZ1hGd3FMMXh1WEc0Z0lDQWdMeXBjWEZ4dUlDQWdJQ0FxSUVWc1pXMWxiblF1ZEc5MVkyaHpkR0Z5ZEZ4dUlDQWdJQ0JiSUcxbGRHaHZaQ0JkWEc0Z0lDQWdJQ29xWEc0Z0lDQWdJQ29nUVdSa2N5QmxkbVZ1ZENCb1lXNWtiR1Z5SUdadmNpQjBiM1ZqYUhOMFlYSjBJR1p2Y2lCMGFHVWdaV3hsYldWdWRDNWNiaUFnSUNBZ1BpQlFZWEpoYldWMFpYSnpYRzRnSUNBZ0lDMGdhR0Z1Wkd4bGNpQW9ablZ1WTNScGIyNHBJR2hoYm1Sc1pYSWdabTl5SUhSb1pTQmxkbVZ1ZEZ4dUlDQWdJQ0E5SUNodlltcGxZM1FwSUVCRmJHVnRaVzUwWEc0Z0lDQWdYRndxTDF4dUlDQWdJQzhxWEZ4Y2JpQWdJQ0FnS2lCRmJHVnRaVzUwTG5WdWRHOTFZMmh6ZEdGeWRGeHVJQ0FnSUNCYklHMWxkR2h2WkNCZFhHNGdJQ0FnSUNvcVhHNGdJQ0FnSUNvZ1VtVnRiM1psY3lCbGRtVnVkQ0JvWVc1a2JHVnlJR1p2Y2lCMGIzVmphSE4wWVhKMElHWnZjaUIwYUdVZ1pXeGxiV1Z1ZEM1Y2JpQWdJQ0FnUGlCUVlYSmhiV1YwWlhKelhHNGdJQ0FnSUMwZ2FHRnVaR3hsY2lBb1puVnVZM1JwYjI0cElDTnZjSFJwYjI1aGJDQm9ZVzVrYkdWeUlHWnZjaUIwYUdVZ1pYWmxiblJjYmlBZ0lDQWdQU0FvYjJKcVpXTjBLU0JBUld4bGJXVnVkRnh1SUNBZ0lGeGNLaTljYmx4dUlDQWdJQzhxWEZ4Y2JpQWdJQ0FnS2lCRmJHVnRaVzUwTG5SdmRXTm9iVzkyWlZ4dUlDQWdJQ0JiSUcxbGRHaHZaQ0JkWEc0Z0lDQWdJQ29xWEc0Z0lDQWdJQ29nUVdSa2N5QmxkbVZ1ZENCb1lXNWtiR1Z5SUdadmNpQjBiM1ZqYUcxdmRtVWdabTl5SUhSb1pTQmxiR1Z0Wlc1MExseHVJQ0FnSUNBK0lGQmhjbUZ0WlhSbGNuTmNiaUFnSUNBZ0xTQm9ZVzVrYkdWeUlDaG1kVzVqZEdsdmJpa2dhR0Z1Wkd4bGNpQm1iM0lnZEdobElHVjJaVzUwWEc0Z0lDQWdJRDBnS0c5aWFtVmpkQ2tnUUVWc1pXMWxiblJjYmlBZ0lDQmNYQ292WEc0Z0lDQWdMeXBjWEZ4dUlDQWdJQ0FxSUVWc1pXMWxiblF1ZFc1MGIzVmphRzF2ZG1WY2JpQWdJQ0FnV3lCdFpYUm9iMlFnWFZ4dUlDQWdJQ0FxS2x4dUlDQWdJQ0FxSUZKbGJXOTJaWE1nWlhabGJuUWdhR0Z1Wkd4bGNpQm1iM0lnZEc5MVkyaHRiM1psSUdadmNpQjBhR1VnWld4bGJXVnVkQzVjYmlBZ0lDQWdQaUJRWVhKaGJXVjBaWEp6WEc0Z0lDQWdJQzBnYUdGdVpHeGxjaUFvWm5WdVkzUnBiMjRwSUNOdmNIUnBiMjVoYkNCb1lXNWtiR1Z5SUdadmNpQjBhR1VnWlhabGJuUmNiaUFnSUNBZ1BTQW9iMkpxWldOMEtTQkFSV3hsYldWdWRGeHVJQ0FnSUZ4Y0tpOWNibHh1SUNBZ0lDOHFYRnhjYmlBZ0lDQWdLaUJGYkdWdFpXNTBMblJ2ZFdOb1pXNWtYRzRnSUNBZ0lGc2diV1YwYUc5a0lGMWNiaUFnSUNBZ0tpcGNiaUFnSUNBZ0tpQkJaR1J6SUdWMlpXNTBJR2hoYm1Sc1pYSWdabTl5SUhSdmRXTm9aVzVrSUdadmNpQjBhR1VnWld4bGJXVnVkQzVjYmlBZ0lDQWdQaUJRWVhKaGJXVjBaWEp6WEc0Z0lDQWdJQzBnYUdGdVpHeGxjaUFvWm5WdVkzUnBiMjRwSUdoaGJtUnNaWElnWm05eUlIUm9aU0JsZG1WdWRGeHVJQ0FnSUNBOUlDaHZZbXBsWTNRcElFQkZiR1Z0Wlc1MFhHNGdJQ0FnWEZ3cUwxeHVJQ0FnSUM4cVhGeGNiaUFnSUNBZ0tpQkZiR1Z0Wlc1MExuVnVkRzkxWTJobGJtUmNiaUFnSUNBZ1d5QnRaWFJvYjJRZ1hWeHVJQ0FnSUNBcUtseHVJQ0FnSUNBcUlGSmxiVzkyWlhNZ1pYWmxiblFnYUdGdVpHeGxjaUJtYjNJZ2RHOTFZMmhsYm1RZ1ptOXlJSFJvWlNCbGJHVnRaVzUwTGx4dUlDQWdJQ0ErSUZCaGNtRnRaWFJsY25OY2JpQWdJQ0FnTFNCb1lXNWtiR1Z5SUNobWRXNWpkR2x2YmlrZ0kyOXdkR2x2Ym1Gc0lHaGhibVJzWlhJZ1ptOXlJSFJvWlNCbGRtVnVkRnh1SUNBZ0lDQTlJQ2h2WW1wbFkzUXBJRUJGYkdWdFpXNTBYRzRnSUNBZ1hGd3FMMXh1WEc0Z0lDQWdMeXBjWEZ4dUlDQWdJQ0FxSUVWc1pXMWxiblF1ZEc5MVkyaGpZVzVqWld4Y2JpQWdJQ0FnV3lCdFpYUm9iMlFnWFZ4dUlDQWdJQ0FxS2x4dUlDQWdJQ0FxSUVGa1pITWdaWFpsYm5RZ2FHRnVaR3hsY2lCbWIzSWdkRzkxWTJoallXNWpaV3dnWm05eUlIUm9aU0JsYkdWdFpXNTBMbHh1SUNBZ0lDQStJRkJoY21GdFpYUmxjbk5jYmlBZ0lDQWdMU0JvWVc1a2JHVnlJQ2htZFc1amRHbHZiaWtnYUdGdVpHeGxjaUJtYjNJZ2RHaGxJR1YyWlc1MFhHNGdJQ0FnSUQwZ0tHOWlhbVZqZENrZ1FFVnNaVzFsYm5SY2JpQWdJQ0JjWENvdlhHNGdJQ0FnTHlwY1hGeHVJQ0FnSUNBcUlFVnNaVzFsYm5RdWRXNTBiM1ZqYUdOaGJtTmxiRnh1SUNBZ0lDQmJJRzFsZEdodlpDQmRYRzRnSUNBZ0lDb3FYRzRnSUNBZ0lDb2dVbVZ0YjNabGN5QmxkbVZ1ZENCb1lXNWtiR1Z5SUdadmNpQjBiM1ZqYUdOaGJtTmxiQ0JtYjNJZ2RHaGxJR1ZzWlcxbGJuUXVYRzRnSUNBZ0lENGdVR0Z5WVcxbGRHVnljMXh1SUNBZ0lDQXRJR2hoYm1Sc1pYSWdLR1oxYm1OMGFXOXVLU0FqYjNCMGFXOXVZV3dnYUdGdVpHeGxjaUJtYjNJZ2RHaGxJR1YyWlc1MFhHNGdJQ0FnSUQwZ0tHOWlhbVZqZENrZ1FFVnNaVzFsYm5SY2JpQWdJQ0JjWENvdlhHNGdJQ0FnWm05eUlDaDJZWElnYVNBOUlHVjJaVzUwY3k1c1pXNW5kR2c3SUdrdExUc3BJSHRjYmlBZ0lDQWdJQ0FnS0daMWJtTjBhVzl1SUNobGRtVnVkRTVoYldVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUZKYlpYWmxiblJPWVcxbFhTQTlJR1ZzY0hKdmRHOWJaWFpsYm5ST1lXMWxYU0E5SUdaMWJtTjBhVzl1SUNobWJpd2djMk52Y0dVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvVWk1cGN5aG1iaXdnWENKbWRXNWpkR2x2Ymx3aUtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbVYyWlc1MGN5QTlJSFJvYVhNdVpYWmxiblJ6SUh4OElGdGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbVYyWlc1MGN5NXdkWE5vS0h0dVlXMWxPaUJsZG1WdWRFNWhiV1VzSUdZNklHWnVMQ0IxYm1KcGJtUTZJR0ZrWkVWMlpXNTBLSFJvYVhNdWMyaGhjR1VnZkh3Z2RHaHBjeTV1YjJSbElIeDhJR2N1Wkc5akxDQmxkbVZ1ZEU1aGJXVXNJR1p1TENCelkyOXdaU0I4ZkNCMGFHbHpLWDBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6dGNiaUFnSUNBZ0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JTVzF3aWRXNWNJaUFySUdWMlpXNTBUbUZ0WlYwZ1BTQmxiSEJ5YjNSdlcxd2lkVzVjSWlBcklHVjJaVzUwVG1GdFpWMGdQU0JtZFc1amRHbHZiaUFvWm00cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnWlhabGJuUnpJRDBnZEdocGN5NWxkbVZ1ZEhNZ2ZId2dXMTBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHd2dQU0JsZG1WdWRITXViR1Z1WjNSb08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZG9hV3hsSUNoc0xTMHBlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9aWFpsYm5SelcyeGRMbTVoYldVZ1BUMGdaWFpsYm5ST1lXMWxJQ1ltSUNoU0xtbHpLR1p1TENCY0luVnVaR1ZtYVc1bFpGd2lLU0I4ZkNCbGRtVnVkSE5iYkYwdVppQTlQU0JtYmlrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVjJaVzUwYzF0c1hTNTFibUpwYm1Rb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVjJaVzUwY3k1emNHeHBZMlVvYkN3Z01TazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWhaWFpsYm5SekxteGxibWQwYUNBbUppQmtaV3hsZEdVZ2RHaHBjeTVsZG1WdWRITTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTTdYRzRnSUNBZ0lDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ0lDQjlLU2hsZG1WdWRITmJhVjBwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxWEZ4Y2JpQWdJQ0FnS2lCRmJHVnRaVzUwTG1SaGRHRmNiaUFnSUNBZ1d5QnRaWFJvYjJRZ1hWeHVJQ0FnSUNBcUtseHVJQ0FnSUNBcUlFRmtaSE1nYjNJZ2NtVjBjbWxsZG1WeklHZHBkbVZ1SUhaaGJIVmxJR0Z6YzI5amFXRjBaV1FnZDJsMGFDQm5hWFpsYmlCclpYa3VYRzRnSUNBZ0lDb3FYRzRnSUNBZ0lDb2dVMlZsSUdGc2MyOGdRRVZzWlcxbGJuUXVjbVZ0YjNabFJHRjBZVnh1SUNBZ0lDQStJRkJoY21GdFpYUmxjbk5jYmlBZ0lDQWdMU0JyWlhrZ0tITjBjbWx1WnlrZ2EyVjVJSFJ2SUhOMGIzSmxJR1JoZEdGY2JpQWdJQ0FnTFNCMllXeDFaU0FvWVc1NUtTQWpiM0IwYVc5dVlXd2dkbUZzZFdVZ2RHOGdjM1J2Y21WY2JpQWdJQ0FnUFNBb2IySnFaV04wS1NCQVJXeGxiV1Z1ZEZ4dUlDQWdJQ0FxSUc5eUxDQnBaaUIyWVd4MVpTQnBjeUJ1YjNRZ2MzQmxZMmxtYVdWa09seHVJQ0FnSUNBOUlDaGhibmtwSUhaaGJIVmxYRzRnSUNBZ0lDb2diM0lzSUdsbUlHdGxlU0JoYm1RZ2RtRnNkV1VnWVhKbElHNXZkQ0J6Y0dWamFXWnBaV1E2WEc0Z0lDQWdJRDBnS0c5aWFtVmpkQ2tnUzJWNUwzWmhiSFZsSUhCaGFYSnpJR1p2Y2lCaGJHd2dkR2hsSUdSaGRHRWdZWE56YjJOcFlYUmxaQ0IzYVhSb0lIUm9aU0JsYkdWdFpXNTBMbHh1SUNBZ0lDQStJRlZ6WVdkbFhHNGdJQ0FnSUh3Z1ptOXlJQ2gyWVhJZ2FTQTlJREFzSUdrZ1BDQTFMQ0JwS3lzcElIdGNiaUFnSUNBZ2ZDQWdJQ0FnY0dGd1pYSXVZMmx5WTJ4bEtERXdJQ3NnTVRVZ0tpQnBMQ0F4TUN3Z01UQXBYRzRnSUNBZ0lId2dJQ0FnSUNBZ0lDQWdMbUYwZEhJb2UyWnBiR3c2SUZ3aUl6QXdNRndpZlNsY2JpQWdJQ0FnZkNBZ0lDQWdJQ0FnSUNBdVpHRjBZU2hjSW1sY0lpd2dhU2xjYmlBZ0lDQWdmQ0FnSUNBZ0lDQWdJQ0F1WTJ4cFkyc29ablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0I4SUNBZ0lDQWdJQ0FnSUNBZ0lHRnNaWEowS0hSb2FYTXVaR0YwWVNoY0ltbGNJaWtwTzF4dUlDQWdJQ0I4SUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNCOElIMWNiaUFnSUNCY1hDb3ZYRzRnSUNBZ1pXeHdjbTkwYnk1a1lYUmhJRDBnWm5WdVkzUnBiMjRnS0d0bGVTd2dkbUZzZFdVcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUdSaGRHRWdQU0JsYkdSaGRHRmJkR2hwY3k1cFpGMGdQU0JsYkdSaGRHRmJkR2hwY3k1cFpGMGdmSHdnZTMwN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hoY21kMWJXVnVkSE11YkdWdVozUm9JRDA5SURBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJrWVhSaE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR2xtSUNoaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvSUQwOUlERXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hTTG1sektHdGxlU3dnWENKdlltcGxZM1JjSWlrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnBJR2x1SUd0bGVTa2dhV1lnS0d0bGVWdG9ZWE5kS0drcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVaR0YwWVNocExDQnJaWGxiYVYwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjenRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUdWMlpTaGNJbkpoY0doaFpXd3VaR0YwWVM1blpYUXVYQ0lnS3lCMGFHbHpMbWxrTENCMGFHbHpMQ0JrWVhSaFcydGxlVjBzSUd0bGVTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWkdGMFlWdHJaWGxkTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHUmhkR0ZiYTJWNVhTQTlJSFpoYkhWbE8xeHVJQ0FnSUNBZ0lDQmxkbVVvWENKeVlYQm9ZV1ZzTG1SaGRHRXVjMlYwTGx3aUlDc2dkR2hwY3k1cFpDd2dkR2hwY3l3Z2RtRnNkV1VzSUd0bGVTazdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TzF4dUlDQWdJSDA3WEc0Z0lDQWdMeXBjWEZ4dUlDQWdJQ0FxSUVWc1pXMWxiblF1Y21WdGIzWmxSR0YwWVZ4dUlDQWdJQ0JiSUcxbGRHaHZaQ0JkWEc0Z0lDQWdJQ29xWEc0Z0lDQWdJQ29nVW1WdGIzWmxjeUIyWVd4MVpTQmhjM052WTJsaGRHVmtJSGRwZEdnZ1lXNGdaV3hsYldWdWRDQmllU0JuYVhabGJpQnJaWGt1WEc0Z0lDQWdJQ29nU1dZZ2EyVjVJR2x6SUc1dmRDQndjbTkyYVdSbFpDd2djbVZ0YjNabGN5QmhiR3dnZEdobElHUmhkR0VnYjJZZ2RHaGxJR1ZzWlcxbGJuUXVYRzRnSUNBZ0lENGdVR0Z5WVcxbGRHVnljMXh1SUNBZ0lDQXRJR3RsZVNBb2MzUnlhVzVuS1NBamIzQjBhVzl1WVd3Z2EyVjVYRzRnSUNBZ0lEMGdLRzlpYW1WamRDa2dRRVZzWlcxbGJuUmNiaUFnSUNCY1hDb3ZYRzRnSUNBZ1pXeHdjbTkwYnk1eVpXMXZkbVZFWVhSaElEMGdablZ1WTNScGIyNGdLR3RsZVNrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvYTJWNUlEMDlJRzUxYkd3cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdSbGJHVjBaU0JsYkdSaGRHRmJkR2hwY3k1cFpGMDdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCbGJHUmhkR0ZiZEdocGN5NXBaRjBnSmlZZ1pHVnNaWFJsSUdWc1pHRjBZVnQwYUdsekxtbGtYVnRyWlhsZE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TzF4dUlDQWdJSDA3WEc0Z0lDQWdJQzhxWEZ4Y2JpQWdJQ0FnS2lCRmJHVnRaVzUwTG1kbGRFUmhkR0ZjYmlBZ0lDQWdXeUJ0WlhSb2IyUWdYVnh1SUNBZ0lDQXFLbHh1SUNBZ0lDQXFJRkpsZEhKcFpYWmxjeUIwYUdVZ1pXeGxiV1Z1ZENCa1lYUmhYRzRnSUNBZ0lEMGdLRzlpYW1WamRDa2daR0YwWVZ4dUlDQWdJRnhjS2k5Y2JpQWdJQ0JsYkhCeWIzUnZMbWRsZEVSaGRHRWdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCamJHOXVaU2hsYkdSaGRHRmJkR2hwY3k1cFpGMGdmSHdnZTMwcE8xeHVJQ0FnSUgwN1hHNGdJQ0FnTHlwY1hGeHVJQ0FnSUNBcUlFVnNaVzFsYm5RdWFHOTJaWEpjYmlBZ0lDQWdXeUJ0WlhSb2IyUWdYVnh1SUNBZ0lDQXFLbHh1SUNBZ0lDQXFJRUZrWkhNZ1pYWmxiblFnYUdGdVpHeGxjbk1nWm05eUlHaHZkbVZ5SUdadmNpQjBhR1VnWld4bGJXVnVkQzVjYmlBZ0lDQWdQaUJRWVhKaGJXVjBaWEp6WEc0Z0lDQWdJQzBnWmw5cGJpQW9ablZ1WTNScGIyNHBJR2hoYm1Sc1pYSWdabTl5SUdodmRtVnlJR2x1WEc0Z0lDQWdJQzBnWmw5dmRYUWdLR1oxYm1OMGFXOXVLU0JvWVc1a2JHVnlJR1p2Y2lCb2IzWmxjaUJ2ZFhSY2JpQWdJQ0FnTFNCcFkyOXVkR1Y0ZENBb2IySnFaV04wS1NBamIzQjBhVzl1WVd3Z1kyOXVkR1Y0ZENCbWIzSWdhRzkyWlhJZ2FXNGdhR0Z1Wkd4bGNseHVJQ0FnSUNBdElHOWpiMjUwWlhoMElDaHZZbXBsWTNRcElDTnZjSFJwYjI1aGJDQmpiMjUwWlhoMElHWnZjaUJvYjNabGNpQnZkWFFnYUdGdVpHeGxjbHh1SUNBZ0lDQTlJQ2h2WW1wbFkzUXBJRUJGYkdWdFpXNTBYRzRnSUNBZ1hGd3FMMXh1SUNBZ0lHVnNjSEp2ZEc4dWFHOTJaWElnUFNCbWRXNWpkR2x2YmlBb1psOXBiaXdnWmw5dmRYUXNJSE5qYjNCbFgybHVMQ0J6WTI5d1pWOXZkWFFwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXViVzkxYzJWdmRtVnlLR1pmYVc0c0lITmpiM0JsWDJsdUtTNXRiM1Z6Wlc5MWRDaG1YMjkxZEN3Z2MyTnZjR1ZmYjNWMElIeDhJSE5qYjNCbFgybHVLVHRjYmlBZ0lDQjlPMXh1SUNBZ0lDOHFYRnhjYmlBZ0lDQWdLaUJGYkdWdFpXNTBMblZ1YUc5MlpYSmNiaUFnSUNBZ1d5QnRaWFJvYjJRZ1hWeHVJQ0FnSUNBcUtseHVJQ0FnSUNBcUlGSmxiVzkyWlhNZ1pYWmxiblFnYUdGdVpHeGxjbk1nWm05eUlHaHZkbVZ5SUdadmNpQjBhR1VnWld4bGJXVnVkQzVjYmlBZ0lDQWdQaUJRWVhKaGJXVjBaWEp6WEc0Z0lDQWdJQzBnWmw5cGJpQW9ablZ1WTNScGIyNHBJR2hoYm1Sc1pYSWdabTl5SUdodmRtVnlJR2x1WEc0Z0lDQWdJQzBnWmw5dmRYUWdLR1oxYm1OMGFXOXVLU0JvWVc1a2JHVnlJR1p2Y2lCb2IzWmxjaUJ2ZFhSY2JpQWdJQ0FnUFNBb2IySnFaV04wS1NCQVJXeGxiV1Z1ZEZ4dUlDQWdJRnhjS2k5Y2JpQWdJQ0JsYkhCeWIzUnZMblZ1YUc5MlpYSWdQU0JtZFc1amRHbHZiaUFvWmw5cGJpd2dabDl2ZFhRcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZFc1dGIzVnpaVzkyWlhJb1psOXBiaWt1ZFc1dGIzVnpaVzkxZENobVgyOTFkQ2s3WEc0Z0lDQWdmVHRjYmlBZ0lDQjJZWElnWkhKaFoyZGhZbXhsSUQwZ1cxMDdYRzRnSUNBZ0x5cGNYRnh1SUNBZ0lDQXFJRVZzWlcxbGJuUXVaSEpoWjF4dUlDQWdJQ0JiSUcxbGRHaHZaQ0JkWEc0Z0lDQWdJQ29xWEc0Z0lDQWdJQ29nUVdSa2N5QmxkbVZ1ZENCb1lXNWtiR1Z5Y3lCbWIzSWdaSEpoWnlCdlppQjBhR1VnWld4bGJXVnVkQzVjYmlBZ0lDQWdQaUJRWVhKaGJXVjBaWEp6WEc0Z0lDQWdJQzBnYjI1dGIzWmxJQ2htZFc1amRHbHZiaWtnYUdGdVpHeGxjaUJtYjNJZ2JXOTJhVzVuWEc0Z0lDQWdJQzBnYjI1emRHRnlkQ0FvWm5WdVkzUnBiMjRwSUdoaGJtUnNaWElnWm05eUlHUnlZV2NnYzNSaGNuUmNiaUFnSUNBZ0xTQnZibVZ1WkNBb1puVnVZM1JwYjI0cElHaGhibVJzWlhJZ1ptOXlJR1J5WVdjZ1pXNWtYRzRnSUNBZ0lDMGdiV052Ym5SbGVIUWdLRzlpYW1WamRDa2dJMjl3ZEdsdmJtRnNJR052Ym5SbGVIUWdabTl5SUcxdmRtbHVaeUJvWVc1a2JHVnlYRzRnSUNBZ0lDMGdjMk52Ym5SbGVIUWdLRzlpYW1WamRDa2dJMjl3ZEdsdmJtRnNJR052Ym5SbGVIUWdabTl5SUdSeVlXY2djM1JoY25RZ2FHRnVaR3hsY2x4dUlDQWdJQ0F0SUdWamIyNTBaWGgwSUNodlltcGxZM1FwSUNOdmNIUnBiMjVoYkNCamIyNTBaWGgwSUdadmNpQmtjbUZuSUdWdVpDQm9ZVzVrYkdWeVhHNGdJQ0FnSUNvZ1FXUmthWFJwYjI1aGJHeDVJR1p2Ykd4dmQybHVaeUJnWkhKaFoyQWdaWFpsYm5SeklIZHBiR3dnWW1VZ2RISnBaMmRsY21Wa09pQmdaSEpoWnk1emRHRnlkQzQ4YVdRK1lDQnZiaUJ6ZEdGeWRDeGNiaUFnSUNBZ0tpQmdaSEpoWnk1bGJtUXVQR2xrUG1BZ2IyNGdaVzVrSUdGdVpDQmdaSEpoWnk1dGIzWmxManhwWkQ1Z0lHOXVJR1YyWlhKNUlHMXZkbVV1SUZkb1pXNGdaV3hsYldWdWRDQjNhV3hzSUdKbElHUnlZV2RuWldRZ2IzWmxjaUJoYm05MGFHVnlJR1ZzWlcxbGJuUmNiaUFnSUNBZ0tpQmdaSEpoWnk1dmRtVnlManhwWkQ1Z0lIZHBiR3dnWW1VZ1ptbHlaV1FnWVhNZ2QyVnNiQzVjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRk4wWVhKMElHVjJaVzUwSUdGdVpDQnpkR0Z5ZENCb1lXNWtiR1Z5SUhkcGJHd2dZbVVnWTJGc2JHVmtJR2x1SUhOd1pXTnBabWxsWkNCamIyNTBaWGgwSUc5eUlHbHVJR052Ym5SbGVIUWdiMllnZEdobElHVnNaVzFsYm5RZ2QybDBhQ0JtYjJ4c2IzZHBibWNnY0dGeVlXMWxkR1Z5Y3pwY2JpQWdJQ0FnYnlCNElDaHVkVzFpWlhJcElIZ2djRzl6YVhScGIyNGdiMllnZEdobElHMXZkWE5sWEc0Z0lDQWdJRzhnZVNBb2JuVnRZbVZ5S1NCNUlIQnZjMmwwYVc5dUlHOW1JSFJvWlNCdGIzVnpaVnh1SUNBZ0lDQnZJR1YyWlc1MElDaHZZbXBsWTNRcElFUlBUU0JsZG1WdWRDQnZZbXBsWTNSY2JpQWdJQ0FnS2lCTmIzWmxJR1YyWlc1MElHRnVaQ0J0YjNabElHaGhibVJzWlhJZ2QybHNiQ0JpWlNCallXeHNaV1FnYVc0Z2MzQmxZMmxtYVdWa0lHTnZiblJsZUhRZ2IzSWdhVzRnWTI5dWRHVjRkQ0J2WmlCMGFHVWdaV3hsYldWdWRDQjNhWFJvSUdadmJHeHZkMmx1WnlCd1lYSmhiV1YwWlhKek9seHVJQ0FnSUNCdklHUjRJQ2h1ZFcxaVpYSXBJSE5vYVdaMElHSjVJSGdnWm5KdmJTQjBhR1VnYzNSaGNuUWdjRzlwYm5SY2JpQWdJQ0FnYnlCa2VTQW9iblZ0WW1WeUtTQnphR2xtZENCaWVTQjVJR1p5YjIwZ2RHaGxJSE4wWVhKMElIQnZhVzUwWEc0Z0lDQWdJRzhnZUNBb2JuVnRZbVZ5S1NCNElIQnZjMmwwYVc5dUlHOW1JSFJvWlNCdGIzVnpaVnh1SUNBZ0lDQnZJSGtnS0c1MWJXSmxjaWtnZVNCd2IzTnBkR2x2YmlCdlppQjBhR1VnYlc5MWMyVmNiaUFnSUNBZ2J5QmxkbVZ1ZENBb2IySnFaV04wS1NCRVQwMGdaWFpsYm5RZ2IySnFaV04wWEc0Z0lDQWdJQ29nUlc1a0lHVjJaVzUwSUdGdVpDQmxibVFnYUdGdVpHeGxjaUIzYVd4c0lHSmxJR05oYkd4bFpDQnBiaUJ6Y0dWamFXWnBaV1FnWTI5dWRHVjRkQ0J2Y2lCcGJpQmpiMjUwWlhoMElHOW1JSFJvWlNCbGJHVnRaVzUwSUhkcGRHZ2dabTlzYkc5M2FXNW5JSEJoY21GdFpYUmxjbk02WEc0Z0lDQWdJRzhnWlhabGJuUWdLRzlpYW1WamRDa2dSRTlOSUdWMlpXNTBJRzlpYW1WamRGeHVJQ0FnSUNBOUlDaHZZbXBsWTNRcElFQkZiR1Z0Wlc1MFhHNGdJQ0FnWEZ3cUwxeHVJQ0FnSUdWc2NISnZkRzh1WkhKaFp5QTlJR1oxYm1OMGFXOXVJQ2h2Ym0xdmRtVXNJRzl1YzNSaGNuUXNJRzl1Wlc1a0xDQnRiM1psWDNOamIzQmxMQ0J6ZEdGeWRGOXpZMjl3WlN3Z1pXNWtYM05qYjNCbEtTQjdYRzRnSUNBZ0lDQWdJR1oxYm1OMGFXOXVJSE4wWVhKMEtHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDaGxMbTl5YVdkcGJtRnNSWFpsYm5RZ2ZId2daU2t1Y0hKbGRtVnVkRVJsWm1GMWJIUW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUI0SUQwZ1pTNWpiR2xsYm5SWUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIa2dQU0JsTG1Oc2FXVnVkRmtzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJOeWIyeHNXU0E5SUdjdVpHOWpMbVJ2WTNWdFpXNTBSV3hsYldWdWRDNXpZM0p2Ykd4VWIzQWdmSHdnWnk1a2IyTXVZbTlrZVM1elkzSnZiR3hVYjNBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyTnliMnhzV0NBOUlHY3VaRzlqTG1SdlkzVnRaVzUwUld4bGJXVnVkQzV6WTNKdmJHeE1aV1owSUh4OElHY3VaRzlqTG1KdlpIa3VjMk55YjJ4c1RHVm1kRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJSeVlXY3VhV1FnUFNCbExtbGtaVzUwYVdacFpYSTdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jM1Z3Y0c5eWRITlViM1ZqYUNBbUppQmxMblJ2ZFdOb1pYTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2FTQTlJR1V1ZEc5MVkyaGxjeTVzWlc1bmRHZ3NJSFJ2ZFdOb08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZG9hV3hsSUNocExTMHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHOTFZMmdnUFNCbExuUnZkV05vWlhOYmFWMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMlJ5WVdjdWFXUWdQU0IwYjNWamFDNXBaR1Z1ZEdsbWFXVnlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kRzkxWTJndWFXUmxiblJwWm1sbGNpQTlQU0IwYUdsekxsOWtjbUZuTG1sa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjRJRDBnZEc5MVkyZ3VZMnhwWlc1MFdEdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIa2dQU0IwYjNWamFDNWpiR2xsYm5SWk8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOWtjbUZuTG5nZ1BTQjRJQ3NnYzJOeWIyeHNXRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJSeVlXY3VlU0E5SUhrZ0t5QnpZM0p2Ykd4Wk8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSVdSeVlXY3ViR1Z1WjNSb0lDWW1JRkl1Ylc5MWMyVnRiM1psS0dSeVlXZE5iM1psS1M1dGIzVnpaWFZ3S0dSeVlXZFZjQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtjbUZuTG5CMWMyZ29lMlZzT2lCMGFHbHpMQ0J0YjNabFgzTmpiM0JsT2lCdGIzWmxYM05qYjNCbExDQnpkR0Z5ZEY5elkyOXdaVG9nYzNSaGNuUmZjMk52Y0dVc0lHVnVaRjl6WTI5d1pUb2daVzVrWDNOamIzQmxmU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnZibk4wWVhKMElDWW1JR1YyWlM1dmJpaGNJbkpoY0doaFpXd3VaSEpoWnk1emRHRnlkQzVjSWlBcklIUm9hWE11YVdRc0lHOXVjM1JoY25RcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYjI1dGIzWmxJQ1ltSUdWMlpTNXZiaWhjSW5KaGNHaGhaV3d1WkhKaFp5NXRiM1psTGx3aUlDc2dkR2hwY3k1cFpDd2diMjV0YjNabEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUc5dVpXNWtJQ1ltSUdWMlpTNXZiaWhjSW5KaGNHaGhaV3d1WkhKaFp5NWxibVF1WENJZ0t5QjBhR2x6TG1sa0xDQnZibVZ1WkNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JsZG1Vb1hDSnlZWEJvWVdWc0xtUnlZV2N1YzNSaGNuUXVYQ0lnS3lCMGFHbHpMbWxrTENCemRHRnlkRjl6WTI5d1pTQjhmQ0J0YjNabFgzTmpiM0JsSUh4OElIUm9hWE1zSUhSb2FYTXVYMlJ5WVdjdWVDd2dkR2hwY3k1ZlpISmhaeTU1TENCbEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0IwYUdsekxsOWtjbUZuSUQwZ2UzMDdYRzRnSUNBZ0lDQWdJR1J5WVdkbllXSnNaUzV3ZFhOb0tIdGxiRG9nZEdocGN5d2djM1JoY25RNklITjBZWEowZlNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Ylc5MWMyVmtiM2R1S0hOMFlYSjBLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNGdJQ0FnZlR0Y2JpQWdJQ0F2S2x4Y1hHNGdJQ0FnSUNvZ1JXeGxiV1Z1ZEM1dmJrUnlZV2RQZG1WeVhHNGdJQ0FnSUZzZ2JXVjBhRzlrSUYxY2JpQWdJQ0FnS2lwY2JpQWdJQ0FnS2lCVGFHOXlkR04xZENCbWIzSWdZWE56YVdkdWFXNW5JR1YyWlc1MElHaGhibVJzWlhJZ1ptOXlJR0JrY21GbkxtOTJaWEl1UEdsa1BtQWdaWFpsYm5Rc0lIZG9aWEpsSUdsa0lHbHpJR2xrSUc5bUlIUm9aU0JsYkdWdFpXNTBJQ2h6WldVZ1FFVnNaVzFsYm5RdWFXUXBMbHh1SUNBZ0lDQStJRkJoY21GdFpYUmxjbk5jYmlBZ0lDQWdMU0JtSUNobWRXNWpkR2x2YmlrZ2FHRnVaR3hsY2lCbWIzSWdaWFpsYm5Rc0lHWnBjbk4wSUdGeVozVnRaVzUwSUhkdmRXeGtJR0psSUhSb1pTQmxiR1Z0Wlc1MElIbHZkU0JoY21VZ1pISmhaMmRwYm1jZ2IzWmxjbHh1SUNBZ0lGeGNLaTljYmlBZ0lDQmxiSEJ5YjNSdkxtOXVSSEpoWjA5MlpYSWdQU0JtZFc1amRHbHZiaUFvWmlrZ2UxeHVJQ0FnSUNBZ0lDQm1JRDhnWlhabExtOXVLRndpY21Gd2FHRmxiQzVrY21GbkxtOTJaWEl1WENJZ0t5QjBhR2x6TG1sa0xDQm1LU0E2SUdWMlpTNTFibUpwYm1Rb1hDSnlZWEJvWVdWc0xtUnlZV2N1YjNabGNpNWNJaUFySUhSb2FYTXVhV1FwTzF4dUlDQWdJSDA3WEc0Z0lDQWdMeXBjWEZ4dUlDQWdJQ0FxSUVWc1pXMWxiblF1ZFc1a2NtRm5YRzRnSUNBZ0lGc2diV1YwYUc5a0lGMWNiaUFnSUNBZ0tpcGNiaUFnSUNBZ0tpQlNaVzF2ZG1WeklHRnNiQ0JrY21GbklHVjJaVzUwSUdoaGJtUnNaWEp6SUdaeWIyMGdaMmwyWlc0Z1pXeGxiV1Z1ZEM1Y2JpQWdJQ0JjWENvdlhHNGdJQ0FnWld4d2NtOTBieTUxYm1SeVlXY2dQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJwSUQwZ1pISmhaMmRoWW14bExteGxibWQwYUR0Y2JpQWdJQ0FnSUNBZ2QyaHBiR1VnS0drdExTa2dhV1lnS0dSeVlXZG5ZV0pzWlZ0cFhTNWxiQ0E5UFNCMGFHbHpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5WdWJXOTFjMlZrYjNkdUtHUnlZV2RuWVdKc1pWdHBYUzV6ZEdGeWRDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCa2NtRm5aMkZpYkdVdWMzQnNhV05sS0drc0lERXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pYWmxMblZ1WW1sdVpDaGNJbkpoY0doaFpXd3VaSEpoWnk0cUxsd2lJQ3NnZEdocGN5NXBaQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lXUnlZV2RuWVdKc1pTNXNaVzVuZEdnZ0ppWWdVaTUxYm0xdmRYTmxiVzkyWlNoa2NtRm5UVzkyWlNrdWRXNXRiM1Z6WlhWd0tHUnlZV2RWY0NrN1hHNGdJQ0FnSUNBZ0lHUnlZV2NnUFNCYlhUdGNiaUFnSUNCOU8xeHVJQ0FnSUM4cVhGeGNiaUFnSUNBZ0tpQlFZWEJsY2k1amFYSmpiR1ZjYmlBZ0lDQWdXeUJ0WlhSb2IyUWdYVnh1SUNBZ0lDQXFLbHh1SUNBZ0lDQXFJRVJ5WVhkeklHRWdZMmx5WTJ4bExseHVJQ0FnSUNBcUtseHVJQ0FnSUNBK0lGQmhjbUZ0WlhSbGNuTmNiaUFnSUNBZ0tpcGNiaUFnSUNBZ0xTQjRJQ2h1ZFcxaVpYSXBJSGdnWTI5dmNtUnBibUYwWlNCdlppQjBhR1VnWTJWdWRISmxYRzRnSUNBZ0lDMGdlU0FvYm5WdFltVnlLU0I1SUdOdmIzSmthVzVoZEdVZ2IyWWdkR2hsSUdObGJuUnlaVnh1SUNBZ0lDQXRJSElnS0c1MWJXSmxjaWtnY21Ga2FYVnpYRzRnSUNBZ0lEMGdLRzlpYW1WamRDa2dVbUZ3YUdIRHEyd2daV3hsYldWdWRDQnZZbXBsWTNRZ2QybDBhQ0IwZVhCbElPS0FuR05wY21Oc1plS0FuVnh1SUNBZ0lDQXFLbHh1SUNBZ0lDQStJRlZ6WVdkbFhHNGdJQ0FnSUh3Z2RtRnlJR01nUFNCd1lYQmxjaTVqYVhKamJHVW9OVEFzSURVd0xDQTBNQ2s3WEc0Z0lDQWdYRndxTDF4dUlDQWdJSEJoY0dWeWNISnZkRzh1WTJseVkyeGxJRDBnWm5WdVkzUnBiMjRnS0hnc0lIa3NJSElwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJRzkxZENBOUlGSXVYMlZ1WjJsdVpTNWphWEpqYkdVb2RHaHBjeXdnZUNCOGZDQXdMQ0I1SUh4OElEQXNJSElnZkh3Z01DazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgxOXpaWFJmWHlBbUppQjBhR2x6TGw5ZmMyVjBYMTh1Y0hWemFDaHZkWFFwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYjNWME8xeHVJQ0FnSUgwN1hHNGdJQ0FnTHlwY1hGeHVJQ0FnSUNBcUlGQmhjR1Z5TG5KbFkzUmNiaUFnSUNBZ1d5QnRaWFJvYjJRZ1hWeHVJQ0FnSUNBcVhHNGdJQ0FnSUNvZ1JISmhkM01nWVNCeVpXTjBZVzVuYkdVdVhHNGdJQ0FnSUNvcVhHNGdJQ0FnSUQ0Z1VHRnlZVzFsZEdWeWMxeHVJQ0FnSUNBcUtseHVJQ0FnSUNBdElIZ2dLRzUxYldKbGNpa2dlQ0JqYjI5eVpHbHVZWFJsSUc5bUlIUm9aU0IwYjNBZ2JHVm1kQ0JqYjNKdVpYSmNiaUFnSUNBZ0xTQjVJQ2h1ZFcxaVpYSXBJSGtnWTI5dmNtUnBibUYwWlNCdlppQjBhR1VnZEc5d0lHeGxablFnWTI5eWJtVnlYRzRnSUNBZ0lDMGdkMmxrZEdnZ0tHNTFiV0psY2lrZ2QybGtkR2hjYmlBZ0lDQWdMU0JvWldsbmFIUWdLRzUxYldKbGNpa2dhR1ZwWjJoMFhHNGdJQ0FnSUMwZ2NpQW9iblZ0WW1WeUtTQWpiM0IwYVc5dVlXd2djbUZrYVhWeklHWnZjaUJ5YjNWdVpHVmtJR052Y201bGNuTXNJR1JsWm1GMWJIUWdhWE1nTUZ4dUlDQWdJQ0E5SUNodlltcGxZM1FwSUZKaGNHaGh3NnRzSUdWc1pXMWxiblFnYjJKcVpXTjBJSGRwZEdnZ2RIbHdaU0RpZ0p4eVpXTjA0b0NkWEc0Z0lDQWdJQ29xWEc0Z0lDQWdJRDRnVlhOaFoyVmNiaUFnSUNBZ2ZDQXZMeUJ5WldkMWJHRnlJSEpsWTNSaGJtZHNaVnh1SUNBZ0lDQjhJSFpoY2lCaklEMGdjR0Z3WlhJdWNtVmpkQ2d4TUN3Z01UQXNJRFV3TENBMU1DazdYRzRnSUNBZ0lId2dMeThnY21WamRHRnVaMnhsSUhkcGRHZ2djbTkxYm1SbFpDQmpiM0p1WlhKelhHNGdJQ0FnSUh3Z2RtRnlJR01nUFNCd1lYQmxjaTV5WldOMEtEUXdMQ0EwTUN3Z05UQXNJRFV3TENBeE1DazdYRzRnSUNBZ1hGd3FMMXh1SUNBZ0lIQmhjR1Z5Y0hKdmRHOHVjbVZqZENBOUlHWjFibU4wYVc5dUlDaDRMQ0I1TENCM0xDQm9MQ0J5S1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ2ZFhRZ1BTQlNMbDlsYm1kcGJtVXVjbVZqZENoMGFHbHpMQ0I0SUh4OElEQXNJSGtnZkh3Z01Dd2dkeUI4ZkNBd0xDQm9JSHg4SURBc0lISWdmSHdnTUNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDE5elpYUmZYeUFtSmlCMGFHbHpMbDlmYzJWMFgxOHVjSFZ6YUNodmRYUXBPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdiM1YwTzF4dUlDQWdJSDA3WEc0Z0lDQWdMeXBjWEZ4dUlDQWdJQ0FxSUZCaGNHVnlMbVZzYkdsd2MyVmNiaUFnSUNBZ1d5QnRaWFJvYjJRZ1hWeHVJQ0FnSUNBcUtseHVJQ0FnSUNBcUlFUnlZWGR6SUdGdUlHVnNiR2x3YzJVdVhHNGdJQ0FnSUNvcVhHNGdJQ0FnSUQ0Z1VHRnlZVzFsZEdWeWMxeHVJQ0FnSUNBcUtseHVJQ0FnSUNBdElIZ2dLRzUxYldKbGNpa2dlQ0JqYjI5eVpHbHVZWFJsSUc5bUlIUm9aU0JqWlc1MGNtVmNiaUFnSUNBZ0xTQjVJQ2h1ZFcxaVpYSXBJSGtnWTI5dmNtUnBibUYwWlNCdlppQjBhR1VnWTJWdWRISmxYRzRnSUNBZ0lDMGdjbmdnS0c1MWJXSmxjaWtnYUc5eWFYcHZiblJoYkNCeVlXUnBkWE5jYmlBZ0lDQWdMU0J5ZVNBb2JuVnRZbVZ5S1NCMlpYSjBhV05oYkNCeVlXUnBkWE5jYmlBZ0lDQWdQU0FvYjJKcVpXTjBLU0JTWVhCb1ljT3JiQ0JsYkdWdFpXNTBJRzlpYW1WamRDQjNhWFJvSUhSNWNHVWc0b0NjWld4c2FYQnpaZUtBblZ4dUlDQWdJQ0FxS2x4dUlDQWdJQ0ErSUZWellXZGxYRzRnSUNBZ0lId2dkbUZ5SUdNZ1BTQndZWEJsY2k1bGJHeHBjSE5sS0RVd0xDQTFNQ3dnTkRBc0lESXdLVHRjYmlBZ0lDQmNYQ292WEc0Z0lDQWdjR0Z3WlhKd2NtOTBieTVsYkd4cGNITmxJRDBnWm5WdVkzUnBiMjRnS0hnc0lIa3NJSEo0TENCeWVTa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2IzVjBJRDBnVWk1ZlpXNW5hVzVsTG1Wc2JHbHdjMlVvZEdocGN5d2dlQ0I4ZkNBd0xDQjVJSHg4SURBc0lISjRJSHg4SURBc0lISjVJSHg4SURBcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5ZmMyVjBYMThnSmlZZ2RHaHBjeTVmWDNObGRGOWZMbkIxYzJnb2IzVjBLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzkxZER0Y2JpQWdJQ0I5TzF4dUlDQWdJQzhxWEZ4Y2JpQWdJQ0FnS2lCUVlYQmxjaTV3WVhSb1hHNGdJQ0FnSUZzZ2JXVjBhRzlrSUYxY2JpQWdJQ0FnS2lwY2JpQWdJQ0FnS2lCRGNtVmhkR1Z6SUdFZ2NHRjBhQ0JsYkdWdFpXNTBJR0o1SUdkcGRtVnVJSEJoZEdnZ1pHRjBZU0J6ZEhKcGJtY3VYRzRnSUNBZ0lENGdVR0Z5WVcxbGRHVnljMXh1SUNBZ0lDQXRJSEJoZEdoVGRISnBibWNnS0hOMGNtbHVaeWtnSTI5d2RHbHZibUZzSUhCaGRHZ2djM1J5YVc1bklHbHVJRk5XUnlCbWIzSnRZWFF1WEc0Z0lDQWdJQ29nVUdGMGFDQnpkSEpwYm1jZ1kyOXVjMmx6ZEhNZ2IyWWdiMjVsTFd4bGRIUmxjaUJqYjIxdFlXNWtjeXdnWm05c2JHOTNaV1FnWW5rZ1kyOXRiV0VnYzJWd2NtRnlZWFJsWkNCaGNtZDFiV1Z1ZEhNZ2FXNGdiblZ0WlhKallXd2dabTl5YlM0Z1JYaGhiWEJzWlRwY2JpQWdJQ0FnZkNCY0lrMHhNQ3d5TUV3ek1DdzBNRndpWEc0Z0lDQWdJQ29nU0dWeVpTQjNaU0JqWVc0Z2MyVmxJSFIzYnlCamIyMXRZVzVrY3pvZzRvQ2NUZUtBblN3Z2QybDBhQ0JoY21kMWJXVnVkSE1nWUNneE1Dd2dNakFwWUNCaGJtUWc0b0NjVE9LQW5TQjNhWFJvSUdGeVozVnRaVzUwY3lCZ0tETXdMQ0EwTUNsZ0xpQlZjSEJsY2lCallYTmxJR3hsZEhSbGNpQnRaV0Z1SUdOdmJXMWhibVFnYVhNZ1lXSnpiMngxZEdVc0lHeHZkMlZ5SUdOaGMyWGlnSlJ5Wld4aGRHbDJaUzVjYmlBZ0lDQWdLbHh1SUNBZ0lDQWpJRHh3UGtobGNtVWdhWE1nYzJodmNuUWdiR2x6ZENCdlppQmpiMjF0WVc1a2N5QmhkbUZwYkdGaWJHVXNJR1p2Y2lCdGIzSmxJR1JsZEdGcGJITWdjMlZsSUR4aElHaHlaV1k5WENKb2RIUndPaTh2ZDNkM0xuY3pMbTl5Wnk5VVVpOVRWa2N2Y0dGMGFITXVhSFJ0YkNOUVlYUm9SR0YwWVZ3aUlIUnBkR3hsUFZ3aVJHVjBZV2xzY3lCdlppQmhJSEJoZEdnbmN5QmtZWFJoSUdGMGRISnBZblYwWlNkeklHWnZjbTFoZENCaGNtVWdaR1Z6WTNKcFltVmtJR2x1SUhSb1pTQlRWa2NnYzNCbFkybG1hV05oZEdsdmJpNWNJajVUVmtjZ2NHRjBhQ0J6ZEhKcGJtY2dabTl5YldGMFBDOWhQaTQ4TDNBK1hHNGdJQ0FnSUNNZ1BIUmhZbXhsUGp4MGFHVmhaRDQ4ZEhJK1BIUm9Qa052YlcxaGJtUThMM1JvUGp4MGFENU9ZVzFsUEM5MGFENDhkR2crVUdGeVlXMWxkR1Z5Y3p3dmRHZytQQzkwY2o0OEwzUm9aV0ZrUGp4MFltOWtlVDVjYmlBZ0lDQWdJeUE4ZEhJK1BIUmtQazA4TDNSa1BqeDBaRDV0YjNabGRHODhMM1JrUGp4MFpENG9lQ0I1S1NzOEwzUmtQand2ZEhJK1hHNGdJQ0FnSUNNZ1BIUnlQangwWkQ1YVBDOTBaRDQ4ZEdRK1kyeHZjMlZ3WVhSb1BDOTBaRDQ4ZEdRK0tHNXZibVVwUEM5MFpENDhMM1J5UGx4dUlDQWdJQ0FqSUR4MGNqNDhkR1ErVER3dmRHUStQSFJrUG14cGJtVjBiend2ZEdRK1BIUmtQaWg0SUhrcEt6d3ZkR1ErUEM5MGNqNWNiaUFnSUNBZ0l5QThkSEkrUEhSa1BrZzhMM1JrUGp4MFpENW9iM0pwZW05dWRHRnNJR3hwYm1WMGJ6d3ZkR1ErUEhSa1BuZ3JQQzkwWkQ0OEwzUnlQbHh1SUNBZ0lDQWpJRHgwY2o0OGRHUStWand2ZEdRK1BIUmtQblpsY25ScFkyRnNJR3hwYm1WMGJ6d3ZkR1ErUEhSa1Bua3JQQzkwWkQ0OEwzUnlQbHh1SUNBZ0lDQWpJRHgwY2o0OGRHUStRend2ZEdRK1BIUmtQbU4xY25abGRHODhMM1JrUGp4MFpENG9lREVnZVRFZ2VESWdlVElnZUNCNUtTczhMM1JrUGp3dmRISStYRzRnSUNBZ0lDTWdQSFJ5UGp4MFpENVRQQzkwWkQ0OGRHUStjMjF2YjNSb0lHTjFjblpsZEc4OEwzUmtQangwWkQ0b2VESWdlVElnZUNCNUtTczhMM1JrUGp3dmRISStYRzRnSUNBZ0lDTWdQSFJ5UGp4MFpENVJQQzkwWkQ0OGRHUStjWFZoWkhKaGRHbGpJRUxEcVhwcFpYSWdZM1Z5ZG1WMGJ6d3ZkR1ErUEhSa1BpaDRNU0I1TVNCNElIa3BLend2ZEdRK1BDOTBjajVjYmlBZ0lDQWdJeUE4ZEhJK1BIUmtQbFE4TDNSa1BqeDBaRDV6Ylc5dmRHZ2djWFZoWkhKaGRHbGpJRUxEcVhwcFpYSWdZM1Z5ZG1WMGJ6d3ZkR1ErUEhSa1BpaDRJSGtwS3p3dmRHUStQQzkwY2o1Y2JpQWdJQ0FnSXlBOGRISStQSFJrUGtFOEwzUmtQangwWkQ1bGJHeHBjSFJwWTJGc0lHRnlZend2ZEdRK1BIUmtQaWh5ZUNCeWVTQjRMV0Y0YVhNdGNtOTBZWFJwYjI0Z2JHRnlaMlV0WVhKakxXWnNZV2NnYzNkbFpYQXRabXhoWnlCNElIa3BLend2ZEdRK1BDOTBjajVjYmlBZ0lDQWdJeUE4ZEhJK1BIUmtQbEk4TDNSa1BqeDBaRDQ4WVNCb2NtVm1QVndpYUhSMGNEb3ZMMlZ1TG5kcGEybHdaV1JwWVM1dmNtY3ZkMmxyYVM5RFlYUnRkV3hzNG9DVFVtOXRYM053YkdsdVpTTkRZWFJ0ZFd4c0xrVXlMamd3TGprelVtOXRYM053YkdsdVpWd2lQa05oZEcxMWJHd3RVbTl0SUdOMWNuWmxkRzg4TDJFK0tqd3ZkR1ErUEhSa1BuZ3hJSGt4SUNoNElIa3BLend2ZEdRK1BDOTBjajQ4TDNSaWIyUjVQand2ZEdGaWJHVStYRzRnSUNBZ0lDb2dLaURpZ0p4RFlYUnRkV3hzTFZKdmJTQmpkWEoyWlhSdjRvQ2RJR2x6SUdFZ2JtOTBJSE4wWVc1a1lYSmtJRk5XUnlCamIyMXRZVzVrSUdGdVpDQmhaR1JsWkNCcGJpQXlMakFnZEc4Z2JXRnJaU0JzYVdabElHVmhjMmxsY2k1Y2JpQWdJQ0FnS2lCT2IzUmxPaUIwYUdWeVpTQnBjeUJoSUhOd1pXTnBZV3dnWTJGelpTQjNhR1Z1SUhCaGRHZ2dZMjl1YzJsemRDQnZaaUJxZFhOMElIUm9jbVZsSUdOdmJXMWhibVJ6T2lEaWdKeE5NVEFzTVRCUzRvQ21ldUtBblM0Z1NXNGdkR2hwY3lCallYTmxJSEJoZEdnZ2QybHNiQ0J6Ylc5dmRHaHNlU0JqYjI1dVpXTjBjeUIwYnlCcGRITWdZbVZuYVc1dWFXNW5MbHh1SUNBZ0lDQStJRlZ6WVdkbFhHNGdJQ0FnSUh3Z2RtRnlJR01nUFNCd1lYQmxjaTV3WVhSb0tGd2lUVEV3SURFd1REa3dJRGt3WENJcE8xeHVJQ0FnSUNCOElDOHZJR1J5WVhjZ1lTQmthV0ZuYjI1aGJDQnNhVzVsT2x4dUlDQWdJQ0I4SUM4dklHMXZkbVVnZEc4Z01UQXNNVEFzSUd4cGJtVWdkRzhnT1RBc09UQmNiaUFnSUNBZ0tpQkdiM0lnWlhoaGJYQnNaU0J2WmlCd1lYUm9JSE4wY21sdVozTXNJR05vWldOcklHOTFkQ0IwYUdWelpTQnBZMjl1Y3pvZ2FIUjBjRG92TDNKaGNHaGhaV3hxY3k1amIyMHZhV052Ym5NdlhHNGdJQ0FnWEZ3cUwxeHVJQ0FnSUhCaGNHVnljSEp2ZEc4dWNHRjBhQ0E5SUdaMWJtTjBhVzl1SUNod1lYUm9VM1J5YVc1bktTQjdYRzRnSUNBZ0lDQWdJSEJoZEdoVGRISnBibWNnSmlZZ0lWSXVhWE1vY0dGMGFGTjBjbWx1Wnl3Z2MzUnlhVzVuS1NBbUppQWhVaTVwY3lod1lYUm9VM1J5YVc1bld6QmRMQ0JoY25KaGVTa2dKaVlnS0hCaGRHaFRkSEpwYm1jZ0t6MGdSU2s3WEc0Z0lDQWdJQ0FnSUhaaGNpQnZkWFFnUFNCU0xsOWxibWRwYm1VdWNHRjBhQ2hTTG1admNtMWhkRnRoY0hCc2VWMG9VaXdnWVhKbmRXMWxiblJ6S1N3Z2RHaHBjeWs3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMTl6WlhSZlh5QW1KaUIwYUdsekxsOWZjMlYwWDE4dWNIVnphQ2h2ZFhRcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2IzVjBPMXh1SUNBZ0lIMDdYRzRnSUNBZ0x5cGNYRnh1SUNBZ0lDQXFJRkJoY0dWeUxtbHRZV2RsWEc0Z0lDQWdJRnNnYldWMGFHOWtJRjFjYmlBZ0lDQWdLaXBjYmlBZ0lDQWdLaUJGYldKbFpITWdZVzRnYVcxaFoyVWdhVzUwYnlCMGFHVWdjM1Z5Wm1GalpTNWNiaUFnSUNBZ0tpcGNiaUFnSUNBZ1BpQlFZWEpoYldWMFpYSnpYRzRnSUNBZ0lDb3FYRzRnSUNBZ0lDMGdjM0pqSUNoemRISnBibWNwSUZWU1NTQnZaaUIwYUdVZ2MyOTFjbU5sSUdsdFlXZGxYRzRnSUNBZ0lDMGdlQ0FvYm5WdFltVnlLU0I0SUdOdmIzSmthVzVoZEdVZ2NHOXphWFJwYjI1Y2JpQWdJQ0FnTFNCNUlDaHVkVzFpWlhJcElIa2dZMjl2Y21ScGJtRjBaU0J3YjNOcGRHbHZibHh1SUNBZ0lDQXRJSGRwWkhSb0lDaHVkVzFpWlhJcElIZHBaSFJvSUc5bUlIUm9aU0JwYldGblpWeHVJQ0FnSUNBdElHaGxhV2RvZENBb2JuVnRZbVZ5S1NCb1pXbG5hSFFnYjJZZ2RHaGxJR2x0WVdkbFhHNGdJQ0FnSUQwZ0tHOWlhbVZqZENrZ1VtRndhR0hEcTJ3Z1pXeGxiV1Z1ZENCdlltcGxZM1FnZDJsMGFDQjBlWEJsSU9LQW5HbHRZV2RsNG9DZFhHNGdJQ0FnSUNvcVhHNGdJQ0FnSUQ0Z1ZYTmhaMlZjYmlBZ0lDQWdmQ0IyWVhJZ1l5QTlJSEJoY0dWeUxtbHRZV2RsS0Z3aVlYQndiR1V1Y0c1blhDSXNJREV3TENBeE1Dd2dPREFzSURnd0tUdGNiaUFnSUNCY1hDb3ZYRzRnSUNBZ2NHRndaWEp3Y205MGJ5NXBiV0ZuWlNBOUlHWjFibU4wYVc5dUlDaHpjbU1zSUhnc0lIa3NJSGNzSUdncElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUc5MWRDQTlJRkl1WDJWdVoybHVaUzVwYldGblpTaDBhR2x6TENCemNtTWdmSHdnWENKaFltOTFkRHBpYkdGdWExd2lMQ0I0SUh4OElEQXNJSGtnZkh3Z01Dd2dkeUI4ZkNBd0xDQm9JSHg4SURBcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5ZmMyVjBYMThnSmlZZ2RHaHBjeTVmWDNObGRGOWZMbkIxYzJnb2IzVjBLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzkxZER0Y2JpQWdJQ0I5TzF4dUlDQWdJQzhxWEZ4Y2JpQWdJQ0FnS2lCUVlYQmxjaTUwWlhoMFhHNGdJQ0FnSUZzZ2JXVjBhRzlrSUYxY2JpQWdJQ0FnS2lwY2JpQWdJQ0FnS2lCRWNtRjNjeUJoSUhSbGVIUWdjM1J5YVc1bkxpQkpaaUI1YjNVZ2JtVmxaQ0JzYVc1bElHSnlaV0ZyY3l3Z2NIVjBJT0tBbkZ4Y2J1S0FuU0JwYmlCMGFHVWdjM1J5YVc1bkxseHVJQ0FnSUNBcUtseHVJQ0FnSUNBK0lGQmhjbUZ0WlhSbGNuTmNiaUFnSUNBZ0tpcGNiaUFnSUNBZ0xTQjRJQ2h1ZFcxaVpYSXBJSGdnWTI5dmNtUnBibUYwWlNCd2IzTnBkR2x2Ymx4dUlDQWdJQ0F0SUhrZ0tHNTFiV0psY2lrZ2VTQmpiMjl5WkdsdVlYUmxJSEJ2YzJsMGFXOXVYRzRnSUNBZ0lDMGdkR1Y0ZENBb2MzUnlhVzVuS1NCVWFHVWdkR1Y0ZENCemRISnBibWNnZEc4Z1pISmhkMXh1SUNBZ0lDQTlJQ2h2WW1wbFkzUXBJRkpoY0doaHc2dHNJR1ZzWlcxbGJuUWdiMkpxWldOMElIZHBkR2dnZEhsd1pTRGlnSngwWlhoMDRvQ2RYRzRnSUNBZ0lDb3FYRzRnSUNBZ0lENGdWWE5oWjJWY2JpQWdJQ0FnZkNCMllYSWdkQ0E5SUhCaGNHVnlMblJsZUhRb05UQXNJRFV3TENCY0lsSmhjR2hodzZ0c1hGeHVhMmxqYTNOY1hHNWlkWFIwSVZ3aUtUdGNiaUFnSUNCY1hDb3ZYRzRnSUNBZ2NHRndaWEp3Y205MGJ5NTBaWGgwSUQwZ1puVnVZM1JwYjI0Z0tIZ3NJSGtzSUhSbGVIUXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHOTFkQ0E5SUZJdVgyVnVaMmx1WlM1MFpYaDBLSFJvYVhNc0lIZ2dmSHdnTUN3Z2VTQjhmQ0F3TENCVGRISW9kR1Y0ZENrcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5ZmMyVjBYMThnSmlZZ2RHaHBjeTVmWDNObGRGOWZMbkIxYzJnb2IzVjBLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzkxZER0Y2JpQWdJQ0I5TzF4dUlDQWdJQzhxWEZ4Y2JpQWdJQ0FnS2lCUVlYQmxjaTV6WlhSY2JpQWdJQ0FnV3lCdFpYUm9iMlFnWFZ4dUlDQWdJQ0FxS2x4dUlDQWdJQ0FxSUVOeVpXRjBaWE1nWVhKeVlYa3RiR2xyWlNCdlltcGxZM1FnZEc4Z2EyVmxjQ0JoYm1RZ2IzQmxjbUYwWlNCelpYWmxjbUZzSUdWc1pXMWxiblJ6SUdGMElHOXVZMlV1WEc0Z0lDQWdJQ29nVjJGeWJtbHVaem9nYVhRZ1pHOWxjMjdpZ0psMElHTnlaV0YwWlNCaGJua2daV3hsYldWdWRITWdabTl5SUdsMGMyVnNaaUJwYmlCMGFHVWdjR0ZuWlN3Z2FYUWdhblZ6ZENCbmNtOTFjSE1nWlhocGMzUnBibWNnWld4bGJXVnVkSE11WEc0Z0lDQWdJQ29nVTJWMGN5QmhZM1FnWVhNZ2NITmxkV1J2SUdWc1pXMWxiblJ6SU9LQWxDQmhiR3dnYldWMGFHOWtjeUJoZG1GcGJHRmliR1VnZEc4Z1lXNGdaV3hsYldWdWRDQmpZVzRnWW1VZ2RYTmxaQ0J2YmlCaElITmxkQzVjYmlBZ0lDQWdQU0FvYjJKcVpXTjBLU0JoY25KaGVTMXNhV3RsSUc5aWFtVmpkQ0IwYUdGMElISmxjSEpsYzJWdWRITWdjMlYwSUc5bUlHVnNaVzFsYm5SelhHNGdJQ0FnSUNvcVhHNGdJQ0FnSUQ0Z1ZYTmhaMlZjYmlBZ0lDQWdmQ0IyWVhJZ2MzUWdQU0J3WVhCbGNpNXpaWFFvS1R0Y2JpQWdJQ0FnZkNCemRDNXdkWE5vS0Z4dUlDQWdJQ0I4SUNBZ0lDQndZWEJsY2k1amFYSmpiR1VvTVRBc0lERXdMQ0ExS1N4Y2JpQWdJQ0FnZkNBZ0lDQWdjR0Z3WlhJdVkybHlZMnhsS0RNd0xDQXhNQ3dnTlNsY2JpQWdJQ0FnZkNBcE8xeHVJQ0FnSUNCOElITjBMbUYwZEhJb2UyWnBiR3c2SUZ3aWNtVmtYQ0o5S1RzZ0x5OGdZMmhoYm1kbGN5QjBhR1VnWm1sc2JDQnZaaUJpYjNSb0lHTnBjbU5zWlhOY2JpQWdJQ0JjWENvdlhHNGdJQ0FnY0dGd1pYSndjbTkwYnk1elpYUWdQU0JtZFc1amRHbHZiaUFvYVhSbGJYTkJjbkpoZVNrZ2UxeHVJQ0FnSUNBZ0lDQWhVaTVwY3locGRHVnRjMEZ5Y21GNUxDQmNJbUZ5Y21GNVhDSXBJQ1ltSUNocGRHVnRjMEZ5Y21GNUlEMGdRWEp5WVhrdWNISnZkRzkwZVhCbExuTndiR2xqWlM1allXeHNLR0Z5WjNWdFpXNTBjeXdnTUN3Z1lYSm5kVzFsYm5SekxteGxibWQwYUNrcE8xeHVJQ0FnSUNBZ0lDQjJZWElnYjNWMElEMGdibVYzSUZObGRDaHBkR1Z0YzBGeWNtRjVLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZYM05sZEY5ZklDWW1JSFJvYVhNdVgxOXpaWFJmWHk1d2RYTm9LRzkxZENrN1hHNGdJQ0FnSUNBZ0lHOTFkRnRjSW5CaGNHVnlYQ0pkSUQwZ2RHaHBjenRjYmlBZ0lDQWdJQ0FnYjNWMFcxd2lkSGx3WlZ3aVhTQTlJRndpYzJWMFhDSTdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnZkWFE3WEc0Z0lDQWdmVHRjYmlBZ0lDQXZLbHhjWEc0Z0lDQWdJQ29nVUdGd1pYSXVjMlYwVTNSaGNuUmNiaUFnSUNBZ1d5QnRaWFJvYjJRZ1hWeHVJQ0FnSUNBcUtseHVJQ0FnSUNBcUlFTnlaV0YwWlhNZ1FGQmhjR1Z5TG5ObGRDNGdRV3hzSUdWc1pXMWxiblJ6SUhSb1lYUWdkMmxzYkNCaVpTQmpjbVZoZEdWa0lHRm1kR1Z5SUdOaGJHeHBibWNnZEdocGN5QnRaWFJvYjJRZ1lXNWtJR0psWm05eVpTQmpZV3hzYVc1blhHNGdJQ0FnSUNvZ1FGQmhjR1Z5TG5ObGRFWnBibWx6YUNCM2FXeHNJR0psSUdGa1pHVmtJSFJ2SUhSb1pTQnpaWFF1WEc0Z0lDQWdJQ29xWEc0Z0lDQWdJRDRnVlhOaFoyVmNiaUFnSUNBZ2ZDQndZWEJsY2k1elpYUlRkR0Z5ZENncE8xeHVJQ0FnSUNCOElIQmhjR1Z5TG1OcGNtTnNaU2d4TUN3Z01UQXNJRFVwTEZ4dUlDQWdJQ0I4SUhCaGNHVnlMbU5wY21Oc1pTZ3pNQ3dnTVRBc0lEVXBYRzRnSUNBZ0lId2dkbUZ5SUhOMElEMGdjR0Z3WlhJdWMyVjBSbWx1YVhOb0tDazdYRzRnSUNBZ0lId2djM1F1WVhSMGNpaDdabWxzYkRvZ1hDSnlaV1JjSW4wcE95QXZMeUJqYUdGdVoyVnpJSFJvWlNCbWFXeHNJRzltSUdKdmRHZ2dZMmx5WTJ4bGMxeHVJQ0FnSUZ4Y0tpOWNiaUFnSUNCd1lYQmxjbkJ5YjNSdkxuTmxkRk4wWVhKMElEMGdablZ1WTNScGIyNGdLSE5sZENrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5ZmMyVjBYMThnUFNCelpYUWdmSHdnZEdocGN5NXpaWFFvS1R0Y2JpQWdJQ0I5TzF4dUlDQWdJQzhxWEZ4Y2JpQWdJQ0FnS2lCUVlYQmxjaTV6WlhSR2FXNXBjMmhjYmlBZ0lDQWdXeUJ0WlhSb2IyUWdYVnh1SUNBZ0lDQXFLbHh1SUNBZ0lDQXFJRk5sWlNCQVVHRndaWEl1YzJWMFUzUmhjblF1SUZSb2FYTWdiV1YwYUc5a0lHWnBibWx6YUdWeklHTmhkR05vYVc1bklHRnVaQ0J5WlhSMWNtNXpJSEpsYzNWc2RHbHVaeUJ6WlhRdVhHNGdJQ0FnSUNvcVhHNGdJQ0FnSUQwZ0tHOWlhbVZqZENrZ2MyVjBYRzRnSUNBZ1hGd3FMMXh1SUNBZ0lIQmhjR1Z5Y0hKdmRHOHVjMlYwUm1sdWFYTm9JRDBnWm5WdVkzUnBiMjRnS0hObGRDa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2IzVjBJRDBnZEdocGN5NWZYM05sZEY5Zk8xeHVJQ0FnSUNBZ0lDQmtaV3hsZEdVZ2RHaHBjeTVmWDNObGRGOWZPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdiM1YwTzF4dUlDQWdJSDA3WEc0Z0lDQWdMeXBjWEZ4dUlDQWdJQ0FxSUZCaGNHVnlMbWRsZEZOcGVtVmNiaUFnSUNBZ1d5QnRaWFJvYjJRZ1hWeHVJQ0FnSUNBcUtseHVJQ0FnSUNBcUlFOWlkR0ZwYm5NZ1kzVnljbVZ1ZENCd1lYQmxjaUJoWTNSMVlXd2djMmw2WlM1Y2JpQWdJQ0FnS2lwY2JpQWdJQ0FnUFNBb2IySnFaV04wS1Z4dUlDQWdJQ0JjWENvdlhHNGdJQ0FnY0dGd1pYSndjbTkwYnk1blpYUlRhWHBsSUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ1kyOXVkR0ZwYm1WeUlEMGdkR2hwY3k1allXNTJZWE11Y0dGeVpXNTBUbTlrWlR0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSGRwWkhSb09pQmpiMjUwWVdsdVpYSXViMlptYzJWMFYybGtkR2dzWEc0Z0lDQWdJQ0FnSUNBZ0lDQm9aV2xuYUhRNklHTnZiblJoYVc1bGNpNXZabVp6WlhSSVpXbG5hSFJjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUM4cVhGeGNiaUFnSUNBZ0tpQlFZWEJsY2k1elpYUlRhWHBsWEc0Z0lDQWdJRnNnYldWMGFHOWtJRjFjYmlBZ0lDQWdLaXBjYmlBZ0lDQWdLaUJKWmlCNWIzVWdibVZsWkNCMGJ5QmphR0Z1WjJVZ1pHbHRaVzV6YVc5dWN5QnZaaUIwYUdVZ1kyRnVkbUZ6SUdOaGJHd2dkR2hwY3lCdFpYUm9iMlJjYmlBZ0lDQWdLaXBjYmlBZ0lDQWdQaUJRWVhKaGJXVjBaWEp6WEc0Z0lDQWdJQ29xWEc0Z0lDQWdJQzBnZDJsa2RHZ2dLRzUxYldKbGNpa2dibVYzSUhkcFpIUm9JRzltSUhSb1pTQmpZVzUyWVhOY2JpQWdJQ0FnTFNCb1pXbG5hSFFnS0c1MWJXSmxjaWtnYm1WM0lHaGxhV2RvZENCdlppQjBhR1VnWTJGdWRtRnpYRzRnSUNBZ1hGd3FMMXh1SUNBZ0lIQmhjR1Z5Y0hKdmRHOHVjMlYwVTJsNlpTQTlJR1oxYm1OMGFXOXVJQ2gzYVdSMGFDd2dhR1ZwWjJoMEtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQlNMbDlsYm1kcGJtVXVjMlYwVTJsNlpTNWpZV3hzS0hSb2FYTXNJSGRwWkhSb0xDQm9aV2xuYUhRcE8xeHVJQ0FnSUgwN1hHNGdJQ0FnTHlwY1hGeHVJQ0FnSUNBcUlGQmhjR1Z5TG5ObGRGWnBaWGRDYjNoY2JpQWdJQ0FnV3lCdFpYUm9iMlFnWFZ4dUlDQWdJQ0FxS2x4dUlDQWdJQ0FxSUZObGRITWdkR2hsSUhacFpYY2dZbTk0SUc5bUlIUm9aU0J3WVhCbGNpNGdVSEpoWTNScFkyRnNiSGtnYVhRZ1oybDJaWE1nZVc5MUlHRmlhV3hwZEhrZ2RHOGdlbTl2YlNCaGJtUWdjR0Z1SUhkb2IyeGxJSEJoY0dWeUlITjFjbVpoWTJVZ1lubGNiaUFnSUNBZ0tpQnpjR1ZqYVdaNWFXNW5JRzVsZHlCaWIzVnVaR0Z5YVdWekxseHVJQ0FnSUNBcUtseHVJQ0FnSUNBK0lGQmhjbUZ0WlhSbGNuTmNiaUFnSUNBZ0tpcGNiaUFnSUNBZ0xTQjRJQ2h1ZFcxaVpYSXBJRzVsZHlCNElIQnZjMmwwYVc5dUxDQmtaV1poZFd4MElHbHpJR0F3WUZ4dUlDQWdJQ0F0SUhrZ0tHNTFiV0psY2lrZ2JtVjNJSGtnY0c5emFYUnBiMjRzSUdSbFptRjFiSFFnYVhNZ1lEQmdYRzRnSUNBZ0lDMGdkeUFvYm5WdFltVnlLU0J1WlhjZ2QybGtkR2dnYjJZZ2RHaGxJR05oYm5aaGMxeHVJQ0FnSUNBdElHZ2dLRzUxYldKbGNpa2dibVYzSUdobGFXZG9kQ0J2WmlCMGFHVWdZMkZ1ZG1GelhHNGdJQ0FnSUMwZ1ptbDBJQ2hpYjI5c1pXRnVLU0JnZEhKMVpXQWdhV1lnZVc5MUlIZGhiblFnWjNKaGNHaHBZM01nZEc4Z1ptbDBJR2x1ZEc4Z2JtVjNJR0p2ZFc1a1lYSjVJR0p2ZUZ4dUlDQWdJRnhjS2k5Y2JpQWdJQ0J3WVhCbGNuQnliM1J2TG5ObGRGWnBaWGRDYjNnZ1BTQm1kVzVqZEdsdmJpQW9lQ3dnZVN3Z2R5d2dhQ3dnWm1sMEtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQlNMbDlsYm1kcGJtVXVjMlYwVm1sbGQwSnZlQzVqWVd4c0tIUm9hWE1zSUhnc0lIa3NJSGNzSUdnc0lHWnBkQ2s3WEc0Z0lDQWdmVHRjYmlBZ0lDQXZLbHhjWEc0Z0lDQWdJQ29nVUdGd1pYSXVkRzl3WEc0Z0lDQWdJRnNnY0hKdmNHVnlkSGtnWFZ4dUlDQWdJQ0FxS2x4dUlDQWdJQ0FxSUZCdmFXNTBjeUIwYnlCMGFHVWdkRzl3Ylc5emRDQmxiR1Z0Wlc1MElHOXVJSFJvWlNCd1lYQmxjbHh1SUNBZ0lGeGNLaTljYmlBZ0lDQXZLbHhjWEc0Z0lDQWdJQ29nVUdGd1pYSXVZbTkwZEc5dFhHNGdJQ0FnSUZzZ2NISnZjR1Z5ZEhrZ1hWeHVJQ0FnSUNBcUtseHVJQ0FnSUNBcUlGQnZhVzUwY3lCMGJ5QjBhR1VnWW05MGRHOXRJR1ZzWlcxbGJuUWdiMjRnZEdobElIQmhjR1Z5WEc0Z0lDQWdYRndxTDF4dUlDQWdJSEJoY0dWeWNISnZkRzh1ZEc5d0lEMGdjR0Z3WlhKd2NtOTBieTVpYjNSMGIyMGdQU0J1ZFd4c08xeHVJQ0FnSUM4cVhGeGNiaUFnSUNBZ0tpQlFZWEJsY2k1eVlYQm9ZV1ZzWEc0Z0lDQWdJRnNnY0hKdmNHVnlkSGtnWFZ4dUlDQWdJQ0FxS2x4dUlDQWdJQ0FxSUZCdmFXNTBjeUIwYnlCMGFHVWdRRkpoY0doaFpXd2diMkpxWldOMEwyWjFibU4wYVc5dVhHNGdJQ0FnWEZ3cUwxeHVJQ0FnSUhCaGNHVnljSEp2ZEc4dWNtRndhR0ZsYkNBOUlGSTdYRzRnSUNBZ2RtRnlJR2RsZEU5bVpuTmxkQ0E5SUdaMWJtTjBhVzl1SUNobGJHVnRLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQmliM2dnUFNCbGJHVnRMbWRsZEVKdmRXNWthVzVuUTJ4cFpXNTBVbVZqZENncExGeHVJQ0FnSUNBZ0lDQWdJQ0FnWkc5aklEMGdaV3hsYlM1dmQyNWxja1J2WTNWdFpXNTBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1ltOWtlU0E5SUdSdll5NWliMlI1TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdaRzlqUld4bGJTQTlJR1J2WXk1a2IyTjFiV1Z1ZEVWc1pXMWxiblFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiR2xsYm5SVWIzQWdQU0JrYjJORmJHVnRMbU5zYVdWdWRGUnZjQ0I4ZkNCaWIyUjVMbU5zYVdWdWRGUnZjQ0I4ZkNBd0xDQmpiR2xsYm5STVpXWjBJRDBnWkc5alJXeGxiUzVqYkdsbGJuUk1aV1owSUh4OElHSnZaSGt1WTJ4cFpXNTBUR1ZtZENCOGZDQXdMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHOXdJQ0E5SUdKdmVDNTBiM0FnSUNzZ0tHY3VkMmx1TG5CaFoyVlpUMlptYzJWMElIeDhJR1J2WTBWc1pXMHVjMk55YjJ4c1ZHOXdJSHg4SUdKdlpIa3VjMk55YjJ4c1ZHOXdJQ2tnTFNCamJHbGxiblJVYjNBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzWldaMElEMGdZbTk0TG14bFpuUWdLeUFvWnk1M2FXNHVjR0ZuWlZoUFptWnpaWFFnZkh3Z1pHOWpSV3hsYlM1elkzSnZiR3hNWldaMElIeDhJR0p2WkhrdWMyTnliMnhzVEdWbWRDa2dMU0JqYkdsbGJuUk1aV1owTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdlVG9nZEc5d0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnZURvZ2JHVm1kRnh1SUNBZ0lDQWdJQ0I5TzF4dUlDQWdJSDA3WEc0Z0lDQWdMeXBjWEZ4dUlDQWdJQ0FxSUZCaGNHVnlMbWRsZEVWc1pXMWxiblJDZVZCdmFXNTBYRzRnSUNBZ0lGc2diV1YwYUc5a0lGMWNiaUFnSUNBZ0tpcGNiaUFnSUNBZ0tpQlNaWFIxY201eklIbHZkU0IwYjNCdGIzTjBJR1ZzWlcxbGJuUWdkVzVrWlhJZ1oybDJaVzRnY0c5cGJuUXVYRzRnSUNBZ0lDb3FYRzRnSUNBZ0lEMGdLRzlpYW1WamRDa2dVbUZ3YUdIRHEyd2daV3hsYldWdWRDQnZZbXBsWTNSY2JpQWdJQ0FnUGlCUVlYSmhiV1YwWlhKelhHNGdJQ0FnSUNvcVhHNGdJQ0FnSUMwZ2VDQW9iblZ0WW1WeUtTQjRJR052YjNKa2FXNWhkR1VnWm5KdmJTQjBhR1VnZEc5d0lHeGxablFnWTI5eWJtVnlJRzltSUhSb1pTQjNhVzVrYjNkY2JpQWdJQ0FnTFNCNUlDaHVkVzFpWlhJcElIa2dZMjl2Y21ScGJtRjBaU0JtY205dElIUm9aU0IwYjNBZ2JHVm1kQ0JqYjNKdVpYSWdiMllnZEdobElIZHBibVJ2ZDF4dUlDQWdJQ0ErSUZWellXZGxYRzRnSUNBZ0lId2djR0Z3WlhJdVoyVjBSV3hsYldWdWRFSjVVRzlwYm5Rb2JXOTFjMlZZTENCdGIzVnpaVmtwTG1GMGRISW9lM04wY205clpUb2dYQ0lqWmpBd1hDSjlLVHRjYmlBZ0lDQmNYQ292WEc0Z0lDQWdjR0Z3WlhKd2NtOTBieTVuWlhSRmJHVnRaVzUwUW5sUWIybHVkQ0E5SUdaMWJtTjBhVzl1SUNoNExDQjVLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQndZWEJsY2lBOUlIUm9hWE1zWEc0Z0lDQWdJQ0FnSUNBZ0lDQnpkbWNnUFNCd1lYQmxjaTVqWVc1MllYTXNYRzRnSUNBZ0lDQWdJQ0FnSUNCMFlYSm5aWFFnUFNCbkxtUnZZeTVsYkdWdFpXNTBSbkp2YlZCdmFXNTBLSGdzSUhrcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvWnk1M2FXNHViM0JsY21FZ0ppWWdkR0Z5WjJWMExuUmhaMDVoYldVZ1BUMGdYQ0p6ZG1kY0lpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSE52SUQwZ1oyVjBUMlptYzJWMEtITjJaeWtzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNJZ1BTQnpkbWN1WTNKbFlYUmxVMVpIVW1WamRDZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2MzSXVlQ0E5SUhnZ0xTQnpieTU0TzF4dUlDQWdJQ0FnSUNBZ0lDQWdjM0l1ZVNBOUlIa2dMU0J6Ynk1NU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYzNJdWQybGtkR2dnUFNCemNpNW9aV2xuYUhRZ1BTQXhPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR2hwZEhNZ1BTQnpkbWN1WjJWMFNXNTBaWEp6WldOMGFXOXVUR2x6ZENoemNpd2diblZzYkNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2FHbDBjeTVzWlc1bmRHZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwWVhKblpYUWdQU0JvYVhSelcyaHBkSE11YkdWdVozUm9JQzBnTVYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2FXWWdLQ0YwWVhKblpYUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhkb2FXeGxJQ2gwWVhKblpYUXVjR0Z5Wlc1MFRtOWtaU0FtSmlCMFlYSm5aWFFnSVQwZ2MzWm5MbkJoY21WdWRFNXZaR1VnSmlZZ0lYUmhjbWRsZEM1eVlYQm9ZV1ZzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwWVhKblpYUWdQU0IwWVhKblpYUXVjR0Z5Wlc1MFRtOWtaVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCMFlYSm5aWFFnUFQwZ2NHRndaWEl1WTJGdWRtRnpMbkJoY21WdWRFNXZaR1VnSmlZZ0tIUmhjbWRsZENBOUlITjJaeWs3WEc0Z0lDQWdJQ0FnSUhSaGNtZGxkQ0E5SUhSaGNtZGxkQ0FtSmlCMFlYSm5aWFF1Y21Gd2FHRmxiQ0EvSUhCaGNHVnlMbWRsZEVKNVNXUW9kR0Z5WjJWMExuSmhjR2hoWld4cFpDa2dPaUJ1ZFd4c08xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHRnlaMlYwTzF4dUlDQWdJSDA3WEc1Y2JpQWdJQ0F2S2x4Y1hHNGdJQ0FnSUNvZ1VHRndaWEl1WjJWMFJXeGxiV1Z1ZEhOQ2VVSkNiM2hjYmlBZ0lDQWdXeUJ0WlhSb2IyUWdYVnh1SUNBZ0lDQXFLbHh1SUNBZ0lDQXFJRkpsZEhWeWJuTWdjMlYwSUc5bUlHVnNaVzFsYm5SeklIUm9ZWFFnYUdGMlpTQmhiaUJwYm5SbGNuTmxZM1JwYm1jZ1ltOTFibVJwYm1jZ1ltOTRYRzRnSUNBZ0lDb3FYRzRnSUNBZ0lENGdVR0Z5WVcxbGRHVnljMXh1SUNBZ0lDQXFLbHh1SUNBZ0lDQXRJR0ppYjNnZ0tHOWlhbVZqZENrZ1ltSnZlQ0IwYnlCamFHVmpheUIzYVhSb1hHNGdJQ0FnSUQwZ0tHOWlhbVZqZENrZ1FGTmxkRnh1SUNBZ0lDQmNYQ292WEc0Z0lDQWdjR0Z3WlhKd2NtOTBieTVuWlhSRmJHVnRaVzUwYzBKNVFrSnZlQ0E5SUdaMWJtTjBhVzl1SUNoaVltOTRLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQnpaWFFnUFNCMGFHbHpMbk5sZENncE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1admNrVmhZMmdvWm5WdVkzUnBiMjRnS0dWc0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9VaTVwYzBKQ2IzaEpiblJsY25ObFkzUW9aV3d1WjJWMFFrSnZlQ2dwTENCaVltOTRLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhObGRDNXdkWE5vS0dWc0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnpaWFE3WEc0Z0lDQWdmVHRjYmx4dUlDQWdJQzhxWEZ4Y2JpQWdJQ0FnS2lCUVlYQmxjaTVuWlhSQ2VVbGtYRzRnSUNBZ0lGc2diV1YwYUc5a0lGMWNiaUFnSUNBZ0tpcGNiaUFnSUNBZ0tpQlNaWFIxY201eklIbHZkU0JsYkdWdFpXNTBJR0o1SUdsMGN5QnBiblJsY201aGJDQkpSQzVjYmlBZ0lDQWdLaXBjYmlBZ0lDQWdQaUJRWVhKaGJXVjBaWEp6WEc0Z0lDQWdJQ29xWEc0Z0lDQWdJQzBnYVdRZ0tHNTFiV0psY2lrZ2FXUmNiaUFnSUNBZ1BTQW9iMkpxWldOMEtTQlNZWEJvWWNPcmJDQmxiR1Z0Wlc1MElHOWlhbVZqZEZ4dUlDQWdJRnhjS2k5Y2JpQWdJQ0J3WVhCbGNuQnliM1J2TG1kbGRFSjVTV1FnUFNCbWRXNWpkR2x2YmlBb2FXUXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHSnZkQ0E5SUhSb2FYTXVZbTkwZEc5dE8xeHVJQ0FnSUNBZ0lDQjNhR2xzWlNBb1ltOTBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWW05MExtbGtJRDA5SUdsa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHSnZkRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUdKdmRDQTlJR0p2ZEM1dVpYaDBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ1ZFd4c08xeHVJQ0FnSUgwN1hHNGdJQ0FnTHlwY1hGeHVJQ0FnSUNBcUlGQmhjR1Z5TG1admNrVmhZMmhjYmlBZ0lDQWdXeUJ0WlhSb2IyUWdYVnh1SUNBZ0lDQXFLbHh1SUNBZ0lDQXFJRVY0WldOMWRHVnpJR2RwZG1WdUlHWjFibU4wYVc5dUlHWnZjaUJsWVdOb0lHVnNaVzFsYm5RZ2IyNGdkR2hsSUhCaGNHVnlYRzRnSUNBZ0lDcGNiaUFnSUNBZ0tpQkpaaUJqWVd4c1ltRmpheUJtZFc1amRHbHZiaUJ5WlhSMWNtNXpJR0JtWVd4elpXQWdhWFFnZDJsc2JDQnpkRzl3SUd4dmIzQWdjblZ1Ym1sdVp5NWNiaUFnSUNBZ0tpcGNiaUFnSUNBZ1BpQlFZWEpoYldWMFpYSnpYRzRnSUNBZ0lDb3FYRzRnSUNBZ0lDMGdZMkZzYkdKaFkyc2dLR1oxYm1OMGFXOXVLU0JtZFc1amRHbHZiaUIwYnlCeWRXNWNiaUFnSUNBZ0xTQjBhR2x6UVhKbklDaHZZbXBsWTNRcElHTnZiblJsZUhRZ2IySnFaV04wSUdadmNpQjBhR1VnWTJGc2JHSmhZMnRjYmlBZ0lDQWdQU0FvYjJKcVpXTjBLU0JRWVhCbGNpQnZZbXBsWTNSY2JpQWdJQ0FnUGlCVmMyRm5aVnh1SUNBZ0lDQjhJSEJoY0dWeUxtWnZja1ZoWTJnb1puVnVZM1JwYjI0Z0tHVnNLU0I3WEc0Z0lDQWdJSHdnSUNBZ0lHVnNMbUYwZEhJb2V5QnpkSEp2YTJVNklGd2lZbXgxWlZ3aUlIMHBPMXh1SUNBZ0lDQjhJSDBwTzF4dUlDQWdJRnhjS2k5Y2JpQWdJQ0J3WVhCbGNuQnliM1J2TG1admNrVmhZMmdnUFNCbWRXNWpkR2x2YmlBb1kyRnNiR0poWTJzc0lIUm9hWE5CY21jcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUdKdmRDQTlJSFJvYVhNdVltOTBkRzl0TzF4dUlDQWdJQ0FnSUNCM2FHbHNaU0FvWW05MEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ZMkZzYkdKaFkyc3VZMkZzYkNoMGFHbHpRWEpuTENCaWIzUXBJRDA5UFNCbVlXeHpaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdZbTkwSUQwZ1ltOTBMbTVsZUhRN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03WEc0Z0lDQWdmVHRjYmlBZ0lDQXZLbHhjWEc0Z0lDQWdJQ29nVUdGd1pYSXVaMlYwUld4bGJXVnVkSE5DZVZCdmFXNTBYRzRnSUNBZ0lGc2diV1YwYUc5a0lGMWNiaUFnSUNBZ0tpcGNiaUFnSUNBZ0tpQlNaWFIxY201eklITmxkQ0J2WmlCbGJHVnRaVzUwY3lCMGFHRjBJR2hoZG1VZ1kyOXRiVzl1SUhCdmFXNTBJR2x1YzJsa1pWeHVJQ0FnSUNBcUtseHVJQ0FnSUNBK0lGQmhjbUZ0WlhSbGNuTmNiaUFnSUNBZ0tpcGNiaUFnSUNBZ0xTQjRJQ2h1ZFcxaVpYSXBJSGdnWTI5dmNtUnBibUYwWlNCdlppQjBhR1VnY0c5cGJuUmNiaUFnSUNBZ0xTQjVJQ2h1ZFcxaVpYSXBJSGtnWTI5dmNtUnBibUYwWlNCdlppQjBhR1VnY0c5cGJuUmNiaUFnSUNBZ1BTQW9iMkpxWldOMEtTQkFVMlYwWEc0Z0lDQWdYRndxTDF4dUlDQWdJSEJoY0dWeWNISnZkRzh1WjJWMFJXeGxiV1Z1ZEhOQ2VWQnZhVzUwSUQwZ1puVnVZM1JwYjI0Z0tIZ3NJSGtwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJSE5sZENBOUlIUm9hWE11YzJWMEtDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVptOXlSV0ZqYUNobWRXNWpkR2x2YmlBb1pXd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hsYkM1cGMxQnZhVzUwU1c1emFXUmxLSGdzSUhrcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMlYwTG5CMWMyZ29aV3dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhObGREdGNiaUFnSUNCOU8xeHVJQ0FnSUdaMWJtTjBhVzl1SUhoZmVTZ3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWVDQXJJRk1nS3lCMGFHbHpMbms3WEc0Z0lDQWdmVnh1SUNBZ0lHWjFibU4wYVc5dUlIaGZlVjkzWDJnb0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5nZ0t5QlRJQ3NnZEdocGN5NTVJQ3NnVXlBcklIUm9hWE11ZDJsa2RHZ2dLeUJjSWlCY1hIaGtOeUJjSWlBcklIUm9hWE11YUdWcFoyaDBPMXh1SUNBZ0lIMWNiaUFnSUNBdktseGNYRzRnSUNBZ0lDb2dSV3hsYldWdWRDNXBjMUJ2YVc1MFNXNXphV1JsWEc0Z0lDQWdJRnNnYldWMGFHOWtJRjFjYmlBZ0lDQWdLaXBjYmlBZ0lDQWdLaUJFWlhSbGNtMXBibVVnYVdZZ1oybDJaVzRnY0c5cGJuUWdhWE1nYVc1emFXUmxJSFJvYVhNZ1pXeGxiV1Z1ZE9LQW1YTWdjMmhoY0dWY2JpQWdJQ0FnS2lwY2JpQWdJQ0FnUGlCUVlYSmhiV1YwWlhKelhHNGdJQ0FnSUNvcVhHNGdJQ0FnSUMwZ2VDQW9iblZ0WW1WeUtTQjRJR052YjNKa2FXNWhkR1VnYjJZZ2RHaGxJSEJ2YVc1MFhHNGdJQ0FnSUMwZ2VTQW9iblZ0WW1WeUtTQjVJR052YjNKa2FXNWhkR1VnYjJZZ2RHaGxJSEJ2YVc1MFhHNGdJQ0FnSUQwZ0tHSnZiMnhsWVc0cElHQjBjblZsWUNCcFppQndiMmx1ZENCcGJuTnBaR1VnZEdobElITm9ZWEJsWEc0Z0lDQWdYRndxTDF4dUlDQWdJR1ZzY0hKdmRHOHVhWE5RYjJsdWRFbHVjMmxrWlNBOUlHWjFibU4wYVc5dUlDaDRMQ0I1S1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ5Y0NBOUlIUm9hWE11Y21WaGJGQmhkR2dnUFNCblpYUlFZWFJvVzNSb2FYTXVkSGx3WlYwb2RHaHBjeWs3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG1GMGRISW9KM1J5WVc1elptOXliU2NwSUNZbUlIUm9hWE11WVhSMGNpZ25kSEpoYm5ObWIzSnRKeWt1YkdWdVozUm9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnljQ0E5SUZJdWRISmhibk5tYjNKdFVHRjBhQ2h5Y0N3Z2RHaHBjeTVoZEhSeUtDZDBjbUZ1YzJadmNtMG5LU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUZJdWFYTlFiMmx1ZEVsdWMybGtaVkJoZEdnb2NuQXNJSGdzSUhrcE8xeHVJQ0FnSUgwN1hHNGdJQ0FnTHlwY1hGeHVJQ0FnSUNBcUlFVnNaVzFsYm5RdVoyVjBRa0p2ZUZ4dUlDQWdJQ0JiSUcxbGRHaHZaQ0JkWEc0Z0lDQWdJQ29xWEc0Z0lDQWdJQ29nVW1WMGRYSnVJR0p2ZFc1a2FXNW5JR0p2ZUNCbWIzSWdZU0JuYVhabGJpQmxiR1Z0Wlc1MFhHNGdJQ0FnSUNvcVhHNGdJQ0FnSUQ0Z1VHRnlZVzFsZEdWeWMxeHVJQ0FnSUNBcUtseHVJQ0FnSUNBdElHbHpWMmwwYUc5MWRGUnlZVzV6Wm05eWJTQW9ZbTl2YkdWaGJpa2dabXhoWnl3Z1lIUnlkV1ZnSUdsbUlIbHZkU0IzWVc1MElIUnZJR2hoZG1VZ1ltOTFibVJwYm1jZ1ltOTRJR0psWm05eVpTQjBjbUZ1YzJadmNtMWhkR2x2Ym5NdUlFUmxabUYxYkhRZ2FYTWdZR1poYkhObFlDNWNiaUFnSUNBZ1BTQW9iMkpxWldOMEtTQkNiM1Z1WkdsdVp5QmliM2dnYjJKcVpXTjBPbHh1SUNBZ0lDQnZJSHRjYmlBZ0lDQWdieUFnSUNBZ2VEb2dLRzUxYldKbGNpa2dkRzl3SUd4bFpuUWdZMjl5Ym1WeUlIaGNiaUFnSUNBZ2J5QWdJQ0FnZVRvZ0tHNTFiV0psY2lrZ2RHOXdJR3hsWm5RZ1kyOXlibVZ5SUhsY2JpQWdJQ0FnYnlBZ0lDQWdlREk2SUNodWRXMWlaWElwSUdKdmRIUnZiU0J5YVdkb2RDQmpiM0p1WlhJZ2VGeHVJQ0FnSUNCdklDQWdJQ0I1TWpvZ0tHNTFiV0psY2lrZ1ltOTBkRzl0SUhKcFoyaDBJR052Y201bGNpQjVYRzRnSUNBZ0lHOGdJQ0FnSUhkcFpIUm9PaUFvYm5WdFltVnlLU0IzYVdSMGFGeHVJQ0FnSUNCdklDQWdJQ0JvWldsbmFIUTZJQ2h1ZFcxaVpYSXBJR2hsYVdkb2RGeHVJQ0FnSUNCdklIMWNiaUFnSUNCY1hDb3ZYRzRnSUNBZ1pXeHdjbTkwYnk1blpYUkNRbTk0SUQwZ1puVnVZM1JwYjI0Z0tHbHpWMmwwYUc5MWRGUnlZVzV6Wm05eWJTa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTV5WlcxdmRtVmtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2UzMDdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZG1GeUlGOGdQU0IwYUdsekxsODdYRzRnSUNBZ0lDQWdJR2xtSUNocGMxZHBkR2h2ZFhSVWNtRnVjMlp2Y20wcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaGZMbVJwY25SNUlIeDhJQ0ZmTG1KaWIzaDNkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjbVZoYkZCaGRHZ2dQU0JuWlhSUVlYUm9XM1JvYVhNdWRIbHdaVjBvZEdocGN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYeTVpWW05NGQzUWdQU0J3WVhSb1JHbHRaVzV6YVc5dWN5aDBhR2x6TG5KbFlXeFFZWFJvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZkxtSmliM2gzZEM1MGIxTjBjbWx1WnlBOUlIaGZlVjkzWDJnN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1h5NWthWEowZVNBOUlEQTdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdYeTVpWW05NGQzUTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYVdZZ0tGOHVaR2x5ZEhrZ2ZId2dYeTVrYVhKMGVWUWdmSHdnSVY4dVltSnZlQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0Y4dVpHbHlkSGtnZkh3Z0lYUm9hWE11Y21WaGJGQmhkR2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZkxtSmliM2gzZENBOUlEQTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1eVpXRnNVR0YwYUNBOUlHZGxkRkJoZEdoYmRHaHBjeTUwZVhCbFhTaDBhR2x6S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lGOHVZbUp2ZUNBOUlIQmhkR2hFYVcxbGJuTnBiMjV6S0cxaGNGQmhkR2dvZEdocGN5NXlaV0ZzVUdGMGFDd2dkR2hwY3k1dFlYUnlhWGdwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJRjh1WW1KdmVDNTBiMU4wY21sdVp5QTlJSGhmZVY5M1gyZzdYRzRnSUNBZ0lDQWdJQ0FnSUNCZkxtUnBjblI1SUQwZ1h5NWthWEowZVZRZ1BTQXdPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJmTG1KaWIzZzdYRzRnSUNBZ2ZUdGNiaUFnSUNBdktseGNYRzRnSUNBZ0lDb2dSV3hsYldWdWRDNWpiRzl1WlZ4dUlDQWdJQ0JiSUcxbGRHaHZaQ0JkWEc0Z0lDQWdJQ29xWEc0Z0lDQWdJRDBnS0c5aWFtVmpkQ2tnWTJ4dmJtVWdiMllnWVNCbmFYWmxiaUJsYkdWdFpXNTBYRzRnSUNBZ0lDb3FYRzRnSUNBZ1hGd3FMMXh1SUNBZ0lHVnNjSEp2ZEc4dVkyeHZibVVnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbkpsYlc5MlpXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhaaGNpQnZkWFFnUFNCMGFHbHpMbkJoY0dWeVczUm9hWE11ZEhsd1pWMG9LUzVoZEhSeUtIUm9hWE11WVhSMGNpZ3BLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZYM05sZEY5ZklDWW1JSFJvYVhNdVgxOXpaWFJmWHk1d2RYTm9LRzkxZENrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdmRYUTdYRzRnSUNBZ2ZUdGNiaUFnSUNBdktseGNYRzRnSUNBZ0lDb2dSV3hsYldWdWRDNW5iRzkzWEc0Z0lDQWdJRnNnYldWMGFHOWtJRjFjYmlBZ0lDQWdLaXBjYmlBZ0lDQWdLaUJTWlhSMWNtNGdjMlYwSUc5bUlHVnNaVzFsYm5SeklIUm9ZWFFnWTNKbFlYUmxJR2RzYjNjdGJHbHJaU0JsWm1abFkzUWdZWEp2ZFc1a0lHZHBkbVZ1SUdWc1pXMWxiblF1SUZObFpTQkFVR0Z3WlhJdWMyVjBMbHh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dUbTkwWlRvZ1IyeHZkeUJwY3lCdWIzUWdZMjl1Ym1WamRHVmtJSFJ2SUhSb1pTQmxiR1Z0Wlc1MExpQkpaaUI1YjNVZ1kyaGhibWRsSUdWc1pXMWxiblFnWVhSMGNtbGlkWFJsY3lCcGRDQjNiMjdpZ0psMElHRmthblZ6ZENCcGRITmxiR1l1WEc0Z0lDQWdJQ29xWEc0Z0lDQWdJRDRnVUdGeVlXMWxkR1Z5YzF4dUlDQWdJQ0FxS2x4dUlDQWdJQ0F0SUdkc2IzY2dLRzlpYW1WamRDa2dJMjl3ZEdsdmJtRnNJSEJoY21GdFpYUmxjbk1nYjJKcVpXTjBJSGRwZEdnZ1lXeHNJSEJ5YjNCbGNuUnBaWE1nYjNCMGFXOXVZV3c2WEc0Z0lDQWdJRzhnZTF4dUlDQWdJQ0J2SUNBZ0lDQjNhV1IwYUNBb2JuVnRZbVZ5S1NCemFYcGxJRzltSUhSb1pTQm5iRzkzTENCa1pXWmhkV3gwSUdseklHQXhNR0JjYmlBZ0lDQWdieUFnSUNBZ1ptbHNiQ0FvWW05dmJHVmhiaWtnZDJsc2JDQnBkQ0JpWlNCbWFXeHNaV1FzSUdSbFptRjFiSFFnYVhNZ1lHWmhiSE5sWUZ4dUlDQWdJQ0J2SUNBZ0lDQnZjR0ZqYVhSNUlDaHVkVzFpWlhJcElHOXdZV05wZEhrc0lHUmxabUYxYkhRZ2FYTWdZREF1TldCY2JpQWdJQ0FnYnlBZ0lDQWdiMlptYzJWMGVDQW9iblZ0WW1WeUtTQm9iM0pwZW05dWRHRnNJRzltWm5ObGRDd2daR1ZtWVhWc2RDQnBjeUJnTUdCY2JpQWdJQ0FnYnlBZ0lDQWdiMlptYzJWMGVTQW9iblZ0WW1WeUtTQjJaWEowYVdOaGJDQnZabVp6WlhRc0lHUmxabUYxYkhRZ2FYTWdZREJnWEc0Z0lDQWdJRzhnSUNBZ0lHTnZiRzl5SUNoemRISnBibWNwSUdkc2IzY2dZMjlzYjNWeUxDQmtaV1poZFd4MElHbHpJR0JpYkdGamEyQmNiaUFnSUNBZ2J5QjlYRzRnSUNBZ0lEMGdLRzlpYW1WamRDa2dRRkJoY0dWeUxuTmxkQ0J2WmlCbGJHVnRaVzUwY3lCMGFHRjBJSEpsY0hKbGMyVnVkSE1nWjJ4dmQxeHVJQ0FnSUZ4Y0tpOWNiaUFnSUNCbGJIQnliM1J2TG1kc2IzY2dQU0JtZFc1amRHbHZiaUFvWjJ4dmR5a2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTUwZVhCbElEMDlJRndpZEdWNGRGd2lLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2JuVnNiRHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCbmJHOTNJRDBnWjJ4dmR5QjhmQ0I3ZlR0Y2JpQWdJQ0FnSUNBZ2RtRnlJSE1nUFNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IzYVdSMGFEb2dLR2RzYjNjdWQybGtkR2dnZkh3Z01UQXBJQ3NnS0N0MGFHbHpMbUYwZEhJb1hDSnpkSEp2YTJVdGQybGtkR2hjSWlrZ2ZId2dNU2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQm1hV3hzT2lCbmJHOTNMbVpwYkd3Z2ZId2dabUZzYzJVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J2Y0dGamFYUjVPaUJuYkc5M0xtOXdZV05wZEhrZ1BUMGdiblZzYkNBL0lDNDFJRG9nWjJ4dmR5NXZjR0ZqYVhSNUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnYjJabWMyVjBlRG9nWjJ4dmR5NXZabVp6WlhSNElIeDhJREFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnZabVp6WlhSNU9pQm5iRzkzTG05bVpuTmxkSGtnZkh3Z01DeGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJHOXlPaUJuYkc5M0xtTnZiRzl5SUh4OElGd2lJekF3TUZ3aVhHNGdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNCaklEMGdjeTUzYVdSMGFDQXZJRElzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnlJRDBnZEdocGN5NXdZWEJsY2l4Y2JpQWdJQ0FnSUNBZ0lDQWdJRzkxZENBOUlISXVjMlYwS0Nrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J3WVhSb0lEMGdkR2hwY3k1eVpXRnNVR0YwYUNCOGZDQm5aWFJRWVhSb1czUm9hWE11ZEhsd1pWMG9kR2hwY3lrN1hHNGdJQ0FnSUNBZ0lIQmhkR2dnUFNCMGFHbHpMbTFoZEhKcGVDQS9JRzFoY0ZCaGRHZ29jR0YwYUN3Z2RHaHBjeTV0WVhSeWFYZ3BJRG9nY0dGMGFEdGNiaUFnSUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURFN0lHa2dQQ0JqSUNzZ01Uc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J2ZFhRdWNIVnphQ2h5TG5CaGRHZ29jR0YwYUNrdVlYUjBjaWg3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNSeWIydGxPaUJ6TG1OdmJHOXlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1pwYkd3NklITXVabWxzYkNBL0lITXVZMjlzYjNJZ09pQmNJbTV2Ym1WY0lpeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmNJbk4wY205clpTMXNhVzVsYW05cGJsd2lPaUJjSW5KdmRXNWtYQ0lzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWENKemRISnZhMlV0YkdsdVpXTmhjRndpT2lCY0luSnZkVzVrWENJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1hDSnpkSEp2YTJVdGQybGtkR2hjSWpvZ0t5aHpMbmRwWkhSb0lDOGdZeUFxSUdrcExuUnZSbWw0WldRb015a3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiM0JoWTJsMGVUb2dLeWh6TG05d1lXTnBkSGtnTHlCaktTNTBiMFpwZUdWa0tETXBYRzRnSUNBZ0lDQWdJQ0FnSUNCOUtTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzkxZEM1cGJuTmxjblJDWldadmNtVW9kR2hwY3lrdWRISmhibk5zWVhSbEtITXViMlptYzJWMGVDd2djeTV2Wm1aelpYUjVLVHRjYmlBZ0lDQjlPMXh1SUNBZ0lIWmhjaUJqZFhKMlpYTnNaVzVuZEdoeklEMGdlMzBzWEc0Z0lDQWdaMlYwVUc5cGJuUkJkRk5sWjIxbGJuUk1aVzVuZEdnZ1BTQm1kVzVqZEdsdmJpQW9jREY0TENCd01Ya3NJR014ZUN3Z1l6RjVMQ0JqTW5nc0lHTXllU3dnY0RKNExDQndNbmtzSUd4bGJtZDBhQ2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9iR1Z1WjNSb0lEMDlJRzUxYkd3cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJpWlhwc1pXNG9jREY0TENCd01Ya3NJR014ZUN3Z1l6RjVMQ0JqTW5nc0lHTXllU3dnY0RKNExDQndNbmtwTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlGSXVabWx1WkVSdmRITkJkRk5sWjIxbGJuUW9jREY0TENCd01Ya3NJR014ZUN3Z1l6RjVMQ0JqTW5nc0lHTXllU3dnY0RKNExDQndNbmtzSUdkbGRGUmhkRXhsYmlod01YZ3NJSEF4ZVN3Z1l6RjRMQ0JqTVhrc0lHTXllQ3dnWXpKNUxDQndNbmdzSUhBeWVTd2diR1Z1WjNSb0tTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlMRnh1SUNBZ0lHZGxkRXhsYm1kMGFFWmhZM1J2Y25rZ1BTQm1kVzVqZEdsdmJpQW9hWE4wYjNSaGJDd2djM1ZpY0dGMGFDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdLSEJoZEdnc0lHeGxibWQwYUN3Z2IyNXNlWE4wWVhKMEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCd1lYUm9JRDBnY0dGMGFESmpkWEoyWlNod1lYUm9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUI0TENCNUxDQndMQ0JzTENCemNDQTlJRndpWENJc0lITjFZbkJoZEdoeklEMGdlMzBzSUhCdmFXNTBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsYmlBOUlEQTdYRzRnSUNBZ0lDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCcElEMGdNQ3dnYVdrZ1BTQndZWFJvTG14bGJtZDBhRHNnYVNBOElHbHBPeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndJRDBnY0dGMGFGdHBYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NGc3dYU0E5UFNCY0lrMWNJaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjRJRDBnSzNCYk1WMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhrZ1BTQXJjRnN5WFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNJRDBnWjJWMFVHOXBiblJCZEZObFoyMWxiblJNWlc1bmRHZ29lQ3dnZVN3Z2NGc3hYU3dnY0ZzeVhTd2djRnN6WFN3Z2NGczBYU3dnY0ZzMVhTd2djRnMyWFNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoc1pXNGdLeUJzSUQ0Z2JHVnVaM1JvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jM1ZpY0dGMGFDQW1KaUFoYzNWaWNHRjBhSE11YzNSaGNuUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2IybHVkQ0E5SUdkbGRGQnZhVzUwUVhSVFpXZHRaVzUwVEdWdVozUm9LSGdzSUhrc0lIQmJNVjBzSUhCYk1sMHNJSEJiTTEwc0lIQmJORjBzSUhCYk5WMHNJSEJiTmwwc0lHeGxibWQwYUNBdElHeGxiaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzQWdLejBnVzF3aVExd2lJQ3NnY0c5cGJuUXVjM1JoY25RdWVDd2djRzlwYm5RdWMzUmhjblF1ZVN3Z2NHOXBiblF1YlM1NExDQndiMmx1ZEM1dExua3NJSEJ2YVc1MExuZ3NJSEJ2YVc1MExubGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHZibXg1YzNSaGNuUXBJSHR5WlhSMWNtNGdjM0E3ZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITjFZbkJoZEdoekxuTjBZWEowSUQwZ2MzQTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNBZ1BTQmJYQ0pOWENJZ0t5QndiMmx1ZEM1NExDQndiMmx1ZEM1NUlDc2dYQ0pEWENJZ0t5QndiMmx1ZEM1dUxuZ3NJSEJ2YVc1MExtNHVlU3dnY0c5cGJuUXVaVzVrTG5nc0lIQnZhVzUwTG1WdVpDNTVMQ0J3V3pWZExDQndXelpkWFM1cWIybHVLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVnVJQ3M5SUd3N1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlQ0E5SUN0d1d6VmRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhrZ1BTQXJjRnMyWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjUwYVc1MVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doYVhOMGIzUmhiQ0FtSmlBaGMzVmljR0YwYUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJ2YVc1MElEMGdaMlYwVUc5cGJuUkJkRk5sWjIxbGJuUk1aVzVuZEdnb2VDd2dlU3dnY0ZzeFhTd2djRnN5WFN3Z2NGc3pYU3dnY0ZzMFhTd2djRnMxWFN3Z2NGczJYU3dnYkdWdVozUm9JQzBnYkdWdUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdlM2c2SUhCdmFXNTBMbmdzSUhrNklIQnZhVzUwTG5rc0lHRnNjR2hoT2lCd2IybHVkQzVoYkhCb1lYMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1Z1SUNzOUlHdzdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhnZ1BTQXJjRnMxWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlU0E5SUN0d1d6WmRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6Y0NBclBTQndMbk5vYVdaMEtDa2dLeUJ3TzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2MzVmljR0YwYUhNdVpXNWtJRDBnYzNBN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J3YjJsdWRDQTlJR2x6ZEc5MFlXd2dQeUJzWlc0Z09pQnpkV0p3WVhSb0lEOGdjM1ZpY0dGMGFITWdPaUJTTG1acGJtUkViM1J6UVhSVFpXZHRaVzUwS0hnc0lIa3NJSEJiTUYwc0lIQmJNVjBzSUhCYk1sMHNJSEJiTTEwc0lIQmJORjBzSUhCYk5WMHNJREVwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjRzlwYm5RdVlXeHdhR0VnSmlZZ0tIQnZhVzUwSUQwZ2UzZzZJSEJ2YVc1MExuZ3NJSGs2SUhCdmFXNTBMbmtzSUdGc2NHaGhPaUJ3YjJsdWRDNWhiSEJvWVgwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSEJ2YVc1ME8xeHVJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lIMDdYRzRnSUNBZ2RtRnlJR2RsZEZSdmRHRnNUR1Z1WjNSb0lEMGdaMlYwVEdWdVozUm9SbUZqZEc5eWVTZ3hLU3hjYmlBZ0lDQWdJQ0FnWjJWMFVHOXBiblJCZEV4bGJtZDBhQ0E5SUdkbGRFeGxibWQwYUVaaFkzUnZjbmtvS1N4Y2JpQWdJQ0FnSUNBZ1oyVjBVM1ZpY0dGMGFITkJkRXhsYm1kMGFDQTlJR2RsZEV4bGJtZDBhRVpoWTNSdmNua29NQ3dnTVNrN1hHNGdJQ0FnTHlwY1hGeHVJQ0FnSUNBcUlGSmhjR2hoWld3dVoyVjBWRzkwWVd4TVpXNW5kR2hjYmlBZ0lDQWdXeUJ0WlhSb2IyUWdYVnh1SUNBZ0lDQXFLbHh1SUNBZ0lDQXFJRkpsZEhWeWJuTWdiR1Z1WjNSb0lHOW1JSFJvWlNCbmFYWmxiaUJ3WVhSb0lHbHVJSEJwZUdWc2N5NWNiaUFnSUNBZ0tpcGNiaUFnSUNBZ1BpQlFZWEpoYldWMFpYSnpYRzRnSUNBZ0lDb3FYRzRnSUNBZ0lDMGdjR0YwYUNBb2MzUnlhVzVuS1NCVFZrY2djR0YwYUNCemRISnBibWN1WEc0Z0lDQWdJQ29xWEc0Z0lDQWdJRDBnS0c1MWJXSmxjaWtnYkdWdVozUm9MbHh1SUNBZ0lGeGNLaTljYmlBZ0lDQlNMbWRsZEZSdmRHRnNUR1Z1WjNSb0lEMGdaMlYwVkc5MFlXeE1aVzVuZEdnN1hHNGdJQ0FnTHlwY1hGeHVJQ0FnSUNBcUlGSmhjR2hoWld3dVoyVjBVRzlwYm5SQmRFeGxibWQwYUZ4dUlDQWdJQ0JiSUcxbGRHaHZaQ0JkWEc0Z0lDQWdJQ29xWEc0Z0lDQWdJQ29nVW1WMGRYSnVJR052YjNKa2FXNWhkR1Z6SUc5bUlIUm9aU0J3YjJsdWRDQnNiMk5oZEdWa0lHRjBJSFJvWlNCbmFYWmxiaUJzWlc1bmRHZ2diMjRnZEdobElHZHBkbVZ1SUhCaGRHZ3VYRzRnSUNBZ0lDb3FYRzRnSUNBZ0lENGdVR0Z5WVcxbGRHVnljMXh1SUNBZ0lDQXFLbHh1SUNBZ0lDQXRJSEJoZEdnZ0tITjBjbWx1WnlrZ1UxWkhJSEJoZEdnZ2MzUnlhVzVuWEc0Z0lDQWdJQzBnYkdWdVozUm9JQ2h1ZFcxaVpYSXBYRzRnSUNBZ0lDb3FYRzRnSUNBZ0lEMGdLRzlpYW1WamRDa2djbVZ3Y21WelpXNTBZWFJwYjI0Z2IyWWdkR2hsSUhCdmFXNTBPbHh1SUNBZ0lDQnZJSHRjYmlBZ0lDQWdieUFnSUNBZ2VEb2dLRzUxYldKbGNpa2dlQ0JqYjI5eVpHbHVZWFJsWEc0Z0lDQWdJRzhnSUNBZ0lIazZJQ2h1ZFcxaVpYSXBJSGtnWTI5dmNtUnBibUYwWlZ4dUlDQWdJQ0J2SUNBZ0lDQmhiSEJvWVRvZ0tHNTFiV0psY2lrZ1lXNW5iR1VnYjJZZ1pHVnlhWFpoZEdsMlpWeHVJQ0FnSUNCdklIMWNiaUFnSUNCY1hDb3ZYRzRnSUNBZ1VpNW5aWFJRYjJsdWRFRjBUR1Z1WjNSb0lEMGdaMlYwVUc5cGJuUkJkRXhsYm1kMGFEdGNiaUFnSUNBdktseGNYRzRnSUNBZ0lDb2dVbUZ3YUdGbGJDNW5aWFJUZFdKd1lYUm9YRzRnSUNBZ0lGc2diV1YwYUc5a0lGMWNiaUFnSUNBZ0tpcGNiaUFnSUNBZ0tpQlNaWFIxY200Z2MzVmljR0YwYUNCdlppQmhJR2RwZG1WdUlIQmhkR2dnWm5KdmJTQm5hWFpsYmlCc1pXNW5kR2dnZEc4Z1oybDJaVzRnYkdWdVozUm9MbHh1SUNBZ0lDQXFLbHh1SUNBZ0lDQStJRkJoY21GdFpYUmxjbk5jYmlBZ0lDQWdLaXBjYmlBZ0lDQWdMU0J3WVhSb0lDaHpkSEpwYm1jcElGTldSeUJ3WVhSb0lITjBjbWx1WjF4dUlDQWdJQ0F0SUdaeWIyMGdLRzUxYldKbGNpa2djRzl6YVhScGIyNGdiMllnZEdobElITjBZWEowSUc5bUlIUm9aU0J6WldkdFpXNTBYRzRnSUNBZ0lDMGdkRzhnS0c1MWJXSmxjaWtnY0c5emFYUnBiMjRnYjJZZ2RHaGxJR1Z1WkNCdlppQjBhR1VnYzJWbmJXVnVkRnh1SUNBZ0lDQXFLbHh1SUNBZ0lDQTlJQ2h6ZEhKcGJtY3BJSEJoZEdoemRISnBibWNnWm05eUlIUm9aU0J6WldkdFpXNTBYRzRnSUNBZ1hGd3FMMXh1SUNBZ0lGSXVaMlYwVTNWaWNHRjBhQ0E5SUdaMWJtTjBhVzl1SUNod1lYUm9MQ0JtY205dExDQjBieWtnZTF4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1blpYUlViM1JoYkV4bGJtZDBhQ2h3WVhSb0tTQXRJSFJ2SUR3Z01XVXROaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHZGxkRk4xWW5CaGRHaHpRWFJNWlc1bmRHZ29jR0YwYUN3Z1puSnZiU2t1Wlc1a08xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSFpoY2lCaElEMGdaMlYwVTNWaWNHRjBhSE5CZEV4bGJtZDBhQ2h3WVhSb0xDQjBieXdnTVNrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCbWNtOXRJRDhnWjJWMFUzVmljR0YwYUhOQmRFeGxibWQwYUNoaExDQm1jbTl0S1M1bGJtUWdPaUJoTzF4dUlDQWdJSDA3WEc0Z0lDQWdMeXBjWEZ4dUlDQWdJQ0FxSUVWc1pXMWxiblF1WjJWMFZHOTBZV3hNWlc1bmRHaGNiaUFnSUNBZ1d5QnRaWFJvYjJRZ1hWeHVJQ0FnSUNBcUtseHVJQ0FnSUNBcUlGSmxkSFZ5Ym5NZ2JHVnVaM1JvSUc5bUlIUm9aU0J3WVhSb0lHbHVJSEJwZUdWc2N5NGdUMjVzZVNCM2IzSnJjeUJtYjNJZ1pXeGxiV1Z1ZENCdlppRGlnSnh3WVhSbzRvQ2RJSFI1Y0dVdVhHNGdJQ0FnSUQwZ0tHNTFiV0psY2lrZ2JHVnVaM1JvTGx4dUlDQWdJRnhjS2k5Y2JpQWdJQ0JsYkhCeWIzUnZMbWRsZEZSdmRHRnNUR1Z1WjNSb0lEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdjR0YwYUNBOUlIUm9hWE11WjJWMFVHRjBhQ2dwTzF4dUlDQWdJQ0FnSUNCcFppQW9JWEJoZEdncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtNXZaR1V1WjJWMFZHOTBZV3hNWlc1bmRHZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbTV2WkdVdVoyVjBWRzkwWVd4TVpXNW5kR2dvS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQm5aWFJVYjNSaGJFeGxibWQwYUNod1lYUm9LVHRjYmlBZ0lDQjlPMXh1SUNBZ0lDOHFYRnhjYmlBZ0lDQWdLaUJGYkdWdFpXNTBMbWRsZEZCdmFXNTBRWFJNWlc1bmRHaGNiaUFnSUNBZ1d5QnRaWFJvYjJRZ1hWeHVJQ0FnSUNBcUtseHVJQ0FnSUNBcUlGSmxkSFZ5YmlCamIyOXlaR2x1WVhSbGN5QnZaaUIwYUdVZ2NHOXBiblFnYkc5allYUmxaQ0JoZENCMGFHVWdaMmwyWlc0Z2JHVnVaM1JvSUc5dUlIUm9aU0JuYVhabGJpQndZWFJvTGlCUGJteDVJSGR2Y210eklHWnZjaUJsYkdWdFpXNTBJRzltSU9LQW5IQmhkR2ppZ0owZ2RIbHdaUzVjYmlBZ0lDQWdLaXBjYmlBZ0lDQWdQaUJRWVhKaGJXVjBaWEp6WEc0Z0lDQWdJQ29xWEc0Z0lDQWdJQzBnYkdWdVozUm9JQ2h1ZFcxaVpYSXBYRzRnSUNBZ0lDb3FYRzRnSUNBZ0lEMGdLRzlpYW1WamRDa2djbVZ3Y21WelpXNTBZWFJwYjI0Z2IyWWdkR2hsSUhCdmFXNTBPbHh1SUNBZ0lDQnZJSHRjYmlBZ0lDQWdieUFnSUNBZ2VEb2dLRzUxYldKbGNpa2dlQ0JqYjI5eVpHbHVZWFJsWEc0Z0lDQWdJRzhnSUNBZ0lIazZJQ2h1ZFcxaVpYSXBJSGtnWTI5dmNtUnBibUYwWlZ4dUlDQWdJQ0J2SUNBZ0lDQmhiSEJvWVRvZ0tHNTFiV0psY2lrZ1lXNW5iR1VnYjJZZ1pHVnlhWFpoZEdsMlpWeHVJQ0FnSUNCdklIMWNiaUFnSUNCY1hDb3ZYRzRnSUNBZ1pXeHdjbTkwYnk1blpYUlFiMmx1ZEVGMFRHVnVaM1JvSUQwZ1puVnVZM1JwYjI0Z0tHeGxibWQwYUNrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnY0dGMGFDQTlJSFJvYVhNdVoyVjBVR0YwYUNncE8xeHVJQ0FnSUNBZ0lDQnBaaUFvSVhCaGRHZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQm5aWFJRYjJsdWRFRjBUR1Z1WjNSb0tIQmhkR2dzSUd4bGJtZDBhQ2s3WEc0Z0lDQWdmVHRjYmlBZ0lDQXZLbHhjWEc0Z0lDQWdJQ29nUld4bGJXVnVkQzVuWlhSUVlYUm9YRzRnSUNBZ0lGc2diV1YwYUc5a0lGMWNiaUFnSUNBZ0tpcGNiaUFnSUNBZ0tpQlNaWFIxY201eklIQmhkR2dnYjJZZ2RHaGxJR1ZzWlcxbGJuUXVJRTl1YkhrZ2QyOXlhM01nWm05eUlHVnNaVzFsYm5SeklHOW1JT0tBbkhCaGRHamlnSjBnZEhsd1pTQmhibVFnYzJsdGNHeGxJR1ZzWlcxbGJuUnpJR3hwYTJVZ1kybHlZMnhsTGx4dUlDQWdJQ0E5SUNodlltcGxZM1FwSUhCaGRHaGNiaUFnSUNBZ0tpcGNiaUFnSUNCY1hDb3ZYRzRnSUNBZ1pXeHdjbTkwYnk1blpYUlFZWFJvSUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2NHRjBhQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHZGxkRkJoZEdnZ1BTQlNMbDluWlhSUVlYUm9XM1JvYVhNdWRIbHdaVjA3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWRIbHdaU0E5UFNCY0luUmxlSFJjSWlCOGZDQjBhR2x6TG5SNWNHVWdQVDBnWENKelpYUmNJaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tHZGxkRkJoZEdncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhCaGRHZ2dQU0JuWlhSUVlYUm9LSFJvYVhNcE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSEJoZEdnN1hHNGdJQ0FnZlR0Y2JpQWdJQ0F2S2x4Y1hHNGdJQ0FnSUNvZ1JXeGxiV1Z1ZEM1blpYUlRkV0p3WVhSb1hHNGdJQ0FnSUZzZ2JXVjBhRzlrSUYxY2JpQWdJQ0FnS2lwY2JpQWdJQ0FnS2lCU1pYUjFjbTRnYzNWaWNHRjBhQ0J2WmlCaElHZHBkbVZ1SUdWc1pXMWxiblFnWm5KdmJTQm5hWFpsYmlCc1pXNW5kR2dnZEc4Z1oybDJaVzRnYkdWdVozUm9MaUJQYm14NUlIZHZjbXR6SUdadmNpQmxiR1Z0Wlc1MElHOW1JT0tBbkhCaGRHamlnSjBnZEhsd1pTNWNiaUFnSUNBZ0tpcGNiaUFnSUNBZ1BpQlFZWEpoYldWMFpYSnpYRzRnSUNBZ0lDb3FYRzRnSUNBZ0lDMGdabkp2YlNBb2JuVnRZbVZ5S1NCd2IzTnBkR2x2YmlCdlppQjBhR1VnYzNSaGNuUWdiMllnZEdobElITmxaMjFsYm5SY2JpQWdJQ0FnTFNCMGJ5QW9iblZ0WW1WeUtTQndiM05wZEdsdmJpQnZaaUIwYUdVZ1pXNWtJRzltSUhSb1pTQnpaV2R0Wlc1MFhHNGdJQ0FnSUNvcVhHNGdJQ0FnSUQwZ0tITjBjbWx1WnlrZ2NHRjBhSE4wY21sdVp5Qm1iM0lnZEdobElITmxaMjFsYm5SY2JpQWdJQ0JjWENvdlhHNGdJQ0FnWld4d2NtOTBieTVuWlhSVGRXSndZWFJvSUQwZ1puVnVZM1JwYjI0Z0tHWnliMjBzSUhSdktTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCd1lYUm9JRDBnZEdocGN5NW5aWFJRWVhSb0tDazdYRzRnSUNBZ0lDQWdJR2xtSUNnaGNHRjBhQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRkl1WjJWMFUzVmljR0YwYUNod1lYUm9MQ0JtY205dExDQjBieWs3WEc0Z0lDQWdmVHRjYmlBZ0lDQXZLbHhjWEc0Z0lDQWdJQ29nVW1Gd2FHRmxiQzVsWVhOcGJtZGZabTl5YlhWc1lYTmNiaUFnSUNBZ1d5QndjbTl3WlhKMGVTQmRYRzRnSUNBZ0lDb3FYRzRnSUNBZ0lDb2dUMkpxWldOMElIUm9ZWFFnWTI5dWRHRnBibk1nWldGemFXNW5JR1p2Y20xMWJHRnpJR1p2Y2lCaGJtbHRZWFJwYjI0dUlGbHZkU0JqYjNWc1pDQmxlSFJsYm1RZ2FYUWdkMmwwYUNCNWIzVnlJRzkzYmk0Z1Fua2daR1ZtWVhWc2RDQnBkQ0JvWVhNZ1ptOXNiRzkzYVc1bklHeHBjM1FnYjJZZ1pXRnphVzVuT2x4dUlDQWdJQ0FqSUR4MWJENWNiaUFnSUNBZ0l5QWdJQ0FnUEd4cFB1S0FuR3hwYm1WaGN1S0FuVHd2YkdrK1hHNGdJQ0FnSUNNZ0lDQWdJRHhzYVQ3aWdKd21iSFE3NG9DZElHOXlJT0tBbkdWaGMyVkpidUtBblNCdmNpRGlnSnhsWVhObExXbHU0b0NkUEM5c2FUNWNiaUFnSUNBZ0l5QWdJQ0FnUEd4cFB1S0FuRDdpZ0owZ2IzSWc0b0NjWldGelpVOTFkT0tBblNCdmNpRGlnSnhsWVhObExXOTFkT0tBblR3dmJHaytYRzRnSUNBZ0lDTWdJQ0FnSUR4c2FUN2lnSndtYkhRN1B1S0FuU0J2Y2lEaWdKeGxZWE5sU1c1UGRYVGlnSjBnYjNJZzRvQ2NaV0Z6WlMxcGJpMXZkWFRpZ0owOEwyeHBQbHh1SUNBZ0lDQWpJQ0FnSUNBOGJHays0b0NjWW1GamEwbHU0b0NkSUc5eUlPS0FuR0poWTJzdGFXN2lnSjA4TDJ4cFBseHVJQ0FnSUNBaklDQWdJQ0E4YkdrKzRvQ2NZbUZqYTA5MWRPS0FuU0J2Y2lEaWdKeGlZV05yTFc5MWRPS0FuVHd2YkdrK1hHNGdJQ0FnSUNNZ0lDQWdJRHhzYVQ3aWdKeGxiR0Z6ZEdsajRvQ2RQQzlzYVQ1Y2JpQWdJQ0FnSXlBZ0lDQWdQR3hwUHVLQW5HSnZkVzVqWmVLQW5Ud3ZiR2srWEc0Z0lDQWdJQ01nUEM5MWJENWNiaUFnSUNBZ0l5QThjRDVUWldVZ1lXeHpieUE4WVNCb2NtVm1QVndpYUhSMGNEb3ZMM0poY0doaFpXeHFjeTVqYjIwdlpXRnphVzVuTG1oMGJXeGNJajVGWVhOcGJtY2daR1Z0Ynp3dllUNHVQQzl3UGx4dUlDQWdJRnhjS2k5Y2JpQWdJQ0IyWVhJZ1pXWWdQU0JTTG1WaGMybHVaMTltYjNKdGRXeGhjeUE5SUh0Y2JpQWdJQ0FnSUNBZ2JHbHVaV0Z5T2lCbWRXNWpkR2x2YmlBb2Jpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUc0N1hHNGdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJRndpUEZ3aU9pQm1kVzVqZEdsdmJpQW9iaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIQnZkeWh1TENBeExqY3BPMXh1SUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNCY0lqNWNJam9nWm5WdVkzUnBiMjRnS0c0cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ3YjNjb2Jpd2dMalE0S1R0Y2JpQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdYQ0k4UGx3aU9pQm1kVzVqZEdsdmJpQW9iaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhFZ1BTQXVORGdnTFNCdUlDOGdNUzR3TkN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCUklEMGdiV0YwYUM1emNYSjBLQzR4TnpNMElDc2djU0FxSUhFcExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZ2dQU0JSSUMwZ2NTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQllJRDBnY0c5M0tHRmljeWg0S1N3Z01TQXZJRE1wSUNvZ0tIZ2dQQ0F3SUQ4Z0xURWdPaUF4S1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCNUlEMGdMVkVnTFNCeExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGa2dQU0J3YjNjb1lXSnpLSGtwTENBeElDOGdNeWtnS2lBb2VTQThJREFnUHlBdE1TQTZJREVwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhRZ1BTQllJQ3NnV1NBcklDNDFPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUNneElDMGdkQ2tnS2lBeklDb2dkQ0FxSUhRZ0t5QjBJQ29nZENBcUlIUTdYRzRnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUdKaFkydEpiam9nWm5WdVkzUnBiMjRnS0c0cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQnpJRDBnTVM0M01ERTFPRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCdUlDb2diaUFxSUNnb2N5QXJJREVwSUNvZ2JpQXRJSE1wTzF4dUlDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQmlZV05yVDNWME9pQm1kVzVqZEdsdmJpQW9iaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdiaUE5SUc0Z0xTQXhPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSE1nUFNBeExqY3dNVFU0TzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHNGdLaUJ1SUNvZ0tDaHpJQ3NnTVNrZ0tpQnVJQ3NnY3lrZ0t5QXhPMXh1SUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNCbGJHRnpkR2xqT2lCbWRXNWpkR2x2YmlBb2Jpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRzRnUFQwZ0lTRnVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRzQ3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnY0c5M0tESXNJQzB4TUNBcUlHNHBJQ29nYldGMGFDNXphVzRvS0c0Z0xTQXVNRGMxS1NBcUlDZ3lJQ29nVUVrcElDOGdMak1wSUNzZ01UdGNiaUFnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnWW05MWJtTmxPaUJtZFc1amRHbHZiaUFvYmlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlITWdQU0EzTGpVMk1qVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjQ0E5SURJdU56VXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h1SUR3Z0tERWdMeUJ3S1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHd2dQU0J6SUNvZ2JpQXFJRzQ3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h1SUR3Z0tESWdMeUJ3S1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J1SUMwOUlDZ3hMalVnTHlCd0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkNBOUlITWdLaUJ1SUNvZ2JpQXJJQzQzTlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYmlBOElDZ3lMalVnTHlCd0tTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiaUF0UFNBb01pNHlOU0F2SUhBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JDQTlJSE1nS2lCdUlDb2diaUFySUM0NU16YzFPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYmlBdFBTQW9NaTQyTWpVZ0x5QndLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3dnUFNCeklDb2diaUFxSUc0Z0t5QXVPVGcwTXpjMU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUd3N1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOU8xeHVJQ0FnSUdWbUxtVmhjMlZKYmlBOUlHVm1XMXdpWldGelpTMXBibHdpWFNBOUlHVm1XMXdpUEZ3aVhUdGNiaUFnSUNCbFppNWxZWE5sVDNWMElEMGdaV1piWENKbFlYTmxMVzkxZEZ3aVhTQTlJR1ZtVzF3aVBsd2lYVHRjYmlBZ0lDQmxaaTVsWVhObFNXNVBkWFFnUFNCbFpsdGNJbVZoYzJVdGFXNHRiM1YwWENKZElEMGdaV1piWENJOFBsd2lYVHRjYmlBZ0lDQmxabHRjSW1KaFkyc3RhVzVjSWwwZ1BTQmxaaTVpWVdOclNXNDdYRzRnSUNBZ1pXWmJYQ0ppWVdOckxXOTFkRndpWFNBOUlHVm1MbUpoWTJ0UGRYUTdYRzVjYmlBZ0lDQjJZWElnWVc1cGJXRjBhVzl1Uld4bGJXVnVkSE1nUFNCYlhTeGNiaUFnSUNBZ0lDQWdjbVZ4ZFdWemRFRnVhVzFHY21GdFpTQTlJSGRwYm1SdmR5NXlaWEYxWlhOMFFXNXBiV0YwYVc5dVJuSmhiV1VnSUNBZ0lDQWdmSHhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhkcGJtUnZkeTUzWldKcmFYUlNaWEYxWlhOMFFXNXBiV0YwYVc5dVJuSmhiV1VnZkh4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZHBibVJ2ZHk1dGIzcFNaWEYxWlhOMFFXNXBiV0YwYVc5dVJuSmhiV1VnSUNBZ2ZIeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGRwYm1SdmR5NXZVbVZ4ZFdWemRFRnVhVzFoZEdsdmJrWnlZVzFsSUNBZ0lDQWdmSHhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhkcGJtUnZkeTV0YzFKbGNYVmxjM1JCYm1sdFlYUnBiMjVHY21GdFpTQWdJQ0FnZkh4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWjFibU4wYVc5dUlDaGpZV3hzWW1GamF5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmxkRlJwYldWdmRYUW9ZMkZzYkdKaFkyc3NJREUyS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJR0Z1YVcxaGRHbHZiaUE5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQk9iM2NnUFNBcmJtVjNJRVJoZEdVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JDQTlJREE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0RzZ2JDQThJR0Z1YVcxaGRHbHZia1ZzWlcxbGJuUnpMbXhsYm1kMGFEc2diQ3NyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR1VnUFNCaGJtbHRZWFJwYjI1RmJHVnRaVzUwYzF0c1hUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWlM1bGJDNXlaVzF2ZG1Wa0lIeDhJR1V1Y0dGMWMyVmtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZiblJwYm5WbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnZEdsdFpTQTlJRTV2ZHlBdElHVXVjM1JoY25Rc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzF6SUQwZ1pTNXRjeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXRnphVzVuSUQwZ1pTNWxZWE5wYm1jc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p5YjIwZ1BTQmxMbVp5YjIwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JwWm1ZZ1BTQmxMbVJwWm1Zc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJ2SUQwZ1pTNTBieXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RDQTlJR1V1ZEN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hoZENBOUlHVXVaV3dzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmxkQ0E5SUh0OUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J1YjNjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2x1YVhRZ1BTQjdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2EyVjVPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNobExtbHVhWFJ6ZEdGMGRYTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHbHRaU0E5SUNobExtbHVhWFJ6ZEdGMGRYTWdLaUJsTG1GdWFXMHVkRzl3SUMwZ1pTNXdjbVYyS1NBdklDaGxMbkJsY21ObGJuUWdMU0JsTG5CeVpYWXBJQ29nYlhNN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1V1YzNSaGRIVnpJRDBnWlM1cGJtbDBjM1JoZEhWek8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWld4bGRHVWdaUzVwYm1sMGMzUmhkSFZ6TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxMbk4wYjNBZ0ppWWdZVzVwYldGMGFXOXVSV3hsYldWdWRITXVjM0JzYVdObEtHd3RMU3dnTVNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaUzV6ZEdGMGRYTWdQU0FvWlM1d2NtVjJJQ3NnS0dVdWNHVnlZMlZ1ZENBdElHVXVjSEpsZGlrZ0tpQW9kR2x0WlNBdklHMXpLU2tnTHlCbExtRnVhVzB1ZEc5d08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEdsdFpTQThJREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1ZEdsdWRXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGFXMWxJRHdnYlhNcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIQnZjeUE5SUdWaGMybHVaeWgwYVcxbElDOGdiWE1wTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQmhkSFJ5SUdsdUlHWnliMjBwSUdsbUlDaG1jbTl0VzJoaGMxMG9ZWFIwY2lrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITjNhWFJqYUNBb1lYWmhhV3hoWW14bFFXNXBiVUYwZEhKelcyRjBkSEpkS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCdWRUcGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JtOTNJRDBnSzJaeWIyMWJZWFIwY2wwZ0t5QndiM01nS2lCdGN5QXFJR1JwWm1aYllYUjBjbDA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1hDSmpiMnh2ZFhKY0lqcGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JtOTNJRDBnWENKeVoySW9YQ0lnS3lCYlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjFjSFJ2TWpVMUtISnZkVzVrS0daeWIyMWJZWFIwY2wwdWNpQXJJSEJ2Y3lBcUlHMXpJQ29nWkdsbVpsdGhkSFJ5WFM1eUtTa3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IxY0hSdk1qVTFLSEp2ZFc1a0tHWnliMjFiWVhSMGNsMHVaeUFySUhCdmN5QXFJRzF6SUNvZ1pHbG1abHRoZEhSeVhTNW5LU2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMWNIUnZNalUxS0hKdmRXNWtLR1p5YjIxYllYUjBjbDB1WWlBcklIQnZjeUFxSUcxeklDb2daR2xtWmx0aGRIUnlYUzVpS1NsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWFM1cWIybHVLRndpTEZ3aUtTQXJJRndpS1Z3aU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRndpY0dGMGFGd2lPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnViM2NnUFNCYlhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREFzSUdscElEMGdabkp2YlZ0aGRIUnlYUzVzWlc1bmRHZzdJR2tnUENCcGFUc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnViM2RiYVYwZ1BTQmJabkp2YlZ0aGRIUnlYVnRwWFZzd1hWMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJxSUQwZ01Td2dhbW9nUFNCbWNtOXRXMkYwZEhKZFcybGRMbXhsYm1kMGFEc2dhaUE4SUdwcU95QnFLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J1YjNkYmFWMWJhbDBnUFNBclpuSnZiVnRoZEhSeVhWdHBYVnRxWFNBcklIQnZjeUFxSUcxeklDb2daR2xtWmx0aGRIUnlYVnRwWFZ0cVhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc1dmQxdHBYU0E5SUc1dmQxdHBYUzVxYjJsdUtGTXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHNXZkeUE5SUc1dmR5NXFiMmx1S0ZNcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRndpZEhKaGJuTm1iM0p0WENJNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaGthV1ptVzJGMGRISmRMbkpsWVd3cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzV2ZHlBOUlGdGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUlDaHBJRDBnTUN3Z2FXa2dQU0JtY205dFcyRjBkSEpkTG14bGJtZDBhRHNnYVNBOElHbHBPeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdWIzZGJhVjBnUFNCYlpuSnZiVnRoZEhSeVhWdHBYVnN3WFYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUlDaHFJRDBnTVN3Z2Ftb2dQU0JtY205dFcyRjBkSEpkVzJsZExteGxibWQwYURzZ2FpQThJR3BxT3lCcUt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYm05M1cybGRXMnBkSUQwZ1puSnZiVnRoZEhSeVhWdHBYVnRxWFNBcklIQnZjeUFxSUcxeklDb2daR2xtWmx0aGRIUnlYVnRwWFZ0cVhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnWjJWMElEMGdablZ1WTNScGIyNGdLR2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdLMlp5YjIxYllYUjBjbDFiYVYwZ0t5QndiM01nS2lCdGN5QXFJR1JwWm1aYllYUjBjbDFiYVYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2JtOTNJRDBnVzF0Y0luSmNJaXdnWjJWMEtESXBMQ0F3TENBd1hTd2dXMXdpZEZ3aUxDQm5aWFFvTXlrc0lHZGxkQ2cwS1Ywc0lGdGNJbk5jSWl3Z1oyVjBLREFwTENCblpYUW9NU2tzSURBc0lEQmRYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc1dmR5QTlJRnRiWENKdFhDSXNJR2RsZENnd0tTd2daMlYwS0RFcExDQm5aWFFvTWlrc0lHZGxkQ2d6S1N3Z1oyVjBLRFFwTENCblpYUW9OU2xkWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElGd2lZM04yWENJNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaGhkSFJ5SUQwOUlGd2lZMnhwY0MxeVpXTjBYQ0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHNXZkeUE5SUZ0ZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhU0E5SURRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjNhR2xzWlNBb2FTMHRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdibTkzVzJsZElEMGdLMlp5YjIxYllYUjBjbDFiYVYwZ0t5QndiM01nS2lCdGN5QXFJR1JwWm1aYllYUjBjbDFiYVYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHVm1ZWFZzZERwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHWnliMjB5SUQwZ1cxMWJZMjl1WTJGMFhTaG1jbTl0VzJGMGRISmRLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdibTkzSUQwZ1cxMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHa2dQU0IwYUdGMExuQmhjR1Z5TG1OMWMzUnZiVUYwZEhKcFluVjBaWE5iWVhSMGNsMHViR1Z1WjNSb08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCM2FHbHNaU0FvYVMwdEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J1YjNkYmFWMGdQU0FyWm5KdmJUSmJhVjBnS3lCd2IzTWdLaUJ0Y3lBcUlHUnBabVpiWVhSMGNsMWJhVjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelpYUmJZWFIwY2wwZ1BTQnViM2M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdoaGRDNWhkSFJ5S0hObGRDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNobWRXNWpkR2x2YmlBb2FXUXNJSFJvWVhRc0lHRnVhVzBwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhObGRGUnBiV1Z2ZFhRb1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWMlpTaGNJbkpoY0doaFpXd3VZVzVwYlM1bWNtRnRaUzVjSWlBcklHbGtMQ0IwYUdGMExDQmhibWx0S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1NoMGFHRjBMbWxrTENCMGFHRjBMQ0JsTG1GdWFXMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNobWRXNWpkR2x2YmlobUxDQmxiQ3dnWVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyVjBWR2x0Wlc5MWRDaG1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGRtVW9YQ0p5WVhCb1lXVnNMbUZ1YVcwdVpuSmhiV1V1WENJZ0t5QmxiQzVwWkN3Z1pXd3NJR0VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVjJaU2hjSW5KaGNHaGhaV3d1WVc1cGJTNW1hVzVwYzJndVhDSWdLeUJsYkM1cFpDd2daV3dzSUdFcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRkl1YVhNb1ppd2dYQ0ptZFc1amRHbHZibHdpS1NBbUppQm1MbU5oYkd3b1pXd3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBLR1V1WTJGc2JHSmhZMnNzSUhSb1lYUXNJR1V1WVc1cGJTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb1lYUXVZWFIwY2loMGJ5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdGdWFXMWhkR2x2YmtWc1pXMWxiblJ6TG5Od2JHbGpaU2hzTFMwc0lERXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9aUzV5WlhCbFlYUWdQaUF4SUNZbUlDRmxMbTVsZUhRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUFvYTJWNUlHbHVJSFJ2S1NCcFppQW9kRzliYUdGelhTaHJaWGtwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhVzVwZEZ0clpYbGRJRDBnWlM1MGIzUmhiRTl5YVdkcGJsdHJaWGxkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWlM1bGJDNWhkSFJ5S0dsdWFYUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjblZ1UVc1cGJXRjBhVzl1S0dVdVlXNXBiU3dnWlM1bGJDd2daUzVoYm1sdExuQmxjbU5sYm5Seld6QmRMQ0J1ZFd4c0xDQmxMblJ2ZEdGc1QzSnBaMmx1TENCbExuSmxjR1ZoZENBdElERXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNobExtNWxlSFFnSmlZZ0lXVXVjM1J2Y0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NuVnVRVzVwYldGMGFXOXVLR1V1WVc1cGJTd2daUzVsYkN3Z1pTNXVaWGgwTENCdWRXeHNMQ0JsTG5SdmRHRnNUM0pwWjJsdUxDQmxMbkpsY0dWaGRDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmhibWx0WVhScGIyNUZiR1Z0Wlc1MGN5NXNaVzVuZEdnZ0ppWWdjbVZ4ZFdWemRFRnVhVzFHY21GdFpTaGhibWx0WVhScGIyNHBPMXh1SUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNCMWNIUnZNalUxSUQwZ1puVnVZM1JwYjI0Z0tHTnZiRzl5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdZMjlzYjNJZ1BpQXlOVFVnUHlBeU5UVWdPaUJqYjJ4dmNpQThJREFnUHlBd0lEb2dZMjlzYjNJN1hHNGdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ0x5cGNYRnh1SUNBZ0lDQXFJRVZzWlcxbGJuUXVZVzVwYldGMFpWZHBkR2hjYmlBZ0lDQWdXeUJ0WlhSb2IyUWdYVnh1SUNBZ0lDQXFLbHh1SUNBZ0lDQXFJRUZqZEhNZ2MybHRhV3hoY2lCMGJ5QkFSV3hsYldWdWRDNWhibWx0WVhSbExDQmlkWFFnWlc1emRYSmxJSFJvWVhRZ1oybDJaVzRnWVc1cGJXRjBhVzl1SUhKMWJuTWdhVzRnYzNsdVl5QjNhWFJvSUdGdWIzUm9aWElnWjJsMlpXNGdaV3hsYldWdWRDNWNiaUFnSUNBZ0tpcGNiaUFnSUNBZ1BpQlFZWEpoYldWMFpYSnpYRzRnSUNBZ0lDb3FYRzRnSUNBZ0lDMGdaV3dnS0c5aWFtVmpkQ2tnWld4bGJXVnVkQ0IwYnlCemVXNWpJSGRwZEdoY2JpQWdJQ0FnTFNCaGJtbHRJQ2h2WW1wbFkzUXBJR0Z1YVcxaGRHbHZiaUIwYnlCemVXNWpJSGRwZEdoY2JpQWdJQ0FnTFNCd1lYSmhiWE1nS0c5aWFtVmpkQ2tnSTI5d2RHbHZibUZzSUdacGJtRnNJR0YwZEhKcFluVjBaWE1nWm05eUlIUm9aU0JsYkdWdFpXNTBMQ0J6WldVZ1lXeHpieUJBUld4bGJXVnVkQzVoZEhSeVhHNGdJQ0FnSUMwZ2JYTWdLRzUxYldKbGNpa2dJMjl3ZEdsdmJtRnNJRzUxYldKbGNpQnZaaUJ0YVd4c2FYTmxZMjl1WkhNZ1ptOXlJR0Z1YVcxaGRHbHZiaUIwYnlCeWRXNWNiaUFnSUNBZ0xTQmxZWE5wYm1jZ0tITjBjbWx1WnlrZ0kyOXdkR2x2Ym1Gc0lHVmhjMmx1WnlCMGVYQmxMaUJCWTJObGNIUWdiMjRnYjJZZ1FGSmhjR2hoWld3dVpXRnphVzVuWDJadmNtMTFiR0Z6SUc5eUlFTlRVeUJtYjNKdFlYUTZJR0JqZFdKcFl5WWplREl3TVRBN1ltVjZhV1Z5S0ZoWUxDWWpNVFl3TzFoWUxDWWpNVFl3TzFoWUxDWWpNVFl3TzFoWUtXQmNiaUFnSUNBZ0xTQmpZV3hzWW1GamF5QW9ablZ1WTNScGIyNHBJQ052Y0hScGIyNWhiQ0JqWVd4c1ltRmpheUJtZFc1amRHbHZiaTRnVjJsc2JDQmlaU0JqWVd4c1pXUWdZWFFnZEdobElHVnVaQ0J2WmlCaGJtbHRZWFJwYjI0dVhHNGdJQ0FnSUNvZ2IzSmNiaUFnSUNBZ0xTQmxiR1Z0Wlc1MElDaHZZbXBsWTNRcElHVnNaVzFsYm5RZ2RHOGdjM2x1WXlCM2FYUm9YRzRnSUNBZ0lDMGdZVzVwYlNBb2IySnFaV04wS1NCaGJtbHRZWFJwYjI0Z2RHOGdjM2x1WXlCM2FYUm9YRzRnSUNBZ0lDMGdZVzVwYldGMGFXOXVJQ2h2WW1wbFkzUXBJQ052Y0hScGIyNWhiQ0JoYm1sdFlYUnBiMjRnYjJKcVpXTjBMQ0J6WldVZ1FGSmhjR2hoWld3dVlXNXBiV0YwYVc5dVhHNGdJQ0FnSUNvcVhHNGdJQ0FnSUQwZ0tHOWlhbVZqZENrZ2IzSnBaMmx1WVd3Z1pXeGxiV1Z1ZEZ4dUlDQWdJRnhjS2k5Y2JpQWdJQ0JsYkhCeWIzUnZMbUZ1YVcxaGRHVlhhWFJvSUQwZ1puVnVZM1JwYjI0Z0tHVnNMQ0JoYm1sdExDQndZWEpoYlhNc0lHMXpMQ0JsWVhOcGJtY3NJR05oYkd4aVlXTnJLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQmxiR1Z0Wlc1MElEMGdkR2hwY3p0Y2JpQWdJQ0FnSUNBZ2FXWWdLR1ZzWlcxbGJuUXVjbVZ0YjNabFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRnNiR0poWTJzZ0ppWWdZMkZzYkdKaFkyc3VZMkZzYkNobGJHVnRaVzUwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmxiR1Z0Wlc1ME8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSFpoY2lCaElEMGdjR0Z5WVcxeklHbHVjM1JoYm1ObGIyWWdRVzVwYldGMGFXOXVJRDhnY0dGeVlXMXpJRG9nVWk1aGJtbHRZWFJwYjI0b2NHRnlZVzF6TENCdGN5d2daV0Z6YVc1bkxDQmpZV3hzWW1GamF5a3NYRzRnSUNBZ0lDQWdJQ0FnSUNCNExDQjVPMXh1SUNBZ0lDQWdJQ0J5ZFc1QmJtbHRZWFJwYjI0b1lTd2daV3hsYldWdWRDd2dZUzV3WlhKalpXNTBjMXN3WFN3Z2JuVnNiQ3dnWld4bGJXVnVkQzVoZEhSeUtDa3BPMXh1SUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Dd2dhV2tnUFNCaGJtbHRZWFJwYjI1RmJHVnRaVzUwY3k1c1pXNW5kR2c3SUdrZ1BDQnBhVHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ZVzVwYldGMGFXOXVSV3hsYldWdWRITmJhVjB1WVc1cGJTQTlQU0JoYm1sdElDWW1JR0Z1YVcxaGRHbHZia1ZzWlcxbGJuUnpXMmxkTG1Wc0lEMDlJR1ZzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lXNXBiV0YwYVc5dVJXeGxiV1Z1ZEhOYmFXa2dMU0F4WFM1emRHRnlkQ0E5SUdGdWFXMWhkR2x2YmtWc1pXMWxiblJ6VzJsZExuTjBZWEowTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmxiR1Z0Wlc1ME8xeHVJQ0FnSUNBZ0lDQXZMMXh1SUNBZ0lDQWdJQ0F2TDF4dUlDQWdJQ0FnSUNBdkx5QjJZWElnWVNBOUlIQmhjbUZ0Y3lBL0lGSXVZVzVwYldGMGFXOXVLSEJoY21GdGN5d2diWE1zSUdWaGMybHVaeXdnWTJGc2JHSmhZMnNwSURvZ1lXNXBiU3hjYmlBZ0lDQWdJQ0FnTHk4Z0lDQWdJSE4wWVhSMWN5QTlJR1ZzWlcxbGJuUXVjM1JoZEhWektHRnVhVzBwTzF4dUlDQWdJQ0FnSUNBdkx5QnlaWFIxY200Z2RHaHBjeTVoYm1sdFlYUmxLR0VwTG5OMFlYUjFjeWhoTENCemRHRjBkWE1nS2lCaGJtbHRMbTF6SUM4Z1lTNXRjeWs3WEc0Z0lDQWdmVHRjYmlBZ0lDQm1kVzVqZEdsdmJpQkRkV0pwWTBKbGVtbGxja0YwVkdsdFpTaDBMQ0J3TVhnc0lIQXhlU3dnY0RKNExDQndNbmtzSUdSMWNtRjBhVzl1S1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJqZUNBOUlETWdLaUJ3TVhnc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JpZUNBOUlETWdLaUFvY0RKNElDMGdjREY0S1NBdElHTjRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1lYZ2dQU0F4SUMwZ1kzZ2dMU0JpZUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR041SUQwZ015QXFJSEF4ZVN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR0o1SUQwZ015QXFJQ2h3TW5rZ0xTQndNWGtwSUMwZ1kza3NYRzRnSUNBZ0lDQWdJQ0FnSUNCaGVTQTlJREVnTFNCamVTQXRJR0o1TzF4dUlDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCellXMXdiR1ZEZFhKMlpWZ29kQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlDZ29ZWGdnS2lCMElDc2dZbmdwSUNvZ2RDQXJJR040S1NBcUlIUTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnYzI5c2RtVW9lQ3dnWlhCemFXeHZiaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhRZ1BTQnpiMngyWlVOMWNuWmxXQ2g0TENCbGNITnBiRzl1S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQW9LR0Y1SUNvZ2RDQXJJR0o1S1NBcUlIUWdLeUJqZVNrZ0tpQjBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUhOdmJIWmxRM1Z5ZG1WWUtIZ3NJR1Z3YzJsc2IyNHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUIwTUN3Z2RERXNJSFF5TENCNE1pd2daRElzSUdrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2RESWdQU0I0TENCcElEMGdNRHNnYVNBOElEZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZ3lJRDBnYzJGdGNHeGxRM1Z5ZG1WWUtIUXlLU0F0SUhnN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR0ZpY3loNE1pa2dQQ0JsY0hOcGJHOXVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCME1qdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaRElnUFNBb015QXFJR0Y0SUNvZ2RESWdLeUF5SUNvZ1luZ3BJQ29nZERJZ0t5QmplRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1lXSnpLR1F5S1NBOElERmxMVFlwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUXlJRDBnZERJZ0xTQjRNaUF2SUdReU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdkREFnUFNBd08xeHVJQ0FnSUNBZ0lDQWdJQ0FnZERFZ1BTQXhPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RESWdQU0I0TzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hReUlEd2dkREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZERBN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZERJZ1BpQjBNU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwTVR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIZG9hV3hsSUNoME1DQThJSFF4S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2VESWdQU0J6WVcxd2JHVkRkWEoyWlZnb2RESXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoaFluTW9lRElnTFNCNEtTQThJR1Z3YzJsc2IyNHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhReU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZUNBK0lIZ3lLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUXdJRDBnZERJN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkREVnUFNCME1qdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkRElnUFNBb2RERWdMU0IwTUNrZ0x5QXlJQ3NnZERBN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RESTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSE52YkhabEtIUXNJREVnTHlBb01qQXdJQ29nWkhWeVlYUnBiMjRwS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdaV3h3Y205MGJ5NXZia0Z1YVcxaGRHbHZiaUE5SUdaMWJtTjBhVzl1SUNobUtTQjdYRzRnSUNBZ0lDQWdJR1lnUHlCbGRtVXViMjRvWENKeVlYQm9ZV1ZzTG1GdWFXMHVabkpoYldVdVhDSWdLeUIwYUdsekxtbGtMQ0JtS1NBNklHVjJaUzUxYm1KcGJtUW9YQ0p5WVhCb1lXVnNMbUZ1YVcwdVpuSmhiV1V1WENJZ0t5QjBhR2x6TG1sa0tUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03WEc0Z0lDQWdmVHRjYmlBZ0lDQm1kVzVqZEdsdmJpQkJibWx0WVhScGIyNG9ZVzVwYlN3Z2JYTXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlIQmxjbU5sYm5SeklEMGdXMTBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnVaWGRCYm1sdElEMGdlMzA3WEc0Z0lDQWdJQ0FnSUhSb2FYTXViWE1nUFNCdGN6dGNiaUFnSUNBZ0lDQWdkR2hwY3k1MGFXMWxjeUE5SURFN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hoYm1sdEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCaGRIUnlJR2x1SUdGdWFXMHBJR2xtSUNoaGJtbHRXMmhoYzEwb1lYUjBjaWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdVpYZEJibWx0VzNSdlJteHZZWFFvWVhSMGNpbGRJRDBnWVc1cGJWdGhkSFJ5WFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd1pYSmpaVzUwY3k1d2RYTm9LSFJ2Um14dllYUW9ZWFIwY2lrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdjR1Z5WTJWdWRITXVjMjl5ZENoemIzSjBRbmxPZFcxaVpYSXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZVzVwYlNBOUlHNWxkMEZ1YVcwN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZEc5d0lEMGdjR1Z5WTJWdWRITmJjR1Z5WTJWdWRITXViR1Z1WjNSb0lDMGdNVjA3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjR1Z5WTJWdWRITWdQU0J3WlhKalpXNTBjenRjYmlBZ0lDQjlYRzRnSUNBZ0x5cGNYRnh1SUNBZ0lDQXFJRUZ1YVcxaGRHbHZiaTVrWld4aGVWeHVJQ0FnSUNCYklHMWxkR2h2WkNCZFhHNGdJQ0FnSUNvcVhHNGdJQ0FnSUNvZ1EzSmxZWFJsY3lCaElHTnZjSGtnYjJZZ1pYaHBjM1JwYm1jZ1lXNXBiV0YwYVc5dUlHOWlhbVZqZENCM2FYUm9JR2RwZG1WdUlHUmxiR0Y1TGx4dUlDQWdJQ0FxS2x4dUlDQWdJQ0ErSUZCaGNtRnRaWFJsY25OY2JpQWdJQ0FnS2lwY2JpQWdJQ0FnTFNCa1pXeGhlU0FvYm5WdFltVnlLU0J1ZFcxaVpYSWdiMllnYlhNZ2RHOGdjR0Z6Y3lCaVpYUjNaV1Z1SUdGdWFXMWhkR2x2YmlCemRHRnlkQ0JoYm1RZ1lXTjBkV0ZzSUdGdWFXMWhkR2x2Ymx4dUlDQWdJQ0FxS2x4dUlDQWdJQ0E5SUNodlltcGxZM1FwSUc1bGR5QmhiSFJsY21Wa0lFRnVhVzFoZEdsdmJpQnZZbXBsWTNSY2JpQWdJQ0FnZkNCMllYSWdZVzVwYlNBOUlGSmhjR2hoWld3dVlXNXBiV0YwYVc5dUtIdGplRG9nTVRBc0lHTjVPaUF5TUgwc0lESmxNeWs3WEc0Z0lDQWdJSHdnWTJseVkyeGxNUzVoYm1sdFlYUmxLR0Z1YVcwcE95QXZMeUJ5ZFc0Z2RHaGxJR2RwZG1WdUlHRnVhVzFoZEdsdmJpQnBiVzFsWkdsaGRHVnNlVnh1SUNBZ0lDQjhJR05wY21Oc1pUSXVZVzVwYldGMFpTaGhibWx0TG1SbGJHRjVLRFV3TUNrcE95QXZMeUJ5ZFc0Z2RHaGxJR2RwZG1WdUlHRnVhVzFoZEdsdmJpQmhablJsY2lBMU1EQWdiWE5jYmlBZ0lDQmNYQ292WEc0Z0lDQWdRVzVwYldGMGFXOXVMbkJ5YjNSdmRIbHdaUzVrWld4aGVTQTlJR1oxYm1OMGFXOXVJQ2hrWld4aGVTa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ1lTQTlJRzVsZHlCQmJtbHRZWFJwYjI0b2RHaHBjeTVoYm1sdExDQjBhR2x6TG0xektUdGNiaUFnSUNBZ0lDQWdZUzUwYVcxbGN5QTlJSFJvYVhNdWRHbHRaWE03WEc0Z0lDQWdJQ0FnSUdFdVpHVnNJRDBnSzJSbGJHRjVJSHg4SURBN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCaE8xeHVJQ0FnSUgwN1hHNGdJQ0FnTHlwY1hGeHVJQ0FnSUNBcUlFRnVhVzFoZEdsdmJpNXlaWEJsWVhSY2JpQWdJQ0FnV3lCdFpYUm9iMlFnWFZ4dUlDQWdJQ0FxS2x4dUlDQWdJQ0FxSUVOeVpXRjBaWE1nWVNCamIzQjVJRzltSUdWNGFYTjBhVzVuSUdGdWFXMWhkR2x2YmlCdlltcGxZM1FnZDJsMGFDQm5hWFpsYmlCeVpYQmxkR2wwYVc5dUxseHVJQ0FnSUNBcUtseHVJQ0FnSUNBK0lGQmhjbUZ0WlhSbGNuTmNiaUFnSUNBZ0tpcGNiaUFnSUNBZ0xTQnlaWEJsWVhRZ0tHNTFiV0psY2lrZ2JuVnRZbVZ5SUdsMFpYSmhkR2x2Ym5NZ2IyWWdZVzVwYldGMGFXOXVMaUJHYjNJZ2FXNW1hVzVwZEdVZ1lXNXBiV0YwYVc5dUlIQmhjM01nWUVsdVptbHVhWFI1WUZ4dUlDQWdJQ0FxS2x4dUlDQWdJQ0E5SUNodlltcGxZM1FwSUc1bGR5QmhiSFJsY21Wa0lFRnVhVzFoZEdsdmJpQnZZbXBsWTNSY2JpQWdJQ0JjWENvdlhHNGdJQ0FnUVc1cGJXRjBhVzl1TG5CeWIzUnZkSGx3WlM1eVpYQmxZWFFnUFNCbWRXNWpkR2x2YmlBb2RHbHRaWE1wSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR0VnUFNCdVpYY2dRVzVwYldGMGFXOXVLSFJvYVhNdVlXNXBiU3dnZEdocGN5NXRjeWs3WEc0Z0lDQWdJQ0FnSUdFdVpHVnNJRDBnZEdocGN5NWtaV3c3WEc0Z0lDQWdJQ0FnSUdFdWRHbHRaWE1nUFNCdFlYUm9MbVpzYjI5eUtHMXRZWGdvZEdsdFpYTXNJREFwS1NCOGZDQXhPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdZVHRjYmlBZ0lDQjlPMXh1SUNBZ0lHWjFibU4wYVc5dUlISjFia0Z1YVcxaGRHbHZiaWhoYm1sdExDQmxiR1Z0Wlc1MExDQndaWEpqWlc1MExDQnpkR0YwZFhNc0lIUnZkR0ZzVDNKcFoybHVMQ0IwYVcxbGN5a2dlMXh1SUNBZ0lDQWdJQ0J3WlhKalpXNTBJRDBnZEc5R2JHOWhkQ2h3WlhKalpXNTBLVHRjYmlBZ0lDQWdJQ0FnZG1GeUlIQmhjbUZ0Y3l4Y2JpQWdJQ0FnSUNBZ0lDQWdJR2x6U1c1QmJtbHRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2FYTkpia0Z1YVcxVFpYUXNYRzRnSUNBZ0lDQWdJQ0FnSUNCd1pYSmpaVzUwY3lBOUlGdGRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2JtVjRkQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lIQnlaWFlzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhVzFsYzNSaGJYQXNYRzRnSUNBZ0lDQWdJQ0FnSUNCdGN5QTlJR0Z1YVcwdWJYTXNYRzRnSUNBZ0lDQWdJQ0FnSUNCbWNtOXRJRDBnZTMwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYnlBOUlIdDlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1pHbG1aaUE5SUh0OU8xeHVJQ0FnSUNBZ0lDQnBaaUFvYzNSaGRIVnpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0drZ1BTQXdMQ0JwYVNBOUlHRnVhVzFoZEdsdmJrVnNaVzFsYm5SekxteGxibWQwYURzZ2FTQThJR2xwT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1pTQTlJR0Z1YVcxaGRHbHZia1ZzWlcxbGJuUnpXMmxkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaGxMbVZzTG1sa0lEMDlJR1ZzWlcxbGJuUXVhV1FnSmlZZ1pTNWhibWx0SUQwOUlHRnVhVzBwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dVdWNHVnlZMlZ1ZENBaFBTQndaWEpqWlc1MEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhibWx0WVhScGIyNUZiR1Z0Wlc1MGN5NXpjR3hwWTJVb2FTd2dNU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwYzBsdVFXNXBiVk5sZENBOUlERTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwYzBsdVFXNXBiU0E5SUdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXeGxiV1Z1ZEM1aGRIUnlLR1V1ZEc5MFlXeFBjbWxuYVc0cE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6ZEdGMGRYTWdQU0FyZEc4N0lDOHZJRTVoVGx4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3TENCcGFTQTlJR0Z1YVcwdWNHVnlZMlZ1ZEhNdWJHVnVaM1JvT3lCcElEd2dhV2s3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR0Z1YVcwdWNHVnlZMlZ1ZEhOYmFWMGdQVDBnY0dWeVkyVnVkQ0I4ZkNCaGJtbHRMbkJsY21ObGJuUnpXMmxkSUQ0Z2MzUmhkSFZ6SUNvZ1lXNXBiUzUwYjNBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndaWEpqWlc1MElEMGdZVzVwYlM1d1pYSmpaVzUwYzF0cFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndjbVYySUQwZ1lXNXBiUzV3WlhKalpXNTBjMXRwSUMwZ01WMGdmSHdnTUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdGN5QTlJRzF6SUM4Z1lXNXBiUzUwYjNBZ0tpQW9jR1Z5WTJWdWRDQXRJSEJ5WlhZcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHNWxlSFFnUFNCaGJtbHRMbkJsY21ObGJuUnpXMmtnS3lBeFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndZWEpoYlhNZ1BTQmhibWx0TG1GdWFXMWJjR1Z5WTJWdWRGMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hOMFlYUjFjeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc1pXMWxiblF1WVhSMGNpaGhibWx0TG1GdWFXMWJZVzVwYlM1d1pYSmpaVzUwYzF0cFhWMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR2xtSUNnaGNHRnlZVzF6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYVdZZ0tDRnBjMGx1UVc1cGJTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ1lYUjBjaUJwYmlCd1lYSmhiWE1wSUdsbUlDaHdZWEpoYlhOYmFHRnpYU2hoZEhSeUtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoaGRtRnBiR0ZpYkdWQmJtbHRRWFIwY25OYmFHRnpYU2hoZEhSeUtTQjhmQ0JsYkdWdFpXNTBMbkJoY0dWeUxtTjFjM1J2YlVGMGRISnBZblYwWlhOYmFHRnpYU2hoZEhSeUtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWNtOXRXMkYwZEhKZElEMGdaV3hsYldWdWRDNWhkSFJ5S0dGMGRISXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBb1puSnZiVnRoZEhSeVhTQTlQU0J1ZFd4c0tTQW1KaUFvWm5KdmJWdGhkSFJ5WFNBOUlHRjJZV2xzWVdKc1pVRjBkSEp6VzJGMGRISmRLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHOWJZWFIwY2wwZ1BTQndZWEpoYlhOYllYUjBjbDA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITjNhWFJqYUNBb1lYWmhhV3hoWW14bFFXNXBiVUYwZEhKelcyRjBkSEpkS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRzUxT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUnBabVpiWVhSMGNsMGdQU0FvZEc5YllYUjBjbDBnTFNCbWNtOXRXMkYwZEhKZEtTQXZJRzF6TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQmNJbU52Ykc5MWNsd2lPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdaeWIyMWJZWFIwY2wwZ1BTQlNMbWRsZEZKSFFpaG1jbTl0VzJGMGRISmRLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdkRzlEYjJ4dmRYSWdQU0JTTG1kbGRGSkhRaWgwYjF0aGRIUnlYU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHbG1abHRoZEhSeVhTQTlJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjam9nS0hSdlEyOXNiM1Z5TG5JZ0xTQm1jbTl0VzJGMGRISmRMbklwSUM4Z2JYTXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHYzZJQ2gwYjBOdmJHOTFjaTVuSUMwZ1puSnZiVnRoZEhSeVhTNW5LU0F2SUcxekxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaU9pQW9kRzlEYjJ4dmRYSXVZaUF0SUdaeWIyMWJZWFIwY2wwdVlpa2dMeUJ0YzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUZ3aWNHRjBhRndpT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ3WVhSb1pYTWdQU0J3WVhSb01tTjFjblpsS0daeWIyMWJZWFIwY2wwc0lIUnZXMkYwZEhKZEtTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHOVFZWFJvSUQwZ2NHRjBhR1Z6V3pGZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p5YjIxYllYUjBjbDBnUFNCd1lYUm9aWE5iTUYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR2xtWmx0aGRIUnlYU0E5SUZ0ZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2FTQTlJREFzSUdscElEMGdabkp2YlZ0aGRIUnlYUzVzWlc1bmRHZzdJR2tnUENCcGFUc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdScFptWmJZWFIwY2wxYmFWMGdQU0JiTUYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdvZ1BTQXhMQ0JxYWlBOUlHWnliMjFiWVhSMGNsMWJhVjB1YkdWdVozUm9PeUJxSUR3Z2FtbzdJR29yS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR2xtWmx0aGRIUnlYVnRwWFZ0cVhTQTlJQ2gwYjFCaGRHaGJhVjFiYWwwZ0xTQm1jbTl0VzJGMGRISmRXMmxkVzJwZEtTQXZJRzF6TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0JjSW5SeVlXNXpabTl5YlZ3aU9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCZklEMGdaV3hsYldWdWRDNWZMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxjU0E5SUdWeGRXRnNhWE5sVkhKaGJuTm1iM0p0S0Y5YllYUjBjbDBzSUhSdlcyRjBkSEpkS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWlhFcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1puSnZiVnRoZEhSeVhTQTlJR1Z4TG1aeWIyMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnZXMkYwZEhKZElEMGdaWEV1ZEc4N1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdScFptWmJZWFIwY2wwZ1BTQmJYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR2xtWmx0aGRIUnlYUzV5WldGc0lEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUlDaHBJRDBnTUN3Z2FXa2dQU0JtY205dFcyRjBkSEpkTG14bGJtZDBhRHNnYVNBOElHbHBPeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JwWm1aYllYUjBjbDFiYVYwZ1BTQmJabkp2YlZ0aGRIUnlYVnRwWFZzd1hWMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tHb2dQU0F4TENCcWFpQTlJR1p5YjIxYllYUjBjbDFiYVYwdWJHVnVaM1JvT3lCcUlEd2dhbW83SUdvckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUnBabVpiWVhSMGNsMWJhVjFiYWwwZ1BTQW9kRzliWVhSMGNsMWJhVjFiYWwwZ0xTQm1jbTl0VzJGMGRISmRXMmxkVzJwZEtTQXZJRzF6TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJRzBnUFNBb1pXeGxiV1Z1ZEM1dFlYUnlhWGdnZkh3Z2JtVjNJRTFoZEhKcGVDa3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYnpJZ1BTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1h6b2dlM1J5WVc1elptOXliVG9nWHk1MGNtRnVjMlp2Y20xOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdkbGRFSkNiM2c2SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHVnNaVzFsYm5RdVoyVjBRa0p2ZUNneEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1jbTl0VzJGMGRISmRJRDBnVzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JTNWhMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYlM1aUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiUzVqTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JTNWtMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYlM1bExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiUzVtWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1Y0ZEhKaFkzUlVjbUZ1YzJadmNtMG9kRzh5TENCMGIxdGhkSFJ5WFNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSdlcyRjBkSEpkSUQwZ2RHOHlMbDh1ZEhKaGJuTm1iM0p0TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrYVdabVcyRjBkSEpkSUQwZ1cxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLSFJ2TWk1dFlYUnlhWGd1WVNBdElHMHVZU2tnTHlCdGN5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2gwYnpJdWJXRjBjbWw0TG1JZ0xTQnRMbUlwSUM4Z2JYTXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FvZEc4eUxtMWhkSEpwZUM1aklDMGdiUzVqS1NBdklHMXpMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS0hSdk1pNXRZWFJ5YVhndVpDQXRJRzB1WkNrZ0x5QnRjeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNoMGJ6SXViV0YwY21sNExtVWdMU0J0TG1VcElDOGdiWE1zWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBb2RHOHlMbTFoZEhKcGVDNW1JQzBnYlM1bUtTQXZJRzF6WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUdaeWIyMWJZWFIwY2wwZ1BTQmJYeTV6ZUN3Z1h5NXplU3dnWHk1a1pXY3NJRjh1Wkhnc0lGOHVaSGxkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCMllYSWdkRzh5SUQwZ2UxODZlMzBzSUdkbGRFSkNiM2c2SUdaMWJtTjBhVzl1SUNncElIc2djbVYwZFhKdUlHVnNaVzFsYm5RdVoyVjBRa0p2ZUNncE95QjlmVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnWlhoMGNtRmpkRlJ5WVc1elptOXliU2gwYnpJc0lIUnZXMkYwZEhKZEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdaR2xtWmx0aGRIUnlYU0E5SUZ0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z0lDQWdJQ2gwYnpJdVh5NXplQ0F0SUY4dWMzZ3BJQzhnYlhNc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklDQWdJQ0FvZEc4eUxsOHVjM2tnTFNCZkxuTjVLU0F2SUcxekxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QWdJQ0FnS0hSdk1pNWZMbVJsWnlBdElGOHVaR1ZuS1NBdklHMXpMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUFnSUNBZ0tIUnZNaTVmTG1SNElDMGdYeTVrZUNrZ0x5QnRjeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnSUNBZ0lDaDBiekl1WHk1a2VTQXRJRjh1WkhrcElDOGdiWE5jYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUZ3aVkzTjJYQ0k2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSFpoYkhWbGN5QTlJRk4wY2lod1lYSmhiWE5iWVhSMGNsMHBXM053YkdsMFhTaHpaWEJoY21GMGIzSXBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1jbTl0TWlBOUlGTjBjaWhtY205dFcyRjBkSEpkS1Z0emNHeHBkRjBvYzJWd1lYSmhkRzl5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWVhSMGNpQTlQU0JjSW1Oc2FYQXRjbVZqZEZ3aUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnliMjFiWVhSMGNsMGdQU0JtY205dE1qdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHbG1abHRoZEhSeVhTQTlJRnRkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwSUQwZ1puSnZiVEl1YkdWdVozUm9PMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjNhR2xzWlNBb2FTMHRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa2FXWm1XMkYwZEhKZFcybGRJRDBnS0haaGJIVmxjMXRwWFNBdElHWnliMjFiWVhSMGNsMWJhVjBwSUM4Z2JYTTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHOWJZWFIwY2wwZ1BTQjJZV3gxWlhNN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1pXWmhkV3gwT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsY3lBOUlGdGRXMk52Ym1OaGRGMG9jR0Z5WVcxelcyRjBkSEpkS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1jbTl0TWlBOUlGdGRXMk52Ym1OaGRGMG9abkp2YlZ0aGRIUnlYU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHbG1abHRoZEhSeVhTQTlJRnRkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHa2dQU0JsYkdWdFpXNTBMbkJoY0dWeUxtTjFjM1J2YlVGMGRISnBZblYwWlhOYllYUjBjbDB1YkdWdVozUm9PMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhkb2FXeGxJQ2hwTFMwcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHbG1abHRoZEhSeVhWdHBYU0E5SUNnb2RtRnNkV1Z6VzJsZElIeDhJREFwSUMwZ0tHWnliMjB5VzJsZElIeDhJREFwS1NBdklHMXpPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQmxZWE5wYm1jZ1BTQndZWEpoYlhNdVpXRnphVzVuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWaGMzbGxZWE41SUQwZ1VpNWxZWE5wYm1kZlptOXliWFZzWVhOYlpXRnphVzVuWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaFpXRnplV1ZoYzNrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxZWE41WldGemVTQTlJRk4wY2lobFlYTnBibWNwTG0xaGRHTm9LR0psZW1sbGNuSm5LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1pXRnplV1ZoYzNrZ0ppWWdaV0Z6ZVdWaGMza3ViR1Z1WjNSb0lEMDlJRFVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdOMWNuWmxJRDBnWldGemVXVmhjM2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVmhjM2xsWVhONUlEMGdablZ1WTNScGIyNGdLSFFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJEZFdKcFkwSmxlbWxsY2tGMFZHbHRaU2gwTENBclkzVnlkbVZiTVYwc0lDdGpkWEoyWlZzeVhTd2dLMk4xY25abFd6TmRMQ0FyWTNWeWRtVmJORjBzSUcxektUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxZWE41WldGemVTQTlJSEJwY0dVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdkR2x0WlhOMFlXMXdJRDBnY0dGeVlXMXpMbk4wWVhKMElIeDhJR0Z1YVcwdWMzUmhjblFnZkh3Z0syNWxkeUJFWVhSbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWlNBOUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhibWx0T2lCaGJtbHRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJsY21ObGJuUTZJSEJsY21ObGJuUXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2x0WlhOMFlXMXdPaUIwYVcxbGMzUmhiWEFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNSaGNuUTZJSFJwYldWemRHRnRjQ0FySUNoaGJtbHRMbVJsYkNCOGZDQXdLU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6ZEdGMGRYTTZJREFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVc1cGRITjBZWFIxY3pvZ2MzUmhkSFZ6SUh4OElEQXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM1J2Y0RvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYlhNNklHMXpMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1ZoYzJsdVp6b2daV0Z6ZVdWaGMza3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabkp2YlRvZ1puSnZiU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrYVdabU9pQmthV1ptTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSdk9pQjBieXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsYkRvZ1pXeGxiV1Z1ZEN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallXeHNZbUZqYXpvZ2NHRnlZVzF6TG1OaGJHeGlZV05yTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCeVpYWTZJSEJ5WlhZc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JtVjRkRG9nYm1WNGRDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWEJsWVhRNklIUnBiV1Z6SUh4OElHRnVhVzB1ZEdsdFpYTXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiM0pwWjJsdU9pQmxiR1Z0Wlc1MExtRjBkSElvS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGIzUmhiRTl5YVdkcGJqb2dkRzkwWVd4UGNtbG5hVzVjYmlBZ0lDQWdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCaGJtbHRZWFJwYjI1RmJHVnRaVzUwY3k1d2RYTm9LR1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hOMFlYUjFjeUFtSmlBaGFYTkpia0Z1YVcwZ0ppWWdJV2x6U1c1QmJtbHRVMlYwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pTNXpkRzl3SUQwZ2RISjFaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsTG5OMFlYSjBJRDBnYm1WM0lFUmhkR1VnTFNCdGN5QXFJSE4wWVhSMWN6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWVc1cGJXRjBhVzl1Uld4bGJXVnVkSE11YkdWdVozUm9JRDA5SURFcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR0Z1YVcxaGRHbHZiaWdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hwYzBsdVFXNXBiVk5sZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVXVjM1JoY25RZ1BTQnVaWGNnUkdGMFpTQXRJR1V1YlhNZ0tpQnpkR0YwZFhNN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmhibWx0WVhScGIyNUZiR1Z0Wlc1MGN5NXNaVzVuZEdnZ1BUMGdNU0FtSmlCeVpYRjFaWE4wUVc1cGJVWnlZVzFsS0dGdWFXMWhkR2x2YmlrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwYzBsdVFXNXBiUzVwYm1sMGMzUmhkSFZ6SUQwZ2MzUmhkSFZ6TzF4dUlDQWdJQ0FnSUNBZ0lDQWdhWE5KYmtGdWFXMHVjM1JoY25RZ1BTQnVaWGNnUkdGMFpTQXRJR2x6U1c1QmJtbHRMbTF6SUNvZ2MzUmhkSFZ6TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHVjJaU2hjSW5KaGNHaGhaV3d1WVc1cGJTNXpkR0Z5ZEM1Y0lpQXJJR1ZzWlcxbGJuUXVhV1FzSUdWc1pXMWxiblFzSUdGdWFXMHBPMXh1SUNBZ0lIMWNiaUFnSUNBdktseGNYRzRnSUNBZ0lDb2dVbUZ3YUdGbGJDNWhibWx0WVhScGIyNWNiaUFnSUNBZ1d5QnRaWFJvYjJRZ1hWeHVJQ0FnSUNBcUtseHVJQ0FnSUNBcUlFTnlaV0YwWlhNZ1lXNGdZVzVwYldGMGFXOXVJRzlpYW1WamRDQjBhR0YwSUdOaGJpQmlaU0J3WVhOelpXUWdkRzhnZEdobElFQkZiR1Z0Wlc1MExtRnVhVzFoZEdVZ2IzSWdRRVZzWlcxbGJuUXVZVzVwYldGMFpWZHBkR2dnYldWMGFHOWtjeTVjYmlBZ0lDQWdLaUJUWldVZ1lXeHpieUJBUVc1cGJXRjBhVzl1TG1SbGJHRjVJR0Z1WkNCQVFXNXBiV0YwYVc5dUxuSmxjR1ZoZENCdFpYUm9iMlJ6TGx4dUlDQWdJQ0FxS2x4dUlDQWdJQ0ErSUZCaGNtRnRaWFJsY25OY2JpQWdJQ0FnS2lwY2JpQWdJQ0FnTFNCd1lYSmhiWE1nS0c5aWFtVmpkQ2tnWm1sdVlXd2dZWFIwY21saWRYUmxjeUJtYjNJZ2RHaGxJR1ZzWlcxbGJuUXNJSE5sWlNCaGJITnZJRUJGYkdWdFpXNTBMbUYwZEhKY2JpQWdJQ0FnTFNCdGN5QW9iblZ0WW1WeUtTQnVkVzFpWlhJZ2IyWWdiV2xzYkdselpXTnZibVJ6SUdadmNpQmhibWx0WVhScGIyNGdkRzhnY25WdVhHNGdJQ0FnSUMwZ1pXRnphVzVuSUNoemRISnBibWNwSUNOdmNIUnBiMjVoYkNCbFlYTnBibWNnZEhsd1pTNGdRV05qWlhCMElHOXVaU0J2WmlCQVVtRndhR0ZsYkM1bFlYTnBibWRmWm05eWJYVnNZWE1nYjNJZ1ExTlRJR1p2Y20xaGREb2dZR04xWW1sakppTjRNakF4TUR0aVpYcHBaWElvV0Znc0ppTXhOakE3V0Znc0ppTXhOakE3V0Znc0ppTXhOakE3V0ZncFlGeHVJQ0FnSUNBdElHTmhiR3hpWVdOcklDaG1kVzVqZEdsdmJpa2dJMjl3ZEdsdmJtRnNJR05oYkd4aVlXTnJJR1oxYm1OMGFXOXVMaUJYYVd4c0lHSmxJR05oYkd4bFpDQmhkQ0IwYUdVZ1pXNWtJRzltSUdGdWFXMWhkR2x2Ymk1Y2JpQWdJQ0FnS2lwY2JpQWdJQ0FnUFNBb2IySnFaV04wS1NCQVFXNXBiV0YwYVc5dVhHNGdJQ0FnWEZ3cUwxeHVJQ0FnSUZJdVlXNXBiV0YwYVc5dUlEMGdablZ1WTNScGIyNGdLSEJoY21GdGN5d2diWE1zSUdWaGMybHVaeXdnWTJGc2JHSmhZMnNwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSEJoY21GdGN5QnBibk4wWVc1alpXOW1JRUZ1YVcxaGRHbHZiaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIQmhjbUZ0Y3p0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvVWk1cGN5aGxZWE5wYm1jc0lGd2lablZ1WTNScGIyNWNJaWtnZkh3Z0lXVmhjMmx1WnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGc2JHSmhZMnNnUFNCallXeHNZbUZqYXlCOGZDQmxZWE5wYm1jZ2ZId2diblZzYkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1ZoYzJsdVp5QTlJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjR0Z5WVcxeklEMGdUMkpxWldOMEtIQmhjbUZ0Y3lrN1hHNGdJQ0FnSUNBZ0lHMXpJRDBnSzIxeklIeDhJREE3WEc0Z0lDQWdJQ0FnSUhaaGNpQndJRDBnZTMwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JxYzI5dUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnWVhSMGNqdGNiaUFnSUNBZ0lDQWdabTl5SUNoaGRIUnlJR2x1SUhCaGNtRnRjeWtnYVdZZ0tIQmhjbUZ0YzF0b1lYTmRLR0YwZEhJcElDWW1JSFJ2Um14dllYUW9ZWFIwY2lrZ0lUMGdZWFIwY2lBbUppQjBiMFpzYjJGMEtHRjBkSElwSUNzZ1hDSWxYQ0lnSVQwZ1lYUjBjaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhbk52YmlBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQndXMkYwZEhKZElEMGdjR0Z5WVcxelcyRjBkSEpkTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHbG1JQ2doYW5OdmJpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdhV1lnY0dWeVkyVnVkQzFzYVd0bElITjViblJoZUNCcGN5QjFjMlZrSUdGdVpDQmxibVF0YjJZdFlXeHNJR0Z1YVcxaGRHbHZiaUJqWVd4c1ltRmpheUIxYzJWa1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmloallXeHNZbUZqYXlsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdabWx1WkNCMGFHVWdiR0Z6ZENCdmJtVmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnYkdGemRFdGxlU0E5SURBN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLSFpoY2lCcElHbHVJSEJoY21GdGN5bDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQndaWEpqWlc1MElEMGdkRzlKYm5Rb2FTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUtIQmhjbUZ0YzF0b1lYTmRLR2twSUNZbUlIQmxjbU5sYm5RZ1BpQnNZWE4wUzJWNUtYdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGhjM1JMWlhrZ1BTQndaWEpqWlc1ME8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4aGMzUkxaWGtnS3owZ0p5VW5PMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUdsbUlHRnNjbVZoWkhrZ1pHVm1hVzVsWkNCallXeHNZbUZqYXlCcGJpQjBhR1VnYkdGemRDQnJaWGxtY21GdFpTd2djMnRwY0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNGd1lYSmhiWE5iYkdGemRFdGxlVjB1WTJGc2JHSmhZMnNnSmlZZ0tIQmhjbUZ0YzF0c1lYTjBTMlY1WFM1allXeHNZbUZqYXlBOUlHTmhiR3hpWVdOcktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJRUZ1YVcxaGRHbHZiaWh3WVhKaGJYTXNJRzF6S1R0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1ZoYzJsdVp5QW1KaUFvY0M1bFlYTnBibWNnUFNCbFlYTnBibWNwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZzYkdKaFkyc2dKaVlnS0hBdVkyRnNiR0poWTJzZ1BTQmpZV3hzWW1GamF5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lFRnVhVzFoZEdsdmJpaDdNVEF3T2lCd2ZTd2diWE1wTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlR0Y2JpQWdJQ0F2S2x4Y1hHNGdJQ0FnSUNvZ1JXeGxiV1Z1ZEM1aGJtbHRZWFJsWEc0Z0lDQWdJRnNnYldWMGFHOWtJRjFjYmlBZ0lDQWdLaXBjYmlBZ0lDQWdLaUJEY21WaGRHVnpJR0Z1WkNCemRHRnlkSE1nWVc1cGJXRjBhVzl1SUdadmNpQm5hWFpsYmlCbGJHVnRaVzUwTGx4dUlDQWdJQ0FxS2x4dUlDQWdJQ0ErSUZCaGNtRnRaWFJsY25OY2JpQWdJQ0FnS2lwY2JpQWdJQ0FnTFNCd1lYSmhiWE1nS0c5aWFtVmpkQ2tnWm1sdVlXd2dZWFIwY21saWRYUmxjeUJtYjNJZ2RHaGxJR1ZzWlcxbGJuUXNJSE5sWlNCaGJITnZJRUJGYkdWdFpXNTBMbUYwZEhKY2JpQWdJQ0FnTFNCdGN5QW9iblZ0WW1WeUtTQnVkVzFpWlhJZ2IyWWdiV2xzYkdselpXTnZibVJ6SUdadmNpQmhibWx0WVhScGIyNGdkRzhnY25WdVhHNGdJQ0FnSUMwZ1pXRnphVzVuSUNoemRISnBibWNwSUNOdmNIUnBiMjVoYkNCbFlYTnBibWNnZEhsd1pTNGdRV05qWlhCMElHOXVaU0J2WmlCQVVtRndhR0ZsYkM1bFlYTnBibWRmWm05eWJYVnNZWE1nYjNJZ1ExTlRJR1p2Y20xaGREb2dZR04xWW1sakppTjRNakF4TUR0aVpYcHBaWElvV0Znc0ppTXhOakE3V0Znc0ppTXhOakE3V0Znc0ppTXhOakE3V0ZncFlGeHVJQ0FnSUNBdElHTmhiR3hpWVdOcklDaG1kVzVqZEdsdmJpa2dJMjl3ZEdsdmJtRnNJR05oYkd4aVlXTnJJR1oxYm1OMGFXOXVMaUJYYVd4c0lHSmxJR05oYkd4bFpDQmhkQ0IwYUdVZ1pXNWtJRzltSUdGdWFXMWhkR2x2Ymk1Y2JpQWdJQ0FnS2lCdmNseHVJQ0FnSUNBdElHRnVhVzFoZEdsdmJpQW9iMkpxWldOMEtTQmhibWx0WVhScGIyNGdiMkpxWldOMExDQnpaV1VnUUZKaGNHaGhaV3d1WVc1cGJXRjBhVzl1WEc0Z0lDQWdJQ29xWEc0Z0lDQWdJRDBnS0c5aWFtVmpkQ2tnYjNKcFoybHVZV3dnWld4bGJXVnVkRnh1SUNBZ0lGeGNLaTljYmlBZ0lDQmxiSEJ5YjNSdkxtRnVhVzFoZEdVZ1BTQm1kVzVqZEdsdmJpQW9jR0Z5WVcxekxDQnRjeXdnWldGemFXNW5MQ0JqWVd4c1ltRmpheWtnZTF4dUlDQWdJQ0FnSUNCMllYSWdaV3hsYldWdWRDQTlJSFJvYVhNN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hsYkdWdFpXNTBMbkpsYlc5MlpXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmhiR3hpWVdOcklDWW1JR05oYkd4aVlXTnJMbU5oYkd3b1pXeGxiV1Z1ZENrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaV3hsYldWdWREdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0IyWVhJZ1lXNXBiU0E5SUhCaGNtRnRjeUJwYm5OMFlXNWpaVzltSUVGdWFXMWhkR2x2YmlBL0lIQmhjbUZ0Y3lBNklGSXVZVzVwYldGMGFXOXVLSEJoY21GdGN5d2diWE1zSUdWaGMybHVaeXdnWTJGc2JHSmhZMnNwTzF4dUlDQWdJQ0FnSUNCeWRXNUJibWx0WVhScGIyNG9ZVzVwYlN3Z1pXeGxiV1Z1ZEN3Z1lXNXBiUzV3WlhKalpXNTBjMXN3WFN3Z2JuVnNiQ3dnWld4bGJXVnVkQzVoZEhSeUtDa3BPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdaV3hsYldWdWREdGNiaUFnSUNCOU8xeHVJQ0FnSUM4cVhGeGNiaUFnSUNBZ0tpQkZiR1Z0Wlc1MExuTmxkRlJwYldWY2JpQWdJQ0FnV3lCdFpYUm9iMlFnWFZ4dUlDQWdJQ0FxS2x4dUlDQWdJQ0FxSUZObGRITWdkR2hsSUhOMFlYUjFjeUJ2WmlCaGJtbHRZWFJwYjI0Z2IyWWdkR2hsSUdWc1pXMWxiblFnYVc0Z2JXbHNiR2x6WldOdmJtUnpMaUJUYVcxcGJHRnlJSFJ2SUVCRmJHVnRaVzUwTG5OMFlYUjFjeUJ0WlhSb2IyUXVYRzRnSUNBZ0lDb3FYRzRnSUNBZ0lENGdVR0Z5WVcxbGRHVnljMXh1SUNBZ0lDQXFLbHh1SUNBZ0lDQXRJR0Z1YVcwZ0tHOWlhbVZqZENrZ1lXNXBiV0YwYVc5dUlHOWlhbVZqZEZ4dUlDQWdJQ0F0SUhaaGJIVmxJQ2h1ZFcxaVpYSXBJRzUxYldKbGNpQnZaaUJ0YVd4c2FYTmxZMjl1WkhNZ1puSnZiU0IwYUdVZ1ltVm5hVzV1YVc1bklHOW1JSFJvWlNCaGJtbHRZWFJwYjI1Y2JpQWdJQ0FnS2lwY2JpQWdJQ0FnUFNBb2IySnFaV04wS1NCdmNtbG5hVzVoYkNCbGJHVnRaVzUwSUdsbUlHQjJZV3gxWldBZ2FYTWdjM0JsWTJsbWFXVmtYRzRnSUNBZ0lDb2dUbTkwWlN3Z2RHaGhkQ0JrZFhKcGJtY2dZVzVwYldGMGFXOXVJR1p2Ykd4dmQybHVaeUJsZG1WdWRITWdZWEpsSUhSeWFXZG5aWEpsWkRwY2JpQWdJQ0FnS2x4dUlDQWdJQ0FxSUU5dUlHVmhZMmdnWVc1cGJXRjBhVzl1SUdaeVlXMWxJR1YyWlc1MElHQmhibWx0TG1aeVlXMWxManhwWkQ1Z0xDQnZiaUJ6ZEdGeWRDQmdZVzVwYlM1emRHRnlkQzQ4YVdRK1lDQmhibVFnYjI0Z1pXNWtJR0JoYm1sdExtWnBibWx6YUM0OGFXUStZQzVjYmlBZ0lDQmNYQ292WEc0Z0lDQWdaV3h3Y205MGJ5NXpaWFJVYVcxbElEMGdablZ1WTNScGIyNGdLR0Z1YVcwc0lIWmhiSFZsS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hoYm1sdElDWW1JSFpoYkhWbElDRTlJRzUxYkd3cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjM1JoZEhWektHRnVhVzBzSUcxdGFXNG9kbUZzZFdVc0lHRnVhVzB1YlhNcElDOGdZVzVwYlM1dGN5azdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNGdJQ0FnZlR0Y2JpQWdJQ0F2S2x4Y1hHNGdJQ0FnSUNvZ1JXeGxiV1Z1ZEM1emRHRjBkWE5jYmlBZ0lDQWdXeUJ0WlhSb2IyUWdYVnh1SUNBZ0lDQXFLbHh1SUNBZ0lDQXFJRWRsZEhNZ2IzSWdjMlYwY3lCMGFHVWdjM1JoZEhWeklHOW1JR0Z1YVcxaGRHbHZiaUJ2WmlCMGFHVWdaV3hsYldWdWRDNWNiaUFnSUNBZ0tpcGNiaUFnSUNBZ1BpQlFZWEpoYldWMFpYSnpYRzRnSUNBZ0lDb3FYRzRnSUNBZ0lDMGdZVzVwYlNBb2IySnFaV04wS1NBamIzQjBhVzl1WVd3Z1lXNXBiV0YwYVc5dUlHOWlhbVZqZEZ4dUlDQWdJQ0F0SUhaaGJIVmxJQ2h1ZFcxaVpYSXBJQ052Y0hScGIyNWhiQ0F3SU9LQWt5QXhMaUJKWmlCemNHVmphV1pwWldRc0lHMWxkR2h2WkNCM2IzSnJjeUJzYVd0bElHRWdjMlYwZEdWeUlHRnVaQ0J6WlhSeklIUm9aU0J6ZEdGMGRYTWdiMllnWVNCbmFYWmxiaUJoYm1sdFlYUnBiMjRnZEc4Z2RHaGxJSFpoYkhWbExpQlVhR2x6SUhkcGJHd2dZMkYxYzJVZ1lXNXBiV0YwYVc5dUlIUnZJR3AxYlhBZ2RHOGdkR2hsSUdkcGRtVnVJSEJ2YzJsMGFXOXVMbHh1SUNBZ0lDQXFLbHh1SUNBZ0lDQTlJQ2h1ZFcxaVpYSXBJSE4wWVhSMWMxeHVJQ0FnSUNBcUlHOXlYRzRnSUNBZ0lEMGdLR0Z5Y21GNUtTQnpkR0YwZFhNZ2FXWWdZR0Z1YVcxZ0lHbHpJRzV2ZENCemNHVmphV1pwWldRdUlFRnljbUY1SUc5bUlHOWlhbVZqZEhNZ2FXNGdabTl5YldGME9seHVJQ0FnSUNCdklIdGNiaUFnSUNBZ2J5QWdJQ0FnWVc1cGJUb2dLRzlpYW1WamRDa2dZVzVwYldGMGFXOXVJRzlpYW1WamRGeHVJQ0FnSUNCdklDQWdJQ0J6ZEdGMGRYTTZJQ2h1ZFcxaVpYSXBJSE4wWVhSMWMxeHVJQ0FnSUNCdklIMWNiaUFnSUNBZ0tpQnZjbHh1SUNBZ0lDQTlJQ2h2WW1wbFkzUXBJRzl5YVdkcGJtRnNJR1ZzWlcxbGJuUWdhV1lnWUhaaGJIVmxZQ0JwY3lCemNHVmphV1pwWldSY2JpQWdJQ0JjWENvdlhHNGdJQ0FnWld4d2NtOTBieTV6ZEdGMGRYTWdQU0JtZFc1amRHbHZiaUFvWVc1cGJTd2dkbUZzZFdVcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUc5MWRDQTlJRnRkTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdhU0E5SURBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlc0c1hHNGdJQ0FnSUNBZ0lDQWdJQ0JsTzF4dUlDQWdJQ0FnSUNCcFppQW9kbUZzZFdVZ0lUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY25WdVFXNXBiV0YwYVc5dUtHRnVhVzBzSUhSb2FYTXNJQzB4TENCdGJXbHVLSFpoYkhWbExDQXhLU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjenRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGxiaUE5SUdGdWFXMWhkR2x2YmtWc1pXMWxiblJ6TG14bGJtZDBhRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUFvT3lCcElEd2diR1Z1T3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsSUQwZ1lXNXBiV0YwYVc5dVJXeGxiV1Z1ZEhOYmFWMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dVdVpXd3VhV1FnUFQwZ2RHaHBjeTVwWkNBbUppQW9JV0Z1YVcwZ2ZId2daUzVoYm1sdElEMDlJR0Z1YVcwcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaGhibWx0S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWlM1emRHRjBkWE03WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYjNWMExuQjFjMmdvZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVc1cGJUb2daUzVoYm1sdExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzUmhkSFZ6T2lCbExuTjBZWFIxYzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ZVzVwYlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlBd08xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHOTFkRHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDA3WEc0Z0lDQWdMeXBjWEZ4dUlDQWdJQ0FxSUVWc1pXMWxiblF1Y0dGMWMyVmNiaUFnSUNBZ1d5QnRaWFJvYjJRZ1hWeHVJQ0FnSUNBcUtseHVJQ0FnSUNBcUlGTjBiM0J6SUdGdWFXMWhkR2x2YmlCdlppQjBhR1VnWld4bGJXVnVkQ0IzYVhSb0lHRmlhV3hwZEhrZ2RHOGdjbVZ6ZFcxbElHbDBJR3hoZEdWeUlHOXVMbHh1SUNBZ0lDQXFLbHh1SUNBZ0lDQStJRkJoY21GdFpYUmxjbk5jYmlBZ0lDQWdLaXBjYmlBZ0lDQWdMU0JoYm1sdElDaHZZbXBsWTNRcElDTnZjSFJwYjI1aGJDQmhibWx0WVhScGIyNGdiMkpxWldOMFhHNGdJQ0FnSUNvcVhHNGdJQ0FnSUQwZ0tHOWlhbVZqZENrZ2IzSnBaMmx1WVd3Z1pXeGxiV1Z1ZEZ4dUlDQWdJRnhjS2k5Y2JpQWdJQ0JsYkhCeWIzUnZMbkJoZFhObElEMGdablZ1WTNScGIyNGdLR0Z1YVcwcElIdGNiaUFnSUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0JoYm1sdFlYUnBiMjVGYkdWdFpXNTBjeTVzWlc1bmRHZzdJR2tyS3lrZ2FXWWdLR0Z1YVcxaGRHbHZia1ZzWlcxbGJuUnpXMmxkTG1Wc0xtbGtJRDA5SUhSb2FYTXVhV1FnSmlZZ0tDRmhibWx0SUh4OElHRnVhVzFoZEdsdmJrVnNaVzFsYm5SelcybGRMbUZ1YVcwZ1BUMGdZVzVwYlNrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaGxkbVVvWENKeVlYQm9ZV1ZzTG1GdWFXMHVjR0YxYzJVdVhDSWdLeUIwYUdsekxtbGtMQ0IwYUdsekxDQmhibWx0WVhScGIyNUZiR1Z0Wlc1MGMxdHBYUzVoYm1sdEtTQWhQVDBnWm1Gc2MyVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoYm1sdFlYUnBiMjVGYkdWdFpXNTBjMXRwWFM1d1lYVnpaV1FnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TzF4dUlDQWdJSDA3WEc0Z0lDQWdMeXBjWEZ4dUlDQWdJQ0FxSUVWc1pXMWxiblF1Y21WemRXMWxYRzRnSUNBZ0lGc2diV1YwYUc5a0lGMWNiaUFnSUNBZ0tpcGNiaUFnSUNBZ0tpQlNaWE4xYldWeklHRnVhVzFoZEdsdmJpQnBaaUJwZENCM1lYTWdjR0YxYzJWa0lIZHBkR2dnUUVWc1pXMWxiblF1Y0dGMWMyVWdiV1YwYUc5a0xseHVJQ0FnSUNBcUtseHVJQ0FnSUNBK0lGQmhjbUZ0WlhSbGNuTmNiaUFnSUNBZ0tpcGNiaUFnSUNBZ0xTQmhibWx0SUNodlltcGxZM1FwSUNOdmNIUnBiMjVoYkNCaGJtbHRZWFJwYjI0Z2IySnFaV04wWEc0Z0lDQWdJQ29xWEc0Z0lDQWdJRDBnS0c5aWFtVmpkQ2tnYjNKcFoybHVZV3dnWld4bGJXVnVkRnh1SUNBZ0lGeGNLaTljYmlBZ0lDQmxiSEJ5YjNSdkxuSmxjM1Z0WlNBOUlHWjFibU4wYVc5dUlDaGhibWx0S1NCN1hHNGdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2dZVzVwYldGMGFXOXVSV3hsYldWdWRITXViR1Z1WjNSb095QnBLeXNwSUdsbUlDaGhibWx0WVhScGIyNUZiR1Z0Wlc1MGMxdHBYUzVsYkM1cFpDQTlQU0IwYUdsekxtbGtJQ1ltSUNnaFlXNXBiU0I4ZkNCaGJtbHRZWFJwYjI1RmJHVnRaVzUwYzF0cFhTNWhibWx0SUQwOUlHRnVhVzBwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1pTQTlJR0Z1YVcxaGRHbHZia1ZzWlcxbGJuUnpXMmxkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dWMlpTaGNJbkpoY0doaFpXd3VZVzVwYlM1eVpYTjFiV1V1WENJZ0t5QjBhR2x6TG1sa0xDQjBhR2x6TENCbExtRnVhVzBwSUNFOVBTQm1ZV3h6WlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmxiR1YwWlNCbExuQmhkWE5sWkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk4wWVhSMWN5aGxMbUZ1YVcwc0lHVXVjM1JoZEhWektUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjenRjYmlBZ0lDQjlPMXh1SUNBZ0lDOHFYRnhjYmlBZ0lDQWdLaUJGYkdWdFpXNTBMbk4wYjNCY2JpQWdJQ0FnV3lCdFpYUm9iMlFnWFZ4dUlDQWdJQ0FxS2x4dUlDQWdJQ0FxSUZOMGIzQnpJR0Z1YVcxaGRHbHZiaUJ2WmlCMGFHVWdaV3hsYldWdWRDNWNiaUFnSUNBZ0tpcGNiaUFnSUNBZ1BpQlFZWEpoYldWMFpYSnpYRzRnSUNBZ0lDb3FYRzRnSUNBZ0lDMGdZVzVwYlNBb2IySnFaV04wS1NBamIzQjBhVzl1WVd3Z1lXNXBiV0YwYVc5dUlHOWlhbVZqZEZ4dUlDQWdJQ0FxS2x4dUlDQWdJQ0E5SUNodlltcGxZM1FwSUc5eWFXZHBibUZzSUdWc1pXMWxiblJjYmlBZ0lDQmNYQ292WEc0Z0lDQWdaV3h3Y205MGJ5NXpkRzl3SUQwZ1puVnVZM1JwYjI0Z0tHRnVhVzBwSUh0Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQmhibWx0WVhScGIyNUZiR1Z0Wlc1MGN5NXNaVzVuZEdnN0lHa3JLeWtnYVdZZ0tHRnVhVzFoZEdsdmJrVnNaVzFsYm5SelcybGRMbVZzTG1sa0lEMDlJSFJvYVhNdWFXUWdKaVlnS0NGaGJtbHRJSHg4SUdGdWFXMWhkR2x2YmtWc1pXMWxiblJ6VzJsZExtRnVhVzBnUFQwZ1lXNXBiU2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNobGRtVW9YQ0p5WVhCb1lXVnNMbUZ1YVcwdWMzUnZjQzVjSWlBcklIUm9hWE11YVdRc0lIUm9hWE1zSUdGdWFXMWhkR2x2YmtWc1pXMWxiblJ6VzJsZExtRnVhVzBwSUNFOVBTQm1ZV3h6WlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRnVhVzFoZEdsdmJrVnNaVzFsYm5SekxuTndiR2xqWlNocExTMHNJREVwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0FnSUgwN1hHNGdJQ0FnWm5WdVkzUnBiMjRnYzNSdmNFRnVhVzFoZEdsdmJpaHdZWEJsY2lrZ2UxeHVJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJR0Z1YVcxaGRHbHZia1ZzWlcxbGJuUnpMbXhsYm1kMGFEc2dhU3NyS1NCcFppQW9ZVzVwYldGMGFXOXVSV3hsYldWdWRITmJhVjB1Wld3dWNHRndaWElnUFQwZ2NHRndaWElwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR0Z1YVcxaGRHbHZia1ZzWlcxbGJuUnpMbk53YkdsalpTaHBMUzBzSURFcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUdWMlpTNXZiaWhjSW5KaGNHaGhaV3d1Y21WdGIzWmxYQ0lzSUhOMGIzQkJibWx0WVhScGIyNHBPMXh1SUNBZ0lHVjJaUzV2YmloY0luSmhjR2hoWld3dVkyeGxZWEpjSWl3Z2MzUnZjRUZ1YVcxaGRHbHZiaWs3WEc0Z0lDQWdaV3h3Y205MGJ5NTBiMU4wY21sdVp5QTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUZ3aVVtRndhR0ZjWEhobFlteGNYSFV5TURFNWN5QnZZbXBsWTNSY0lqdGNiaUFnSUNCOU8xeHVYRzRnSUNBZ0x5OGdVMlYwWEc0Z0lDQWdkbUZ5SUZObGRDQTlJR1oxYm1OMGFXOXVJQ2hwZEdWdGN5a2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtbDBaVzF6SUQwZ1cxMDdYRzRnSUNBZ0lDQWdJSFJvYVhNdWJHVnVaM1JvSUQwZ01EdGNiaUFnSUNBZ0lDQWdkR2hwY3k1MGVYQmxJRDBnWENKelpYUmNJanRjYmlBZ0lDQWdJQ0FnYVdZZ0tHbDBaVzF6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Dd2dhV2tnUFNCcGRHVnRjeTVzWlc1bmRHZzdJR2tnUENCcGFUc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2wwWlcxelcybGRJQ1ltSUNocGRHVnRjMXRwWFM1amIyNXpkSEoxWTNSdmNpQTlQU0JsYkhCeWIzUnZMbU52Ym5OMGNuVmpkRzl5SUh4OElHbDBaVzF6VzJsZExtTnZibk4wY25WamRHOXlJRDA5SUZObGRDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjMXQwYUdsekxtbDBaVzF6TG14bGJtZDBhRjBnUFNCMGFHbHpMbWwwWlcxelczUm9hWE11YVhSbGJYTXViR1Z1WjNSb1hTQTlJR2wwWlcxelcybGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbXhsYm1kMGFDc3JPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMHNYRzRnSUNBZ2MyVjBjSEp2ZEc4Z1BTQlRaWFF1Y0hKdmRHOTBlWEJsTzF4dUlDQWdJQzhxWEZ4Y2JpQWdJQ0FnS2lCVFpYUXVjSFZ6YUZ4dUlDQWdJQ0JiSUcxbGRHaHZaQ0JkWEc0Z0lDQWdJQ29xWEc0Z0lDQWdJQ29nUVdSa2N5QmxZV05vSUdGeVozVnRaVzUwSUhSdklIUm9aU0JqZFhKeVpXNTBJSE5sZEM1Y2JpQWdJQ0FnUFNBb2IySnFaV04wS1NCdmNtbG5hVzVoYkNCbGJHVnRaVzUwWEc0Z0lDQWdYRndxTDF4dUlDQWdJSE5sZEhCeWIzUnZMbkIxYzJnZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQnBkR1Z0TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdiR1Z1TzF4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCcElEMGdNQ3dnYVdrZ1BTQmhjbWQxYldWdWRITXViR1Z1WjNSb095QnBJRHdnYVdrN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhWFJsYlNBOUlHRnlaM1Z0Wlc1MGMxdHBYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hwZEdWdElDWW1JQ2hwZEdWdExtTnZibk4wY25WamRHOXlJRDA5SUdWc2NISnZkRzh1WTI5dWMzUnlkV04wYjNJZ2ZId2dhWFJsYlM1amIyNXpkSEoxWTNSdmNpQTlQU0JUWlhRcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1Z1SUQwZ2RHaHBjeTVwZEdWdGN5NXNaVzVuZEdnN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjMXRzWlc1ZElEMGdkR2hwY3k1cGRHVnRjMXRzWlc1ZElEMGdhWFJsYlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbXhsYm1kMGFDc3JPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TzF4dUlDQWdJSDA3WEc0Z0lDQWdMeXBjWEZ4dUlDQWdJQ0FxSUZObGRDNXdiM0JjYmlBZ0lDQWdXeUJ0WlhSb2IyUWdYVnh1SUNBZ0lDQXFLbHh1SUNBZ0lDQXFJRkpsYlc5MlpYTWdiR0Z6ZENCbGJHVnRaVzUwSUdGdVpDQnlaWFIxY201eklHbDBMbHh1SUNBZ0lDQTlJQ2h2WW1wbFkzUXBJR1ZzWlcxbGJuUmNiaUFnSUNCY1hDb3ZYRzRnSUNBZ2MyVjBjSEp2ZEc4dWNHOXdJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG14bGJtZDBhQ0FtSmlCa1pXeGxkR1VnZEdocGMxdDBhR2x6TG14bGJtZDBhQzB0WFR0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVhWFJsYlhNdWNHOXdLQ2s3WEc0Z0lDQWdmVHRjYmlBZ0lDQXZLbHhjWEc0Z0lDQWdJQ29nVTJWMExtWnZja1ZoWTJoY2JpQWdJQ0FnV3lCdFpYUm9iMlFnWFZ4dUlDQWdJQ0FxS2x4dUlDQWdJQ0FxSUVWNFpXTjFkR1Z6SUdkcGRtVnVJR1oxYm1OMGFXOXVJR1p2Y2lCbFlXTm9JR1ZzWlcxbGJuUWdhVzRnZEdobElITmxkQzVjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRWxtSUdaMWJtTjBhVzl1SUhKbGRIVnlibk1nWUdaaGJITmxZQ0JwZENCM2FXeHNJSE4wYjNBZ2JHOXZjQ0J5ZFc1dWFXNW5MbHh1SUNBZ0lDQXFLbHh1SUNBZ0lDQStJRkJoY21GdFpYUmxjbk5jYmlBZ0lDQWdLaXBjYmlBZ0lDQWdMU0JqWVd4c1ltRmpheUFvWm5WdVkzUnBiMjRwSUdaMWJtTjBhVzl1SUhSdklISjFibHh1SUNBZ0lDQXRJSFJvYVhOQmNtY2dLRzlpYW1WamRDa2dZMjl1ZEdWNGRDQnZZbXBsWTNRZ1ptOXlJSFJvWlNCallXeHNZbUZqYTF4dUlDQWdJQ0E5SUNodlltcGxZM1FwSUZObGRDQnZZbXBsWTNSY2JpQWdJQ0JjWENvdlhHNGdJQ0FnYzJWMGNISnZkRzh1Wm05eVJXRmphQ0E5SUdaMWJtTjBhVzl1SUNoallXeHNZbUZqYXl3Z2RHaHBjMEZ5WnlrZ2UxeHVJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTUN3Z2FXa2dQU0IwYUdsekxtbDBaVzF6TG14bGJtZDBhRHNnYVNBOElHbHBPeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaGpZV3hzWW1GamF5NWpZV3hzS0hSb2FYTkJjbWNzSUhSb2FYTXVhWFJsYlhOYmFWMHNJR2twSUQwOVBTQm1ZV3h6WlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TzF4dUlDQWdJSDA3WEc0Z0lDQWdabTl5SUNoMllYSWdiV1YwYUc5a0lHbHVJR1ZzY0hKdmRHOHBJR2xtSUNobGJIQnliM1J2VzJoaGMxMG9iV1YwYUc5a0tTa2dlMXh1SUNBZ0lDQWdJQ0J6WlhSd2NtOTBiMXR0WlhSb2IyUmRJRDBnS0daMWJtTjBhVzl1SUNodFpYUm9iMlJ1WVcxbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJoY21jZ1BTQmhjbWQxYldWdWRITTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Wm05eVJXRmphQ2htZFc1amRHbHZiaUFvWld3cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWld4YmJXVjBhRzlrYm1GdFpWMWJZWEJ3YkhsZEtHVnNMQ0JoY21jcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lDQWdmU2tvYldWMGFHOWtLVHRjYmlBZ0lDQjlYRzRnSUNBZ2MyVjBjSEp2ZEc4dVlYUjBjaUE5SUdaMWJtTjBhVzl1SUNodVlXMWxMQ0IyWVd4MVpTa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2JtRnRaU0FtSmlCU0xtbHpLRzVoYldVc0lHRnljbUY1S1NBbUppQlNMbWx6S0c1aGJXVmJNRjBzSUZ3aWIySnFaV04wWENJcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCcUlEMGdNQ3dnYW1vZ1BTQnVZVzFsTG14bGJtZDBhRHNnYWlBOElHcHFPeUJxS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1sMFpXMXpXMnBkTG1GMGRISW9ibUZ0WlZ0cVhTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Dd2dhV2tnUFNCMGFHbHpMbWwwWlcxekxteGxibWQwYURzZ2FTQThJR2xwT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtbDBaVzF6VzJsZExtRjBkSElvYm1GdFpTd2dkbUZzZFdVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpPMXh1SUNBZ0lIMDdYRzRnSUNBZ0x5cGNYRnh1SUNBZ0lDQXFJRk5sZEM1amJHVmhjbHh1SUNBZ0lDQmJJRzFsZEdodlpDQmRYRzRnSUNBZ0lDb3FYRzRnSUNBZ0lDb2dVbVZ0YjNabGN5QmhiR3dnWld4bGJXVnVkSE1nWm5KdmJTQjBhR1VnYzJWMFhHNGdJQ0FnWEZ3cUwxeHVJQ0FnSUhObGRIQnliM1J2TG1Oc1pXRnlJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQjNhR2xzWlNBb2RHaHBjeTVzWlc1bmRHZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y0c5d0tDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlPMXh1SUNBZ0lDOHFYRnhjYmlBZ0lDQWdLaUJUWlhRdWMzQnNhV05sWEc0Z0lDQWdJRnNnYldWMGFHOWtJRjFjYmlBZ0lDQWdLaXBjYmlBZ0lDQWdLaUJTWlcxdmRtVnpJR2RwZG1WdUlHVnNaVzFsYm5RZ1puSnZiU0IwYUdVZ2MyVjBYRzRnSUNBZ0lDb3FYRzRnSUNBZ0lENGdVR0Z5WVcxbGRHVnljMXh1SUNBZ0lDQXFLbHh1SUNBZ0lDQXRJR2x1WkdWNElDaHVkVzFpWlhJcElIQnZjMmwwYVc5dUlHOW1JSFJvWlNCa1pXeGxkR2x2Ymx4dUlDQWdJQ0F0SUdOdmRXNTBJQ2h1ZFcxaVpYSXBJRzUxYldKbGNpQnZaaUJsYkdWdFpXNTBJSFJ2SUhKbGJXOTJaVnh1SUNBZ0lDQXRJR2x1YzJWeWRHbHZidUtBcGlBb2IySnFaV04wS1NBamIzQjBhVzl1WVd3Z1pXeGxiV1Z1ZEhNZ2RHOGdhVzV6WlhKMFhHNGdJQ0FnSUQwZ0tHOWlhbVZqZENrZ2MyVjBJR1ZzWlcxbGJuUnpJSFJvWVhRZ2QyVnlaU0JrWld4bGRHVmtYRzRnSUNBZ1hGd3FMMXh1SUNBZ0lITmxkSEJ5YjNSdkxuTndiR2xqWlNBOUlHWjFibU4wYVc5dUlDaHBibVJsZUN3Z1kyOTFiblFzSUdsdWMyVnlkR2x2YmlrZ2UxeHVJQ0FnSUNBZ0lDQnBibVJsZUNBOUlHbHVaR1Y0SUR3Z01DQS9JRzF0WVhnb2RHaHBjeTVzWlc1bmRHZ2dLeUJwYm1SbGVDd2dNQ2tnT2lCcGJtUmxlRHRjYmlBZ0lDQWdJQ0FnWTI5MWJuUWdQU0J0YldGNEtEQXNJRzF0YVc0b2RHaHBjeTVzWlc1bmRHZ2dMU0JwYm1SbGVDd2dZMjkxYm5RcEtUdGNiaUFnSUNBZ0lDQWdkbUZ5SUhSaGFXd2dQU0JiWFN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJ2WkdWc0lEMGdXMTBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmhjbWR6SUQwZ1cxMHNYRzRnSUNBZ0lDQWdJQ0FnSUNCcE8xeHVJQ0FnSUNBZ0lDQm1iM0lnS0drZ1BTQXlPeUJwSUR3Z1lYSm5kVzFsYm5SekxteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmhjbWR6TG5CMWMyZ29ZWEpuZFcxbGJuUnpXMmxkS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQm1iM0lnS0drZ1BTQXdPeUJwSUR3Z1kyOTFiblE3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHOWtaV3d1Y0hWemFDaDBhR2x6VzJsdVpHVjRJQ3NnYVYwcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR1p2Y2lBb095QnBJRHdnZEdocGN5NXNaVzVuZEdnZ0xTQnBibVJsZURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBZV2xzTG5CMWMyZ29kR2hwYzF0cGJtUmxlQ0FySUdsZEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0IyWVhJZ1lYSm5iR1Z1SUQwZ1lYSm5jeTVzWlc1bmRHZzdYRzRnSUNBZ0lDQWdJR1p2Y2lBb2FTQTlJREE3SUdrZ1BDQmhjbWRzWlc0Z0t5QjBZV2xzTG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbWwwWlcxelcybHVaR1Y0SUNzZ2FWMGdQU0IwYUdselcybHVaR1Y0SUNzZ2FWMGdQU0JwSUR3Z1lYSm5iR1Z1SUQ4Z1lYSm5jMXRwWFNBNklIUmhhV3hiYVNBdElHRnlaMnhsYmwwN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhU0E5SUhSb2FYTXVhWFJsYlhNdWJHVnVaM1JvSUQwZ2RHaHBjeTVzWlc1bmRHZ2dMVDBnWTI5MWJuUWdMU0JoY21kc1pXNDdYRzRnSUNBZ0lDQWdJSGRvYVd4bElDaDBhR2x6VzJsZEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCa1pXeGxkR1VnZEdocGMxdHBLeXRkTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dVMlYwS0hSdlpHVnNLVHRjYmlBZ0lDQjlPMXh1SUNBZ0lDOHFYRnhjYmlBZ0lDQWdLaUJUWlhRdVpYaGpiSFZrWlZ4dUlDQWdJQ0JiSUcxbGRHaHZaQ0JkWEc0Z0lDQWdJQ29xWEc0Z0lDQWdJQ29nVW1WdGIzWmxjeUJuYVhabGJpQmxiR1Z0Wlc1MElHWnliMjBnZEdobElITmxkRnh1SUNBZ0lDQXFLbHh1SUNBZ0lDQStJRkJoY21GdFpYUmxjbk5jYmlBZ0lDQWdLaXBjYmlBZ0lDQWdMU0JsYkdWdFpXNTBJQ2h2WW1wbFkzUXBJR1ZzWlcxbGJuUWdkRzhnY21WdGIzWmxYRzRnSUNBZ0lEMGdLR0p2YjJ4bFlXNHBJR0IwY25WbFlDQnBaaUJ2WW1wbFkzUWdkMkZ6SUdadmRXNWtJQ1lnY21WdGIzWmxaQ0JtY205dElIUm9aU0J6WlhSY2JpQWdJQ0JjWENvdlhHNGdJQ0FnYzJWMGNISnZkRzh1WlhoamJIVmtaU0E5SUdaMWJtTjBhVzl1SUNobGJDa2dlMXh1SUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Dd2dhV2tnUFNCMGFHbHpMbXhsYm1kMGFEc2dhU0E4SUdscE95QnBLeXNwSUdsbUlDaDBhR2x6VzJsZElEMDlJR1ZzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuTndiR2xqWlNocExDQXhLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVHRjYmlBZ0lDQnpaWFJ3Y205MGJ5NWhibWx0WVhSbElEMGdablZ1WTNScGIyNGdLSEJoY21GdGN5d2diWE1zSUdWaGMybHVaeXdnWTJGc2JHSmhZMnNwSUh0Y2JpQWdJQ0FnSUNBZ0tGSXVhWE1vWldGemFXNW5MQ0JjSW1aMWJtTjBhVzl1WENJcElIeDhJQ0ZsWVhOcGJtY3BJQ1ltSUNoallXeHNZbUZqYXlBOUlHVmhjMmx1WnlCOGZDQnVkV3hzS1R0Y2JpQWdJQ0FnSUNBZ2RtRnlJR3hsYmlBOUlIUm9hWE11YVhSbGJYTXViR1Z1WjNSb0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnYVNBOUlHeGxiaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lHbDBaVzBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnpaWFFnUFNCMGFHbHpMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXNiR1ZqZEc5eU8xeHVJQ0FnSUNBZ0lDQnBaaUFvSVd4bGJpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWTJGc2JHSmhZMnNnSmlZZ0tHTnZiR3hsWTNSdmNpQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0V0TFd4bGJpQW1KaUJqWVd4c1ltRmpheTVqWVd4c0tITmxkQ2s3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQmxZWE5wYm1jZ1BTQlNMbWx6S0dWaGMybHVaeXdnYzNSeWFXNW5LU0EvSUdWaGMybHVaeUE2SUdOdmJHeGxZM1J2Y2p0Y2JpQWdJQ0FnSUNBZ2RtRnlJR0Z1YVcwZ1BTQlNMbUZ1YVcxaGRHbHZiaWh3WVhKaGJYTXNJRzF6TENCbFlYTnBibWNzSUdOdmJHeGxZM1J2Y2lrN1hHNGdJQ0FnSUNBZ0lHbDBaVzBnUFNCMGFHbHpMbWwwWlcxeld5MHRhVjB1WVc1cGJXRjBaU2hoYm1sdEtUdGNiaUFnSUNBZ0lDQWdkMmhwYkdVZ0tHa3RMU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1cGRHVnRjMXRwWFNBbUppQWhkR2hwY3k1cGRHVnRjMXRwWFM1eVpXMXZkbVZrSUNZbUlIUm9hWE11YVhSbGJYTmJhVjB1WVc1cGJXRjBaVmRwZEdnb2FYUmxiU3dnWVc1cGJTd2dZVzVwYlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FvZEdocGN5NXBkR1Z0YzF0cFhTQW1KaUFoZEdocGN5NXBkR1Z0YzF0cFhTNXlaVzF2ZG1Wa0tTQjhmQ0JzWlc0dExUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JpQWdJQ0I5TzF4dUlDQWdJSE5sZEhCeWIzUnZMbWx1YzJWeWRFRm1kR1Z5SUQwZ1puVnVZM1JwYjI0Z0tHVnNLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQnBJRDBnZEdocGN5NXBkR1Z0Y3k1c1pXNW5kR2c3WEc0Z0lDQWdJQ0FnSUhkb2FXeGxJQ2hwTFMwcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVhWFJsYlhOYmFWMHVhVzV6WlhKMFFXWjBaWElvWld3cE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TzF4dUlDQWdJSDA3WEc0Z0lDQWdjMlYwY0hKdmRHOHVaMlYwUWtKdmVDQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJSGdnUFNCYlhTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhrZ1BTQmJYU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lIZ3lJRDBnVzEwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0I1TWlBOUlGdGRPMXh1SUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ2RHaHBjeTVwZEdWdGN5NXNaVzVuZEdnN0lHa3RMVHNwSUdsbUlDZ2hkR2hwY3k1cGRHVnRjMXRwWFM1eVpXMXZkbVZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1ltOTRJRDBnZEdocGN5NXBkR1Z0YzF0cFhTNW5aWFJDUW05NEtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCNExuQjFjMmdvWW05NExuZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2VTNXdkWE5vS0dKdmVDNTVLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIZ3lMbkIxYzJnb1ltOTRMbmdnS3lCaWIzZ3VkMmxrZEdncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZVRJdWNIVnphQ2hpYjNndWVTQXJJR0p2ZUM1b1pXbG5hSFFwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIZ2dQU0J0YldsdVcyRndjR3g1WFNnd0xDQjRLVHRjYmlBZ0lDQWdJQ0FnZVNBOUlHMXRhVzViWVhCd2JIbGRLREFzSUhrcE8xeHVJQ0FnSUNBZ0lDQjRNaUE5SUcxdFlYaGJZWEJ3YkhsZEtEQXNJSGd5S1R0Y2JpQWdJQ0FnSUNBZ2VUSWdQU0J0YldGNFcyRndjR3g1WFNnd0xDQjVNaWs3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjRPaUI0TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdlVG9nZVN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSGd5T2lCNE1peGNiaUFnSUNBZ0lDQWdJQ0FnSUhreU9pQjVNaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lIZHBaSFJvT2lCNE1pQXRJSGdzWEc0Z0lDQWdJQ0FnSUNBZ0lDQm9aV2xuYUhRNklIa3lJQzBnZVZ4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUgwN1hHNGdJQ0FnYzJWMGNISnZkRzh1WTJ4dmJtVWdQU0JtZFc1amRHbHZiaUFvY3lrZ2UxeHVJQ0FnSUNBZ0lDQnpJRDBnZEdocGN5NXdZWEJsY2k1elpYUW9LVHRjYmlBZ0lDQWdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQXNJR2xwSUQwZ2RHaHBjeTVwZEdWdGN5NXNaVzVuZEdnN0lHa2dQQ0JwYVRzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpMbkIxYzJnb2RHaHBjeTVwZEdWdGMxdHBYUzVqYkc5dVpTZ3BLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnY3p0Y2JpQWdJQ0I5TzF4dUlDQWdJSE5sZEhCeWIzUnZMblJ2VTNSeWFXNW5JRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1hDSlNZWEJvWVZ4Y2VHVmliRnhjZFRJd01UaHpJSE5sZEZ3aU8xeHVJQ0FnSUgwN1hHNWNiaUFnSUNCelpYUndjbTkwYnk1bmJHOTNJRDBnWm5WdVkzUnBiMjRvWjJ4dmQwTnZibVpwWnlrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnY21WMElEMGdkR2hwY3k1d1lYQmxjaTV6WlhRb0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1bWIzSkZZV05vS0daMWJtTjBhVzl1S0hOb1lYQmxMQ0JwYm1SbGVDbDdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdaeUE5SUhOb1lYQmxMbWRzYjNjb1oyeHZkME52Ym1acFp5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppaG5JQ0U5SUc1MWJHd3BlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2N1Wm05eVJXRmphQ2htZFc1amRHbHZiaWh6YUdGd1pUSXNJR2x1WkdWNE1pbDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRDNXdkWE5vS0hOb1lYQmxNaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2NtVjBPMXh1SUNBZ0lIMDdYRzVjYmx4dUlDQWdJQzhxWEZ4Y2JpQWdJQ0FnS2lCVFpYUXVhWE5RYjJsdWRFbHVjMmxrWlZ4dUlDQWdJQ0JiSUcxbGRHaHZaQ0JkWEc0Z0lDQWdJQ29xWEc0Z0lDQWdJQ29nUkdWMFpYSnRhVzVsSUdsbUlHZHBkbVZ1SUhCdmFXNTBJR2x6SUdsdWMybGtaU0IwYUdseklITmxkT0tBbVhNZ1pXeGxiV1Z1ZEhOY2JpQWdJQ0FnS2lwY2JpQWdJQ0FnUGlCUVlYSmhiV1YwWlhKelhHNGdJQ0FnSUNvcVhHNGdJQ0FnSUMwZ2VDQW9iblZ0WW1WeUtTQjRJR052YjNKa2FXNWhkR1VnYjJZZ2RHaGxJSEJ2YVc1MFhHNGdJQ0FnSUMwZ2VTQW9iblZ0WW1WeUtTQjVJR052YjNKa2FXNWhkR1VnYjJZZ2RHaGxJSEJ2YVc1MFhHNGdJQ0FnSUQwZ0tHSnZiMnhsWVc0cElHQjBjblZsWUNCcFppQndiMmx1ZENCcGN5QnBibk5wWkdVZ1lXNTVJRzltSUhSb1pTQnpaWFFuY3lCbGJHVnRaVzUwYzF4dUlDQWdJQ0JjWENvdlhHNGdJQ0FnYzJWMGNISnZkRzh1YVhOUWIybHVkRWx1YzJsa1pTQTlJR1oxYm1OMGFXOXVJQ2g0TENCNUtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCcGMxQnZhVzUwU1c1emFXUmxJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVptOXlSV0ZqYUNobWRXNWpkR2x2YmlBb1pXd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hsYkM1cGMxQnZhVzUwU1c1emFXUmxLSGdzSUhrcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhWE5RYjJsdWRFbHVjMmxrWlNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1poYkhObE95QXZMeUJ6ZEc5d0lHeHZiM0JjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJwYzFCdmFXNTBTVzV6YVdSbE8xeHVJQ0FnSUgwN1hHNWNiaUFnSUNBdktseGNYRzRnSUNBZ0lDb2dVbUZ3YUdGbGJDNXlaV2RwYzNSbGNrWnZiblJjYmlBZ0lDQWdXeUJ0WlhSb2IyUWdYVnh1SUNBZ0lDQXFLbHh1SUNBZ0lDQXFJRUZrWkhNZ1oybDJaVzRnWm05dWRDQjBieUIwYUdVZ2NtVm5hWE4wWlhKbFpDQnpaWFFnYjJZZ1ptOXVkSE1nWm05eUlGSmhjR2hodzZ0c0xpQlRhRzkxYkdRZ1ltVWdkWE5sWkNCaGN5QmhiaUJwYm5SbGNtNWhiQ0JqWVd4c0lHWnliMjBnZDJsMGFHbHVJRU4xWnNPemJ1S0FtWE1nWm05dWRDQm1hV3hsTGx4dUlDQWdJQ0FxSUZKbGRIVnlibk1nYjNKcFoybHVZV3dnY0dGeVlXMWxkR1Z5TENCemJ5QnBkQ0JqYjNWc1pDQmlaU0IxYzJWa0lIZHBkR2dnWTJoaGFXNXBibWN1WEc0Z0lDQWdJQ01nUEdFZ2FISmxaajFjSW1oMGRIQTZMeTkzYVd0cExtZHBkR2gxWWk1amIyMHZjMjl5WTJOMUwyTjFabTl1TDJGaWIzVjBYQ0krVFc5eVpTQmhZbTkxZENCRGRXYkRzMjRnWVc1a0lHaHZkeUIwYnlCamIyNTJaWEowSUhsdmRYSWdabTl1ZENCbWIzSnRJRlJVUml3Z1QxUkdMQ0JsZEdNZ2RHOGdTbUYyWVZOamNtbHdkQ0JtYVd4bExqd3ZZVDVjYmlBZ0lDQWdLaXBjYmlBZ0lDQWdQaUJRWVhKaGJXVjBaWEp6WEc0Z0lDQWdJQ29xWEc0Z0lDQWdJQzBnWm05dWRDQW9iMkpxWldOMEtTQjBhR1VnWm05dWRDQjBieUJ5WldkcGMzUmxjbHh1SUNBZ0lDQTlJQ2h2WW1wbFkzUXBJSFJvWlNCbWIyNTBJSGx2ZFNCd1lYTnpaV1FnYVc1Y2JpQWdJQ0FnUGlCVmMyRm5aVnh1SUNBZ0lDQjhJRU4xWm05dUxuSmxaMmx6ZEdWeVJtOXVkQ2hTWVhCb1lXVnNMbkpsWjJsemRHVnlSbTl1ZENoNzRvQ21mU2twTzF4dUlDQWdJRnhjS2k5Y2JpQWdJQ0JTTG5KbFoybHpkR1Z5Um05dWRDQTlJR1oxYm1OMGFXOXVJQ2htYjI1MEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNnaFptOXVkQzVtWVdObEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWm05dWREdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0IwYUdsekxtWnZiblJ6SUQwZ2RHaHBjeTVtYjI1MGN5QjhmQ0I3ZlR0Y2JpQWdJQ0FnSUNBZ2RtRnlJR1p2Ym5SamIzQjVJRDBnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhjNklHWnZiblF1ZHl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbVlXTmxPaUI3ZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbmJIbHdhSE02SUh0OVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdabUZ0YVd4NUlEMGdabTl1ZEM1bVlXTmxXMXdpWm05dWRDMW1ZVzFwYkhsY0lsMDdYRzRnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJSEJ5YjNBZ2FXNGdabTl1ZEM1bVlXTmxLU0JwWmlBb1ptOXVkQzVtWVdObFcyaGhjMTBvY0hKdmNDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnZiblJqYjNCNUxtWmhZMlZiY0hKdmNGMGdQU0JtYjI1MExtWmhZMlZiY0hKdmNGMDdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11Wm05dWRITmJabUZ0YVd4NVhTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVtYjI1MGMxdG1ZVzFwYkhsZExuQjFjMmdvWm05dWRHTnZjSGtwTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1bWIyNTBjMXRtWVcxcGJIbGRJRDBnVzJadmJuUmpiM0I1WFR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvSVdadmJuUXVjM1puS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JtYjI1MFkyOXdlUzVtWVdObFcxd2lkVzVwZEhNdGNHVnlMV1Z0WENKZElEMGdkRzlKYm5Rb1ptOXVkQzVtWVdObFcxd2lkVzVwZEhNdGNHVnlMV1Z0WENKZExDQXhNQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQm5iSGx3YUNCcGJpQm1iMjUwTG1kc2VYQm9jeWtnYVdZZ0tHWnZiblF1WjJ4NWNHaHpXMmhoYzEwb1oyeDVjR2dwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSEJoZEdnZ1BTQm1iMjUwTG1kc2VYQm9jMXRuYkhsd2FGMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl1ZEdOdmNIa3VaMng1Y0doelcyZHNlWEJvWFNBOUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZHpvZ2NHRjBhQzUzTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnJPaUI3ZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaRG9nY0dGMGFDNWtJQ1ltSUZ3aVRWd2lJQ3NnY0dGMGFDNWtMbkpsY0d4aFkyVW9MMXR0YkdONGRISjJYUzluTENCbWRXNWpkR2x2YmlBb1kyOXRiV0Z1WkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjdiRG9nWENKTVhDSXNJR002SUZ3aVExd2lMQ0I0T2lCY0lucGNJaXdnZERvZ1hDSnRYQ0lzSUhJNklGd2liRndpTENCMk9pQmNJbU5jSW4xYlkyOXRiV0Z1WkYwZ2ZId2dYQ0pOWENJN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtTQXJJRndpZWx3aVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY0dGMGFDNXJLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlHc2dhVzRnY0dGMGFDNXJLU0JwWmlBb2NHRjBhRnRvWVhOZEtHc3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjI1MFkyOXdlUzVuYkhsd2FITmJaMng1Y0doZExtdGJhMTBnUFNCd1lYUm9MbXRiYTEwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR1p2Ym5RN1hHNGdJQ0FnZlR0Y2JpQWdJQ0F2S2x4Y1hHNGdJQ0FnSUNvZ1VHRndaWEl1WjJWMFJtOXVkRnh1SUNBZ0lDQmJJRzFsZEdodlpDQmRYRzRnSUNBZ0lDb3FYRzRnSUNBZ0lDb2dSbWx1WkhNZ1ptOXVkQ0J2WW1wbFkzUWdhVzRnZEdobElISmxaMmx6ZEdWeVpXUWdabTl1ZEhNZ1lua2daMmwyWlc0Z2NHRnlZVzFsZEdWeWN5NGdXVzkxSUdOdmRXeGtJSE53WldOcFpua2diMjVzZVNCdmJtVWdkMjl5WkNCbWNtOXRJSFJvWlNCbWIyNTBJRzVoYldVc0lHeHBhMlVnNG9DY1RYbHlhV0ZrNG9DZElHWnZjaURpZ0p4TmVYSnBZV1FnVUhKdjRvQ2RMbHh1SUNBZ0lDQXFLbHh1SUNBZ0lDQStJRkJoY21GdFpYUmxjbk5jYmlBZ0lDQWdLaXBjYmlBZ0lDQWdMU0JtWVcxcGJIa2dLSE4wY21sdVp5a2dabTl1ZENCbVlXMXBiSGtnYm1GdFpTQnZjaUJoYm5rZ2QyOXlaQ0JtY205dElHbDBYRzRnSUNBZ0lDMGdkMlZwWjJoMElDaHpkSEpwYm1jcElDTnZjSFJwYjI1aGJDQm1iMjUwSUhkbGFXZG9kRnh1SUNBZ0lDQXRJSE4wZVd4bElDaHpkSEpwYm1jcElDTnZjSFJwYjI1aGJDQm1iMjUwSUhOMGVXeGxYRzRnSUNBZ0lDMGdjM1J5WlhSamFDQW9jM1J5YVc1bktTQWpiM0IwYVc5dVlXd2dabTl1ZENCemRISmxkR05vWEc0Z0lDQWdJRDBnS0c5aWFtVmpkQ2tnZEdobElHWnZiblFnYjJKcVpXTjBYRzRnSUNBZ0lENGdWWE5oWjJWY2JpQWdJQ0FnZkNCd1lYQmxjaTV3Y21sdWRDZ3hNREFzSURFd01Dd2dYQ0pVWlhOMElITjBjbWx1WjF3aUxDQndZWEJsY2k1blpYUkdiMjUwS0Z3aVZHbHRaWE5jSWl3Z09EQXdLU3dnTXpBcE8xeHVJQ0FnSUZ4Y0tpOWNiaUFnSUNCd1lYQmxjbkJ5YjNSdkxtZGxkRVp2Ym5RZ1BTQm1kVzVqZEdsdmJpQW9abUZ0YVd4NUxDQjNaV2xuYUhRc0lITjBlV3hsTENCemRISmxkR05vS1NCN1hHNGdJQ0FnSUNBZ0lITjBjbVYwWTJnZ1BTQnpkSEpsZEdOb0lIeDhJRndpYm05eWJXRnNYQ0k3WEc0Z0lDQWdJQ0FnSUhOMGVXeGxJRDBnYzNSNWJHVWdmSHdnWENKdWIzSnRZV3hjSWp0Y2JpQWdJQ0FnSUNBZ2QyVnBaMmgwSUQwZ0szZGxhV2RvZENCOGZDQjdibTl5YldGc09pQTBNREFzSUdKdmJHUTZJRGN3TUN3Z2JHbG5hSFJsY2pvZ016QXdMQ0JpYjJ4a1pYSTZJRGd3TUgxYmQyVnBaMmgwWFNCOGZDQTBNREE3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hVaTVtYjI1MGN5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIWmhjaUJtYjI1MElEMGdVaTVtYjI1MGMxdG1ZVzFwYkhsZE8xeHVJQ0FnSUNBZ0lDQnBaaUFvSVdadmJuUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ1WVcxbElEMGdibVYzSUZKbFowVjRjQ2hjSWloZWZGeGNYRnh6S1Z3aUlDc2dabUZ0YVd4NUxuSmxjR3hoWTJVb0wxdGVYRngzWEZ4a1hGeHpLeUYrTGpwZkxWMHZaeXdnUlNrZ0t5QmNJaWhjWEZ4Y2Mzd2tLVndpTENCY0ltbGNJaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQm1iMjUwVG1GdFpTQnBiaUJTTG1admJuUnpLU0JwWmlBb1VpNW1iMjUwYzF0b1lYTmRLR1p2Ym5ST1lXMWxLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHVZVzFsTG5SbGMzUW9abTl1ZEU1aGJXVXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZiblFnUFNCU0xtWnZiblJ6VzJadmJuUk9ZVzFsWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIWmhjaUIwYUdWbWIyNTBPMXh1SUNBZ0lDQWdJQ0JwWmlBb1ptOXVkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURBc0lHbHBJRDBnWm05dWRDNXNaVzVuZEdnN0lHa2dQQ0JwYVRzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdobFptOXVkQ0E5SUdadmJuUmJhVjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9aV1p2Ym5RdVptRmpaVnRjSW1admJuUXRkMlZwWjJoMFhDSmRJRDA5SUhkbGFXZG9kQ0FtSmlBb2RHaGxabTl1ZEM1bVlXTmxXMXdpWm05dWRDMXpkSGxzWlZ3aVhTQTlQU0J6ZEhsc1pTQjhmQ0FoZEdobFptOXVkQzVtWVdObFcxd2labTl1ZEMxemRIbHNaVndpWFNrZ0ppWWdkR2hsWm05dWRDNW1ZV05sVzF3aVptOXVkQzF6ZEhKbGRHTm9YQ0pkSUQwOUlITjBjbVYwWTJncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR1ZtYjI1ME8xeHVJQ0FnSUgwN1hHNGdJQ0FnTHlwY1hGeHVJQ0FnSUNBcUlGQmhjR1Z5TG5CeWFXNTBYRzRnSUNBZ0lGc2diV1YwYUc5a0lGMWNiaUFnSUNBZ0tpcGNiaUFnSUNBZ0tpQkRjbVZoZEdWeklIQmhkR2dnZEdoaGRDQnlaWEJ5WlhObGJuUWdaMmwyWlc0Z2RHVjRkQ0IzY21sMGRHVnVJSFZ6YVc1bklHZHBkbVZ1SUdadmJuUWdZWFFnWjJsMlpXNGdjRzl6YVhScGIyNGdkMmwwYUNCbmFYWmxiaUJ6YVhwbExseHVJQ0FnSUNBcUlGSmxjM1ZzZENCdlppQjBhR1VnYldWMGFHOWtJR2x6SUhCaGRHZ2daV3hsYldWdWRDQjBhR0YwSUdOdmJuUmhhVzV6SUhkb2IyeGxJSFJsZUhRZ1lYTWdZU0J6WlhCaGNtRjBaU0J3WVhSb0xseHVJQ0FnSUNBcUtseHVJQ0FnSUNBK0lGQmhjbUZ0WlhSbGNuTmNiaUFnSUNBZ0tpcGNiaUFnSUNBZ0xTQjRJQ2h1ZFcxaVpYSXBJSGdnY0c5emFYUnBiMjRnYjJZZ2RHaGxJSFJsZUhSY2JpQWdJQ0FnTFNCNUlDaHVkVzFpWlhJcElIa2djRzl6YVhScGIyNGdiMllnZEdobElIUmxlSFJjYmlBZ0lDQWdMU0J6ZEhKcGJtY2dLSE4wY21sdVp5a2dkR1Y0ZENCMGJ5QndjbWx1ZEZ4dUlDQWdJQ0F0SUdadmJuUWdLRzlpYW1WamRDa2dabTl1ZENCdlltcGxZM1FzSUhObFpTQkFVR0Z3WlhJdVoyVjBSbTl1ZEZ4dUlDQWdJQ0F0SUhOcGVtVWdLRzUxYldKbGNpa2dJMjl3ZEdsdmJtRnNJSE5wZW1VZ2IyWWdkR2hsSUdadmJuUXNJR1JsWm1GMWJIUWdhWE1nWURFMllGeHVJQ0FnSUNBdElHOXlhV2RwYmlBb2MzUnlhVzVuS1NBamIzQjBhVzl1WVd3Z1kyOTFiR1FnWW1VZ1lGd2lZbUZ6Wld4cGJtVmNJbUFnYjNJZ1lGd2liV2xrWkd4bFhDSmdMQ0JrWldaaGRXeDBJR2x6SUdCY0ltMXBaR1JzWlZ3aVlGeHVJQ0FnSUNBdElHeGxkSFJsY2w5emNHRmphVzVuSUNodWRXMWlaWElwSUNOdmNIUnBiMjVoYkNCdWRXMWlaWElnYVc0Z2NtRnVaMlVnWUMweExpNHhZQ3dnWkdWbVlYVnNkQ0JwY3lCZ01HQmNiaUFnSUNBZ0xTQnNhVzVsWDNOd1lXTnBibWNnS0c1MWJXSmxjaWtnSTI5d2RHbHZibUZzSUc1MWJXSmxjaUJwYmlCeVlXNW5aU0JnTVM0dU0yQXNJR1JsWm1GMWJIUWdhWE1nWURGZ1hHNGdJQ0FnSUQwZ0tHOWlhbVZqZENrZ2NtVnpkV3gwYVc1bklIQmhkR2dnWld4bGJXVnVkQ3dnZDJocFkyZ2dZMjl1YzJsemRDQnZaaUJoYkd3Z2JHVjBkR1Z5YzF4dUlDQWdJQ0ErSUZWellXZGxYRzRnSUNBZ0lId2dkbUZ5SUhSNGRDQTlJSEl1Y0hKcGJuUW9NVEFzSURVd0xDQmNJbkJ5YVc1MFhDSXNJSEl1WjJWMFJtOXVkQ2hjSWsxMWMyVnZYQ0lwTENBek1Da3VZWFIwY2loN1ptbHNiRG9nWENJalptWm1YQ0o5S1R0Y2JpQWdJQ0JjWENvdlhHNGdJQ0FnY0dGd1pYSndjbTkwYnk1d2NtbHVkQ0E5SUdaMWJtTjBhVzl1SUNoNExDQjVMQ0J6ZEhKcGJtY3NJR1p2Ym5Rc0lITnBlbVVzSUc5eWFXZHBiaXdnYkdWMGRHVnlYM053WVdOcGJtY3NJR3hwYm1WZmMzQmhZMmx1WnlrZ2UxeHVJQ0FnSUNBZ0lDQnZjbWxuYVc0Z1BTQnZjbWxuYVc0Z2ZId2dYQ0p0YVdSa2JHVmNJanNnTHk4Z1ltRnpaV3hwYm1WOGJXbGtaR3hsWEc0Z0lDQWdJQ0FnSUd4bGRIUmxjbDl6Y0dGamFXNW5JRDBnYlcxaGVDaHRiV2x1S0d4bGRIUmxjbDl6Y0dGamFXNW5JSHg4SURBc0lERXBMQ0F0TVNrN1hHNGdJQ0FnSUNBZ0lHeHBibVZmYzNCaFkybHVaeUE5SUcxdFlYZ29iVzFwYmloc2FXNWxYM053WVdOcGJtY2dmSHdnTVN3Z015a3NJREVwTzF4dUlDQWdJQ0FnSUNCMllYSWdiR1YwZEdWeWN5QTlJRk4wY2loemRISnBibWNwVzNOd2JHbDBYU2hGS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJSE5vYVdaMElEMGdNQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHNXZkR1pwY25OMElEMGdNQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lIQmhkR2dnUFNCRkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnYzJOaGJHVTdYRzRnSUNBZ0lDQWdJRkl1YVhNb1ptOXVkQ3dnWENKemRISnBibWRjSWlrZ0ppWWdLR1p2Ym5RZ1BTQjBhR2x6TG1kbGRFWnZiblFvWm05dWRDa3BPMXh1SUNBZ0lDQWdJQ0JwWmlBb1ptOXVkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjMk5oYkdVZ1BTQW9jMmw2WlNCOGZDQXhOaWtnTHlCbWIyNTBMbVpoWTJWYlhDSjFibWwwY3kxd1pYSXRaVzFjSWwwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1ltSWdQU0JtYjI1MExtWmhZMlV1WW1KdmVGdHpjR3hwZEYwb2MyVndZWEpoZEc5eUtTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBiM0FnUFNBclltSmJNRjBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdsdVpVaGxhV2RvZENBOUlHSmlXek5kSUMwZ1ltSmJNVjBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJocFpuUjVJRDBnTUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCb1pXbG5hSFFnUFNBclltSmJNVjBnS3lBb2IzSnBaMmx1SUQwOUlGd2lZbUZ6Wld4cGJtVmNJaUEvSUd4cGJtVklaV2xuYUhRZ0t5QW9LMlp2Ym5RdVptRmpaUzVrWlhOalpXNTBLU0E2SUd4cGJtVklaV2xuYUhRZ0x5QXlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3TENCcGFTQTlJR3hsZEhSbGNuTXViR1Z1WjNSb095QnBJRHdnYVdrN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHNaWFIwWlhKelcybGRJRDA5SUZ3aVhGeHVYQ0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMmhwWm5RZ1BTQXdPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamRYSnlJRDBnTUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdibTkwWm1seWMzUWdQU0F3TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnphR2xtZEhrZ0t6MGdiR2x1WlVobGFXZG9kQ0FxSUd4cGJtVmZjM0JoWTJsdVp6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2NISmxkaUE5SUc1dmRHWnBjbk4wSUNZbUlHWnZiblF1WjJ4NWNHaHpXMnhsZEhSbGNuTmJhU0F0SURGZFhTQjhmQ0I3ZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOMWNuSWdQU0JtYjI1MExtZHNlWEJvYzF0c1pYUjBaWEp6VzJsZFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJocFpuUWdLejBnYm05MFptbHljM1FnUHlBb2NISmxkaTUzSUh4OElHWnZiblF1ZHlrZ0t5QW9jSEpsZGk1cklDWW1JSEJ5WlhZdWExdHNaWFIwWlhKelcybGRYU0I4ZkNBd0tTQXJJQ2htYjI1MExuY2dLaUJzWlhSMFpYSmZjM0JoWTJsdVp5a2dPaUF3TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnViM1JtYVhKemRDQTlJREU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaGpkWEp5SUNZbUlHTjFjbkl1WkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3WVhSb0lDczlJRkl1ZEhKaGJuTm1iM0p0VUdGMGFDaGpkWEp5TG1Rc0lGdGNJblJjSWl3Z2MyaHBablFnS2lCelkyRnNaU3dnYzJocFpuUjVJQ29nYzJOaGJHVXNJRndpYzF3aUxDQnpZMkZzWlN3Z2MyTmhiR1VzSUhSdmNDd2dhR1ZwWjJoMExDQmNJblJjSWl3Z0tIZ2dMU0IwYjNBcElDOGdjMk5oYkdVc0lDaDVJQzBnYUdWcFoyaDBLU0F2SUhOallXeGxYU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuQmhkR2dvY0dGMGFDa3VZWFIwY2loN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JtYVd4c09pQmNJaU13TURCY0lpeGNiaUFnSUNBZ0lDQWdJQ0FnSUhOMGNtOXJaVG9nWENKdWIyNWxYQ0pjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnZlR0Y2JseHVJQ0FnSUM4cVhGeGNiaUFnSUNBZ0tpQlFZWEJsY2k1aFpHUmNiaUFnSUNBZ1d5QnRaWFJvYjJRZ1hWeHVJQ0FnSUNBcUtseHVJQ0FnSUNBcUlFbHRjRzl5ZEhNZ1pXeGxiV1Z1ZEhNZ2FXNGdTbE5QVGlCaGNuSmhlU0JwYmlCbWIzSnRZWFFnWUh0MGVYQmxPaUIwZVhCbExDQThZWFIwY21saWRYUmxjejU5WUZ4dUlDQWdJQ0FxS2x4dUlDQWdJQ0ErSUZCaGNtRnRaWFJsY25OY2JpQWdJQ0FnS2lwY2JpQWdJQ0FnTFNCcWMyOXVJQ2hoY25KaGVTbGNiaUFnSUNBZ1BTQW9iMkpxWldOMEtTQnlaWE4xYkhScGJtY2djMlYwSUc5bUlHbHRjRzl5ZEdWa0lHVnNaVzFsYm5SelhHNGdJQ0FnSUQ0Z1ZYTmhaMlZjYmlBZ0lDQWdmQ0J3WVhCbGNpNWhaR1FvVzF4dUlDQWdJQ0I4SUNBZ0lDQjdYRzRnSUNBZ0lId2dJQ0FnSUNBZ0lDQjBlWEJsT2lCY0ltTnBjbU5zWlZ3aUxGeHVJQ0FnSUNCOElDQWdJQ0FnSUNBZ1kzZzZJREV3TEZ4dUlDQWdJQ0I4SUNBZ0lDQWdJQ0FnWTNrNklERXdMRnh1SUNBZ0lDQjhJQ0FnSUNBZ0lDQWdjam9nTlZ4dUlDQWdJQ0I4SUNBZ0lDQjlMRnh1SUNBZ0lDQjhJQ0FnSUNCN1hHNGdJQ0FnSUh3Z0lDQWdJQ0FnSUNCMGVYQmxPaUJjSW5KbFkzUmNJaXhjYmlBZ0lDQWdmQ0FnSUNBZ0lDQWdJSGc2SURFd0xGeHVJQ0FnSUNCOElDQWdJQ0FnSUNBZ2VUb2dNVEFzWEc0Z0lDQWdJSHdnSUNBZ0lDQWdJQ0IzYVdSMGFEb2dNVEFzWEc0Z0lDQWdJSHdnSUNBZ0lDQWdJQ0JvWldsbmFIUTZJREV3TEZ4dUlDQWdJQ0I4SUNBZ0lDQWdJQ0FnWm1sc2JEb2dYQ0lqWm1Nd1hDSmNiaUFnSUNBZ2ZDQWdJQ0FnZlZ4dUlDQWdJQ0I4SUYwcE8xeHVJQ0FnSUZ4Y0tpOWNiaUFnSUNCd1lYQmxjbkJ5YjNSdkxtRmtaQ0E5SUdaMWJtTjBhVzl1SUNocWMyOXVLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaFNMbWx6S0dwemIyNHNJRndpWVhKeVlYbGNJaWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCeVpYTWdQU0IwYUdsekxuTmxkQ2dwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdrZ1BTQXdMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xwSUQwZ2FuTnZiaTVzWlc1bmRHZ3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhanRjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUFvT3lCcElEd2dhV2s3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR29nUFNCcWMyOXVXMmxkSUh4OElIdDlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1ZzWlcxbGJuUnpXMmhoYzEwb2FpNTBlWEJsS1NBbUppQnlaWE11Y0hWemFDaDBhR2x6VzJvdWRIbHdaVjBvS1M1aGRIUnlLR29wS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnY21Wek8xeHVJQ0FnSUgwN1hHNWNiaUFnSUNBdktseGNYRzRnSUNBZ0lDb2dVbUZ3YUdGbGJDNW1iM0p0WVhSY2JpQWdJQ0FnV3lCdFpYUm9iMlFnWFZ4dUlDQWdJQ0FxS2x4dUlDQWdJQ0FxSUZOcGJYQnNaU0JtYjNKdFlYUWdablZ1WTNScGIyNHVJRkpsY0d4aFkyVnpJR052Ym5OMGNuVmpkR2x2YmlCdlppQjBlWEJsSU9LQW5HQjdQRzUxYldKbGNqNTlZT0tBblNCMGJ5QjBhR1VnWTI5eWNtVnpjRzl1WkdsdVp5QmhjbWQxYldWdWRDNWNiaUFnSUNBZ0tpcGNiaUFnSUNBZ1BpQlFZWEpoYldWMFpYSnpYRzRnSUNBZ0lDb3FYRzRnSUNBZ0lDMGdkRzlyWlc0Z0tITjBjbWx1WnlrZ2MzUnlhVzVuSUhSdklHWnZjbTFoZEZ4dUlDQWdJQ0F0SU9LQXBpQW9jM1J5YVc1bktTQnlaWE4wSUc5bUlHRnlaM1Z0Wlc1MGN5QjNhV3hzSUdKbElIUnlaV0YwWldRZ1lYTWdjR0Z5WVcxbGRHVnljeUJtYjNJZ2NtVndiR0ZqWlcxbGJuUmNiaUFnSUNBZ1BTQW9jM1J5YVc1bktTQm1iM0p0WVhSbFpDQnpkSEpwYm1kY2JpQWdJQ0FnUGlCVmMyRm5aVnh1SUNBZ0lDQjhJSFpoY2lCNElEMGdNVEFzWEc0Z0lDQWdJSHdnSUNBZ0lIa2dQU0F5TUN4Y2JpQWdJQ0FnZkNBZ0lDQWdkMmxrZEdnZ1BTQTBNQ3hjYmlBZ0lDQWdmQ0FnSUNBZ2FHVnBaMmgwSUQwZ05UQTdYRzRnSUNBZ0lId2dMeThnZEdocGN5QjNhV3hzSUdSeVlYY2dZU0J5WldOMFlXNW5kV3hoY2lCemFHRndaU0JsY1hWcGRtRnNaVzUwSUhSdklGd2lUVEV3TERJd2FEUXdkalV3YUMwME1IcGNJbHh1SUNBZ0lDQjhJSEJoY0dWeUxuQmhkR2dvVW1Gd2FHRmxiQzVtYjNKdFlYUW9YQ0pOZXpCOUxIc3hmV2g3TW4xMmV6TjlhSHMwZlhwY0lpd2dlQ3dnZVN3Z2QybGtkR2dzSUdobGFXZG9kQ3dnTFhkcFpIUm9LU2s3WEc0Z0lDQWdYRndxTDF4dUlDQWdJRkl1Wm05eWJXRjBJRDBnWm5WdVkzUnBiMjRnS0hSdmEyVnVMQ0J3WVhKaGJYTXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHRnlaM01nUFNCU0xtbHpLSEJoY21GdGN5d2dZWEp5WVhrcElEOGdXekJkVzJOdmJtTmhkRjBvY0dGeVlXMXpLU0E2SUdGeVozVnRaVzUwY3p0Y2JpQWdJQ0FnSUNBZ2RHOXJaVzRnSmlZZ1VpNXBjeWgwYjJ0bGJpd2djM1J5YVc1bktTQW1KaUJoY21kekxteGxibWQwYUNBdElERWdKaVlnS0hSdmEyVnVJRDBnZEc5clpXNHVjbVZ3YkdGalpTaG1iM0p0WVhSeVp5d2dablZ1WTNScGIyNGdLSE4wY2l3Z2FTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdGeVozTmJLeXRwWFNBOVBTQnVkV3hzSUQ4Z1JTQTZJR0Z5WjNOYmFWMDdYRzRnSUNBZ0lDQWdJSDBwS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSdmEyVnVJSHg4SUVVN1hHNGdJQ0FnZlR0Y2JpQWdJQ0F2S2x4Y1hHNGdJQ0FnSUNvZ1VtRndhR0ZsYkM1bWRXeHNabWxzYkZ4dUlDQWdJQ0JiSUcxbGRHaHZaQ0JkWEc0Z0lDQWdJQ29xWEc0Z0lDQWdJQ29nUVNCc2FYUjBiR1VnWW1sMElHMXZjbVVnWVdSMllXNWpaV1FnWm05eWJXRjBJR1oxYm1OMGFXOXVJSFJvWVc0Z1FGSmhjR2hoWld3dVptOXliV0YwTGlCU1pYQnNZV05sY3lCamIyNXpkSEoxWTNScGIyNGdiMllnZEhsd1pTRGlnSnhnZXp4dVlXMWxQbjFnNG9DZElIUnZJSFJvWlNCamIzSnlaWE53YjI1a2FXNW5JR0Z5WjNWdFpXNTBMbHh1SUNBZ0lDQXFLbHh1SUNBZ0lDQStJRkJoY21GdFpYUmxjbk5jYmlBZ0lDQWdLaXBjYmlBZ0lDQWdMU0IwYjJ0bGJpQW9jM1J5YVc1bktTQnpkSEpwYm1jZ2RHOGdabTl5YldGMFhHNGdJQ0FnSUMwZ2FuTnZiaUFvYjJKcVpXTjBLU0J2WW1wbFkzUWdkMmhwWTJnZ2NISnZjR1Z5ZEdsbGN5QjNhV3hzSUdKbElIVnpaV1FnWVhNZ1lTQnlaWEJzWVdObGJXVnVkRnh1SUNBZ0lDQTlJQ2h6ZEhKcGJtY3BJR1p2Y20xaGRHVmtJSE4wY21sdVoxeHVJQ0FnSUNBK0lGVnpZV2RsWEc0Z0lDQWdJSHdnTHk4Z2RHaHBjeUIzYVd4c0lHUnlZWGNnWVNCeVpXTjBZVzVuZFd4aGNpQnphR0Z3WlNCbGNYVnBkbUZzWlc1MElIUnZJRndpVFRFd0xESXdhRFF3ZGpVd2FDMDBNSHBjSWx4dUlDQWdJQ0I4SUhCaGNHVnlMbkJoZEdnb1VtRndhR0ZsYkM1bWRXeHNabWxzYkNoY0lrMTdlSDBzZTNsOWFIdGthVzB1ZDJsa2RHaDlkbnRrYVcwdWFHVnBaMmgwZldoN1pHbHRXeWR1WldkaGRHbDJaU0IzYVdSMGFDZGRmWHBjSWl3Z2UxeHVJQ0FnSUNCOElDQWdJQ0I0T2lBeE1DeGNiaUFnSUNBZ2ZDQWdJQ0FnZVRvZ01qQXNYRzRnSUNBZ0lId2dJQ0FnSUdScGJUb2dlMXh1SUNBZ0lDQjhJQ0FnSUNBZ0lDQWdkMmxrZEdnNklEUXdMRnh1SUNBZ0lDQjhJQ0FnSUNBZ0lDQWdhR1ZwWjJoME9pQTFNQ3hjYmlBZ0lDQWdmQ0FnSUNBZ0lDQWdJRndpYm1WbllYUnBkbVVnZDJsa2RHaGNJam9nTFRRd1hHNGdJQ0FnSUh3Z0lDQWdJSDFjYmlBZ0lDQWdmQ0I5S1NrN1hHNGdJQ0FnWEZ3cUwxeHVJQ0FnSUZJdVpuVnNiR1pwYkd3Z1BTQW9ablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdkRzlyWlc1U1pXZGxlQ0E5SUM5Y1hIc29XMTVjWEgxZEt5bGNYSDB2Wnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJRzlpYWs1dmRHRjBhVzl1VW1WblpYZ2dQU0F2S0Q4NktEODZYbnhjWEM0cEtDNHJQeWtvUHoxY1hGdDhYRnd1ZkNSOFhGd29LWHhjWEZzb0ozeGNJaWtvTGlzL0tWeGNNbHhjWFNrb1hGd29YRndwS1Q4dlp5d2dMeThnYldGMFkyaGxjeUF1ZUhoNGVIZ2diM0lnVzF3aWVIaDRlSGhjSWwwZ2RHOGdjblZ1SUc5MlpYSWdiMkpxWldOMElIQnliM0JsY25ScFpYTmNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGNHeGhZMlZ5SUQwZ1puVnVZM1JwYjI0Z0tHRnNiQ3dnYTJWNUxDQnZZbW9wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdjbVZ6SUQwZ2IySnFPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3RsZVM1eVpYQnNZV05sS0c5aWFrNXZkR0YwYVc5dVVtVm5aWGdzSUdaMWJtTjBhVzl1SUNoaGJHd3NJRzVoYldVc0lIRjFiM1JsTENCeGRXOTBaV1JPWVcxbExDQnBjMFoxYm1NcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYm1GdFpTQTlJRzVoYldVZ2ZId2djWFZ2ZEdWa1RtRnRaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSEpsY3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRzVoYldVZ2FXNGdjbVZ6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZ6SUQwZ2NtVnpXMjVoYldWZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVzltSUhKbGN5QTlQU0JjSW1aMWJtTjBhVzl1WENJZ0ppWWdhWE5HZFc1aklDWW1JQ2h5WlhNZ1BTQnlaWE1vS1NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYTWdQU0FvY21WeklEMDlJRzUxYkd3Z2ZId2djbVZ6SUQwOUlHOWlhaUEvSUdGc2JDQTZJSEpsY3lrZ0t5QmNJbHdpTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ5WlhNN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnS0hOMGNpd2diMkpxS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdVM1J5YVc1bktITjBjaWt1Y21Wd2JHRmpaU2gwYjJ0bGJsSmxaMlY0TENCbWRXNWpkR2x2YmlBb1lXeHNMQ0JyWlhrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2NtVndiR0ZqWlhJb1lXeHNMQ0JyWlhrc0lHOWlhaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0I5S1NncE8xeHVJQ0FnSUM4cVhGeGNiaUFnSUNBZ0tpQlNZWEJvWVdWc0xtNXBibXBoWEc0Z0lDQWdJRnNnYldWMGFHOWtJRjFjYmlBZ0lDQWdLaXBjYmlBZ0lDQWdLaUJKWmlCNWIzVWdkMkZ1ZENCMGJ5QnNaV0YyWlNCdWJ5QjBjbUZqWlNCdlppQlNZWEJvWWNPcmJDQW9WMlZzYkN3Z1VtRndhR0hEcTJ3Z1kzSmxZWFJsY3lCdmJteDVJRzl1WlNCbmJHOWlZV3dnZG1GeWFXRmliR1VnWUZKaGNHaGhaV3hnTENCaWRYUWdZVzU1ZDJGNUxpa2dXVzkxSUdOaGJpQjFjMlVnWUc1cGJtcGhZQ0J0WlhSb2IyUXVYRzRnSUNBZ0lDb2dRbVYzWVhKbExDQjBhR0YwSUdsdUlIUm9hWE1nWTJGelpTQndiSFZuYVc1eklHTnZkV3hrSUhOMGIzQWdkMjl5YTJsdVp5d2dZbVZqWVhWelpTQjBhR1Y1SUdGeVpTQmtaWEJsYm1ScGJtY2diMjRnWjJ4dlltRnNJSFpoY21saFlteGxJR1Y0YVhOMFpXNWpaUzVjYmlBZ0lDQWdLaXBjYmlBZ0lDQWdQU0FvYjJKcVpXTjBLU0JTWVhCb1lXVnNJRzlpYW1WamRGeHVJQ0FnSUNBK0lGVnpZV2RsWEc0Z0lDQWdJSHdnS0daMWJtTjBhVzl1SUNoc2IyTmhiRjl5WVhCb1lXVnNLU0I3WEc0Z0lDQWdJSHdnSUNBZ0lIWmhjaUJ3WVhCbGNpQTlJR3h2WTJGc1gzSmhjR2hoWld3b01UQXNJREV3TENBek1qQXNJREl3TUNrN1hHNGdJQ0FnSUh3Z0lDQWdJT0tBcGx4dUlDQWdJQ0I4SUgwcEtGSmhjR2hoWld3dWJtbHVhbUVvS1NrN1hHNGdJQ0FnWEZ3cUwxeHVJQ0FnSUZJdWJtbHVhbUVnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJR2xtSUNodmJHUlNZWEJvWVdWc0xuZGhjeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdaeTUzYVc0dVVtRndhR0ZsYkNBOUlHOXNaRkpoY0doaFpXd3VhWE03WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJKUlRnZ2NtRnBjMlZ6SUdGdUlHVnljbTl5SUhkb1pXNGdaR1ZzWlhScGJtY2dkMmx1Wkc5M0lIQnliM0JsY25SNVhHNGdJQ0FnSUNBZ0lDQWdJQ0IzYVc1a2IzY3VVbUZ3YUdGbGJDQTlJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdWc1pYUmxJSGRwYm1SdmR5NVNZWEJvWVdWc08xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNCallYUmphQ2hsS1NCN2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQlNPMXh1SUNBZ0lIMDdYRzRnSUNBZ0x5cGNYRnh1SUNBZ0lDQXFJRkpoY0doaFpXd3VjM1JjYmlBZ0lDQWdXeUJ3Y205d1pYSjBlU0FvYjJKcVpXTjBLU0JkWEc0Z0lDQWdJQ29xWEc0Z0lDQWdJQ29nV1c5MUlHTmhiaUJoWkdRZ2VXOTFjaUJ2ZDI0Z2JXVjBhRzlrSUhSdklHVnNaVzFsYm5SeklHRnVaQ0J6WlhSekxpQkpkQ0JwY3lCM2FYTmxJSFJ2SUdGa1pDQmhJSE5sZENCdFpYUm9iMlFnWm05eUlHVmhZMmdnWld4bGJXVnVkQ0J0WlhSb2IyUmNiaUFnSUNBZ0tpQjViM1VnWVdSa1pXUXNJSE52SUhsdmRTQjNhV3hzSUdKbElHRmliR1VnZEc4Z1kyRnNiQ0IwYUdVZ2MyRnRaU0J0WlhSb2IyUWdiMjRnYzJWMGN5QjBiMjh1WEc0Z0lDQWdJQ29xWEc0Z0lDQWdJQ29nVTJWbElHRnNjMjhnUUZKaGNHaGhaV3d1Wld3dVhHNGdJQ0FnSUQ0Z1ZYTmhaMlZjYmlBZ0lDQWdmQ0JTWVhCb1lXVnNMbVZzTG5KbFpDQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnZkNBZ0lDQWdkR2hwY3k1aGRIUnlLSHRtYVd4c09pQmNJaU5tTURCY0luMHBPMXh1SUNBZ0lDQjhJSDA3WEc0Z0lDQWdJSHdnVW1Gd2FHRmxiQzV6ZEM1eVpXUWdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUh3Z0lDQWdJSFJvYVhNdVptOXlSV0ZqYUNobWRXNWpkR2x2YmlBb1pXd3BJSHRjYmlBZ0lDQWdmQ0FnSUNBZ0lDQWdJR1ZzTG5KbFpDZ3BPMXh1SUNBZ0lDQjhJQ0FnSUNCOUtUdGNiaUFnSUNBZ2ZDQjlPMXh1SUNBZ0lDQjhJQzh2SUhSb1pXNGdkWE5sSUdsMFhHNGdJQ0FnSUh3Z2NHRndaWEl1YzJWMEtIQmhjR1Z5TG1OcGNtTnNaU2d4TURBc0lERXdNQ3dnTWpBcExDQndZWEJsY2k1amFYSmpiR1VvTVRFd0xDQXhNREFzSURJd0tTa3VjbVZrS0NrN1hHNGdJQ0FnWEZ3cUwxeHVJQ0FnSUZJdWMzUWdQU0J6WlhSd2NtOTBienRjYmx4dUlDQWdJR1YyWlM1dmJpaGNJbkpoY0doaFpXd3VSRTlOYkc5aFpGd2lMQ0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lHeHZZV1JsWkNBOUlIUnlkV1U3WEc0Z0lDQWdmU2s3WEc1Y2JpQWdJQ0F2THlCR2FYSmxabTk0SUR3ekxqWWdabWw0T2lCb2RIUndPaTh2ZDJWaWNtVm1iR1ZqZEdsdmJpNWliRzluYzNCdmRDNWpiMjB2TWpBd09TOHhNUzh4T1RVdFkyaGhjbk10ZEc4dGFHVnNjQzFzWVhwNUxXeHZZV1JwYm1jdWFIUnRiRnh1SUNBZ0lDaG1kVzVqZEdsdmJpQW9aRzlqTENCc2IyRmtaV1FzSUdZcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0dSdll5NXlaV0ZrZVZOMFlYUmxJRDA5SUc1MWJHd2dKaVlnWkc5akxtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJcGUxeHVJQ0FnSUNBZ0lDQWdJQ0FnWkc5akxtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb2JHOWhaR1ZrTENCbUlEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSdll5NXlaVzF2ZG1WRmRtVnVkRXhwYzNSbGJtVnlLR3h2WVdSbFpDd2daaXdnWm1Gc2MyVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1J2WXk1eVpXRmtlVk4wWVhSbElEMGdYQ0pqYjIxd2JHVjBaVndpTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU3dnWm1Gc2MyVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pHOWpMbkpsWVdSNVUzUmhkR1VnUFNCY0lteHZZV1JwYm1kY0lqdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUJwYzB4dllXUmxaQ2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2d2YVc0dktTNTBaWE4wS0dSdll5NXlaV0ZrZVZOMFlYUmxLU0EvSUhObGRGUnBiV1Z2ZFhRb2FYTk1iMkZrWldRc0lEa3BJRG9nVWk1bGRtVW9YQ0p5WVhCb1lXVnNMa1JQVFd4dllXUmNJaWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2FYTk1iMkZrWldRb0tUdGNiaUFnSUNCOUtTaGtiMk4xYldWdWRDd2dYQ0pFVDAxRGIyNTBaVzUwVEc5aFpHVmtYQ0lwTzF4dVhHNGdJQ0FnY21WMGRYSnVJRkk3WEc1OUtUdGNiaUpkTENKdFlYQndhVzVuY3lJNklrRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkJRVHNpTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLy4vZGV2L3JhcGhhZWwuY29yZS5qc1xcblwiKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9kZXYvcmFwaGFlbC5zdmcuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9kZXYvcmFwaGFlbC5zdmcuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcInZhciBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXzshKF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18gPSBbX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9yYXBoYWVsLmNvcmUgKi8gXFxcIi4vZGV2L3JhcGhhZWwuY29yZS5qc1xcXCIpXSwgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gPSAoZnVuY3Rpb24oUikge1xcbiAgICBpZiAoUiAmJiAhUi5zdmcpIHtcXG4gICAgICAgIHJldHVybjtcXG4gICAgfVxcblxcbiAgICB2YXIgaGFzID0gXFxcImhhc093blByb3BlcnR5XFxcIixcXG4gICAgICAgIFN0ciA9IFN0cmluZyxcXG4gICAgICAgIHRvRmxvYXQgPSBwYXJzZUZsb2F0LFxcbiAgICAgICAgdG9JbnQgPSBwYXJzZUludCxcXG4gICAgICAgIG1hdGggPSBNYXRoLFxcbiAgICAgICAgbW1heCA9IG1hdGgubWF4LFxcbiAgICAgICAgYWJzID0gbWF0aC5hYnMsXFxuICAgICAgICBwb3cgPSBtYXRoLnBvdyxcXG4gICAgICAgIHNlcGFyYXRvciA9IC9bLCBdKy8sXFxuICAgICAgICBldmUgPSBSLmV2ZSxcXG4gICAgICAgIEUgPSBcXFwiXFxcIixcXG4gICAgICAgIFMgPSBcXFwiIFxcXCI7XFxuICAgIHZhciB4bGluayA9IFxcXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXFxcIixcXG4gICAgICAgIG1hcmtlcnMgPSB7XFxuICAgICAgICAgICAgYmxvY2s6IFxcXCJNNSwwIDAsMi41IDUsNXpcXFwiLFxcbiAgICAgICAgICAgIGNsYXNzaWM6IFxcXCJNNSwwIDAsMi41IDUsNSAzLjUsMyAzLjUsMnpcXFwiLFxcbiAgICAgICAgICAgIGRpYW1vbmQ6IFxcXCJNMi41LDAgNSwyLjUgMi41LDUgMCwyLjV6XFxcIixcXG4gICAgICAgICAgICBvcGVuOiBcXFwiTTYsMSAxLDMuNSA2LDZcXFwiLFxcbiAgICAgICAgICAgIG92YWw6IFxcXCJNMi41LDBBMi41LDIuNSwwLDAsMSwyLjUsNSAyLjUsMi41LDAsMCwxLDIuNSwwelxcXCJcXG4gICAgICAgIH0sXFxuICAgICAgICBtYXJrZXJDb3VudGVyID0ge307XFxuICAgIFIudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XFxuICAgICAgICByZXR1cm4gIFxcXCJZb3VyIGJyb3dzZXIgc3VwcG9ydHMgU1ZHLlxcXFxuWW91IGFyZSBydW5uaW5nIFJhcGhhXFxcXHhlYmwgXFxcIiArIHRoaXMudmVyc2lvbjtcXG4gICAgfTtcXG4gICAgdmFyICQgPSBmdW5jdGlvbiAoZWwsIGF0dHIpIHtcXG4gICAgICAgIGlmIChhdHRyKSB7XFxuICAgICAgICAgICAgaWYgKHR5cGVvZiBlbCA9PSBcXFwic3RyaW5nXFxcIikge1xcbiAgICAgICAgICAgICAgICBlbCA9ICQoZWwpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gYXR0cikgaWYgKGF0dHJbaGFzXShrZXkpKSB7XFxuICAgICAgICAgICAgICAgIGlmIChrZXkuc3Vic3RyaW5nKDAsIDYpID09IFxcXCJ4bGluazpcXFwiKSB7XFxuICAgICAgICAgICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGVOUyh4bGluaywga2V5LnN1YnN0cmluZyg2KSwgU3RyKGF0dHJba2V5XSkpO1xcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgICAgZWwuc2V0QXR0cmlidXRlKGtleSwgU3RyKGF0dHJba2V5XSkpO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICBlbCA9IFIuX2cuZG9jLmNyZWF0ZUVsZW1lbnROUyhcXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiLCBlbCk7XFxuICAgICAgICAgICAgZWwuc3R5bGUgJiYgKGVsLnN0eWxlLndlYmtpdFRhcEhpZ2hsaWdodENvbG9yID0gXFxcInJnYmEoMCwwLDAsMClcXFwiKTtcXG4gICAgICAgIH1cXG4gICAgICAgIHJldHVybiBlbDtcXG4gICAgfSxcXG4gICAgYWRkR3JhZGllbnRGaWxsID0gZnVuY3Rpb24gKGVsZW1lbnQsIGdyYWRpZW50KSB7XFxuICAgICAgICB2YXIgdHlwZSA9IFxcXCJsaW5lYXJcXFwiLFxcbiAgICAgICAgICAgIGlkID0gZWxlbWVudC5pZCArIGdyYWRpZW50LFxcbiAgICAgICAgICAgIGZ4ID0gLjUsIGZ5ID0gLjUsXFxuICAgICAgICAgICAgbyA9IGVsZW1lbnQubm9kZSxcXG4gICAgICAgICAgICBTVkcgPSBlbGVtZW50LnBhcGVyLFxcbiAgICAgICAgICAgIHMgPSBvLnN0eWxlLFxcbiAgICAgICAgICAgIGVsID0gUi5fZy5kb2MuZ2V0RWxlbWVudEJ5SWQoaWQpO1xcbiAgICAgICAgaWYgKCFlbCkge1xcbiAgICAgICAgICAgIGdyYWRpZW50ID0gU3RyKGdyYWRpZW50KS5yZXBsYWNlKFIuX3JhZGlhbF9ncmFkaWVudCwgZnVuY3Rpb24gKGFsbCwgX2Z4LCBfZnkpIHtcXG4gICAgICAgICAgICAgICAgdHlwZSA9IFxcXCJyYWRpYWxcXFwiO1xcbiAgICAgICAgICAgICAgICBpZiAoX2Z4ICYmIF9meSkge1xcbiAgICAgICAgICAgICAgICAgICAgZnggPSB0b0Zsb2F0KF9meCk7XFxuICAgICAgICAgICAgICAgICAgICBmeSA9IHRvRmxvYXQoX2Z5KTtcXG4gICAgICAgICAgICAgICAgICAgIHZhciBkaXIgPSAoKGZ5ID4gLjUpICogMiAtIDEpO1xcbiAgICAgICAgICAgICAgICAgICAgcG93KGZ4IC0gLjUsIDIpICsgcG93KGZ5IC0gLjUsIDIpID4gLjI1ICYmXFxuICAgICAgICAgICAgICAgICAgICAgICAgKGZ5ID0gbWF0aC5zcXJ0KC4yNSAtIHBvdyhmeCAtIC41LCAyKSkgKiBkaXIgKyAuNSkgJiZcXG4gICAgICAgICAgICAgICAgICAgICAgICBmeSAhPSAuNSAmJlxcbiAgICAgICAgICAgICAgICAgICAgICAgIChmeSA9IGZ5LnRvRml4ZWQoNSkgLSAxZS01ICogZGlyKTtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICByZXR1cm4gRTtcXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICBncmFkaWVudCA9IGdyYWRpZW50LnNwbGl0KC9cXFxccypcXFxcLVxcXFxzKi8pO1xcbiAgICAgICAgICAgIGlmICh0eXBlID09IFxcXCJsaW5lYXJcXFwiKSB7XFxuICAgICAgICAgICAgICAgIHZhciBhbmdsZSA9IGdyYWRpZW50LnNoaWZ0KCk7XFxuICAgICAgICAgICAgICAgIGFuZ2xlID0gLXRvRmxvYXQoYW5nbGUpO1xcbiAgICAgICAgICAgICAgICBpZiAoaXNOYU4oYW5nbGUpKSB7XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICB2YXIgdmVjdG9yID0gWzAsIDAsIG1hdGguY29zKFIucmFkKGFuZ2xlKSksIG1hdGguc2luKFIucmFkKGFuZ2xlKSldLFxcbiAgICAgICAgICAgICAgICAgICAgbWF4ID0gMSAvIChtbWF4KGFicyh2ZWN0b3JbMl0pLCBhYnModmVjdG9yWzNdKSkgfHwgMSk7XFxuICAgICAgICAgICAgICAgIHZlY3RvclsyXSAqPSBtYXg7XFxuICAgICAgICAgICAgICAgIHZlY3RvclszXSAqPSBtYXg7XFxuICAgICAgICAgICAgICAgIGlmICh2ZWN0b3JbMl0gPCAwKSB7XFxuICAgICAgICAgICAgICAgICAgICB2ZWN0b3JbMF0gPSAtdmVjdG9yWzJdO1xcbiAgICAgICAgICAgICAgICAgICAgdmVjdG9yWzJdID0gMDtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICBpZiAodmVjdG9yWzNdIDwgMCkge1xcbiAgICAgICAgICAgICAgICAgICAgdmVjdG9yWzFdID0gLXZlY3RvclszXTtcXG4gICAgICAgICAgICAgICAgICAgIHZlY3RvclszXSA9IDA7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgdmFyIGRvdHMgPSBSLl9wYXJzZURvdHMoZ3JhZGllbnQpO1xcbiAgICAgICAgICAgIGlmICghZG90cykge1xcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgaWQgPSBpZC5yZXBsYWNlKC9bXFxcXChcXFxcKVxcXFxzLFxcXFx4YjAjXS9nLCBcXFwiX1xcXCIpO1xcblxcbiAgICAgICAgICAgIGlmIChlbGVtZW50LmdyYWRpZW50ICYmIGlkICE9IGVsZW1lbnQuZ3JhZGllbnQuaWQpIHtcXG4gICAgICAgICAgICAgICAgU1ZHLmRlZnMucmVtb3ZlQ2hpbGQoZWxlbWVudC5ncmFkaWVudCk7XFxuICAgICAgICAgICAgICAgIGRlbGV0ZSBlbGVtZW50LmdyYWRpZW50O1xcbiAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICBpZiAoIWVsZW1lbnQuZ3JhZGllbnQpIHtcXG4gICAgICAgICAgICAgICAgZWwgPSAkKHR5cGUgKyBcXFwiR3JhZGllbnRcXFwiLCB7aWQ6IGlkfSk7XFxuICAgICAgICAgICAgICAgIGVsZW1lbnQuZ3JhZGllbnQgPSBlbDtcXG4gICAgICAgICAgICAgICAgJChlbCwgdHlwZSA9PSBcXFwicmFkaWFsXFxcIiA/IHtcXG4gICAgICAgICAgICAgICAgICAgIGZ4OiBmeCxcXG4gICAgICAgICAgICAgICAgICAgIGZ5OiBmeVxcbiAgICAgICAgICAgICAgICB9IDoge1xcbiAgICAgICAgICAgICAgICAgICAgeDE6IHZlY3RvclswXSxcXG4gICAgICAgICAgICAgICAgICAgIHkxOiB2ZWN0b3JbMV0sXFxuICAgICAgICAgICAgICAgICAgICB4MjogdmVjdG9yWzJdLFxcbiAgICAgICAgICAgICAgICAgICAgeTI6IHZlY3RvclszXSxcXG4gICAgICAgICAgICAgICAgICAgIGdyYWRpZW50VHJhbnNmb3JtOiBlbGVtZW50Lm1hdHJpeC5pbnZlcnQoKVxcbiAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICAgICAgU1ZHLmRlZnMuYXBwZW5kQ2hpbGQoZWwpO1xcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBkb3RzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcXG4gICAgICAgICAgICAgICAgICAgIGVsLmFwcGVuZENoaWxkKCQoXFxcInN0b3BcXFwiLCB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiBkb3RzW2ldLm9mZnNldCA/IGRvdHNbaV0ub2Zmc2V0IDogaSA/IFxcXCIxMDAlXFxcIiA6IFxcXCIwJVxcXCIsXFxuICAgICAgICAgICAgICAgICAgICAgICAgXFxcInN0b3AtY29sb3JcXFwiOiBkb3RzW2ldLmNvbG9yIHx8IFxcXCIjZmZmXFxcIixcXG4gICAgICAgICAgICAgICAgICAgICAgICBcXFwic3RvcC1vcGFjaXR5XFxcIjogaXNGaW5pdGUoZG90c1tpXS5vcGFjaXR5KSA/IGRvdHNbaV0ub3BhY2l0eSA6IDFcXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgICQobywge1xcbiAgICAgICAgICAgIGZpbGw6IGZpbGx1cmwoaWQpLFxcbiAgICAgICAgICAgIG9wYWNpdHk6IDEsXFxuICAgICAgICAgICAgXFxcImZpbGwtb3BhY2l0eVxcXCI6IDFcXG4gICAgICAgIH0pO1xcbiAgICAgICAgcy5maWxsID0gRTtcXG4gICAgICAgIHMub3BhY2l0eSA9IDE7XFxuICAgICAgICBzLmZpbGxPcGFjaXR5ID0gMTtcXG4gICAgICAgIHJldHVybiAxO1xcbiAgICB9LFxcbiAgICBpc0lFOW9yMTAgPSBmdW5jdGlvbiAoKSB7XFxuICAgICAgdmFyIG1vZGUgPSBkb2N1bWVudC5kb2N1bWVudE1vZGU7XFxuICAgICAgcmV0dXJuIG1vZGUgJiYgKG1vZGUgPT09IDkgfHwgbW9kZSA9PT0gMTApO1xcbiAgICB9LFxcbiAgICBmaWxsdXJsID0gZnVuY3Rpb24gKGlkKSB7XFxuICAgICAgaWYgKGlzSUU5b3IxMCgpKSB7XFxuICAgICAgICAgIHJldHVybiBcXFwidXJsKCcjXFxcIiArIGlkICsgXFxcIicpXFxcIjtcXG4gICAgICB9XFxuICAgICAgdmFyIGxvY2F0aW9uID0gZG9jdW1lbnQubG9jYXRpb247XFxuICAgICAgdmFyIGxvY2F0aW9uU3RyaW5nID0gKFxcbiAgICAgICAgICBsb2NhdGlvbi5wcm90b2NvbCArICcvLycgK1xcbiAgICAgICAgICBsb2NhdGlvbi5ob3N0ICtcXG4gICAgICAgICAgbG9jYXRpb24ucGF0aG5hbWUgK1xcbiAgICAgICAgICBsb2NhdGlvbi5zZWFyY2hcXG4gICAgICApO1xcbiAgICAgIHJldHVybiBcXFwidXJsKCdcXFwiICsgbG9jYXRpb25TdHJpbmcgKyBcXFwiI1xcXCIgKyBpZCArIFxcXCInKVxcXCI7XFxuICAgIH0sXFxuICAgIHVwZGF0ZVBvc2l0aW9uID0gZnVuY3Rpb24gKG8pIHtcXG4gICAgICAgIHZhciBiYm94ID0gby5nZXRCQm94KDEpO1xcbiAgICAgICAgJChvLnBhdHRlcm4sIHtwYXR0ZXJuVHJhbnNmb3JtOiBvLm1hdHJpeC5pbnZlcnQoKSArIFxcXCIgdHJhbnNsYXRlKFxcXCIgKyBiYm94LnggKyBcXFwiLFxcXCIgKyBiYm94LnkgKyBcXFwiKVxcXCJ9KTtcXG4gICAgfSxcXG4gICAgYWRkQXJyb3cgPSBmdW5jdGlvbiAobywgdmFsdWUsIGlzRW5kKSB7XFxuICAgICAgICBpZiAoby50eXBlID09IFxcXCJwYXRoXFxcIikge1xcbiAgICAgICAgICAgIHZhciB2YWx1ZXMgPSBTdHIodmFsdWUpLnRvTG93ZXJDYXNlKCkuc3BsaXQoXFxcIi1cXFwiKSxcXG4gICAgICAgICAgICAgICAgcCA9IG8ucGFwZXIsXFxuICAgICAgICAgICAgICAgIHNlID0gaXNFbmQgPyBcXFwiZW5kXFxcIiA6IFxcXCJzdGFydFxcXCIsXFxuICAgICAgICAgICAgICAgIG5vZGUgPSBvLm5vZGUsXFxuICAgICAgICAgICAgICAgIGF0dHJzID0gby5hdHRycyxcXG4gICAgICAgICAgICAgICAgc3Ryb2tlID0gYXR0cnNbXFxcInN0cm9rZS13aWR0aFxcXCJdLFxcbiAgICAgICAgICAgICAgICBpID0gdmFsdWVzLmxlbmd0aCxcXG4gICAgICAgICAgICAgICAgdHlwZSA9IFxcXCJjbGFzc2ljXFxcIixcXG4gICAgICAgICAgICAgICAgZnJvbSxcXG4gICAgICAgICAgICAgICAgdG8sXFxuICAgICAgICAgICAgICAgIGR4LFxcbiAgICAgICAgICAgICAgICByZWZYLFxcbiAgICAgICAgICAgICAgICBhdHRyLFxcbiAgICAgICAgICAgICAgICB3ID0gMyxcXG4gICAgICAgICAgICAgICAgaCA9IDMsXFxuICAgICAgICAgICAgICAgIHQgPSA1O1xcbiAgICAgICAgICAgIHdoaWxlIChpLS0pIHtcXG4gICAgICAgICAgICAgICAgc3dpdGNoICh2YWx1ZXNbaV0pIHtcXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXFxcImJsb2NrXFxcIjpcXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXFxcImNsYXNzaWNcXFwiOlxcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcXFwib3ZhbFxcXCI6XFxuICAgICAgICAgICAgICAgICAgICBjYXNlIFxcXCJkaWFtb25kXFxcIjpcXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXFxcIm9wZW5cXFwiOlxcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcXFwibm9uZVxcXCI6XFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSA9IHZhbHVlc1tpXTtcXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXFxcIndpZGVcXFwiOiBoID0gNTsgYnJlYWs7XFxuICAgICAgICAgICAgICAgICAgICBjYXNlIFxcXCJuYXJyb3dcXFwiOiBoID0gMjsgYnJlYWs7XFxuICAgICAgICAgICAgICAgICAgICBjYXNlIFxcXCJsb25nXFxcIjogdyA9IDU7IGJyZWFrO1xcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcXFwic2hvcnRcXFwiOiB3ID0gMjsgYnJlYWs7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgaWYgKHR5cGUgPT0gXFxcIm9wZW5cXFwiKSB7XFxuICAgICAgICAgICAgICAgIHcgKz0gMjtcXG4gICAgICAgICAgICAgICAgaCArPSAyO1xcbiAgICAgICAgICAgICAgICB0ICs9IDI7XFxuICAgICAgICAgICAgICAgIGR4ID0gMTtcXG4gICAgICAgICAgICAgICAgcmVmWCA9IGlzRW5kID8gNCA6IDE7XFxuICAgICAgICAgICAgICAgIGF0dHIgPSB7XFxuICAgICAgICAgICAgICAgICAgICBmaWxsOiBcXFwibm9uZVxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBzdHJva2U6IGF0dHJzLnN0cm9rZVxcbiAgICAgICAgICAgICAgICB9O1xcbiAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgIHJlZlggPSBkeCA9IHcgLyAyO1xcbiAgICAgICAgICAgICAgICBhdHRyID0ge1xcbiAgICAgICAgICAgICAgICAgICAgZmlsbDogYXR0cnMuc3Ryb2tlLFxcbiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiBcXFwibm9uZVxcXCJcXG4gICAgICAgICAgICAgICAgfTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgaWYgKG8uXy5hcnJvd3MpIHtcXG4gICAgICAgICAgICAgICAgaWYgKGlzRW5kKSB7XFxuICAgICAgICAgICAgICAgICAgICBvLl8uYXJyb3dzLmVuZFBhdGggJiYgbWFya2VyQ291bnRlcltvLl8uYXJyb3dzLmVuZFBhdGhdLS07XFxuICAgICAgICAgICAgICAgICAgICBvLl8uYXJyb3dzLmVuZE1hcmtlciAmJiBtYXJrZXJDb3VudGVyW28uXy5hcnJvd3MuZW5kTWFya2VyXS0tO1xcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgICAgby5fLmFycm93cy5zdGFydFBhdGggJiYgbWFya2VyQ291bnRlcltvLl8uYXJyb3dzLnN0YXJ0UGF0aF0tLTtcXG4gICAgICAgICAgICAgICAgICAgIG8uXy5hcnJvd3Muc3RhcnRNYXJrZXIgJiYgbWFya2VyQ291bnRlcltvLl8uYXJyb3dzLnN0YXJ0TWFya2VyXS0tO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgby5fLmFycm93cyA9IHt9O1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBpZiAodHlwZSAhPSBcXFwibm9uZVxcXCIpIHtcXG4gICAgICAgICAgICAgICAgdmFyIHBhdGhJZCA9IFxcXCJyYXBoYWVsLW1hcmtlci1cXFwiICsgdHlwZSxcXG4gICAgICAgICAgICAgICAgICAgIG1hcmtlcklkID0gXFxcInJhcGhhZWwtbWFya2VyLVxcXCIgKyBzZSArIHR5cGUgKyB3ICsgaCArIFxcXCItb2JqXFxcIiArIG8uaWQ7XFxuICAgICAgICAgICAgICAgIGlmICghUi5fZy5kb2MuZ2V0RWxlbWVudEJ5SWQocGF0aElkKSkge1xcbiAgICAgICAgICAgICAgICAgICAgcC5kZWZzLmFwcGVuZENoaWxkKCQoJChcXFwicGF0aFxcXCIpLCB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgXFxcInN0cm9rZS1saW5lY2FwXFxcIjogXFxcInJvdW5kXFxcIixcXG4gICAgICAgICAgICAgICAgICAgICAgICBkOiBtYXJrZXJzW3R5cGVdLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBwYXRoSWRcXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcXG4gICAgICAgICAgICAgICAgICAgIG1hcmtlckNvdW50ZXJbcGF0aElkXSA9IDE7XFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICBtYXJrZXJDb3VudGVyW3BhdGhJZF0rKztcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICB2YXIgbWFya2VyID0gUi5fZy5kb2MuZ2V0RWxlbWVudEJ5SWQobWFya2VySWQpLFxcbiAgICAgICAgICAgICAgICAgICAgdXNlO1xcbiAgICAgICAgICAgICAgICBpZiAoIW1hcmtlcikge1xcbiAgICAgICAgICAgICAgICAgICAgbWFya2VyID0gJCgkKFxcXCJtYXJrZXJcXFwiKSwge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBtYXJrZXJJZCxcXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJrZXJIZWlnaHQ6IGgsXFxuICAgICAgICAgICAgICAgICAgICAgICAgbWFya2VyV2lkdGg6IHcsXFxuICAgICAgICAgICAgICAgICAgICAgICAgb3JpZW50OiBcXFwiYXV0b1xcXCIsXFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmWDogcmVmWCxcXG4gICAgICAgICAgICAgICAgICAgICAgICByZWZZOiBoIC8gMlxcbiAgICAgICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgICAgICAgICB1c2UgPSAkKCQoXFxcInVzZVxcXCIpLCB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgXFxcInhsaW5rOmhyZWZcXFwiOiBcXFwiI1xcXCIgKyBwYXRoSWQsXFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOiAoaXNFbmQgPyBcXFwicm90YXRlKDE4MCBcXFwiICsgdyAvIDIgKyBcXFwiIFxcXCIgKyBoIC8gMiArIFxcXCIpIFxcXCIgOiBFKSArIFxcXCJzY2FsZShcXFwiICsgdyAvIHQgKyBcXFwiLFxcXCIgKyBoIC8gdCArIFxcXCIpXFxcIixcXG4gICAgICAgICAgICAgICAgICAgICAgICBcXFwic3Ryb2tlLXdpZHRoXFxcIjogKDEgLyAoKHcgLyB0ICsgaCAvIHQpIC8gMikpLnRvRml4ZWQoNClcXG4gICAgICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgICAgICAgbWFya2VyLmFwcGVuZENoaWxkKHVzZSk7XFxuICAgICAgICAgICAgICAgICAgICBwLmRlZnMuYXBwZW5kQ2hpbGQobWFya2VyKTtcXG4gICAgICAgICAgICAgICAgICAgIG1hcmtlckNvdW50ZXJbbWFya2VySWRdID0gMTtcXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICAgIG1hcmtlckNvdW50ZXJbbWFya2VySWRdKys7XFxuICAgICAgICAgICAgICAgICAgICB1c2UgPSBtYXJrZXIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXFxcInVzZVxcXCIpWzBdO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICQodXNlLCBhdHRyKTtcXG4gICAgICAgICAgICAgICAgdmFyIGRlbHRhID0gZHggKiAodHlwZSAhPSBcXFwiZGlhbW9uZFxcXCIgJiYgdHlwZSAhPSBcXFwib3ZhbFxcXCIpO1xcbiAgICAgICAgICAgICAgICBpZiAoaXNFbmQpIHtcXG4gICAgICAgICAgICAgICAgICAgIGZyb20gPSBvLl8uYXJyb3dzLnN0YXJ0ZHggKiBzdHJva2UgfHwgMDtcXG4gICAgICAgICAgICAgICAgICAgIHRvID0gUi5nZXRUb3RhbExlbmd0aChhdHRycy5wYXRoKSAtIGRlbHRhICogc3Ryb2tlO1xcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgICAgZnJvbSA9IGRlbHRhICogc3Ryb2tlO1xcbiAgICAgICAgICAgICAgICAgICAgdG8gPSBSLmdldFRvdGFsTGVuZ3RoKGF0dHJzLnBhdGgpIC0gKG8uXy5hcnJvd3MuZW5kZHggKiBzdHJva2UgfHwgMCk7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgYXR0ciA9IHt9O1xcbiAgICAgICAgICAgICAgICBhdHRyW1xcXCJtYXJrZXItXFxcIiArIHNlXSA9IFxcXCJ1cmwoI1xcXCIgKyBtYXJrZXJJZCArIFxcXCIpXFxcIjtcXG4gICAgICAgICAgICAgICAgaWYgKHRvIHx8IGZyb20pIHtcXG4gICAgICAgICAgICAgICAgICAgIGF0dHIuZCA9IFIuZ2V0U3VicGF0aChhdHRycy5wYXRoLCBmcm9tLCB0byk7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgJChub2RlLCBhdHRyKTtcXG4gICAgICAgICAgICAgICAgby5fLmFycm93c1tzZSArIFxcXCJQYXRoXFxcIl0gPSBwYXRoSWQ7XFxuICAgICAgICAgICAgICAgIG8uXy5hcnJvd3Nbc2UgKyBcXFwiTWFya2VyXFxcIl0gPSBtYXJrZXJJZDtcXG4gICAgICAgICAgICAgICAgby5fLmFycm93c1tzZSArIFxcXCJkeFxcXCJdID0gZGVsdGE7XFxuICAgICAgICAgICAgICAgIG8uXy5hcnJvd3Nbc2UgKyBcXFwiVHlwZVxcXCJdID0gdHlwZTtcXG4gICAgICAgICAgICAgICAgby5fLmFycm93c1tzZSArIFxcXCJTdHJpbmdcXFwiXSA9IHZhbHVlO1xcbiAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgIGlmIChpc0VuZCkge1xcbiAgICAgICAgICAgICAgICAgICAgZnJvbSA9IG8uXy5hcnJvd3Muc3RhcnRkeCAqIHN0cm9rZSB8fCAwO1xcbiAgICAgICAgICAgICAgICAgICAgdG8gPSBSLmdldFRvdGFsTGVuZ3RoKGF0dHJzLnBhdGgpIC0gZnJvbTtcXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICAgIGZyb20gPSAwO1xcbiAgICAgICAgICAgICAgICAgICAgdG8gPSBSLmdldFRvdGFsTGVuZ3RoKGF0dHJzLnBhdGgpIC0gKG8uXy5hcnJvd3MuZW5kZHggKiBzdHJva2UgfHwgMCk7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgby5fLmFycm93c1tzZSArIFxcXCJQYXRoXFxcIl0gJiYgJChub2RlLCB7ZDogUi5nZXRTdWJwYXRoKGF0dHJzLnBhdGgsIGZyb20sIHRvKX0pO1xcbiAgICAgICAgICAgICAgICBkZWxldGUgby5fLmFycm93c1tzZSArIFxcXCJQYXRoXFxcIl07XFxuICAgICAgICAgICAgICAgIGRlbGV0ZSBvLl8uYXJyb3dzW3NlICsgXFxcIk1hcmtlclxcXCJdO1xcbiAgICAgICAgICAgICAgICBkZWxldGUgby5fLmFycm93c1tzZSArIFxcXCJkeFxcXCJdO1xcbiAgICAgICAgICAgICAgICBkZWxldGUgby5fLmFycm93c1tzZSArIFxcXCJUeXBlXFxcIl07XFxuICAgICAgICAgICAgICAgIGRlbGV0ZSBvLl8uYXJyb3dzW3NlICsgXFxcIlN0cmluZ1xcXCJdO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBmb3IgKGF0dHIgaW4gbWFya2VyQ291bnRlcikgaWYgKG1hcmtlckNvdW50ZXJbaGFzXShhdHRyKSAmJiAhbWFya2VyQ291bnRlclthdHRyXSkge1xcbiAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IFIuX2cuZG9jLmdldEVsZW1lbnRCeUlkKGF0dHIpO1xcbiAgICAgICAgICAgICAgICBpdGVtICYmIGl0ZW0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChpdGVtKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgIH0sXFxuICAgIGRhc2hhcnJheSA9IHtcXG4gICAgICAgIFxcXCItXFxcIjogWzMsIDFdLFxcbiAgICAgICAgXFxcIi5cXFwiOiBbMSwgMV0sXFxuICAgICAgICBcXFwiLS5cXFwiOiBbMywgMSwgMSwgMV0sXFxuICAgICAgICBcXFwiLS4uXFxcIjogWzMsIDEsIDEsIDEsIDEsIDFdLFxcbiAgICAgICAgXFxcIi4gXFxcIjogWzEsIDNdLFxcbiAgICAgICAgXFxcIi0gXFxcIjogWzQsIDNdLFxcbiAgICAgICAgXFxcIi0tXFxcIjogWzgsIDNdLFxcbiAgICAgICAgXFxcIi0gLlxcXCI6IFs0LCAzLCAxLCAzXSxcXG4gICAgICAgIFxcXCItLS5cXFwiOiBbOCwgMywgMSwgM10sXFxuICAgICAgICBcXFwiLS0uLlxcXCI6IFs4LCAzLCAxLCAzLCAxLCAzXVxcbiAgICB9LFxcbiAgICBhZGREYXNoZXMgPSBmdW5jdGlvbiAobywgdmFsdWUsIHBhcmFtcykge1xcbiAgICAgICAgdmFsdWUgPSBkYXNoYXJyYXlbU3RyKHZhbHVlKS50b0xvd2VyQ2FzZSgpXTtcXG4gICAgICAgIGlmICh2YWx1ZSkge1xcbiAgICAgICAgICAgIHZhciB3aWR0aCA9IG8uYXR0cnNbXFxcInN0cm9rZS13aWR0aFxcXCJdIHx8IFxcXCIxXFxcIixcXG4gICAgICAgICAgICAgICAgYnV0dCA9IHtyb3VuZDogd2lkdGgsIHNxdWFyZTogd2lkdGgsIGJ1dHQ6IDB9W28uYXR0cnNbXFxcInN0cm9rZS1saW5lY2FwXFxcIl0gfHwgcGFyYW1zW1xcXCJzdHJva2UtbGluZWNhcFxcXCJdXSB8fCAwLFxcbiAgICAgICAgICAgICAgICBkYXNoZXMgPSBbXSxcXG4gICAgICAgICAgICAgICAgaSA9IHZhbHVlLmxlbmd0aDtcXG4gICAgICAgICAgICB3aGlsZSAoaS0tKSB7XFxuICAgICAgICAgICAgICAgIGRhc2hlc1tpXSA9IHZhbHVlW2ldICogd2lkdGggKyAoKGkgJSAyKSA/IDEgOiAtMSkgKiBidXR0O1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAkKG8ubm9kZSwge1xcXCJzdHJva2UtZGFzaGFycmF5XFxcIjogZGFzaGVzLmpvaW4oXFxcIixcXFwiKX0pO1xcbiAgICAgICAgfVxcbiAgICAgICAgZWxzZSB7XFxuICAgICAgICAgICQoby5ub2RlLCB7XFxcInN0cm9rZS1kYXNoYXJyYXlcXFwiOiBcXFwibm9uZVxcXCJ9KTtcXG4gICAgICAgIH1cXG4gICAgfSxcXG4gICAgc2V0RmlsbEFuZFN0cm9rZSA9IGZ1bmN0aW9uIChvLCBwYXJhbXMpIHtcXG4gICAgICAgIHZhciBub2RlID0gby5ub2RlLFxcbiAgICAgICAgICAgIGF0dHJzID0gby5hdHRycyxcXG4gICAgICAgICAgICB2aXMgPSBub2RlLnN0eWxlLnZpc2liaWxpdHk7XFxuICAgICAgICBub2RlLnN0eWxlLnZpc2liaWxpdHkgPSBcXFwiaGlkZGVuXFxcIjtcXG4gICAgICAgIGZvciAodmFyIGF0dCBpbiBwYXJhbXMpIHtcXG4gICAgICAgICAgICBpZiAocGFyYW1zW2hhc10oYXR0KSkge1xcbiAgICAgICAgICAgICAgICBpZiAoIVIuX2F2YWlsYWJsZUF0dHJzW2hhc10oYXR0KSkge1xcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gcGFyYW1zW2F0dF07XFxuICAgICAgICAgICAgICAgIGF0dHJzW2F0dF0gPSB2YWx1ZTtcXG4gICAgICAgICAgICAgICAgc3dpdGNoIChhdHQpIHtcXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXFxcImJsdXJcXFwiOlxcbiAgICAgICAgICAgICAgICAgICAgICAgIG8uYmx1cih2YWx1ZSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgICAgICAgICBjYXNlIFxcXCJ0aXRsZVxcXCI6XFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRpdGxlID0gbm9kZS5nZXRFbGVtZW50c0J5VGFnTmFtZShcXFwidGl0bGVcXFwiKTtcXG5cXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBVc2UgdGhlIGV4aXN0aW5nIDx0aXRsZT4uXFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRpdGxlLmxlbmd0aCAmJiAodGl0bGUgPSB0aXRsZVswXSkpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlLmZpcnN0Q2hpbGQubm9kZVZhbHVlID0gdmFsdWU7XFxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlID0gJChcXFwidGl0bGVcXFwiKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWwgPSBSLl9nLmRvYy5jcmVhdGVUZXh0Tm9kZSh2YWx1ZSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZS5hcHBlbmRDaGlsZCh2YWwpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5hcHBlbmRDaGlsZCh0aXRsZSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcXFwiaHJlZlxcXCI6XFxuICAgICAgICAgICAgICAgICAgICBjYXNlIFxcXCJ0YXJnZXRcXFwiOlxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwbiA9IG5vZGUucGFyZW50Tm9kZTtcXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocG4udGFnTmFtZS50b0xvd2VyQ2FzZSgpICE9IFxcXCJhXFxcIikge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaGwgPSAkKFxcXCJhXFxcIik7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBuLmluc2VydEJlZm9yZShobCwgbm9kZSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhsLmFwcGVuZENoaWxkKG5vZGUpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbiA9IGhsO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXR0ID09IFxcXCJ0YXJnZXRcXFwiKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBuLnNldEF0dHJpYnV0ZU5TKHhsaW5rLCBcXFwic2hvd1xcXCIsIHZhbHVlID09IFxcXCJibGFua1xcXCIgPyBcXFwibmV3XFxcIiA6IHZhbHVlKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbi5zZXRBdHRyaWJ1dGVOUyh4bGluaywgYXR0LCB2YWx1ZSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcXFwiY3Vyc29yXFxcIjpcXG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLnN0eWxlLmN1cnNvciA9IHZhbHVlO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcXFwidHJhbnNmb3JtXFxcIjpcXG4gICAgICAgICAgICAgICAgICAgICAgICBvLnRyYW5zZm9ybSh2YWx1ZSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgICAgICAgICBjYXNlIFxcXCJhcnJvdy1zdGFydFxcXCI6XFxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkQXJyb3cobywgdmFsdWUpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcXFwiYXJyb3ctZW5kXFxcIjpcXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRBcnJvdyhvLCB2YWx1ZSwgMSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgICAgICAgICBjYXNlIFxcXCJjbGlwLXJlY3RcXFwiOlxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWN0ID0gU3RyKHZhbHVlKS5zcGxpdChzZXBhcmF0b3IpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZWN0Lmxlbmd0aCA9PSA0KSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8uY2xpcCAmJiBvLmNsaXAucGFyZW50Tm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG8uY2xpcC5wYXJlbnROb2RlKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVsID0gJChcXFwiY2xpcFBhdGhcXFwiKSxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJjID0gJChcXFwicmVjdFxcXCIpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbC5pZCA9IFIuY3JlYXRlVVVJRCgpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKHJjLCB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiByZWN0WzBdLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeTogcmVjdFsxXSxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiByZWN0WzJdLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiByZWN0WzNdXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbC5hcHBlbmRDaGlsZChyYyk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8ucGFwZXIuZGVmcy5hcHBlbmRDaGlsZChlbCk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQobm9kZSwge1xcXCJjbGlwLXBhdGhcXFwiOiBcXFwidXJsKCNcXFwiICsgZWwuaWQgKyBcXFwiKVxcXCJ9KTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgby5jbGlwID0gcmM7XFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdmFsdWUpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhdGggPSBub2RlLmdldEF0dHJpYnV0ZShcXFwiY2xpcC1wYXRoXFxcIik7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXRoKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2xpcCA9IFIuX2cuZG9jLmdldEVsZW1lbnRCeUlkKHBhdGgucmVwbGFjZSgvKF51cmxcXFxcKCN8XFxcXCkkKS9nLCBFKSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGlwICYmIGNsaXAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjbGlwKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQobm9kZSwge1xcXCJjbGlwLXBhdGhcXFwiOiBFfSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgby5jbGlwO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgICAgICAgICBjYXNlIFxcXCJwYXRoXFxcIjpcXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoby50eXBlID09IFxcXCJwYXRoXFxcIikge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKG5vZGUsIHtkOiB2YWx1ZSA/IGF0dHJzLnBhdGggPSBSLl9wYXRoVG9BYnNvbHV0ZSh2YWx1ZSkgOiBcXFwiTTAsMFxcXCJ9KTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgby5fLmRpcnR5ID0gMTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG8uXy5hcnJvd3MpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcXCJzdGFydFN0cmluZ1xcXCIgaW4gby5fLmFycm93cyAmJiBhZGRBcnJvdyhvLCBvLl8uYXJyb3dzLnN0YXJ0U3RyaW5nKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcXCJlbmRTdHJpbmdcXFwiIGluIG8uXy5hcnJvd3MgJiYgYWRkQXJyb3cobywgby5fLmFycm93cy5lbmRTdHJpbmcsIDEpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcXFwid2lkdGhcXFwiOlxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKGF0dCwgdmFsdWUpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIG8uXy5kaXJ0eSA9IDE7XFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF0dHJzLmZ4KSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dCA9IFxcXCJ4XFxcIjtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBhdHRycy54O1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXFxcInhcXFwiOlxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdHRycy5meCkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IC1hdHRycy54IC0gKGF0dHJzLndpZHRoIHx8IDApO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXFxcInJ4XFxcIjpcXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXR0ID09IFxcXCJyeFxcXCIgJiYgby50eXBlID09IFxcXCJyZWN0XFxcIikge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICBjYXNlIFxcXCJjeFxcXCI6XFxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoYXR0LCB2YWx1ZSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgby5wYXR0ZXJuICYmIHVwZGF0ZVBvc2l0aW9uKG8pO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIG8uXy5kaXJ0eSA9IDE7XFxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgICAgICAgICBjYXNlIFxcXCJoZWlnaHRcXFwiOlxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKGF0dCwgdmFsdWUpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIG8uXy5kaXJ0eSA9IDE7XFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF0dHJzLmZ5KSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dCA9IFxcXCJ5XFxcIjtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBhdHRycy55O1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXFxcInlcXFwiOlxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdHRycy5meSkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IC1hdHRycy55IC0gKGF0dHJzLmhlaWdodCB8fCAwKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICBjYXNlIFxcXCJyeVxcXCI6XFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF0dCA9PSBcXFwicnlcXFwiICYmIG8udHlwZSA9PSBcXFwicmVjdFxcXCIpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcXFwiY3lcXFwiOlxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKGF0dCwgdmFsdWUpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIG8ucGF0dGVybiAmJiB1cGRhdGVQb3NpdGlvbihvKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICBvLl8uZGlydHkgPSAxO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcXFwiclxcXCI6XFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG8udHlwZSA9PSBcXFwicmVjdFxcXCIpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJChub2RlLCB7cng6IHZhbHVlLCByeTogdmFsdWV9KTtcXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShhdHQsIHZhbHVlKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgby5fLmRpcnR5ID0gMTtcXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXFxcInNyY1xcXCI6XFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG8udHlwZSA9PSBcXFwiaW1hZ2VcXFwiKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuc2V0QXR0cmlidXRlTlMoeGxpbmssIFxcXCJocmVmXFxcIiwgdmFsdWUpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXFxcInN0cm9rZS13aWR0aFxcXCI6XFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG8uXy5zeCAhPSAxIHx8IG8uXy5zeSAhPSAxKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlIC89IG1tYXgoYWJzKG8uXy5zeCksIGFicyhvLl8uc3kpKSB8fCAxO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShhdHQsIHZhbHVlKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXR0cnNbXFxcInN0cm9rZS1kYXNoYXJyYXlcXFwiXSkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGREYXNoZXMobywgYXR0cnNbXFxcInN0cm9rZS1kYXNoYXJyYXlcXFwiXSwgcGFyYW1zKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG8uXy5hcnJvd3MpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxcInN0YXJ0U3RyaW5nXFxcIiBpbiBvLl8uYXJyb3dzICYmIGFkZEFycm93KG8sIG8uXy5hcnJvd3Muc3RhcnRTdHJpbmcpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXFwiZW5kU3RyaW5nXFxcIiBpbiBvLl8uYXJyb3dzICYmIGFkZEFycm93KG8sIG8uXy5hcnJvd3MuZW5kU3RyaW5nLCAxKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgICAgICAgICBjYXNlIFxcXCJzdHJva2UtZGFzaGFycmF5XFxcIjpcXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGREYXNoZXMobywgdmFsdWUsIHBhcmFtcyk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgICAgICAgICBjYXNlIFxcXCJmaWxsXFxcIjpcXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXNVUkwgPSBTdHIodmFsdWUpLm1hdGNoKFIuX0lTVVJMKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNVUkwpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWwgPSAkKFxcXCJwYXR0ZXJuXFxcIik7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpZyA9ICQoXFxcImltYWdlXFxcIik7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsLmlkID0gUi5jcmVhdGVVVUlEKCk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoZWwsIHt4OiAwLCB5OiAwLCBwYXR0ZXJuVW5pdHM6IFxcXCJ1c2VyU3BhY2VPblVzZVxcXCIsIGhlaWdodDogMSwgd2lkdGg6IDF9KTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJChpZywge3g6IDAsIHk6IDAsIFxcXCJ4bGluazpocmVmXFxcIjogaXNVUkxbMV19KTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWwuYXBwZW5kQ2hpbGQoaWcpO1xcblxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKGVsKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSLl9wcmVsb2FkKGlzVVJMWzFdLCBmdW5jdGlvbiAoKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHcgPSB0aGlzLm9mZnNldFdpZHRoLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoID0gdGhpcy5vZmZzZXRIZWlnaHQ7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJChlbCwge3dpZHRoOiB3LCBoZWlnaHQ6IGh9KTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKGlnLCB7d2lkdGg6IHcsIGhlaWdodDogaH0pO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKGVsKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgby5wYXBlci5kZWZzLmFwcGVuZENoaWxkKGVsKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJChub2RlLCB7ZmlsbDogXFxcInVybCgjXFxcIiArIGVsLmlkICsgXFxcIilcXFwifSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8ucGF0dGVybiA9IGVsO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvLnBhdHRlcm4gJiYgdXBkYXRlUG9zaXRpb24obyk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2xyID0gUi5nZXRSR0IodmFsdWUpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY2xyLmVycm9yKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBwYXJhbXMuZ3JhZGllbnQ7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBhdHRycy5ncmFkaWVudDtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIVIuaXMoYXR0cnMub3BhY2l0eSwgXFxcInVuZGVmaW5lZFxcXCIpICYmXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSLmlzKHBhcmFtcy5vcGFjaXR5LCBcXFwidW5kZWZpbmVkXFxcIikgJiZcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQobm9kZSwge29wYWNpdHk6IGF0dHJzLm9wYWNpdHl9KTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIVIuaXMoYXR0cnNbXFxcImZpbGwtb3BhY2l0eVxcXCJdLCBcXFwidW5kZWZpbmVkXFxcIikgJiZcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFIuaXMocGFyYW1zW1xcXCJmaWxsLW9wYWNpdHlcXFwiXSwgXFxcInVuZGVmaW5lZFxcXCIpICYmXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKG5vZGUsIHtcXFwiZmlsbC1vcGFjaXR5XFxcIjogYXR0cnNbXFxcImZpbGwtb3BhY2l0eVxcXCJdfSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgoby50eXBlID09IFxcXCJjaXJjbGVcXFwiIHx8IG8udHlwZSA9PSBcXFwiZWxsaXBzZVxcXCIgfHwgU3RyKHZhbHVlKS5jaGFyQXQoKSAhPSBcXFwiclxcXCIpICYmIGFkZEdyYWRpZW50RmlsbChvLCB2YWx1ZSkpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxcXCJvcGFjaXR5XFxcIiBpbiBhdHRycyB8fCBcXFwiZmlsbC1vcGFjaXR5XFxcIiBpbiBhdHRycykge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGdyYWRpZW50ID0gUi5fZy5kb2MuZ2V0RWxlbWVudEJ5SWQobm9kZS5nZXRBdHRyaWJ1dGUoXFxcImZpbGxcXFwiKS5yZXBsYWNlKC9edXJsXFxcXCgjfFxcXFwpJC9nLCBFKSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ3JhZGllbnQpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RvcHMgPSBncmFkaWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcXFwic3RvcFxcXCIpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoc3RvcHNbc3RvcHMubGVuZ3RoIC0gMV0sIHtcXFwic3RvcC1vcGFjaXR5XFxcIjogKFxcXCJvcGFjaXR5XFxcIiBpbiBhdHRycyA/IGF0dHJzLm9wYWNpdHkgOiAxKSAqIChcXFwiZmlsbC1vcGFjaXR5XFxcIiBpbiBhdHRycyA/IGF0dHJzW1xcXCJmaWxsLW9wYWNpdHlcXFwiXSA6IDEpfSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnMuZ3JhZGllbnQgPSB2YWx1ZTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnMuZmlsbCA9IFxcXCJub25lXFxcIjtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNscltoYXNdKFxcXCJvcGFjaXR5XFxcIikgJiYgJChub2RlLCB7XFxcImZpbGwtb3BhY2l0eVxcXCI6IGNsci5vcGFjaXR5ID4gMSA/IGNsci5vcGFjaXR5IC8gMTAwIDogY2xyLm9wYWNpdHl9KTtcXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXFxcInN0cm9rZVxcXCI6XFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xyID0gUi5nZXRSR0IodmFsdWUpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKGF0dCwgY2xyLmhleCk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0ID09IFxcXCJzdHJva2VcXFwiICYmIGNscltoYXNdKFxcXCJvcGFjaXR5XFxcIikgJiYgJChub2RlLCB7XFxcInN0cm9rZS1vcGFjaXR5XFxcIjogY2xyLm9wYWNpdHkgPiAxID8gY2xyLm9wYWNpdHkgLyAxMDAgOiBjbHIub3BhY2l0eX0pO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdHQgPT0gXFxcInN0cm9rZVxcXCIgJiYgby5fLmFycm93cykge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXFwic3RhcnRTdHJpbmdcXFwiIGluIG8uXy5hcnJvd3MgJiYgYWRkQXJyb3cobywgby5fLmFycm93cy5zdGFydFN0cmluZyk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcXCJlbmRTdHJpbmdcXFwiIGluIG8uXy5hcnJvd3MgJiYgYWRkQXJyb3cobywgby5fLmFycm93cy5lbmRTdHJpbmcsIDEpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXFxcImdyYWRpZW50XFxcIjpcXG4gICAgICAgICAgICAgICAgICAgICAgICAoby50eXBlID09IFxcXCJjaXJjbGVcXFwiIHx8IG8udHlwZSA9PSBcXFwiZWxsaXBzZVxcXCIgfHwgU3RyKHZhbHVlKS5jaGFyQXQoKSAhPSBcXFwiclxcXCIpICYmIGFkZEdyYWRpZW50RmlsbChvLCB2YWx1ZSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgICAgICAgICBjYXNlIFxcXCJvcGFjaXR5XFxcIjpcXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXR0cnMuZ3JhZGllbnQgJiYgIWF0dHJzW2hhc10oXFxcInN0cm9rZS1vcGFjaXR5XFxcIikpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJChub2RlLCB7XFxcInN0cm9rZS1vcGFjaXR5XFxcIjogdmFsdWUgPiAxID8gdmFsdWUgLyAxMDAgOiB2YWx1ZX0pO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBmYWxsXFxuICAgICAgICAgICAgICAgICAgICBjYXNlIFxcXCJmaWxsLW9wYWNpdHlcXFwiOlxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdHRycy5ncmFkaWVudCkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBncmFkaWVudCA9IFIuX2cuZG9jLmdldEVsZW1lbnRCeUlkKG5vZGUuZ2V0QXR0cmlidXRlKFxcXCJmaWxsXFxcIikucmVwbGFjZSgvXnVybFxcXFwoI3xcXFxcKSQvZywgRSkpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ3JhZGllbnQpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0b3BzID0gZ3JhZGllbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXFxcInN0b3BcXFwiKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoc3RvcHNbc3RvcHMubGVuZ3RoIC0gMV0sIHtcXFwic3RvcC1vcGFjaXR5XFxcIjogdmFsdWV9KTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dCA9PSBcXFwiZm9udC1zaXplXFxcIiAmJiAodmFsdWUgPSB0b0ludCh2YWx1ZSwgMTApICsgXFxcInB4XFxcIik7XFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNzc3J1bGUgPSBhdHQucmVwbGFjZSgvKFxcXFwtLikvZywgZnVuY3Rpb24gKHcpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHcuc3Vic3RyaW5nKDEpLnRvVXBwZXJDYXNlKCk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5zdHlsZVtjc3NydWxlXSA9IHZhbHVlO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIG8uXy5kaXJ0eSA9IDE7XFxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoYXR0LCB2YWx1ZSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuXFxuICAgICAgICB0dW5lVGV4dChvLCBwYXJhbXMpO1xcbiAgICAgICAgbm9kZS5zdHlsZS52aXNpYmlsaXR5ID0gdmlzO1xcbiAgICB9LFxcbiAgICBsZWFkaW5nID0gMS4yLFxcbiAgICB0dW5lVGV4dCA9IGZ1bmN0aW9uIChlbCwgcGFyYW1zKSB7XFxuICAgICAgICBpZiAoZWwudHlwZSAhPSBcXFwidGV4dFxcXCIgfHwgIShwYXJhbXNbaGFzXShcXFwidGV4dFxcXCIpIHx8IHBhcmFtc1toYXNdKFxcXCJmb250XFxcIikgfHwgcGFyYW1zW2hhc10oXFxcImZvbnQtc2l6ZVxcXCIpIHx8IHBhcmFtc1toYXNdKFxcXCJ4XFxcIikgfHwgcGFyYW1zW2hhc10oXFxcInlcXFwiKSkpIHtcXG4gICAgICAgICAgICByZXR1cm47XFxuICAgICAgICB9XFxuICAgICAgICB2YXIgYSA9IGVsLmF0dHJzLFxcbiAgICAgICAgICAgIG5vZGUgPSBlbC5ub2RlLFxcbiAgICAgICAgICAgIGZvbnRTaXplID0gbm9kZS5maXJzdENoaWxkID8gdG9JbnQoUi5fZy5kb2MuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZShub2RlLmZpcnN0Q2hpbGQsIEUpLmdldFByb3BlcnR5VmFsdWUoXFxcImZvbnQtc2l6ZVxcXCIpLCAxMCkgOiAxMDtcXG5cXG4gICAgICAgIGlmIChwYXJhbXNbaGFzXShcXFwidGV4dFxcXCIpKSB7XFxuICAgICAgICAgICAgYS50ZXh0ID0gcGFyYW1zLnRleHQ7XFxuICAgICAgICAgICAgd2hpbGUgKG5vZGUuZmlyc3RDaGlsZCkge1xcbiAgICAgICAgICAgICAgICBub2RlLnJlbW92ZUNoaWxkKG5vZGUuZmlyc3RDaGlsZCk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIHZhciB0ZXh0cyA9IFN0cihwYXJhbXMudGV4dCkuc3BsaXQoXFxcIlxcXFxuXFxcIiksXFxuICAgICAgICAgICAgICAgIHRzcGFucyA9IFtdLFxcbiAgICAgICAgICAgICAgICB0c3BhbjtcXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSB0ZXh0cy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XFxuICAgICAgICAgICAgICAgIHRzcGFuID0gJChcXFwidHNwYW5cXFwiKTtcXG4gICAgICAgICAgICAgICAgaSAmJiAkKHRzcGFuLCB7ZHk6IGZvbnRTaXplICogbGVhZGluZywgeDogYS54fSk7XFxuICAgICAgICAgICAgICAgIHRzcGFuLmFwcGVuZENoaWxkKFIuX2cuZG9jLmNyZWF0ZVRleHROb2RlKHRleHRzW2ldKSk7XFxuICAgICAgICAgICAgICAgIG5vZGUuYXBwZW5kQ2hpbGQodHNwYW4pO1xcbiAgICAgICAgICAgICAgICB0c3BhbnNbaV0gPSB0c3BhbjtcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgIHRzcGFucyA9IG5vZGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXFxcInRzcGFuXFxcIik7XFxuICAgICAgICAgICAgZm9yIChpID0gMCwgaWkgPSB0c3BhbnMubGVuZ3RoOyBpIDwgaWk7IGkrKykgaWYgKGkpIHtcXG4gICAgICAgICAgICAgICAgJCh0c3BhbnNbaV0sIHtkeTogZm9udFNpemUgKiBsZWFkaW5nLCB4OiBhLnh9KTtcXG4gICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAkKHRzcGFuc1swXSwge2R5OiAwfSk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgICAgJChub2RlLCB7eDogYS54LCB5OiBhLnl9KTtcXG4gICAgICAgIGVsLl8uZGlydHkgPSAxO1xcbiAgICAgICAgdmFyIGJiID0gZWwuX2dldEJCb3goKSxcXG4gICAgICAgICAgICBkaWYgPSBhLnkgLSAoYmIueSArIGJiLmhlaWdodCAvIDIpO1xcbiAgICAgICAgZGlmICYmIFIuaXMoZGlmLCBcXFwiZmluaXRlXFxcIikgJiYgJCh0c3BhbnNbMF0sIHtkeTogZGlmfSk7XFxuICAgIH0sXFxuICAgIGdldFJlYWxOb2RlID0gZnVuY3Rpb24gKG5vZGUpIHtcXG4gICAgICAgIGlmIChub2RlLnBhcmVudE5vZGUgJiYgbm9kZS5wYXJlbnROb2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gXFxcImFcXFwiKSB7XFxuICAgICAgICAgICAgcmV0dXJuIG5vZGUucGFyZW50Tm9kZTtcXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgcmV0dXJuIG5vZGU7XFxuICAgICAgICB9XFxuICAgIH0sXFxuICAgIEVsZW1lbnQgPSBmdW5jdGlvbiAobm9kZSwgc3ZnKSB7XFxuICAgICAgICB2YXIgWCA9IDAsXFxuICAgICAgICAgICAgWSA9IDA7XFxuICAgICAgICAvKlxcXFxcXG4gICAgICAgICAqIEVsZW1lbnQubm9kZVxcbiAgICAgICAgIFsgcHJvcGVydHkgKG9iamVjdCkgXVxcbiAgICAgICAgICoqXFxuICAgICAgICAgKiBHaXZlcyB5b3UgYSByZWZlcmVuY2UgdG8gdGhlIERPTSBvYmplY3QsIHNvIHlvdSBjYW4gYXNzaWduIGV2ZW50IGhhbmRsZXJzIG9yIGp1c3QgbWVzcyBhcm91bmQuXFxuICAgICAgICAgKipcXG4gICAgICAgICAqIE5vdGU6IERvbuKAmXQgbWVzcyB3aXRoIGl0LlxcbiAgICAgICAgID4gVXNhZ2VcXG4gICAgICAgICB8IC8vIGRyYXcgYSBjaXJjbGUgYXQgY29vcmRpbmF0ZSAxMCwxMCB3aXRoIHJhZGl1cyBvZiAxMFxcbiAgICAgICAgIHwgdmFyIGMgPSBwYXBlci5jaXJjbGUoMTAsIDEwLCAxMCk7XFxuICAgICAgICAgfCBjLm5vZGUub25jbGljayA9IGZ1bmN0aW9uICgpIHtcXG4gICAgICAgICB8ICAgICBjLmF0dHIoXFxcImZpbGxcXFwiLCBcXFwicmVkXFxcIik7XFxuICAgICAgICAgfCB9O1xcbiAgICAgICAgXFxcXCovXFxuICAgICAgICB0aGlzWzBdID0gdGhpcy5ub2RlID0gbm9kZTtcXG4gICAgICAgIC8qXFxcXFxcbiAgICAgICAgICogRWxlbWVudC5yYXBoYWVsXFxuICAgICAgICAgWyBwcm9wZXJ0eSAob2JqZWN0KSBdXFxuICAgICAgICAgKipcXG4gICAgICAgICAqIEludGVybmFsIHJlZmVyZW5jZSB0byBAUmFwaGFlbCBvYmplY3QuIEluIGNhc2UgaXQgaXMgbm90IGF2YWlsYWJsZS5cXG4gICAgICAgICA+IFVzYWdlXFxuICAgICAgICAgfCBSYXBoYWVsLmVsLnJlZCA9IGZ1bmN0aW9uICgpIHtcXG4gICAgICAgICB8ICAgICB2YXIgaHNiID0gdGhpcy5wYXBlci5yYXBoYWVsLnJnYjJoc2IodGhpcy5hdHRyKFxcXCJmaWxsXFxcIikpO1xcbiAgICAgICAgIHwgICAgIGhzYi5oID0gMTtcXG4gICAgICAgICB8ICAgICB0aGlzLmF0dHIoe2ZpbGw6IHRoaXMucGFwZXIucmFwaGFlbC5oc2IycmdiKGhzYikuaGV4fSk7XFxuICAgICAgICAgfCB9XFxuICAgICAgICBcXFxcKi9cXG4gICAgICAgIG5vZGUucmFwaGFlbCA9IHRydWU7XFxuICAgICAgICAvKlxcXFxcXG4gICAgICAgICAqIEVsZW1lbnQuaWRcXG4gICAgICAgICBbIHByb3BlcnR5IChudW1iZXIpIF1cXG4gICAgICAgICAqKlxcbiAgICAgICAgICogVW5pcXVlIGlkIG9mIHRoZSBlbGVtZW50LiBFc3BlY2lhbGx5IHVzZWZ1bCB3aGVuIHlvdSB3YW50IHRvIGxpc3RlbiB0byBldmVudHMgb2YgdGhlIGVsZW1lbnQsXFxuICAgICAgICAgKiBiZWNhdXNlIGFsbCBldmVudHMgYXJlIGZpcmVkIGluIGZvcm1hdCBgPG1vZHVsZT4uPGFjdGlvbj4uPGlkPmAuIEFsc28gdXNlZnVsIGZvciBAUGFwZXIuZ2V0QnlJZCBtZXRob2QuXFxuICAgICAgICBcXFxcKi9cXG4gICAgICAgIHRoaXMuaWQgPSBndWlkKCk7XFxuICAgICAgICBub2RlLnJhcGhhZWxpZCA9IHRoaXMuaWQ7XFxuXFxuICAgICAgICAvKipcXG4gICAgICAgICogTWV0aG9kIHRoYXQgcmV0dXJucyBhIDUgbGV0dGVyL2RpZ2l0IGlkLCBlbm91Z2ggZm9yIDM2XjUgPSA2MDQ2NjE3NiBlbGVtZW50c1xcbiAgICAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBpZFxcbiAgICAgICAgKi9cXG4gICAgICAgIGZ1bmN0aW9uIGd1aWQoKSB7XFxuICAgICAgICAgICAgcmV0dXJuIChcXFwiMDAwMFxcXCIgKyAoTWF0aC5yYW5kb20oKSpNYXRoLnBvdygzNiw1KSA8PCAwKS50b1N0cmluZygzNikpLnNsaWNlKC01KTtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIHRoaXMubWF0cml4ID0gUi5tYXRyaXgoKTtcXG4gICAgICAgIHRoaXMucmVhbFBhdGggPSBudWxsO1xcbiAgICAgICAgLypcXFxcXFxuICAgICAgICAgKiBFbGVtZW50LnBhcGVyXFxuICAgICAgICAgWyBwcm9wZXJ0eSAob2JqZWN0KSBdXFxuICAgICAgICAgKipcXG4gICAgICAgICAqIEludGVybmFsIHJlZmVyZW5jZSB0byDigJxwYXBlcuKAnSB3aGVyZSBvYmplY3QgZHJhd24uIE1haW5seSBmb3IgdXNlIGluIHBsdWdpbnMgYW5kIGVsZW1lbnQgZXh0ZW5zaW9ucy5cXG4gICAgICAgICA+IFVzYWdlXFxuICAgICAgICAgfCBSYXBoYWVsLmVsLmNyb3NzID0gZnVuY3Rpb24gKCkge1xcbiAgICAgICAgIHwgICAgIHRoaXMuYXR0cih7ZmlsbDogXFxcInJlZFxcXCJ9KTtcXG4gICAgICAgICB8ICAgICB0aGlzLnBhcGVyLnBhdGgoXFxcIk0xMCwxMEw1MCw1ME01MCwxMEwxMCw1MFxcXCIpXFxuICAgICAgICAgfCAgICAgICAgIC5hdHRyKHtzdHJva2U6IFxcXCJyZWRcXFwifSk7XFxuICAgICAgICAgfCB9XFxuICAgICAgICBcXFxcKi9cXG4gICAgICAgIHRoaXMucGFwZXIgPSBzdmc7XFxuICAgICAgICB0aGlzLmF0dHJzID0gdGhpcy5hdHRycyB8fCB7fTtcXG4gICAgICAgIHRoaXMuXyA9IHtcXG4gICAgICAgICAgICB0cmFuc2Zvcm06IFtdLFxcbiAgICAgICAgICAgIHN4OiAxLFxcbiAgICAgICAgICAgIHN5OiAxLFxcbiAgICAgICAgICAgIGRlZzogMCxcXG4gICAgICAgICAgICBkeDogMCxcXG4gICAgICAgICAgICBkeTogMCxcXG4gICAgICAgICAgICBkaXJ0eTogMVxcbiAgICAgICAgfTtcXG4gICAgICAgICFzdmcuYm90dG9tICYmIChzdmcuYm90dG9tID0gdGhpcyk7XFxuICAgICAgICAvKlxcXFxcXG4gICAgICAgICAqIEVsZW1lbnQucHJldlxcbiAgICAgICAgIFsgcHJvcGVydHkgKG9iamVjdCkgXVxcbiAgICAgICAgICoqXFxuICAgICAgICAgKiBSZWZlcmVuY2UgdG8gdGhlIHByZXZpb3VzIGVsZW1lbnQgaW4gdGhlIGhpZXJhcmNoeS5cXG4gICAgICAgIFxcXFwqL1xcbiAgICAgICAgdGhpcy5wcmV2ID0gc3ZnLnRvcDtcXG4gICAgICAgIHN2Zy50b3AgJiYgKHN2Zy50b3AubmV4dCA9IHRoaXMpO1xcbiAgICAgICAgc3ZnLnRvcCA9IHRoaXM7XFxuICAgICAgICAvKlxcXFxcXG4gICAgICAgICAqIEVsZW1lbnQubmV4dFxcbiAgICAgICAgIFsgcHJvcGVydHkgKG9iamVjdCkgXVxcbiAgICAgICAgICoqXFxuICAgICAgICAgKiBSZWZlcmVuY2UgdG8gdGhlIG5leHQgZWxlbWVudCBpbiB0aGUgaGllcmFyY2h5LlxcbiAgICAgICAgXFxcXCovXFxuICAgICAgICB0aGlzLm5leHQgPSBudWxsO1xcbiAgICB9LFxcbiAgICBlbHByb3RvID0gUi5lbDtcXG5cXG4gICAgRWxlbWVudC5wcm90b3R5cGUgPSBlbHByb3RvO1xcbiAgICBlbHByb3RvLmNvbnN0cnVjdG9yID0gRWxlbWVudDtcXG5cXG4gICAgUi5fZW5naW5lLnBhdGggPSBmdW5jdGlvbiAocGF0aFN0cmluZywgU1ZHKSB7XFxuICAgICAgICB2YXIgZWwgPSAkKFxcXCJwYXRoXFxcIik7XFxuICAgICAgICBTVkcuY2FudmFzICYmIFNWRy5jYW52YXMuYXBwZW5kQ2hpbGQoZWwpO1xcbiAgICAgICAgdmFyIHAgPSBuZXcgRWxlbWVudChlbCwgU1ZHKTtcXG4gICAgICAgIHAudHlwZSA9IFxcXCJwYXRoXFxcIjtcXG4gICAgICAgIHNldEZpbGxBbmRTdHJva2UocCwge1xcbiAgICAgICAgICAgIGZpbGw6IFxcXCJub25lXFxcIixcXG4gICAgICAgICAgICBzdHJva2U6IFxcXCIjMDAwXFxcIixcXG4gICAgICAgICAgICBwYXRoOiBwYXRoU3RyaW5nXFxuICAgICAgICB9KTtcXG4gICAgICAgIHJldHVybiBwO1xcbiAgICB9O1xcbiAgICAvKlxcXFxcXG4gICAgICogRWxlbWVudC5yb3RhdGVcXG4gICAgIFsgbWV0aG9kIF1cXG4gICAgICoqXFxuICAgICAqIERlcHJlY2F0ZWQhIFVzZSBARWxlbWVudC50cmFuc2Zvcm0gaW5zdGVhZC5cXG4gICAgICogQWRkcyByb3RhdGlvbiBieSBnaXZlbiBhbmdsZSBhcm91bmQgZ2l2ZW4gcG9pbnQgdG8gdGhlIGxpc3Qgb2ZcXG4gICAgICogdHJhbnNmb3JtYXRpb25zIG9mIHRoZSBlbGVtZW50LlxcbiAgICAgPiBQYXJhbWV0ZXJzXFxuICAgICAtIGRlZyAobnVtYmVyKSBhbmdsZSBpbiBkZWdyZWVzXFxuICAgICAtIGN4IChudW1iZXIpICNvcHRpb25hbCB4IGNvb3JkaW5hdGUgb2YgdGhlIGNlbnRyZSBvZiByb3RhdGlvblxcbiAgICAgLSBjeSAobnVtYmVyKSAjb3B0aW9uYWwgeSBjb29yZGluYXRlIG9mIHRoZSBjZW50cmUgb2Ygcm90YXRpb25cXG4gICAgICogSWYgY3ggJiBjeSBhcmVu4oCZdCBzcGVjaWZpZWQgY2VudHJlIG9mIHRoZSBzaGFwZSBpcyB1c2VkIGFzIGEgcG9pbnQgb2Ygcm90YXRpb24uXFxuICAgICA9IChvYmplY3QpIEBFbGVtZW50XFxuICAgIFxcXFwqL1xcbiAgICBlbHByb3RvLnJvdGF0ZSA9IGZ1bmN0aW9uIChkZWcsIGN4LCBjeSkge1xcbiAgICAgICAgaWYgKHRoaXMucmVtb3ZlZCkge1xcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xcbiAgICAgICAgfVxcbiAgICAgICAgZGVnID0gU3RyKGRlZykuc3BsaXQoc2VwYXJhdG9yKTtcXG4gICAgICAgIGlmIChkZWcubGVuZ3RoIC0gMSkge1xcbiAgICAgICAgICAgIGN4ID0gdG9GbG9hdChkZWdbMV0pO1xcbiAgICAgICAgICAgIGN5ID0gdG9GbG9hdChkZWdbMl0pO1xcbiAgICAgICAgfVxcbiAgICAgICAgZGVnID0gdG9GbG9hdChkZWdbMF0pO1xcbiAgICAgICAgKGN5ID09IG51bGwpICYmIChjeCA9IGN5KTtcXG4gICAgICAgIGlmIChjeCA9PSBudWxsIHx8IGN5ID09IG51bGwpIHtcXG4gICAgICAgICAgICB2YXIgYmJveCA9IHRoaXMuZ2V0QkJveCgxKTtcXG4gICAgICAgICAgICBjeCA9IGJib3gueCArIGJib3gud2lkdGggLyAyO1xcbiAgICAgICAgICAgIGN5ID0gYmJveC55ICsgYmJveC5oZWlnaHQgLyAyO1xcbiAgICAgICAgfVxcbiAgICAgICAgdGhpcy50cmFuc2Zvcm0odGhpcy5fLnRyYW5zZm9ybS5jb25jYXQoW1tcXFwiclxcXCIsIGRlZywgY3gsIGN5XV0pKTtcXG4gICAgICAgIHJldHVybiB0aGlzO1xcbiAgICB9O1xcbiAgICAvKlxcXFxcXG4gICAgICogRWxlbWVudC5zY2FsZVxcbiAgICAgWyBtZXRob2QgXVxcbiAgICAgKipcXG4gICAgICogRGVwcmVjYXRlZCEgVXNlIEBFbGVtZW50LnRyYW5zZm9ybSBpbnN0ZWFkLlxcbiAgICAgKiBBZGRzIHNjYWxlIGJ5IGdpdmVuIGFtb3VudCByZWxhdGl2ZSB0byBnaXZlbiBwb2ludCB0byB0aGUgbGlzdCBvZlxcbiAgICAgKiB0cmFuc2Zvcm1hdGlvbnMgb2YgdGhlIGVsZW1lbnQuXFxuICAgICA+IFBhcmFtZXRlcnNcXG4gICAgIC0gc3ggKG51bWJlcikgaG9yaXNvbnRhbCBzY2FsZSBhbW91bnRcXG4gICAgIC0gc3kgKG51bWJlcikgdmVydGljYWwgc2NhbGUgYW1vdW50XFxuICAgICAtIGN4IChudW1iZXIpICNvcHRpb25hbCB4IGNvb3JkaW5hdGUgb2YgdGhlIGNlbnRyZSBvZiBzY2FsZVxcbiAgICAgLSBjeSAobnVtYmVyKSAjb3B0aW9uYWwgeSBjb29yZGluYXRlIG9mIHRoZSBjZW50cmUgb2Ygc2NhbGVcXG4gICAgICogSWYgY3ggJiBjeSBhcmVu4oCZdCBzcGVjaWZpZWQgY2VudHJlIG9mIHRoZSBzaGFwZSBpcyB1c2VkIGluc3RlYWQuXFxuICAgICA9IChvYmplY3QpIEBFbGVtZW50XFxuICAgIFxcXFwqL1xcbiAgICBlbHByb3RvLnNjYWxlID0gZnVuY3Rpb24gKHN4LCBzeSwgY3gsIGN5KSB7XFxuICAgICAgICBpZiAodGhpcy5yZW1vdmVkKSB7XFxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XFxuICAgICAgICB9XFxuICAgICAgICBzeCA9IFN0cihzeCkuc3BsaXQoc2VwYXJhdG9yKTtcXG4gICAgICAgIGlmIChzeC5sZW5ndGggLSAxKSB7XFxuICAgICAgICAgICAgc3kgPSB0b0Zsb2F0KHN4WzFdKTtcXG4gICAgICAgICAgICBjeCA9IHRvRmxvYXQoc3hbMl0pO1xcbiAgICAgICAgICAgIGN5ID0gdG9GbG9hdChzeFszXSk7XFxuICAgICAgICB9XFxuICAgICAgICBzeCA9IHRvRmxvYXQoc3hbMF0pO1xcbiAgICAgICAgKHN5ID09IG51bGwpICYmIChzeSA9IHN4KTtcXG4gICAgICAgIChjeSA9PSBudWxsKSAmJiAoY3ggPSBjeSk7XFxuICAgICAgICBpZiAoY3ggPT0gbnVsbCB8fCBjeSA9PSBudWxsKSB7XFxuICAgICAgICAgICAgdmFyIGJib3ggPSB0aGlzLmdldEJCb3goMSk7XFxuICAgICAgICB9XFxuICAgICAgICBjeCA9IGN4ID09IG51bGwgPyBiYm94LnggKyBiYm94LndpZHRoIC8gMiA6IGN4O1xcbiAgICAgICAgY3kgPSBjeSA9PSBudWxsID8gYmJveC55ICsgYmJveC5oZWlnaHQgLyAyIDogY3k7XFxuICAgICAgICB0aGlzLnRyYW5zZm9ybSh0aGlzLl8udHJhbnNmb3JtLmNvbmNhdChbW1xcXCJzXFxcIiwgc3gsIHN5LCBjeCwgY3ldXSkpO1xcbiAgICAgICAgcmV0dXJuIHRoaXM7XFxuICAgIH07XFxuICAgIC8qXFxcXFxcbiAgICAgKiBFbGVtZW50LnRyYW5zbGF0ZVxcbiAgICAgWyBtZXRob2QgXVxcbiAgICAgKipcXG4gICAgICogRGVwcmVjYXRlZCEgVXNlIEBFbGVtZW50LnRyYW5zZm9ybSBpbnN0ZWFkLlxcbiAgICAgKiBBZGRzIHRyYW5zbGF0aW9uIGJ5IGdpdmVuIGFtb3VudCB0byB0aGUgbGlzdCBvZiB0cmFuc2Zvcm1hdGlvbnMgb2YgdGhlIGVsZW1lbnQuXFxuICAgICA+IFBhcmFtZXRlcnNcXG4gICAgIC0gZHggKG51bWJlcikgaG9yaXNvbnRhbCBzaGlmdFxcbiAgICAgLSBkeSAobnVtYmVyKSB2ZXJ0aWNhbCBzaGlmdFxcbiAgICAgPSAob2JqZWN0KSBARWxlbWVudFxcbiAgICBcXFxcKi9cXG4gICAgZWxwcm90by50cmFuc2xhdGUgPSBmdW5jdGlvbiAoZHgsIGR5KSB7XFxuICAgICAgICBpZiAodGhpcy5yZW1vdmVkKSB7XFxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XFxuICAgICAgICB9XFxuICAgICAgICBkeCA9IFN0cihkeCkuc3BsaXQoc2VwYXJhdG9yKTtcXG4gICAgICAgIGlmIChkeC5sZW5ndGggLSAxKSB7XFxuICAgICAgICAgICAgZHkgPSB0b0Zsb2F0KGR4WzFdKTtcXG4gICAgICAgIH1cXG4gICAgICAgIGR4ID0gdG9GbG9hdChkeFswXSkgfHwgMDtcXG4gICAgICAgIGR5ID0gK2R5IHx8IDA7XFxuICAgICAgICB0aGlzLnRyYW5zZm9ybSh0aGlzLl8udHJhbnNmb3JtLmNvbmNhdChbW1xcXCJ0XFxcIiwgZHgsIGR5XV0pKTtcXG4gICAgICAgIHJldHVybiB0aGlzO1xcbiAgICB9O1xcbiAgICAvKlxcXFxcXG4gICAgICogRWxlbWVudC50cmFuc2Zvcm1cXG4gICAgIFsgbWV0aG9kIF1cXG4gICAgICoqXFxuICAgICAqIEFkZHMgdHJhbnNmb3JtYXRpb24gdG8gdGhlIGVsZW1lbnQgd2hpY2ggaXMgc2VwYXJhdGUgdG8gb3RoZXIgYXR0cmlidXRlcyxcXG4gICAgICogaS5lLiB0cmFuc2xhdGlvbiBkb2VzbuKAmXQgY2hhbmdlIGB4YCBvciBgeWAgb2YgdGhlIHJlY3RhbmdlLiBUaGUgZm9ybWF0XFxuICAgICAqIG9mIHRyYW5zZm9ybWF0aW9uIHN0cmluZyBpcyBzaW1pbGFyIHRvIHRoZSBwYXRoIHN0cmluZyBzeW50YXg6XFxuICAgICB8IFxcXCJ0MTAwLDEwMHIzMCwxMDAsMTAwczIsMiwxMDAsMTAwcjQ1czEuNVxcXCJcXG4gICAgICogRWFjaCBsZXR0ZXIgaXMgYSBjb21tYW5kLiBUaGVyZSBhcmUgZm91ciBjb21tYW5kczogYHRgIGlzIGZvciB0cmFuc2xhdGUsIGByYCBpcyBmb3Igcm90YXRlLCBgc2AgaXMgZm9yXFxuICAgICAqIHNjYWxlIGFuZCBgbWAgaXMgZm9yIG1hdHJpeC5cXG4gICAgICpcXG4gICAgICogVGhlcmUgYXJlIGFsc28gYWx0ZXJuYXRpdmUg4oCcYWJzb2x1dGXigJ0gdHJhbnNsYXRpb24sIHJvdGF0aW9uIGFuZCBzY2FsZTogYFRgLCBgUmAgYW5kIGBTYC4gVGhleSB3aWxsIG5vdCB0YWtlIHByZXZpb3VzIHRyYW5zZm9ybWF0aW9uIGludG8gYWNjb3VudC4gRm9yIGV4YW1wbGUsIGAuLi5UMTAwLDBgIHdpbGwgYWx3YXlzIG1vdmUgZWxlbWVudCAxMDAgcHggaG9yaXNvbnRhbGx5LCB3aGlsZSBgLi4udDEwMCwwYCBjb3VsZCBtb3ZlIGl0IHZlcnRpY2FsbHkgaWYgdGhlcmUgaXMgYHI5MGAgYmVmb3JlLiBKdXN0IGNvbXBhcmUgcmVzdWx0cyBvZiBgcjkwdDEwMCwwYCBhbmQgYHI5MFQxMDAsMGAuXFxuICAgICAqXFxuICAgICAqIFNvLCB0aGUgZXhhbXBsZSBsaW5lIGFib3ZlIGNvdWxkIGJlIHJlYWQgbGlrZSDigJx0cmFuc2xhdGUgYnkgMTAwLCAxMDA7IHJvdGF0ZSAzMMKwIGFyb3VuZCAxMDAsIDEwMDsgc2NhbGUgdHdpY2UgYXJvdW5kIDEwMCwgMTAwO1xcbiAgICAgKiByb3RhdGUgNDXCsCBhcm91bmQgY2VudHJlOyBzY2FsZSAxLjUgdGltZXMgcmVsYXRpdmUgdG8gY2VudHJl4oCdLiBBcyB5b3UgY2FuIHNlZSByb3RhdGUgYW5kIHNjYWxlIGNvbW1hbmRzIGhhdmUgb3JpZ2luXFxuICAgICAqIGNvb3JkaW5hdGVzIGFzIG9wdGlvbmFsIHBhcmFtZXRlcnMsIHRoZSBkZWZhdWx0IGlzIHRoZSBjZW50cmUgcG9pbnQgb2YgdGhlIGVsZW1lbnQuXFxuICAgICAqIE1hdHJpeCBhY2NlcHRzIHNpeCBwYXJhbWV0ZXJzLlxcbiAgICAgPiBVc2FnZVxcbiAgICAgfCB2YXIgZWwgPSBwYXBlci5yZWN0KDEwLCAyMCwgMzAwLCAyMDApO1xcbiAgICAgfCAvLyB0cmFuc2xhdGUgMTAwLCAxMDAsIHJvdGF0ZSA0NcKwLCB0cmFuc2xhdGUgLTEwMCwgMFxcbiAgICAgfCBlbC50cmFuc2Zvcm0oXFxcInQxMDAsMTAwcjQ1dC0xMDAsMFxcXCIpO1xcbiAgICAgfCAvLyBpZiB5b3Ugd2FudCB5b3UgY2FuIGFwcGVuZCBvciBwcmVwZW5kIHRyYW5zZm9ybWF0aW9uc1xcbiAgICAgfCBlbC50cmFuc2Zvcm0oXFxcIi4uLnQ1MCw1MFxcXCIpO1xcbiAgICAgfCBlbC50cmFuc2Zvcm0oXFxcInMyLi4uXFxcIik7XFxuICAgICB8IC8vIG9yIGV2ZW4gd3JhcFxcbiAgICAgfCBlbC50cmFuc2Zvcm0oXFxcInQ1MCw1MC4uLnQtNTAtNTBcXFwiKTtcXG4gICAgIHwgLy8gdG8gcmVzZXQgdHJhbnNmb3JtYXRpb24gY2FsbCBtZXRob2Qgd2l0aCBlbXB0eSBzdHJpbmdcXG4gICAgIHwgZWwudHJhbnNmb3JtKFxcXCJcXFwiKTtcXG4gICAgIHwgLy8gdG8gZ2V0IGN1cnJlbnQgdmFsdWUgY2FsbCBpdCB3aXRob3V0IHBhcmFtZXRlcnNcXG4gICAgIHwgY29uc29sZS5sb2coZWwudHJhbnNmb3JtKCkpO1xcbiAgICAgPiBQYXJhbWV0ZXJzXFxuICAgICAtIHRzdHIgKHN0cmluZykgI29wdGlvbmFsIHRyYW5zZm9ybWF0aW9uIHN0cmluZ1xcbiAgICAgKiBJZiB0c3RyIGlzbuKAmXQgc3BlY2lmaWVkXFxuICAgICA9IChzdHJpbmcpIGN1cnJlbnQgdHJhbnNmb3JtYXRpb24gc3RyaW5nXFxuICAgICAqIGVsc2VcXG4gICAgID0gKG9iamVjdCkgQEVsZW1lbnRcXG4gICAgXFxcXCovXFxuICAgIGVscHJvdG8udHJhbnNmb3JtID0gZnVuY3Rpb24gKHRzdHIpIHtcXG4gICAgICAgIHZhciBfID0gdGhpcy5fO1xcbiAgICAgICAgaWYgKHRzdHIgPT0gbnVsbCkge1xcbiAgICAgICAgICAgIHJldHVybiBfLnRyYW5zZm9ybTtcXG4gICAgICAgIH1cXG4gICAgICAgIFIuX2V4dHJhY3RUcmFuc2Zvcm0odGhpcywgdHN0cik7XFxuXFxuICAgICAgICB0aGlzLmNsaXAgJiYgJCh0aGlzLmNsaXAsIHt0cmFuc2Zvcm06IHRoaXMubWF0cml4LmludmVydCgpfSk7XFxuICAgICAgICB0aGlzLnBhdHRlcm4gJiYgdXBkYXRlUG9zaXRpb24odGhpcyk7XFxuICAgICAgICB0aGlzLm5vZGUgJiYgJCh0aGlzLm5vZGUsIHt0cmFuc2Zvcm06IHRoaXMubWF0cml4fSk7XFxuXFxuICAgICAgICBpZiAoXy5zeCAhPSAxIHx8IF8uc3kgIT0gMSkge1xcbiAgICAgICAgICAgIHZhciBzdyA9IHRoaXMuYXR0cnNbaGFzXShcXFwic3Ryb2tlLXdpZHRoXFxcIikgPyB0aGlzLmF0dHJzW1xcXCJzdHJva2Utd2lkdGhcXFwiXSA6IDE7XFxuICAgICAgICAgICAgdGhpcy5hdHRyKHtcXFwic3Ryb2tlLXdpZHRoXFxcIjogc3d9KTtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIHJldHVybiB0aGlzO1xcbiAgICB9O1xcbiAgICAvKlxcXFxcXG4gICAgICogRWxlbWVudC5oaWRlXFxuICAgICBbIG1ldGhvZCBdXFxuICAgICAqKlxcbiAgICAgKiBNYWtlcyBlbGVtZW50IGludmlzaWJsZS4gU2VlIEBFbGVtZW50LnNob3cuXFxuICAgICA9IChvYmplY3QpIEBFbGVtZW50XFxuICAgIFxcXFwqL1xcbiAgICBlbHByb3RvLmhpZGUgPSBmdW5jdGlvbiAoKSB7XFxuICAgICAgICBpZighdGhpcy5yZW1vdmVkKSB0aGlzLm5vZGUuc3R5bGUuZGlzcGxheSA9IFxcXCJub25lXFxcIjtcXG4gICAgICAgIHJldHVybiB0aGlzO1xcbiAgICB9O1xcbiAgICAvKlxcXFxcXG4gICAgICogRWxlbWVudC5zaG93XFxuICAgICBbIG1ldGhvZCBdXFxuICAgICAqKlxcbiAgICAgKiBNYWtlcyBlbGVtZW50IHZpc2libGUuIFNlZSBARWxlbWVudC5oaWRlLlxcbiAgICAgPSAob2JqZWN0KSBARWxlbWVudFxcbiAgICBcXFxcKi9cXG4gICAgZWxwcm90by5zaG93ID0gZnVuY3Rpb24gKCkge1xcbiAgICAgICAgaWYoIXRoaXMucmVtb3ZlZCkgdGhpcy5ub2RlLnN0eWxlLmRpc3BsYXkgPSBcXFwiXFxcIjtcXG4gICAgICAgIHJldHVybiB0aGlzO1xcbiAgICB9O1xcbiAgICAvKlxcXFxcXG4gICAgICogRWxlbWVudC5yZW1vdmVcXG4gICAgIFsgbWV0aG9kIF1cXG4gICAgICoqXFxuICAgICAqIFJlbW92ZXMgZWxlbWVudCBmcm9tIHRoZSBwYXBlci5cXG4gICAgXFxcXCovXFxuICAgIGVscHJvdG8ucmVtb3ZlID0gZnVuY3Rpb24gKCkge1xcbiAgICAgICAgdmFyIG5vZGUgPSBnZXRSZWFsTm9kZSh0aGlzLm5vZGUpO1xcbiAgICAgICAgaWYgKHRoaXMucmVtb3ZlZCB8fCAhbm9kZS5wYXJlbnROb2RlKSB7XFxuICAgICAgICAgICAgcmV0dXJuO1xcbiAgICAgICAgfVxcbiAgICAgICAgdmFyIHBhcGVyID0gdGhpcy5wYXBlcjtcXG4gICAgICAgIHBhcGVyLl9fc2V0X18gJiYgcGFwZXIuX19zZXRfXy5leGNsdWRlKHRoaXMpO1xcbiAgICAgICAgZXZlLnVuYmluZChcXFwicmFwaGFlbC4qLiouXFxcIiArIHRoaXMuaWQpO1xcbiAgICAgICAgaWYgKHRoaXMuZ3JhZGllbnQpIHtcXG4gICAgICAgICAgICBwYXBlci5kZWZzLnJlbW92ZUNoaWxkKHRoaXMuZ3JhZGllbnQpO1xcbiAgICAgICAgfVxcbiAgICAgICAgUi5fdGVhcih0aGlzLCBwYXBlcik7XFxuXFxuICAgICAgICBub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSk7XFxuXFxuICAgICAgICAvLyBSZW1vdmUgY3VzdG9tIGRhdGEgZm9yIGVsZW1lbnRcXG4gICAgICAgIHRoaXMucmVtb3ZlRGF0YSgpO1xcblxcbiAgICAgICAgZm9yICh2YXIgaSBpbiB0aGlzKSB7XFxuICAgICAgICAgICAgdGhpc1tpXSA9IHR5cGVvZiB0aGlzW2ldID09IFxcXCJmdW5jdGlvblxcXCIgPyBSLl9yZW1vdmVkRmFjdG9yeShpKSA6IG51bGw7XFxuICAgICAgICB9XFxuICAgICAgICB0aGlzLnJlbW92ZWQgPSB0cnVlO1xcbiAgICB9O1xcbiAgICBlbHByb3RvLl9nZXRCQm94ID0gZnVuY3Rpb24gKCkge1xcbiAgICAgICAgaWYgKHRoaXMubm9kZS5zdHlsZS5kaXNwbGF5ID09IFxcXCJub25lXFxcIikge1xcbiAgICAgICAgICAgIHRoaXMuc2hvdygpO1xcbiAgICAgICAgICAgIHZhciBoaWRlID0gdHJ1ZTtcXG4gICAgICAgIH1cXG4gICAgICAgIHZhciBjYW52YXNIaWRkZW4gPSBmYWxzZSxcXG4gICAgICAgICAgICBjb250YWluZXJTdHlsZTtcXG4gICAgICAgIGlmICh0aGlzLnBhcGVyLmNhbnZhcy5wYXJlbnRFbGVtZW50KSB7XFxuICAgICAgICAgIGNvbnRhaW5lclN0eWxlID0gdGhpcy5wYXBlci5jYW52YXMucGFyZW50RWxlbWVudC5zdHlsZTtcXG4gICAgICAgIH0gLy9JRTEwKyBjYW4ndCBmaW5kIHBhcmVudEVsZW1lbnRcXG4gICAgICAgIGVsc2UgaWYgKHRoaXMucGFwZXIuY2FudmFzLnBhcmVudE5vZGUpIHtcXG4gICAgICAgICAgY29udGFpbmVyU3R5bGUgPSB0aGlzLnBhcGVyLmNhbnZhcy5wYXJlbnROb2RlLnN0eWxlO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgaWYoY29udGFpbmVyU3R5bGUgJiYgY29udGFpbmVyU3R5bGUuZGlzcGxheSA9PSBcXFwibm9uZVxcXCIpIHtcXG4gICAgICAgICAgY2FudmFzSGlkZGVuID0gdHJ1ZTtcXG4gICAgICAgICAgY29udGFpbmVyU3R5bGUuZGlzcGxheSA9IFxcXCJcXFwiO1xcbiAgICAgICAgfVxcbiAgICAgICAgdmFyIGJib3ggPSB7fTtcXG4gICAgICAgIHRyeSB7XFxuICAgICAgICAgICAgYmJveCA9IHRoaXMubm9kZS5nZXRCQm94KCk7XFxuICAgICAgICB9IGNhdGNoKGUpIHtcXG4gICAgICAgICAgICAvLyBGaXJlZm94IDMuMC54LCAyNS4wLjEgKHByb2JhYmx5IG1vcmUgdmVyc2lvbnMgYWZmZWN0ZWQpIHBsYXkgYmFkbHkgaGVyZSAtIHBvc3NpYmxlIGZpeFxcbiAgICAgICAgICAgIGJib3ggPSB7XFxuICAgICAgICAgICAgICAgIHg6IHRoaXMubm9kZS5jbGllbnRMZWZ0LFxcbiAgICAgICAgICAgICAgICB5OiB0aGlzLm5vZGUuY2xpZW50VG9wLFxcbiAgICAgICAgICAgICAgICB3aWR0aDogdGhpcy5ub2RlLmNsaWVudFdpZHRoLFxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IHRoaXMubm9kZS5jbGllbnRIZWlnaHRcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9IGZpbmFsbHkge1xcbiAgICAgICAgICAgIGJib3ggPSBiYm94IHx8IHt9O1xcbiAgICAgICAgICAgIGlmKGNhbnZhc0hpZGRlbil7XFxuICAgICAgICAgICAgICBjb250YWluZXJTdHlsZS5kaXNwbGF5ID0gXFxcIm5vbmVcXFwiO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIGhpZGUgJiYgdGhpcy5oaWRlKCk7XFxuICAgICAgICByZXR1cm4gYmJveDtcXG4gICAgfTtcXG4gICAgLypcXFxcXFxuICAgICAqIEVsZW1lbnQuYXR0clxcbiAgICAgWyBtZXRob2QgXVxcbiAgICAgKipcXG4gICAgICogU2V0cyB0aGUgYXR0cmlidXRlcyBvZiB0aGUgZWxlbWVudC5cXG4gICAgID4gUGFyYW1ldGVyc1xcbiAgICAgLSBhdHRyTmFtZSAoc3RyaW5nKSBhdHRyaWJ1dGXigJlzIG5hbWVcXG4gICAgIC0gdmFsdWUgKHN0cmluZykgdmFsdWVcXG4gICAgICogb3JcXG4gICAgIC0gcGFyYW1zIChvYmplY3QpIG9iamVjdCBvZiBuYW1lL3ZhbHVlIHBhaXJzXFxuICAgICAqIG9yXFxuICAgICAtIGF0dHJOYW1lIChzdHJpbmcpIGF0dHJpYnV0ZeKAmXMgbmFtZVxcbiAgICAgKiBvclxcbiAgICAgLSBhdHRyTmFtZXMgKGFycmF5KSBpbiB0aGlzIGNhc2UgbWV0aG9kIHJldHVybnMgYXJyYXkgb2YgY3VycmVudCB2YWx1ZXMgZm9yIGdpdmVuIGF0dHJpYnV0ZSBuYW1lc1xcbiAgICAgPSAob2JqZWN0KSBARWxlbWVudCBpZiBhdHRyc05hbWUgJiB2YWx1ZSBvciBwYXJhbXMgYXJlIHBhc3NlZCBpbi5cXG4gICAgID0gKC4uLikgdmFsdWUgb2YgdGhlIGF0dHJpYnV0ZSBpZiBvbmx5IGF0dHJzTmFtZSBpcyBwYXNzZWQgaW4uXFxuICAgICA9IChhcnJheSkgYXJyYXkgb2YgdmFsdWVzIG9mIHRoZSBhdHRyaWJ1dGUgaWYgYXR0cnNOYW1lcyBpcyBwYXNzZWQgaW4uXFxuICAgICA9IChvYmplY3QpIG9iamVjdCBvZiBhdHRyaWJ1dGVzIGlmIG5vdGhpbmcgaXMgcGFzc2VkIGluLlxcbiAgICAgPiBQb3NzaWJsZSBwYXJhbWV0ZXJzXFxuICAgICAjIDxwPlBsZWFzZSByZWZlciB0byB0aGUgPGEgaHJlZj1cXFwiaHR0cDovL3d3dy53My5vcmcvVFIvU1ZHL1xcXCIgdGl0bGU9XFxcIlRoZSBXM0MgUmVjb21tZW5kYXRpb24gZm9yIHRoZSBTVkcgbGFuZ3VhZ2UgZGVzY3JpYmVzIHRoZXNlIHByb3BlcnRpZXMgaW4gZGV0YWlsLlxcXCI+U1ZHIHNwZWNpZmljYXRpb248L2E+IGZvciBhbiBleHBsYW5hdGlvbiBvZiB0aGVzZSBwYXJhbWV0ZXJzLjwvcD5cXG4gICAgIG8gYXJyb3ctZW5kIChzdHJpbmcpIGFycm93aGVhZCBvbiB0aGUgZW5kIG9mIHRoZSBwYXRoLiBUaGUgZm9ybWF0IGZvciBzdHJpbmcgaXMgYDx0eXBlPlstPHdpZHRoPlstPGxlbmd0aD5dXWAuIFBvc3NpYmxlIHR5cGVzOiBgY2xhc3NpY2AsIGBibG9ja2AsIGBvcGVuYCwgYG92YWxgLCBgZGlhbW9uZGAsIGBub25lYCwgd2lkdGg6IGB3aWRlYCwgYG5hcnJvd2AsIGBtZWRpdW1gLCBsZW5ndGg6IGBsb25nYCwgYHNob3J0YCwgYG1pZGl1bWAuXFxuICAgICBvIGNsaXAtcmVjdCAoc3RyaW5nKSBjb21tYSBvciBzcGFjZSBzZXBhcmF0ZWQgdmFsdWVzOiB4LCB5LCB3aWR0aCBhbmQgaGVpZ2h0XFxuICAgICBvIGN1cnNvciAoc3RyaW5nKSBDU1MgdHlwZSBvZiB0aGUgY3Vyc29yXFxuICAgICBvIGN4IChudW1iZXIpIHRoZSB4LWF4aXMgY29vcmRpbmF0ZSBvZiB0aGUgY2VudGVyIG9mIHRoZSBjaXJjbGUsIG9yIGVsbGlwc2VcXG4gICAgIG8gY3kgKG51bWJlcikgdGhlIHktYXhpcyBjb29yZGluYXRlIG9mIHRoZSBjZW50ZXIgb2YgdGhlIGNpcmNsZSwgb3IgZWxsaXBzZVxcbiAgICAgbyBmaWxsIChzdHJpbmcpIGNvbG91ciwgZ3JhZGllbnQgb3IgaW1hZ2VcXG4gICAgIG8gZmlsbC1vcGFjaXR5IChudW1iZXIpXFxuICAgICBvIGZvbnQgKHN0cmluZylcXG4gICAgIG8gZm9udC1mYW1pbHkgKHN0cmluZylcXG4gICAgIG8gZm9udC1zaXplIChudW1iZXIpIGZvbnQgc2l6ZSBpbiBwaXhlbHNcXG4gICAgIG8gZm9udC13ZWlnaHQgKHN0cmluZylcXG4gICAgIG8gaGVpZ2h0IChudW1iZXIpXFxuICAgICBvIGhyZWYgKHN0cmluZykgVVJMLCBpZiBzcGVjaWZpZWQgZWxlbWVudCBiZWhhdmVzIGFzIGh5cGVybGlua1xcbiAgICAgbyBvcGFjaXR5IChudW1iZXIpXFxuICAgICBvIHBhdGggKHN0cmluZykgU1ZHIHBhdGggc3RyaW5nIGZvcm1hdFxcbiAgICAgbyByIChudW1iZXIpIHJhZGl1cyBvZiB0aGUgY2lyY2xlLCBlbGxpcHNlIG9yIHJvdW5kZWQgY29ybmVyIG9uIHRoZSByZWN0XFxuICAgICBvIHJ4IChudW1iZXIpIGhvcmlzb250YWwgcmFkaXVzIG9mIHRoZSBlbGxpcHNlXFxuICAgICBvIHJ5IChudW1iZXIpIHZlcnRpY2FsIHJhZGl1cyBvZiB0aGUgZWxsaXBzZVxcbiAgICAgbyBzcmMgKHN0cmluZykgaW1hZ2UgVVJMLCBvbmx5IHdvcmtzIGZvciBARWxlbWVudC5pbWFnZSBlbGVtZW50XFxuICAgICBvIHN0cm9rZSAoc3RyaW5nKSBzdHJva2UgY29sb3VyXFxuICAgICBvIHN0cm9rZS1kYXNoYXJyYXkgKHN0cmluZykgW+KAnOKAnSwg4oCcbm9uZeKAnSwg4oCcYC1g4oCdLCDigJxgLmDigJ0sIOKAnGAtLmDigJ0sIOKAnGAtLi5g4oCdLCDigJxgLiBg4oCdLCDigJxgLSBg4oCdLCDigJxgLS1g4oCdLCDigJxgLSAuYOKAnSwg4oCcYC0tLmDigJ0sIOKAnGAtLS4uYOKAnV1cXG4gICAgIG8gc3Ryb2tlLWxpbmVjYXAgKHN0cmluZykgW+KAnGBidXR0YOKAnSwg4oCcYHNxdWFyZWDigJ0sIOKAnGByb3VuZGDigJ1dXFxuICAgICBvIHN0cm9rZS1saW5lam9pbiAoc3RyaW5nKSBb4oCcYGJldmVsYOKAnSwg4oCcYHJvdW5kYOKAnSwg4oCcYG1pdGVyYOKAnV1cXG4gICAgIG8gc3Ryb2tlLW1pdGVybGltaXQgKG51bWJlcilcXG4gICAgIG8gc3Ryb2tlLW9wYWNpdHkgKG51bWJlcilcXG4gICAgIG8gc3Ryb2tlLXdpZHRoIChudW1iZXIpIHN0cm9rZSB3aWR0aCBpbiBwaXhlbHMsIGRlZmF1bHQgaXMgJzEnXFxuICAgICBvIHRhcmdldCAoc3RyaW5nKSB1c2VkIHdpdGggaHJlZlxcbiAgICAgbyB0ZXh0IChzdHJpbmcpIGNvbnRlbnRzIG9mIHRoZSB0ZXh0IGVsZW1lbnQuIFVzZSBgXFxcXG5gIGZvciBtdWx0aWxpbmUgdGV4dFxcbiAgICAgbyB0ZXh0LWFuY2hvciAoc3RyaW5nKSBb4oCcYHN0YXJ0YOKAnSwg4oCcYG1pZGRsZWDigJ0sIOKAnGBlbmRg4oCdXSwgZGVmYXVsdCBpcyDigJxgbWlkZGxlYOKAnVxcbiAgICAgbyB0aXRsZSAoc3RyaW5nKSB3aWxsIGNyZWF0ZSB0b29sdGlwIHdpdGggYSBnaXZlbiB0ZXh0XFxuICAgICBvIHRyYW5zZm9ybSAoc3RyaW5nKSBzZWUgQEVsZW1lbnQudHJhbnNmb3JtXFxuICAgICBvIHdpZHRoIChudW1iZXIpXFxuICAgICBvIHggKG51bWJlcilcXG4gICAgIG8geSAobnVtYmVyKVxcbiAgICAgPiBHcmFkaWVudHNcXG4gICAgICogTGluZWFyIGdyYWRpZW50IGZvcm1hdDog4oCcYOKAuWFuZ2xl4oC6LeKAuWNvbG91cuKAulst4oC5Y29sb3Vy4oC6WzrigLlvZmZzZXTigLpdXSot4oC5Y29sb3Vy4oC6YOKAnSwgZXhhbXBsZTog4oCcYDkwLSNmZmYtIzAwMGDigJ0g4oCTIDkwwrBcXG4gICAgICogZ3JhZGllbnQgZnJvbSB3aGl0ZSB0byBibGFjayBvciDigJxgMC0jZmZmLSNmMDA6MjAtIzAwMGDigJ0g4oCTIDDCsCBncmFkaWVudCBmcm9tIHdoaXRlIHZpYSByZWQgKGF0IDIwJSkgdG8gYmxhY2suXFxuICAgICAqXFxuICAgICAqIHJhZGlhbCBncmFkaWVudDog4oCcYHJbKOKAuWZ44oC6LCDigLlmeeKAuild4oC5Y29sb3Vy4oC6Wy3igLljb2xvdXLigLpbOuKAuW9mZnNldOKAul1dKi3igLljb2xvdXLigLpg4oCdLCBleGFtcGxlOiDigJxgciNmZmYtIzAwMGDigJ0g4oCTXFxuICAgICAqIGdyYWRpZW50IGZyb20gd2hpdGUgdG8gYmxhY2sgb3Ig4oCcYHIoMC4yNSwgMC43NSkjZmZmLSMwMDBg4oCdIOKAkyBncmFkaWVudCBmcm9tIHdoaXRlIHRvIGJsYWNrIHdpdGggZm9jdXMgcG9pbnRcXG4gICAgICogYXQgMC4yNSwgMC43NS4gRm9jdXMgcG9pbnQgY29vcmRpbmF0ZXMgYXJlIGluIDAuLjEgcmFuZ2UuIFJhZGlhbCBncmFkaWVudHMgY2FuIG9ubHkgYmUgYXBwbGllZCB0byBjaXJjbGVzIGFuZCBlbGxpcHNlcy5cXG4gICAgID4gUGF0aCBTdHJpbmdcXG4gICAgICMgPHA+UGxlYXNlIHJlZmVyIHRvIDxhIGhyZWY9XFxcImh0dHA6Ly93d3cudzMub3JnL1RSL1NWRy9wYXRocy5odG1sI1BhdGhEYXRhXFxcIiB0aXRsZT1cXFwiRGV0YWlscyBvZiBhIHBhdGjigJlzIGRhdGEgYXR0cmlidXRl4oCZcyBmb3JtYXQgYXJlIGRlc2NyaWJlZCBpbiB0aGUgU1ZHIHNwZWNpZmljYXRpb24uXFxcIj5TVkcgZG9jdW1lbnRhdGlvbiByZWdhcmRpbmcgcGF0aCBzdHJpbmc8L2E+LiBSYXBoYcOrbCBmdWxseSBzdXBwb3J0cyBpdC48L3A+XFxuICAgICA+IENvbG91ciBQYXJzaW5nXFxuICAgICAjIDx1bD5cXG4gICAgICMgICAgIDxsaT5Db2xvdXIgbmFtZSAo4oCcPGNvZGU+cmVkPC9jb2RlPuKAnSwg4oCcPGNvZGU+Z3JlZW48L2NvZGU+4oCdLCDigJw8Y29kZT5jb3JuZmxvd2VyYmx1ZTwvY29kZT7igJ0sIGV0Yyk8L2xpPlxcbiAgICAgIyAgICAgPGxpPiPigKLigKLigKIg4oCUIHNob3J0ZW5lZCBIVE1MIGNvbG91cjogKOKAnDxjb2RlPiMwMDA8L2NvZGU+4oCdLCDigJw8Y29kZT4jZmMwPC9jb2RlPuKAnSwgZXRjKTwvbGk+XFxuICAgICAjICAgICA8bGk+I+KAouKAouKAouKAouKAouKAoiDigJQgZnVsbCBsZW5ndGggSFRNTCBjb2xvdXI6ICjigJw8Y29kZT4jMDAwMDAwPC9jb2RlPuKAnSwg4oCcPGNvZGU+I2JkMjMwMDwvY29kZT7igJ0pPC9saT5cXG4gICAgICMgICAgIDxsaT5yZ2Io4oCi4oCi4oCiLCDigKLigKLigKIsIOKAouKAouKAoikg4oCUIHJlZCwgZ3JlZW4gYW5kIGJsdWUgY2hhbm5lbHPigJkgdmFsdWVzOiAo4oCcPGNvZGU+cmdiKDIwMCwmbmJzcDsxMDAsJm5ic3A7MCk8L2NvZGU+4oCdKTwvbGk+XFxuICAgICAjICAgICA8bGk+cmdiKOKAouKAouKAoiUsIOKAouKAouKAoiUsIOKAouKAouKAoiUpIOKAlCBzYW1lIGFzIGFib3ZlLCBidXQgaW4gJTogKOKAnDxjb2RlPnJnYigxMDAlLCZuYnNwOzE3NSUsJm5ic3A7MCUpPC9jb2RlPuKAnSk8L2xpPlxcbiAgICAgIyAgICAgPGxpPnJnYmEo4oCi4oCi4oCiLCDigKLigKLigKIsIOKAouKAouKAoiwg4oCi4oCi4oCiKSDigJQgcmVkLCBncmVlbiBhbmQgYmx1ZSBjaGFubmVsc+KAmSB2YWx1ZXM6ICjigJw8Y29kZT5yZ2JhKDIwMCwmbmJzcDsxMDAsJm5ic3A7MCwgLjUpPC9jb2RlPuKAnSk8L2xpPlxcbiAgICAgIyAgICAgPGxpPnJnYmEo4oCi4oCi4oCiJSwg4oCi4oCi4oCiJSwg4oCi4oCi4oCiJSwg4oCi4oCi4oCiJSkg4oCUIHNhbWUgYXMgYWJvdmUsIGJ1dCBpbiAlOiAo4oCcPGNvZGU+cmdiYSgxMDAlLCZuYnNwOzE3NSUsJm5ic3A7MCUsIDUwJSk8L2NvZGU+4oCdKTwvbGk+XFxuICAgICAjICAgICA8bGk+aHNiKOKAouKAouKAoiwg4oCi4oCi4oCiLCDigKLigKLigKIpIOKAlCBodWUsIHNhdHVyYXRpb24gYW5kIGJyaWdodG5lc3MgdmFsdWVzOiAo4oCcPGNvZGU+aHNiKDAuNSwmbmJzcDswLjI1LCZuYnNwOzEpPC9jb2RlPuKAnSk8L2xpPlxcbiAgICAgIyAgICAgPGxpPmhzYijigKLigKLigKIlLCDigKLigKLigKIlLCDigKLigKLigKIlKSDigJQgc2FtZSBhcyBhYm92ZSwgYnV0IGluICU8L2xpPlxcbiAgICAgIyAgICAgPGxpPmhzYmEo4oCi4oCi4oCiLCDigKLigKLigKIsIOKAouKAouKAoiwg4oCi4oCi4oCiKSDigJQgc2FtZSBhcyBhYm92ZSwgYnV0IHdpdGggb3BhY2l0eTwvbGk+XFxuICAgICAjICAgICA8bGk+aHNsKOKAouKAouKAoiwg4oCi4oCi4oCiLCDigKLigKLigKIpIOKAlCBhbG1vc3QgdGhlIHNhbWUgYXMgaHNiLCBzZWUgPGEgaHJlZj1cXFwiaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9IU0xfYW5kX0hTVlxcXCIgdGl0bGU9XFxcIkhTTCBhbmQgSFNWIC0gV2lraXBlZGlhLCB0aGUgZnJlZSBlbmN5Y2xvcGVkaWFcXFwiPldpa2lwZWRpYSBwYWdlPC9hPjwvbGk+XFxuICAgICAjICAgICA8bGk+aHNsKOKAouKAouKAoiUsIOKAouKAouKAoiUsIOKAouKAouKAoiUpIOKAlCBzYW1lIGFzIGFib3ZlLCBidXQgaW4gJTwvbGk+XFxuICAgICAjICAgICA8bGk+aHNsYSjigKLigKLigKIsIOKAouKAouKAoiwg4oCi4oCi4oCiLCDigKLigKLigKIpIOKAlCBzYW1lIGFzIGFib3ZlLCBidXQgd2l0aCBvcGFjaXR5PC9saT5cXG4gICAgICMgICAgIDxsaT5PcHRpb25hbGx5IGZvciBoc2IgYW5kIGhzbCB5b3UgY291bGQgc3BlY2lmeSBodWUgYXMgYSBkZWdyZWU6IOKAnDxjb2RlPmhzbCgyNDBkZWcsJm5ic3A7MSwmbmJzcDsuNSk8L2NvZGU+4oCdIG9yLCBpZiB5b3Ugd2FudCB0byBnbyBmYW5jeSwg4oCcPGNvZGU+aHNsKDI0MMKwLCZuYnNwOzEsJm5ic3A7LjUpPC9jb2RlPuKAnTwvbGk+XFxuICAgICAjIDwvdWw+XFxuICAgIFxcXFwqL1xcbiAgICBlbHByb3RvLmF0dHIgPSBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcXG4gICAgICAgIGlmICh0aGlzLnJlbW92ZWQpIHtcXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcXG4gICAgICAgIH1cXG4gICAgICAgIGlmIChuYW1lID09IG51bGwpIHtcXG4gICAgICAgICAgICB2YXIgcmVzID0ge307XFxuICAgICAgICAgICAgZm9yICh2YXIgYSBpbiB0aGlzLmF0dHJzKSBpZiAodGhpcy5hdHRyc1toYXNdKGEpKSB7XFxuICAgICAgICAgICAgICAgIHJlc1thXSA9IHRoaXMuYXR0cnNbYV07XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIHJlcy5ncmFkaWVudCAmJiByZXMuZmlsbCA9PSBcXFwibm9uZVxcXCIgJiYgKHJlcy5maWxsID0gcmVzLmdyYWRpZW50KSAmJiBkZWxldGUgcmVzLmdyYWRpZW50O1xcbiAgICAgICAgICAgIHJlcy50cmFuc2Zvcm0gPSB0aGlzLl8udHJhbnNmb3JtO1xcbiAgICAgICAgICAgIHJldHVybiByZXM7XFxuICAgICAgICB9XFxuICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCAmJiBSLmlzKG5hbWUsIFxcXCJzdHJpbmdcXFwiKSkge1xcbiAgICAgICAgICAgIGlmIChuYW1lID09IFxcXCJmaWxsXFxcIiAmJiB0aGlzLmF0dHJzLmZpbGwgPT0gXFxcIm5vbmVcXFwiICYmIHRoaXMuYXR0cnMuZ3JhZGllbnQpIHtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXR0cnMuZ3JhZGllbnQ7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIGlmIChuYW1lID09IFxcXCJ0cmFuc2Zvcm1cXFwiKSB7XFxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl8udHJhbnNmb3JtO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB2YXIgbmFtZXMgPSBuYW1lLnNwbGl0KHNlcGFyYXRvciksXFxuICAgICAgICAgICAgICAgIG91dCA9IHt9O1xcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IG5hbWVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcXG4gICAgICAgICAgICAgICAgbmFtZSA9IG5hbWVzW2ldO1xcbiAgICAgICAgICAgICAgICBpZiAobmFtZSBpbiB0aGlzLmF0dHJzKSB7XFxuICAgICAgICAgICAgICAgICAgICBvdXRbbmFtZV0gPSB0aGlzLmF0dHJzW25hbWVdO1xcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFIuaXModGhpcy5wYXBlci5jdXN0b21BdHRyaWJ1dGVzW25hbWVdLCBcXFwiZnVuY3Rpb25cXFwiKSkge1xcbiAgICAgICAgICAgICAgICAgICAgb3V0W25hbWVdID0gdGhpcy5wYXBlci5jdXN0b21BdHRyaWJ1dGVzW25hbWVdLmRlZjtcXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICAgIG91dFtuYW1lXSA9IFIuX2F2YWlsYWJsZUF0dHJzW25hbWVdO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIHJldHVybiBpaSAtIDEgPyBvdXQgOiBvdXRbbmFtZXNbMF1dO1xcbiAgICAgICAgfVxcbiAgICAgICAgaWYgKHZhbHVlID09IG51bGwgJiYgUi5pcyhuYW1lLCBcXFwiYXJyYXlcXFwiKSkge1xcbiAgICAgICAgICAgIG91dCA9IHt9O1xcbiAgICAgICAgICAgIGZvciAoaSA9IDAsIGlpID0gbmFtZS5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XFxuICAgICAgICAgICAgICAgIG91dFtuYW1lW2ldXSA9IHRoaXMuYXR0cihuYW1lW2ldKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgcmV0dXJuIG91dDtcXG4gICAgICAgIH1cXG4gICAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XFxuICAgICAgICAgICAgdmFyIHBhcmFtcyA9IHt9O1xcbiAgICAgICAgICAgIHBhcmFtc1tuYW1lXSA9IHZhbHVlO1xcbiAgICAgICAgfSBlbHNlIGlmIChuYW1lICE9IG51bGwgJiYgUi5pcyhuYW1lLCBcXFwib2JqZWN0XFxcIikpIHtcXG4gICAgICAgICAgICBwYXJhbXMgPSBuYW1lO1xcbiAgICAgICAgfVxcbiAgICAgICAgZm9yICh2YXIga2V5IGluIHBhcmFtcykge1xcbiAgICAgICAgICAgIGV2ZShcXFwicmFwaGFlbC5hdHRyLlxcXCIgKyBrZXkgKyBcXFwiLlxcXCIgKyB0aGlzLmlkLCB0aGlzLCBwYXJhbXNba2V5XSk7XFxuICAgICAgICB9XFxuICAgICAgICBmb3IgKGtleSBpbiB0aGlzLnBhcGVyLmN1c3RvbUF0dHJpYnV0ZXMpIGlmICh0aGlzLnBhcGVyLmN1c3RvbUF0dHJpYnV0ZXNbaGFzXShrZXkpICYmIHBhcmFtc1toYXNdKGtleSkgJiYgUi5pcyh0aGlzLnBhcGVyLmN1c3RvbUF0dHJpYnV0ZXNba2V5XSwgXFxcImZ1bmN0aW9uXFxcIikpIHtcXG4gICAgICAgICAgICB2YXIgcGFyID0gdGhpcy5wYXBlci5jdXN0b21BdHRyaWJ1dGVzW2tleV0uYXBwbHkodGhpcywgW10uY29uY2F0KHBhcmFtc1trZXldKSk7XFxuICAgICAgICAgICAgdGhpcy5hdHRyc1trZXldID0gcGFyYW1zW2tleV07XFxuICAgICAgICAgICAgZm9yICh2YXIgc3Via2V5IGluIHBhcikgaWYgKHBhcltoYXNdKHN1YmtleSkpIHtcXG4gICAgICAgICAgICAgICAgcGFyYW1zW3N1YmtleV0gPSBwYXJbc3Via2V5XTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgICBzZXRGaWxsQW5kU3Ryb2tlKHRoaXMsIHBhcmFtcyk7XFxuICAgICAgICByZXR1cm4gdGhpcztcXG4gICAgfTtcXG4gICAgLypcXFxcXFxuICAgICAqIEVsZW1lbnQudG9Gcm9udFxcbiAgICAgWyBtZXRob2QgXVxcbiAgICAgKipcXG4gICAgICogTW92ZXMgdGhlIGVsZW1lbnQgc28gaXQgaXMgdGhlIGNsb3Nlc3QgdG8gdGhlIHZpZXdlcuKAmXMgZXllcywgb24gdG9wIG9mIG90aGVyIGVsZW1lbnRzLlxcbiAgICAgPSAob2JqZWN0KSBARWxlbWVudFxcbiAgICBcXFxcKi9cXG4gICAgZWxwcm90by50b0Zyb250ID0gZnVuY3Rpb24gKCkge1xcbiAgICAgICAgaWYgKHRoaXMucmVtb3ZlZCkge1xcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xcbiAgICAgICAgfVxcbiAgICAgICAgdmFyIG5vZGUgPSBnZXRSZWFsTm9kZSh0aGlzLm5vZGUpO1xcbiAgICAgICAgbm9kZS5wYXJlbnROb2RlLmFwcGVuZENoaWxkKG5vZGUpO1xcbiAgICAgICAgdmFyIHN2ZyA9IHRoaXMucGFwZXI7XFxuICAgICAgICBzdmcudG9wICE9IHRoaXMgJiYgUi5fdG9mcm9udCh0aGlzLCBzdmcpO1xcbiAgICAgICAgcmV0dXJuIHRoaXM7XFxuICAgIH07XFxuICAgIC8qXFxcXFxcbiAgICAgKiBFbGVtZW50LnRvQmFja1xcbiAgICAgWyBtZXRob2QgXVxcbiAgICAgKipcXG4gICAgICogTW92ZXMgdGhlIGVsZW1lbnQgc28gaXQgaXMgdGhlIGZ1cnRoZXN0IGZyb20gdGhlIHZpZXdlcuKAmXMgZXllcywgYmVoaW5kIG90aGVyIGVsZW1lbnRzLlxcbiAgICAgPSAob2JqZWN0KSBARWxlbWVudFxcbiAgICBcXFxcKi9cXG4gICAgZWxwcm90by50b0JhY2sgPSBmdW5jdGlvbiAoKSB7XFxuICAgICAgICBpZiAodGhpcy5yZW1vdmVkKSB7XFxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XFxuICAgICAgICB9XFxuICAgICAgICB2YXIgbm9kZSA9IGdldFJlYWxOb2RlKHRoaXMubm9kZSk7XFxuICAgICAgICB2YXIgcGFyZW50Tm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcXG4gICAgICAgIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5vZGUsIHBhcmVudE5vZGUuZmlyc3RDaGlsZCk7XFxuICAgICAgICBSLl90b2JhY2sodGhpcywgdGhpcy5wYXBlcik7XFxuICAgICAgICB2YXIgc3ZnID0gdGhpcy5wYXBlcjtcXG4gICAgICAgIHJldHVybiB0aGlzO1xcbiAgICB9O1xcbiAgICAvKlxcXFxcXG4gICAgICogRWxlbWVudC5pbnNlcnRBZnRlclxcbiAgICAgWyBtZXRob2QgXVxcbiAgICAgKipcXG4gICAgICogSW5zZXJ0cyBjdXJyZW50IG9iamVjdCBhZnRlciB0aGUgZ2l2ZW4gb25lLlxcbiAgICAgPSAob2JqZWN0KSBARWxlbWVudFxcbiAgICBcXFxcKi9cXG4gICAgZWxwcm90by5pbnNlcnRBZnRlciA9IGZ1bmN0aW9uIChlbGVtZW50KSB7XFxuICAgICAgICBpZiAodGhpcy5yZW1vdmVkIHx8ICFlbGVtZW50KSB7XFxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XFxuICAgICAgICB9XFxuXFxuICAgICAgICB2YXIgbm9kZSA9IGdldFJlYWxOb2RlKHRoaXMubm9kZSk7XFxuICAgICAgICB2YXIgYWZ0ZXJOb2RlID0gZ2V0UmVhbE5vZGUoZWxlbWVudC5ub2RlIHx8IGVsZW1lbnRbZWxlbWVudC5sZW5ndGggLSAxXS5ub2RlKTtcXG4gICAgICAgIGlmIChhZnRlck5vZGUubmV4dFNpYmxpbmcpIHtcXG4gICAgICAgICAgICBhZnRlck5vZGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobm9kZSwgYWZ0ZXJOb2RlLm5leHRTaWJsaW5nKTtcXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgYWZ0ZXJOb2RlLnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQobm9kZSk7XFxuICAgICAgICB9XFxuICAgICAgICBSLl9pbnNlcnRhZnRlcih0aGlzLCBlbGVtZW50LCB0aGlzLnBhcGVyKTtcXG4gICAgICAgIHJldHVybiB0aGlzO1xcbiAgICB9O1xcbiAgICAvKlxcXFxcXG4gICAgICogRWxlbWVudC5pbnNlcnRCZWZvcmVcXG4gICAgIFsgbWV0aG9kIF1cXG4gICAgICoqXFxuICAgICAqIEluc2VydHMgY3VycmVudCBvYmplY3QgYmVmb3JlIHRoZSBnaXZlbiBvbmUuXFxuICAgICA9IChvYmplY3QpIEBFbGVtZW50XFxuICAgIFxcXFwqL1xcbiAgICBlbHByb3RvLmluc2VydEJlZm9yZSA9IGZ1bmN0aW9uIChlbGVtZW50KSB7XFxuICAgICAgICBpZiAodGhpcy5yZW1vdmVkIHx8ICFlbGVtZW50KSB7XFxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XFxuICAgICAgICB9XFxuXFxuICAgICAgICB2YXIgbm9kZSA9IGdldFJlYWxOb2RlKHRoaXMubm9kZSk7XFxuICAgICAgICB2YXIgYmVmb3JlTm9kZSA9IGdldFJlYWxOb2RlKGVsZW1lbnQubm9kZSB8fCBlbGVtZW50WzBdLm5vZGUpO1xcbiAgICAgICAgYmVmb3JlTm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShub2RlLCBiZWZvcmVOb2RlKTtcXG4gICAgICAgIFIuX2luc2VydGJlZm9yZSh0aGlzLCBlbGVtZW50LCB0aGlzLnBhcGVyKTtcXG4gICAgICAgIHJldHVybiB0aGlzO1xcbiAgICB9O1xcbiAgICBlbHByb3RvLmJsdXIgPSBmdW5jdGlvbiAoc2l6ZSkge1xcbiAgICAgICAgLy8gRXhwZXJpbWVudGFsLiBObyBTYWZhcmkgc3VwcG9ydC4gVXNlIGl0IG9uIHlvdXIgb3duIHJpc2suXFxuICAgICAgICB2YXIgdCA9IHRoaXM7XFxuICAgICAgICBpZiAoK3NpemUgIT09IDApIHtcXG4gICAgICAgICAgICB2YXIgZmx0ciA9ICQoXFxcImZpbHRlclxcXCIpLFxcbiAgICAgICAgICAgICAgICBibHVyID0gJChcXFwiZmVHYXVzc2lhbkJsdXJcXFwiKTtcXG4gICAgICAgICAgICB0LmF0dHJzLmJsdXIgPSBzaXplO1xcbiAgICAgICAgICAgIGZsdHIuaWQgPSBSLmNyZWF0ZVVVSUQoKTtcXG4gICAgICAgICAgICAkKGJsdXIsIHtzdGREZXZpYXRpb246ICtzaXplIHx8IDEuNX0pO1xcbiAgICAgICAgICAgIGZsdHIuYXBwZW5kQ2hpbGQoYmx1cik7XFxuICAgICAgICAgICAgdC5wYXBlci5kZWZzLmFwcGVuZENoaWxkKGZsdHIpO1xcbiAgICAgICAgICAgIHQuX2JsdXIgPSBmbHRyO1xcbiAgICAgICAgICAgICQodC5ub2RlLCB7ZmlsdGVyOiBcXFwidXJsKCNcXFwiICsgZmx0ci5pZCArIFxcXCIpXFxcIn0pO1xcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICBpZiAodC5fYmx1cikge1xcbiAgICAgICAgICAgICAgICB0Ll9ibHVyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodC5fYmx1cik7XFxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0Ll9ibHVyO1xcbiAgICAgICAgICAgICAgICBkZWxldGUgdC5hdHRycy5ibHVyO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB0Lm5vZGUucmVtb3ZlQXR0cmlidXRlKFxcXCJmaWx0ZXJcXFwiKTtcXG4gICAgICAgIH1cXG4gICAgICAgIHJldHVybiB0O1xcbiAgICB9O1xcbiAgICBSLl9lbmdpbmUuY2lyY2xlID0gZnVuY3Rpb24gKHN2ZywgeCwgeSwgcikge1xcbiAgICAgICAgdmFyIGVsID0gJChcXFwiY2lyY2xlXFxcIik7XFxuICAgICAgICBzdmcuY2FudmFzICYmIHN2Zy5jYW52YXMuYXBwZW5kQ2hpbGQoZWwpO1xcbiAgICAgICAgdmFyIHJlcyA9IG5ldyBFbGVtZW50KGVsLCBzdmcpO1xcbiAgICAgICAgcmVzLmF0dHJzID0ge2N4OiB4LCBjeTogeSwgcjogciwgZmlsbDogXFxcIm5vbmVcXFwiLCBzdHJva2U6IFxcXCIjMDAwXFxcIn07XFxuICAgICAgICByZXMudHlwZSA9IFxcXCJjaXJjbGVcXFwiO1xcbiAgICAgICAgJChlbCwgcmVzLmF0dHJzKTtcXG4gICAgICAgIHJldHVybiByZXM7XFxuICAgIH07XFxuICAgIFIuX2VuZ2luZS5yZWN0ID0gZnVuY3Rpb24gKHN2ZywgeCwgeSwgdywgaCwgcikge1xcbiAgICAgICAgdmFyIGVsID0gJChcXFwicmVjdFxcXCIpO1xcbiAgICAgICAgc3ZnLmNhbnZhcyAmJiBzdmcuY2FudmFzLmFwcGVuZENoaWxkKGVsKTtcXG4gICAgICAgIHZhciByZXMgPSBuZXcgRWxlbWVudChlbCwgc3ZnKTtcXG4gICAgICAgIHJlcy5hdHRycyA9IHt4OiB4LCB5OiB5LCB3aWR0aDogdywgaGVpZ2h0OiBoLCByeDogciB8fCAwLCByeTogciB8fCAwLCBmaWxsOiBcXFwibm9uZVxcXCIsIHN0cm9rZTogXFxcIiMwMDBcXFwifTtcXG4gICAgICAgIHJlcy50eXBlID0gXFxcInJlY3RcXFwiO1xcbiAgICAgICAgJChlbCwgcmVzLmF0dHJzKTtcXG4gICAgICAgIHJldHVybiByZXM7XFxuICAgIH07XFxuICAgIFIuX2VuZ2luZS5lbGxpcHNlID0gZnVuY3Rpb24gKHN2ZywgeCwgeSwgcngsIHJ5KSB7XFxuICAgICAgICB2YXIgZWwgPSAkKFxcXCJlbGxpcHNlXFxcIik7XFxuICAgICAgICBzdmcuY2FudmFzICYmIHN2Zy5jYW52YXMuYXBwZW5kQ2hpbGQoZWwpO1xcbiAgICAgICAgdmFyIHJlcyA9IG5ldyBFbGVtZW50KGVsLCBzdmcpO1xcbiAgICAgICAgcmVzLmF0dHJzID0ge2N4OiB4LCBjeTogeSwgcng6IHJ4LCByeTogcnksIGZpbGw6IFxcXCJub25lXFxcIiwgc3Ryb2tlOiBcXFwiIzAwMFxcXCJ9O1xcbiAgICAgICAgcmVzLnR5cGUgPSBcXFwiZWxsaXBzZVxcXCI7XFxuICAgICAgICAkKGVsLCByZXMuYXR0cnMpO1xcbiAgICAgICAgcmV0dXJuIHJlcztcXG4gICAgfTtcXG4gICAgUi5fZW5naW5lLmltYWdlID0gZnVuY3Rpb24gKHN2Zywgc3JjLCB4LCB5LCB3LCBoKSB7XFxuICAgICAgICB2YXIgZWwgPSAkKFxcXCJpbWFnZVxcXCIpO1xcbiAgICAgICAgJChlbCwge3g6IHgsIHk6IHksIHdpZHRoOiB3LCBoZWlnaHQ6IGgsIHByZXNlcnZlQXNwZWN0UmF0aW86IFxcXCJub25lXFxcIn0pO1xcbiAgICAgICAgZWwuc2V0QXR0cmlidXRlTlMoeGxpbmssIFxcXCJocmVmXFxcIiwgc3JjKTtcXG4gICAgICAgIHN2Zy5jYW52YXMgJiYgc3ZnLmNhbnZhcy5hcHBlbmRDaGlsZChlbCk7XFxuICAgICAgICB2YXIgcmVzID0gbmV3IEVsZW1lbnQoZWwsIHN2Zyk7XFxuICAgICAgICByZXMuYXR0cnMgPSB7eDogeCwgeTogeSwgd2lkdGg6IHcsIGhlaWdodDogaCwgc3JjOiBzcmN9O1xcbiAgICAgICAgcmVzLnR5cGUgPSBcXFwiaW1hZ2VcXFwiO1xcbiAgICAgICAgcmV0dXJuIHJlcztcXG4gICAgfTtcXG4gICAgUi5fZW5naW5lLnRleHQgPSBmdW5jdGlvbiAoc3ZnLCB4LCB5LCB0ZXh0KSB7XFxuICAgICAgICB2YXIgZWwgPSAkKFxcXCJ0ZXh0XFxcIik7XFxuICAgICAgICBzdmcuY2FudmFzICYmIHN2Zy5jYW52YXMuYXBwZW5kQ2hpbGQoZWwpO1xcbiAgICAgICAgdmFyIHJlcyA9IG5ldyBFbGVtZW50KGVsLCBzdmcpO1xcbiAgICAgICAgcmVzLmF0dHJzID0ge1xcbiAgICAgICAgICAgIHg6IHgsXFxuICAgICAgICAgICAgeTogeSxcXG4gICAgICAgICAgICBcXFwidGV4dC1hbmNob3JcXFwiOiBcXFwibWlkZGxlXFxcIixcXG4gICAgICAgICAgICB0ZXh0OiB0ZXh0LFxcbiAgICAgICAgICAgIFxcXCJmb250LWZhbWlseVxcXCI6IFIuX2F2YWlsYWJsZUF0dHJzW1xcXCJmb250LWZhbWlseVxcXCJdLFxcbiAgICAgICAgICAgIFxcXCJmb250LXNpemVcXFwiOiBSLl9hdmFpbGFibGVBdHRyc1tcXFwiZm9udC1zaXplXFxcIl0sXFxuICAgICAgICAgICAgc3Ryb2tlOiBcXFwibm9uZVxcXCIsXFxuICAgICAgICAgICAgZmlsbDogXFxcIiMwMDBcXFwiXFxuICAgICAgICB9O1xcbiAgICAgICAgcmVzLnR5cGUgPSBcXFwidGV4dFxcXCI7XFxuICAgICAgICBzZXRGaWxsQW5kU3Ryb2tlKHJlcywgcmVzLmF0dHJzKTtcXG4gICAgICAgIHJldHVybiByZXM7XFxuICAgIH07XFxuICAgIFIuX2VuZ2luZS5zZXRTaXplID0gZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQpIHtcXG4gICAgICAgIHRoaXMud2lkdGggPSB3aWR0aCB8fCB0aGlzLndpZHRoO1xcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQgfHwgdGhpcy5oZWlnaHQ7XFxuICAgICAgICB0aGlzLmNhbnZhcy5zZXRBdHRyaWJ1dGUoXFxcIndpZHRoXFxcIiwgdGhpcy53aWR0aCk7XFxuICAgICAgICB0aGlzLmNhbnZhcy5zZXRBdHRyaWJ1dGUoXFxcImhlaWdodFxcXCIsIHRoaXMuaGVpZ2h0KTtcXG4gICAgICAgIGlmICh0aGlzLl92aWV3Qm94KSB7XFxuICAgICAgICAgICAgdGhpcy5zZXRWaWV3Qm94LmFwcGx5KHRoaXMsIHRoaXMuX3ZpZXdCb3gpO1xcbiAgICAgICAgfVxcbiAgICAgICAgcmV0dXJuIHRoaXM7XFxuICAgIH07XFxuICAgIFIuX2VuZ2luZS5jcmVhdGUgPSBmdW5jdGlvbiAoKSB7XFxuICAgICAgICB2YXIgY29uID0gUi5fZ2V0Q29udGFpbmVyLmFwcGx5KDAsIGFyZ3VtZW50cyksXFxuICAgICAgICAgICAgY29udGFpbmVyID0gY29uICYmIGNvbi5jb250YWluZXI7XFxuICAgICAgICBpZiAoIWNvbnRhaW5lcikge1xcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcXFwiU1ZHIGNvbnRhaW5lciBub3QgZm91bmQuXFxcIik7XFxuICAgICAgICB9XFxuICAgICAgICB2YXIgeCA9IGNvbi54LFxcbiAgICAgICAgICAgIHkgPSBjb24ueSxcXG4gICAgICAgICAgICB3aWR0aCA9IGNvbi53aWR0aCxcXG4gICAgICAgICAgICBoZWlnaHQgPSBjb24uaGVpZ2h0LFxcbiAgICAgICAgICAgIGNudnMgPSAkKFxcXCJzdmdcXFwiKSxcXG4gICAgICAgICAgICBjc3MgPSBcXFwib3ZlcmZsb3c6aGlkZGVuO1xcXCIsXFxuICAgICAgICAgICAgaXNGbG9hdGluZztcXG4gICAgICAgIHggPSB4IHx8IDA7XFxuICAgICAgICB5ID0geSB8fCAwO1xcbiAgICAgICAgd2lkdGggPSB3aWR0aCB8fCA1MTI7XFxuICAgICAgICBoZWlnaHQgPSBoZWlnaHQgfHwgMzQyO1xcbiAgICAgICAgJChjbnZzLCB7XFxuICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXFxuICAgICAgICAgICAgdmVyc2lvbjogMS4xLFxcbiAgICAgICAgICAgIHdpZHRoOiB3aWR0aCxcXG4gICAgICAgICAgICB4bWxuczogXFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIixcXG4gICAgICAgICAgICBcXFwieG1sbnM6eGxpbmtcXFwiOiBcXFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1xcXCJcXG4gICAgICAgIH0pO1xcbiAgICAgICAgaWYgKGNvbnRhaW5lciA9PSAxKSB7XFxuICAgICAgICAgICAgY252cy5zdHlsZS5jc3NUZXh0ID0gY3NzICsgXFxcInBvc2l0aW9uOmFic29sdXRlO2xlZnQ6XFxcIiArIHggKyBcXFwicHg7dG9wOlxcXCIgKyB5ICsgXFxcInB4XFxcIjtcXG4gICAgICAgICAgICBSLl9nLmRvYy5ib2R5LmFwcGVuZENoaWxkKGNudnMpO1xcbiAgICAgICAgICAgIGlzRmxvYXRpbmcgPSAxO1xcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICBjbnZzLnN0eWxlLmNzc1RleHQgPSBjc3MgKyBcXFwicG9zaXRpb246cmVsYXRpdmVcXFwiO1xcbiAgICAgICAgICAgIGlmIChjb250YWluZXIuZmlyc3RDaGlsZCkge1xcbiAgICAgICAgICAgICAgICBjb250YWluZXIuaW5zZXJ0QmVmb3JlKGNudnMsIGNvbnRhaW5lci5maXJzdENoaWxkKTtcXG4gICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoY252cyk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgICAgY29udGFpbmVyID0gbmV3IFIuX1BhcGVyO1xcbiAgICAgICAgY29udGFpbmVyLndpZHRoID0gd2lkdGg7XFxuICAgICAgICBjb250YWluZXIuaGVpZ2h0ID0gaGVpZ2h0O1xcbiAgICAgICAgY29udGFpbmVyLmNhbnZhcyA9IGNudnM7XFxuICAgICAgICBjb250YWluZXIuY2xlYXIoKTtcXG4gICAgICAgIGNvbnRhaW5lci5fbGVmdCA9IGNvbnRhaW5lci5fdG9wID0gMDtcXG4gICAgICAgIGlzRmxvYXRpbmcgJiYgKGNvbnRhaW5lci5yZW5kZXJmaXggPSBmdW5jdGlvbiAoKSB7fSk7XFxuICAgICAgICBjb250YWluZXIucmVuZGVyZml4KCk7XFxuICAgICAgICByZXR1cm4gY29udGFpbmVyO1xcbiAgICB9O1xcbiAgICBSLl9lbmdpbmUuc2V0Vmlld0JveCA9IGZ1bmN0aW9uICh4LCB5LCB3LCBoLCBmaXQpIHtcXG4gICAgICAgIGV2ZShcXFwicmFwaGFlbC5zZXRWaWV3Qm94XFxcIiwgdGhpcywgdGhpcy5fdmlld0JveCwgW3gsIHksIHcsIGgsIGZpdF0pO1xcbiAgICAgICAgdmFyIHBhcGVyU2l6ZSA9IHRoaXMuZ2V0U2l6ZSgpLFxcbiAgICAgICAgICAgIHNpemUgPSBtbWF4KHcgLyBwYXBlclNpemUud2lkdGgsIGggLyBwYXBlclNpemUuaGVpZ2h0KSxcXG4gICAgICAgICAgICB0b3AgPSB0aGlzLnRvcCxcXG4gICAgICAgICAgICBhc3BlY3RSYXRpbyA9IGZpdCA/IFxcXCJ4TWlkWU1pZCBtZWV0XFxcIiA6IFxcXCJ4TWluWU1pblxcXCIsXFxuICAgICAgICAgICAgdmIsXFxuICAgICAgICAgICAgc3c7XFxuICAgICAgICBpZiAoeCA9PSBudWxsKSB7XFxuICAgICAgICAgICAgaWYgKHRoaXMuX3ZiU2l6ZSkge1xcbiAgICAgICAgICAgICAgICBzaXplID0gMTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX3ZiU2l6ZTtcXG4gICAgICAgICAgICB2YiA9IFxcXCIwIDAgXFxcIiArIHRoaXMud2lkdGggKyBTICsgdGhpcy5oZWlnaHQ7XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgIHRoaXMuX3ZiU2l6ZSA9IHNpemU7XFxuICAgICAgICAgICAgdmIgPSB4ICsgUyArIHkgKyBTICsgdyArIFMgKyBoO1xcbiAgICAgICAgfVxcbiAgICAgICAgJCh0aGlzLmNhbnZhcywge1xcbiAgICAgICAgICAgIHZpZXdCb3g6IHZiLFxcbiAgICAgICAgICAgIHByZXNlcnZlQXNwZWN0UmF0aW86IGFzcGVjdFJhdGlvXFxuICAgICAgICB9KTtcXG4gICAgICAgIHdoaWxlIChzaXplICYmIHRvcCkge1xcbiAgICAgICAgICAgIHN3ID0gXFxcInN0cm9rZS13aWR0aFxcXCIgaW4gdG9wLmF0dHJzID8gdG9wLmF0dHJzW1xcXCJzdHJva2Utd2lkdGhcXFwiXSA6IDE7XFxuICAgICAgICAgICAgdG9wLmF0dHIoe1xcXCJzdHJva2Utd2lkdGhcXFwiOiBzd30pO1xcbiAgICAgICAgICAgIHRvcC5fLmRpcnR5ID0gMTtcXG4gICAgICAgICAgICB0b3AuXy5kaXJ0eVQgPSAxO1xcbiAgICAgICAgICAgIHRvcCA9IHRvcC5wcmV2O1xcbiAgICAgICAgfVxcbiAgICAgICAgdGhpcy5fdmlld0JveCA9IFt4LCB5LCB3LCBoLCAhIWZpdF07XFxuICAgICAgICByZXR1cm4gdGhpcztcXG4gICAgfTtcXG4gICAgLypcXFxcXFxuICAgICAqIFBhcGVyLnJlbmRlcmZpeFxcbiAgICAgWyBtZXRob2QgXVxcbiAgICAgKipcXG4gICAgICogRml4ZXMgdGhlIGlzc3VlIG9mIEZpcmVmb3ggYW5kIElFOSByZWdhcmRpbmcgc3VicGl4ZWwgcmVuZGVyaW5nLiBJZiBwYXBlciBpcyBkZXBlbmRlbnRcXG4gICAgICogb24gb3RoZXIgZWxlbWVudHMgYWZ0ZXIgcmVmbG93IGl0IGNvdWxkIHNoaWZ0IGhhbGYgcGl4ZWwgd2hpY2ggY2F1c2UgZm9yIGxpbmVzIHRvIGxvc3QgdGhlaXIgY3Jpc3BuZXNzLlxcbiAgICAgKiBUaGlzIG1ldGhvZCBmaXhlcyB0aGUgaXNzdWUuXFxuICAgICAqKlxcbiAgICAgICBTcGVjaWFsIHRoYW5rcyB0byBNYXJpdXN6IE5vd2FrIChodHRwOi8vd3d3Lm1lZGlrb28uY29tLykgZm9yIHRoaXMgbWV0aG9kLlxcbiAgICBcXFxcKi9cXG4gICAgUi5wcm90b3R5cGUucmVuZGVyZml4ID0gZnVuY3Rpb24gKCkge1xcbiAgICAgICAgdmFyIGNudnMgPSB0aGlzLmNhbnZhcyxcXG4gICAgICAgICAgICBzID0gY252cy5zdHlsZSxcXG4gICAgICAgICAgICBwb3M7XFxuICAgICAgICB0cnkge1xcbiAgICAgICAgICAgIHBvcyA9IGNudnMuZ2V0U2NyZWVuQ1RNKCkgfHwgY252cy5jcmVhdGVTVkdNYXRyaXgoKTtcXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcXG4gICAgICAgICAgICBwb3MgPSBjbnZzLmNyZWF0ZVNWR01hdHJpeCgpO1xcbiAgICAgICAgfVxcbiAgICAgICAgdmFyIGxlZnQgPSAtcG9zLmUgJSAxLFxcbiAgICAgICAgICAgIHRvcCA9IC1wb3MuZiAlIDE7XFxuICAgICAgICBpZiAobGVmdCB8fCB0b3ApIHtcXG4gICAgICAgICAgICBpZiAobGVmdCkge1xcbiAgICAgICAgICAgICAgICB0aGlzLl9sZWZ0ID0gKHRoaXMuX2xlZnQgKyBsZWZ0KSAlIDE7XFxuICAgICAgICAgICAgICAgIHMubGVmdCA9IHRoaXMuX2xlZnQgKyBcXFwicHhcXFwiO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBpZiAodG9wKSB7XFxuICAgICAgICAgICAgICAgIHRoaXMuX3RvcCA9ICh0aGlzLl90b3AgKyB0b3ApICUgMTtcXG4gICAgICAgICAgICAgICAgcy50b3AgPSB0aGlzLl90b3AgKyBcXFwicHhcXFwiO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgfTtcXG4gICAgLypcXFxcXFxuICAgICAqIFBhcGVyLmNsZWFyXFxuICAgICBbIG1ldGhvZCBdXFxuICAgICAqKlxcbiAgICAgKiBDbGVhcnMgdGhlIHBhcGVyLCBpLmUuIHJlbW92ZXMgYWxsIHRoZSBlbGVtZW50cy5cXG4gICAgXFxcXCovXFxuICAgIFIucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xcbiAgICAgICAgUi5ldmUoXFxcInJhcGhhZWwuY2xlYXJcXFwiLCB0aGlzKTtcXG4gICAgICAgIHZhciBjID0gdGhpcy5jYW52YXM7XFxuICAgICAgICB3aGlsZSAoYy5maXJzdENoaWxkKSB7XFxuICAgICAgICAgICAgYy5yZW1vdmVDaGlsZChjLmZpcnN0Q2hpbGQpO1xcbiAgICAgICAgfVxcbiAgICAgICAgdGhpcy5ib3R0b20gPSB0aGlzLnRvcCA9IG51bGw7XFxuICAgICAgICAodGhpcy5kZXNjID0gJChcXFwiZGVzY1xcXCIpKS5hcHBlbmRDaGlsZChSLl9nLmRvYy5jcmVhdGVUZXh0Tm9kZShcXFwiQ3JlYXRlZCB3aXRoIFJhcGhhXFxcXHhlYmwgXFxcIiArIFIudmVyc2lvbikpO1xcbiAgICAgICAgYy5hcHBlbmRDaGlsZCh0aGlzLmRlc2MpO1xcbiAgICAgICAgYy5hcHBlbmRDaGlsZCh0aGlzLmRlZnMgPSAkKFxcXCJkZWZzXFxcIikpO1xcbiAgICB9O1xcbiAgICAvKlxcXFxcXG4gICAgICogUGFwZXIucmVtb3ZlXFxuICAgICBbIG1ldGhvZCBdXFxuICAgICAqKlxcbiAgICAgKiBSZW1vdmVzIHRoZSBwYXBlciBmcm9tIHRoZSBET00uXFxuICAgIFxcXFwqL1xcbiAgICBSLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAoKSB7XFxuICAgICAgICBldmUoXFxcInJhcGhhZWwucmVtb3ZlXFxcIiwgdGhpcyk7XFxuICAgICAgICB0aGlzLmNhbnZhcy5wYXJlbnROb2RlICYmIHRoaXMuY2FudmFzLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5jYW52YXMpO1xcbiAgICAgICAgZm9yICh2YXIgaSBpbiB0aGlzKSB7XFxuICAgICAgICAgICAgdGhpc1tpXSA9IHR5cGVvZiB0aGlzW2ldID09IFxcXCJmdW5jdGlvblxcXCIgPyBSLl9yZW1vdmVkRmFjdG9yeShpKSA6IG51bGw7XFxuICAgICAgICB9XFxuICAgIH07XFxuICAgIHZhciBzZXRwcm90byA9IFIuc3Q7XFxuICAgIGZvciAodmFyIG1ldGhvZCBpbiBlbHByb3RvKSBpZiAoZWxwcm90b1toYXNdKG1ldGhvZCkgJiYgIXNldHByb3RvW2hhc10obWV0aG9kKSkge1xcbiAgICAgICAgc2V0cHJvdG9bbWV0aG9kXSA9IChmdW5jdGlvbiAobWV0aG9kbmFtZSkge1xcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XFxuICAgICAgICAgICAgICAgIHZhciBhcmcgPSBhcmd1bWVudHM7XFxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XFxuICAgICAgICAgICAgICAgICAgICBlbFttZXRob2RuYW1lXS5hcHBseShlbCwgYXJnKTtcXG4gICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgfTtcXG4gICAgICAgIH0pKG1ldGhvZCk7XFxuICAgIH1cXG59KS5hcHBseShleHBvcnRzLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fKSxcXG5cXHRcXHRcXHRcXHRfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyAhPT0gdW5kZWZpbmVkICYmIChtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fKSk7XFxuLy8jIHNvdXJjZVVSTD1bbW9kdWxlXVxcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTGk5a1pYWXZjbUZ3YUdGbGJDNXpkbWN1YW5NdWFuTWlMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk5U1lYQm9ZV1ZzTHk0dlpHVjJMM0poY0doaFpXd3VjM1puTG1welAyUTRZemNpWFN3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaVpHVm1hVzVsS0Z0Y0lpNHZjbUZ3YUdGbGJDNWpiM0psWENKZExDQm1kVzVqZEdsdmJpaFNLU0I3WEc0Z0lDQWdhV1lnS0ZJZ0ppWWdJVkl1YzNabktTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNCOVhHNWNiaUFnSUNCMllYSWdhR0Z6SUQwZ1hDSm9ZWE5QZDI1UWNtOXdaWEowZVZ3aUxGeHVJQ0FnSUNBZ0lDQlRkSElnUFNCVGRISnBibWNzWEc0Z0lDQWdJQ0FnSUhSdlJteHZZWFFnUFNCd1lYSnpaVVpzYjJGMExGeHVJQ0FnSUNBZ0lDQjBiMGx1ZENBOUlIQmhjbk5sU1c1MExGeHVJQ0FnSUNBZ0lDQnRZWFJvSUQwZ1RXRjBhQ3hjYmlBZ0lDQWdJQ0FnYlcxaGVDQTlJRzFoZEdndWJXRjRMRnh1SUNBZ0lDQWdJQ0JoWW5NZ1BTQnRZWFJvTG1GaWN5eGNiaUFnSUNBZ0lDQWdjRzkzSUQwZ2JXRjBhQzV3YjNjc1hHNGdJQ0FnSUNBZ0lITmxjR0Z5WVhSdmNpQTlJQzliTENCZEt5OHNYRzRnSUNBZ0lDQWdJR1YyWlNBOUlGSXVaWFpsTEZ4dUlDQWdJQ0FnSUNCRklEMGdYQ0pjSWl4Y2JpQWdJQ0FnSUNBZ1V5QTlJRndpSUZ3aU8xeHVJQ0FnSUhaaGNpQjRiR2x1YXlBOUlGd2lhSFIwY0RvdkwzZDNkeTUzTXk1dmNtY3ZNVGs1T1M5NGJHbHVhMXdpTEZ4dUlDQWdJQ0FnSUNCdFlYSnJaWEp6SUQwZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWW14dlkyczZJRndpVFRVc01DQXdMREl1TlNBMUxEVjZYQ0lzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiR0Z6YzJsak9pQmNJazAxTERBZ01Dd3lMalVnTlN3MUlETXVOU3d6SURNdU5Td3llbHdpTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdaR2xoYlc5dVpEb2dYQ0pOTWk0MUxEQWdOU3d5TGpVZ01pNDFMRFVnTUN3eUxqVjZYQ0lzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnZjR1Z1T2lCY0lrMDJMREVnTVN3ekxqVWdOaXcyWENJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J2ZG1Gc09pQmNJazB5TGpVc01FRXlMalVzTWk0MUxEQXNNQ3d4TERJdU5TdzFJREl1TlN3eUxqVXNNQ3d3TERFc01pNDFMREI2WENKY2JpQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdiV0Z5YTJWeVEyOTFiblJsY2lBOUlIdDlPMXh1SUNBZ0lGSXVkRzlUZEhKcGJtY2dQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlBZ1hDSlpiM1Z5SUdKeWIzZHpaWElnYzNWd2NHOXlkSE1nVTFaSExseGNibGx2ZFNCaGNtVWdjblZ1Ym1sdVp5QlNZWEJvWVZ4Y2VHVmliQ0JjSWlBcklIUm9hWE11ZG1WeWMybHZianRjYmlBZ0lDQjlPMXh1SUNBZ0lIWmhjaUFrSUQwZ1puVnVZM1JwYjI0Z0tHVnNMQ0JoZEhSeUtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoaGRIUnlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JR1ZzSUQwOUlGd2ljM1J5YVc1blhDSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsYkNBOUlDUW9aV3dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2EyVjVJR2x1SUdGMGRISXBJR2xtSUNoaGRIUnlXMmhoYzEwb2EyVjVLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHJaWGt1YzNWaWMzUnlhVzVuS0RBc0lEWXBJRDA5SUZ3aWVHeHBibXM2WENJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWld3dWMyVjBRWFIwY21saWRYUmxUbE1vZUd4cGJtc3NJR3RsZVM1emRXSnpkSEpwYm1jb05pa3NJRk4wY2loaGRIUnlXMnRsZVYwcEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsYkM1elpYUkJkSFJ5YVdKMWRHVW9hMlY1TENCVGRISW9ZWFIwY2x0clpYbGRLU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pXd2dQU0JTTGw5bkxtUnZZeTVqY21WaGRHVkZiR1Z0Wlc1MFRsTW9YQ0pvZEhSd09pOHZkM2QzTG5jekxtOXlaeTh5TURBd0wzTjJaMXdpTENCbGJDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCbGJDNXpkSGxzWlNBbUppQW9aV3d1YzNSNWJHVXVkMlZpYTJsMFZHRndTR2xuYUd4cFoyaDBRMjlzYjNJZ1BTQmNJbkpuWW1Fb01Dd3dMREFzTUNsY0lpazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR1ZzTzF4dUlDQWdJSDBzWEc0Z0lDQWdZV1JrUjNKaFpHbGxiblJHYVd4c0lEMGdablZ1WTNScGIyNGdLR1ZzWlcxbGJuUXNJR2R5WVdScFpXNTBLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQjBlWEJsSUQwZ1hDSnNhVzVsWVhKY0lpeGNiaUFnSUNBZ0lDQWdJQ0FnSUdsa0lEMGdaV3hsYldWdWRDNXBaQ0FySUdkeVlXUnBaVzUwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdabmdnUFNBdU5Td2dabmtnUFNBdU5TeGNiaUFnSUNBZ0lDQWdJQ0FnSUc4Z1BTQmxiR1Z0Wlc1MExtNXZaR1VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQlRWa2NnUFNCbGJHVnRaVzUwTG5CaGNHVnlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2N5QTlJRzh1YzNSNWJHVXNYRzRnSUNBZ0lDQWdJQ0FnSUNCbGJDQTlJRkl1WDJjdVpHOWpMbWRsZEVWc1pXMWxiblJDZVVsa0tHbGtLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRmxiQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdaM0poWkdsbGJuUWdQU0JUZEhJb1ozSmhaR2xsYm5RcExuSmxjR3hoWTJVb1VpNWZjbUZrYVdGc1gyZHlZV1JwWlc1MExDQm1kVzVqZEdsdmJpQW9ZV3hzTENCZlpuZ3NJRjltZVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUjVjR1VnUFNCY0luSmhaR2xoYkZ3aU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hmWm5nZ0ppWWdYMlo1S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1o0SUQwZ2RHOUdiRzloZENoZlpuZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWVTQTlJSFJ2Um14dllYUW9YMlo1S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdScGNpQTlJQ2dvWm5rZ1BpQXVOU2tnS2lBeUlDMGdNU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnZkeWhtZUNBdElDNDFMQ0F5S1NBcklIQnZkeWhtZVNBdElDNDFMQ0F5S1NBK0lDNHlOU0FtSmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS0daNUlEMGdiV0YwYUM1emNYSjBLQzR5TlNBdElIQnZkeWhtZUNBdElDNDFMQ0F5S1NrZ0tpQmthWElnS3lBdU5Ta2dKaVpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1o1SUNFOUlDNDFJQ1ltWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FvWm5rZ1BTQm1lUzUwYjBacGVHVmtLRFVwSUMwZ01XVXROU0FxSUdScGNpazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQkZPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCbmNtRmthV1Z1ZENBOUlHZHlZV1JwWlc1MExuTndiR2wwS0M5Y1hITXFYRnd0WEZ4ektpOHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dVZ1BUMGdYQ0pzYVc1bFlYSmNJaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQmhibWRzWlNBOUlHZHlZV1JwWlc1MExuTm9hV1owS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lXNW5iR1VnUFNBdGRHOUdiRzloZENoaGJtZHNaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHbHpUbUZPS0dGdVoyeGxLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2JuVnNiRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIWmxZM1J2Y2lBOUlGc3dMQ0F3TENCdFlYUm9MbU52Y3loU0xuSmhaQ2hoYm1kc1pTa3BMQ0J0WVhSb0xuTnBiaWhTTG5KaFpDaGhibWRzWlNrcFhTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYldGNElEMGdNU0F2SUNodGJXRjRLR0ZpY3loMlpXTjBiM0piTWwwcExDQmhZbk1vZG1WamRHOXlXek5kS1NrZ2ZId2dNU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1WamRHOXlXekpkSUNvOUlHMWhlRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWldOMGIzSmJNMTBnS2owZ2JXRjRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMlpXTjBiM0piTWwwZ1BDQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmxZM1J2Y2xzd1hTQTlJQzEyWldOMGIzSmJNbDA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmxZM1J2Y2xzeVhTQTlJREE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDJaV04wYjNKYk0xMGdQQ0F3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpsWTNSdmNsc3hYU0E5SUMxMlpXTjBiM0piTTEwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpsWTNSdmNsc3pYU0E5SURBN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdSdmRITWdQU0JTTGw5d1lYSnpaVVJ2ZEhNb1ozSmhaR2xsYm5RcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRmtiM1J6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1MWJHdzdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWkNBOUlHbGtMbkpsY0d4aFkyVW9MMXRjWENoY1hDbGNYSE1zWEZ4NFlqQWpYUzluTENCY0lsOWNJaWs3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNobGJHVnRaVzUwTG1keVlXUnBaVzUwSUNZbUlHbGtJQ0U5SUdWc1pXMWxiblF1WjNKaFpHbGxiblF1YVdRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQlRWa2N1WkdWbWN5NXlaVzF2ZG1WRGFHbHNaQ2hsYkdWdFpXNTBMbWR5WVdScFpXNTBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWld4bGRHVWdaV3hsYldWdWRDNW5jbUZrYVdWdWREdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRmxiR1Z0Wlc1MExtZHlZV1JwWlc1MEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaV3dnUFNBa0tIUjVjR1VnS3lCY0lrZHlZV1JwWlc1MFhDSXNJSHRwWkRvZ2FXUjlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsYkdWdFpXNTBMbWR5WVdScFpXNTBJRDBnWld3N1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pDaGxiQ3dnZEhsd1pTQTlQU0JjSW5KaFpHbGhiRndpSUQ4Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtZURvZ1puZ3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdaNU9pQm1lVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnT2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGd4T2lCMlpXTjBiM0piTUYwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGt4T2lCMlpXTjBiM0piTVYwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGd5T2lCMlpXTjBiM0piTWwwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGt5T2lCMlpXTjBiM0piTTEwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2R5WVdScFpXNTBWSEpoYm5ObWIzSnRPaUJsYkdWdFpXNTBMbTFoZEhKcGVDNXBiblpsY25Rb0tWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRk5XUnk1a1pXWnpMbUZ3Y0dWdVpFTm9hV3hrS0dWc0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTUN3Z2FXa2dQU0JrYjNSekxteGxibWQwYURzZ2FTQThJR2xwT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXd3VZWEJ3Wlc1a1EyaHBiR1FvSkNoY0luTjBiM0JjSWl3Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2IyWm1jMlYwT2lCa2IzUnpXMmxkTG05bVpuTmxkQ0EvSUdSdmRITmJhVjB1YjJabWMyVjBJRG9nYVNBL0lGd2lNVEF3SlZ3aUlEb2dYQ0l3SlZ3aUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1hDSnpkRzl3TFdOdmJHOXlYQ0k2SUdSdmRITmJhVjB1WTI5c2IzSWdmSHdnWENJalptWm1YQ0lzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JjSW5OMGIzQXRiM0JoWTJsMGVWd2lPaUJwYzBacGJtbDBaU2hrYjNSelcybGRMbTl3WVdOcGRIa3BJRDhnWkc5MGMxdHBYUzV2Y0dGamFYUjVJRG9nTVZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNRb2J5d2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1ptbHNiRG9nWm1sc2JIVnliQ2hwWkNrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J2Y0dGamFYUjVPaUF4TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdYQ0ptYVd4c0xXOXdZV05wZEhsY0lqb2dNVnh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2N5NW1hV3hzSUQwZ1JUdGNiaUFnSUNBZ0lDQWdjeTV2Y0dGamFYUjVJRDBnTVR0Y2JpQWdJQ0FnSUNBZ2N5NW1hV3hzVDNCaFkybDBlU0E5SURFN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlBeE8xeHVJQ0FnSUgwc1hHNGdJQ0FnYVhOSlJUbHZjakV3SUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdkbUZ5SUcxdlpHVWdQU0JrYjJOMWJXVnVkQzVrYjJOMWJXVnVkRTF2WkdVN1hHNGdJQ0FnSUNCeVpYUjFjbTRnYlc5a1pTQW1KaUFvYlc5a1pTQTlQVDBnT1NCOGZDQnRiMlJsSUQwOVBTQXhNQ2s3WEc0Z0lDQWdmU3hjYmlBZ0lDQm1hV3hzZFhKc0lEMGdablZ1WTNScGIyNGdLR2xrS1NCN1hHNGdJQ0FnSUNCcFppQW9hWE5KUlRsdmNqRXdLQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1hDSjFjbXdvSnlOY0lpQXJJR2xrSUNzZ1hDSW5LVndpTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnZG1GeUlHeHZZMkYwYVc5dUlEMGdaRzlqZFcxbGJuUXViRzlqWVhScGIyNDdYRzRnSUNBZ0lDQjJZWElnYkc5allYUnBiMjVUZEhKcGJtY2dQU0FvWEc0Z0lDQWdJQ0FnSUNBZ2JHOWpZWFJwYjI0dWNISnZkRzlqYjJ3Z0t5QW5MeThuSUN0Y2JpQWdJQ0FnSUNBZ0lDQnNiMk5oZEdsdmJpNW9iM04wSUN0Y2JpQWdJQ0FnSUNBZ0lDQnNiMk5oZEdsdmJpNXdZWFJvYm1GdFpTQXJYRzRnSUNBZ0lDQWdJQ0FnYkc5allYUnBiMjR1YzJWaGNtTm9YRzRnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdjbVYwZFhKdUlGd2lkWEpzS0NkY0lpQXJJR3h2WTJGMGFXOXVVM1J5YVc1bklDc2dYQ0lqWENJZ0t5QnBaQ0FySUZ3aUp5bGNJanRjYmlBZ0lDQjlMRnh1SUNBZ0lIVndaR0YwWlZCdmMybDBhVzl1SUQwZ1puVnVZM1JwYjI0Z0tHOHBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHSmliM2dnUFNCdkxtZGxkRUpDYjNnb01TazdYRzRnSUNBZ0lDQWdJQ1FvYnk1d1lYUjBaWEp1TENCN2NHRjBkR1Z5YmxSeVlXNXpabTl5YlRvZ2J5NXRZWFJ5YVhndWFXNTJaWEowS0NrZ0t5QmNJaUIwY21GdWMyeGhkR1VvWENJZ0t5QmlZbTk0TG5nZ0t5QmNJaXhjSWlBcklHSmliM2d1ZVNBcklGd2lLVndpZlNrN1hHNGdJQ0FnZlN4Y2JpQWdJQ0JoWkdSQmNuSnZkeUE5SUdaMWJtTjBhVzl1SUNodkxDQjJZV3gxWlN3Z2FYTkZibVFwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLRzh1ZEhsd1pTQTlQU0JjSW5CaGRHaGNJaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhaaGJIVmxjeUE5SUZOMGNpaDJZV3gxWlNrdWRHOU1iM2RsY2tOaGMyVW9LUzV6Y0d4cGRDaGNJaTFjSWlrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NDQTlJRzh1Y0dGd1pYSXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMlVnUFNCcGMwVnVaQ0EvSUZ3aVpXNWtYQ0lnT2lCY0luTjBZWEowWENJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JtOWtaU0E5SUc4dWJtOWtaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoZEhSeWN5QTlJRzh1WVhSMGNuTXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM1J5YjJ0bElEMGdZWFIwY25OYlhDSnpkSEp2YTJVdGQybGtkR2hjSWwwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FTQTlJSFpoYkhWbGN5NXNaVzVuZEdnc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaU0E5SUZ3aVkyeGhjM05wWTF3aUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnliMjBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEc4c1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pIZ3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZtV0N4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaGRIUnlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGNnUFNBekxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHZ2dQU0F6TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhRZ1BTQTFPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2QyaHBiR1VnS0drdExTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE4zYVhSamFDQW9kbUZzZFdWelcybGRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnWENKaWJHOWphMXdpT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUZ3aVkyeGhjM05wWTF3aU9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElGd2liM1poYkZ3aU9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElGd2laR2xoYlc5dVpGd2lPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRndpYjNCbGJsd2lPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRndpYm05dVpWd2lPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSGx3WlNBOUlIWmhiSFZsYzF0cFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUZ3aWQybGtaVndpT2lCb0lEMGdOVHNnWW5KbFlXczdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdYQ0p1WVhKeWIzZGNJam9nYUNBOUlESTdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElGd2liRzl1WjF3aU9pQjNJRDBnTlRzZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnWENKemFHOXlkRndpT2lCM0lEMGdNanNnWW5KbFlXczdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1VnUFQwZ1hDSnZjR1Z1WENJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjNJQ3M5SURJN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FDQXJQU0F5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhRZ0t6MGdNanRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrZUNBOUlERTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZtV0NBOUlHbHpSVzVrSUQ4Z05DQTZJREU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVhSMGNpQTlJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptbHNiRG9nWENKdWIyNWxYQ0lzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITjBjbTlyWlRvZ1lYUjBjbk11YzNSeWIydGxYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVm1XQ0E5SUdSNElEMGdkeUF2SURJN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lYUjBjaUE5SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabWxzYkRvZ1lYUjBjbk11YzNSeWIydGxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemRISnZhMlU2SUZ3aWJtOXVaVndpWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h2TGw4dVlYSnliM2R6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2x6Ulc1a0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc4dVh5NWhjbkp2ZDNNdVpXNWtVR0YwYUNBbUppQnRZWEpyWlhKRGIzVnVkR1Z5VzI4dVh5NWhjbkp2ZDNNdVpXNWtVR0YwYUYwdExUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYnk1ZkxtRnljbTkzY3k1bGJtUk5ZWEpyWlhJZ0ppWWdiV0Z5YTJWeVEyOTFiblJsY2x0dkxsOHVZWEp5YjNkekxtVnVaRTFoY210bGNsMHRMVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdkxsOHVZWEp5YjNkekxuTjBZWEowVUdGMGFDQW1KaUJ0WVhKclpYSkRiM1Z1ZEdWeVcyOHVYeTVoY25KdmQzTXVjM1JoY25SUVlYUm9YUzB0TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZMbDh1WVhKeWIzZHpMbk4wWVhKMFRXRnlhMlZ5SUNZbUlHMWhjbXRsY2tOdmRXNTBaWEpiYnk1ZkxtRnljbTkzY3k1emRHRnlkRTFoY210bGNsMHRMVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOHVYeTVoY25KdmQzTWdQU0I3ZlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbElDRTlJRndpYm05dVpWd2lLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIQmhkR2hKWkNBOUlGd2ljbUZ3YUdGbGJDMXRZWEpyWlhJdFhDSWdLeUIwZVhCbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J0WVhKclpYSkpaQ0E5SUZ3aWNtRndhR0ZsYkMxdFlYSnJaWEl0WENJZ0t5QnpaU0FySUhSNWNHVWdLeUIzSUNzZ2FDQXJJRndpTFc5aWFsd2lJQ3NnYnk1cFpEdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVZJdVgyY3VaRzlqTG1kbGRFVnNaVzFsYm5SQ2VVbGtLSEJoZEdoSlpDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NDNWtaV1p6TG1Gd2NHVnVaRU5vYVd4a0tDUW9KQ2hjSW5CaGRHaGNJaWtzSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZ3aWMzUnliMnRsTFd4cGJtVmpZWEJjSWpvZ1hDSnliM1Z1WkZ3aUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pEb2diV0Z5YTJWeWMxdDBlWEJsWFN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsa09pQndZWFJvU1dSY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2twTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRZWEpyWlhKRGIzVnVkR1Z5VzNCaGRHaEpaRjBnUFNBeE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzFoY210bGNrTnZkVzUwWlhKYmNHRjBhRWxrWFNzck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnYldGeWEyVnlJRDBnVWk1Zlp5NWtiMk11WjJWMFJXeGxiV1Z1ZEVKNVNXUW9iV0Z5YTJWeVNXUXBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMWMyVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGdFlYSnJaWElwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiV0Z5YTJWeUlEMGdKQ2drS0Z3aWJXRnlhMlZ5WENJcExDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaRG9nYldGeWEyVnlTV1FzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J0WVhKclpYSklaV2xuYUhRNklHZ3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRZWEpyWlhKWGFXUjBhRG9nZHl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5eWFXVnVkRG9nWENKaGRYUnZYQ0lzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WldaWU9pQnlaV1pZTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WbVdUb2dhQ0F2SURKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIVnpaU0E5SUNRb0pDaGNJblZ6WlZ3aUtTd2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYQ0o0YkdsdWF6cG9jbVZtWENJNklGd2lJMXdpSUNzZ2NHRjBhRWxrTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhKaGJuTm1iM0p0T2lBb2FYTkZibVFnUHlCY0luSnZkR0YwWlNneE9EQWdYQ0lnS3lCM0lDOGdNaUFySUZ3aUlGd2lJQ3NnYUNBdklESWdLeUJjSWlrZ1hDSWdPaUJGS1NBcklGd2ljMk5oYkdVb1hDSWdLeUIzSUM4Z2RDQXJJRndpTEZ3aUlDc2dhQ0F2SUhRZ0t5QmNJaWxjSWl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZ3aWMzUnliMnRsTFhkcFpIUm9YQ0k2SUNneElDOGdLQ2gzSUM4Z2RDQXJJR2dnTHlCMEtTQXZJRElwS1M1MGIwWnBlR1ZrS0RRcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRZWEpyWlhJdVlYQndaVzVrUTJocGJHUW9kWE5sS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjQzVrWldaekxtRndjR1Z1WkVOb2FXeGtLRzFoY210bGNpazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxaGNtdGxja052ZFc1MFpYSmJiV0Z5YTJWeVNXUmRJRDBnTVR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRZWEpyWlhKRGIzVnVkR1Z5VzIxaGNtdGxja2xrWFNzck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IxYzJVZ1BTQnRZWEpyWlhJdVoyVjBSV3hsYldWdWRITkNlVlJoWjA1aGJXVW9YQ0oxYzJWY0lpbGJNRjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNRb2RYTmxMQ0JoZEhSeUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnWkdWc2RHRWdQU0JrZUNBcUlDaDBlWEJsSUNFOUlGd2laR2xoYlc5dVpGd2lJQ1ltSUhSNWNHVWdJVDBnWENKdmRtRnNYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHBjMFZ1WkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtY205dElEMGdieTVmTG1GeWNtOTNjeTV6ZEdGeWRHUjRJQ29nYzNSeWIydGxJSHg4SURBN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJ2SUQwZ1VpNW5aWFJVYjNSaGJFeGxibWQwYUNoaGRIUnljeTV3WVhSb0tTQXRJR1JsYkhSaElDb2djM1J5YjJ0bE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p5YjIwZ1BTQmtaV3gwWVNBcUlITjBjbTlyWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkRzhnUFNCU0xtZGxkRlJ2ZEdGc1RHVnVaM1JvS0dGMGRISnpMbkJoZEdncElDMGdLRzh1WHk1aGNuSnZkM011Wlc1a1pIZ2dLaUJ6ZEhKdmEyVWdmSHdnTUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRjBkSElnUFNCN2ZUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhkSFJ5VzF3aWJXRnlhMlZ5TFZ3aUlDc2djMlZkSUQwZ1hDSjFjbXdvSTF3aUlDc2diV0Z5YTJWeVNXUWdLeUJjSWlsY0lqdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEc4Z2ZId2dabkp2YlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoZEhSeUxtUWdQU0JTTG1kbGRGTjFZbkJoZEdnb1lYUjBjbk11Y0dGMGFDd2dabkp2YlN3Z2RHOHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FrS0c1dlpHVXNJR0YwZEhJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOHVYeTVoY25KdmQzTmJjMlVnS3lCY0lsQmhkR2hjSWwwZ1BTQndZWFJvU1dRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2J5NWZMbUZ5Y205M2MxdHpaU0FySUZ3aVRXRnlhMlZ5WENKZElEMGdiV0Z5YTJWeVNXUTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdieTVmTG1GeWNtOTNjMXR6WlNBcklGd2laSGhjSWwwZ1BTQmtaV3gwWVR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdkxsOHVZWEp5YjNkelczTmxJQ3NnWENKVWVYQmxYQ0pkSUQwZ2RIbHdaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J2TGw4dVlYSnliM2R6VzNObElDc2dYQ0pUZEhKcGJtZGNJbDBnUFNCMllXeDFaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2x6Ulc1a0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdaeWIyMGdQU0J2TGw4dVlYSnliM2R6TG5OMFlYSjBaSGdnS2lCemRISnZhMlVnZkh3Z01EdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEc4Z1BTQlNMbWRsZEZSdmRHRnNUR1Z1WjNSb0tHRjBkSEp6TG5CaGRHZ3BJQzBnWm5KdmJUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtY205dElEMGdNRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHOGdQU0JTTG1kbGRGUnZkR0ZzVEdWdVozUm9LR0YwZEhKekxuQmhkR2dwSUMwZ0tHOHVYeTVoY25KdmQzTXVaVzVrWkhnZ0tpQnpkSEp2YTJVZ2ZId2dNQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc4dVh5NWhjbkp2ZDNOYmMyVWdLeUJjSWxCaGRHaGNJbDBnSmlZZ0pDaHViMlJsTENCN1pEb2dVaTVuWlhSVGRXSndZWFJvS0dGMGRISnpMbkJoZEdnc0lHWnliMjBzSUhSdktYMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JsYkdWMFpTQnZMbDh1WVhKeWIzZHpXM05sSUNzZ1hDSlFZWFJvWENKZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmxiR1YwWlNCdkxsOHVZWEp5YjNkelczTmxJQ3NnWENKTllYSnJaWEpjSWwwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHVnNaWFJsSUc4dVh5NWhjbkp2ZDNOYmMyVWdLeUJjSW1SNFhDSmRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JsYkdWMFpTQnZMbDh1WVhKeWIzZHpXM05sSUNzZ1hDSlVlWEJsWENKZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmxiR1YwWlNCdkxsOHVZWEp5YjNkelczTmxJQ3NnWENKVGRISnBibWRjSWwwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0dGMGRISWdhVzRnYldGeWEyVnlRMjkxYm5SbGNpa2dhV1lnS0cxaGNtdGxja052ZFc1MFpYSmJhR0Z6WFNoaGRIUnlLU0FtSmlBaGJXRnlhMlZ5UTI5MWJuUmxjbHRoZEhSeVhTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCcGRHVnRJRDBnVWk1Zlp5NWtiMk11WjJWMFJXeGxiV1Z1ZEVKNVNXUW9ZWFIwY2lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FYUmxiU0FtSmlCcGRHVnRMbkJoY21WdWRFNXZaR1V1Y21WdGIzWmxRMmhwYkdRb2FYUmxiU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlMRnh1SUNBZ0lHUmhjMmhoY25KaGVTQTlJSHRjYmlBZ0lDQWdJQ0FnWENJdFhDSTZJRnN6TENBeFhTeGNiaUFnSUNBZ0lDQWdYQ0l1WENJNklGc3hMQ0F4WFN4Y2JpQWdJQ0FnSUNBZ1hDSXRMbHdpT2lCYk15d2dNU3dnTVN3Z01WMHNYRzRnSUNBZ0lDQWdJRndpTFM0dVhDSTZJRnN6TENBeExDQXhMQ0F4TENBeExDQXhYU3hjYmlBZ0lDQWdJQ0FnWENJdUlGd2lPaUJiTVN3Z00xMHNYRzRnSUNBZ0lDQWdJRndpTFNCY0lqb2dXelFzSUROZExGeHVJQ0FnSUNBZ0lDQmNJaTB0WENJNklGczRMQ0F6WFN4Y2JpQWdJQ0FnSUNBZ1hDSXRJQzVjSWpvZ1d6UXNJRE1zSURFc0lETmRMRnh1SUNBZ0lDQWdJQ0JjSWkwdExsd2lPaUJiT0N3Z015d2dNU3dnTTEwc1hHNGdJQ0FnSUNBZ0lGd2lMUzB1TGx3aU9pQmJPQ3dnTXl3Z01Td2dNeXdnTVN3Z00xMWNiaUFnSUNCOUxGeHVJQ0FnSUdGa1pFUmhjMmhsY3lBOUlHWjFibU4wYVc5dUlDaHZMQ0IyWVd4MVpTd2djR0Z5WVcxektTQjdYRzRnSUNBZ0lDQWdJSFpoYkhWbElEMGdaR0Z6YUdGeWNtRjVXMU4wY2loMllXeDFaU2t1ZEc5TWIzZGxja05oYzJVb0tWMDdYRzRnSUNBZ0lDQWdJR2xtSUNoMllXeDFaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhkcFpIUm9JRDBnYnk1aGRIUnljMXRjSW5OMGNtOXJaUzEzYVdSMGFGd2lYU0I4ZkNCY0lqRmNJaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpZFhSMElEMGdlM0p2ZFc1a09pQjNhV1IwYUN3Z2MzRjFZWEpsT2lCM2FXUjBhQ3dnWW5WMGREb2dNSDFiYnk1aGRIUnljMXRjSW5OMGNtOXJaUzFzYVc1bFkyRndYQ0pkSUh4OElIQmhjbUZ0YzF0Y0luTjBjbTlyWlMxc2FXNWxZMkZ3WENKZFhTQjhmQ0F3TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSaGMyaGxjeUE5SUZ0ZExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHa2dQU0IyWVd4MVpTNXNaVzVuZEdnN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IzYUdsc1pTQW9hUzB0S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHRnphR1Z6VzJsZElEMGdkbUZzZFdWYmFWMGdLaUIzYVdSMGFDQXJJQ2dvYVNBbElESXBJRDhnTVNBNklDMHhLU0FxSUdKMWRIUTdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FrS0c4dWJtOWtaU3dnZTF3aWMzUnliMnRsTFdSaGMyaGhjbkpoZVZ3aU9pQmtZWE5vWlhNdWFtOXBiaWhjSWl4Y0lpbDlLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBa0tHOHVibTlrWlN3Z2Uxd2ljM1J5YjJ0bExXUmhjMmhoY25KaGVWd2lPaUJjSW01dmJtVmNJbjBwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlN4Y2JpQWdJQ0J6WlhSR2FXeHNRVzVrVTNSeWIydGxJRDBnWm5WdVkzUnBiMjRnS0c4c0lIQmhjbUZ0Y3lrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnYm05a1pTQTlJRzh1Ym05a1pTeGNiaUFnSUNBZ0lDQWdJQ0FnSUdGMGRISnpJRDBnYnk1aGRIUnljeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lIWnBjeUE5SUc1dlpHVXVjM1I1YkdVdWRtbHphV0pwYkdsMGVUdGNiaUFnSUNBZ0lDQWdibTlrWlM1emRIbHNaUzUyYVhOcFltbHNhWFI1SUQwZ1hDSm9hV1JrWlc1Y0lqdGNiaUFnSUNBZ0lDQWdabTl5SUNoMllYSWdZWFIwSUdsdUlIQmhjbUZ0Y3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIQmhjbUZ0YzF0b1lYTmRLR0YwZENrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVZJdVgyRjJZV2xzWVdKc1pVRjBkSEp6VzJoaGMxMG9ZWFIwS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1MGFXNTFaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIWmhiSFZsSUQwZ2NHRnlZVzF6VzJGMGRGMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZWFIwY25OYllYUjBYU0E5SUhaaGJIVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE4zYVhSamFDQW9ZWFIwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1hDSmliSFZ5WENJNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdkxtSnNkWElvZG1Gc2RXVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1hDSjBhWFJzWlZ3aU9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSFJwZEd4bElEMGdibTlrWlM1blpYUkZiR1Z0Wlc1MGMwSjVWR0ZuVG1GdFpTaGNJblJwZEd4bFhDSXBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCVmMyVWdkR2hsSUdWNGFYTjBhVzVuSUR4MGFYUnNaVDR1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHbDBiR1V1YkdWdVozUm9JQ1ltSUNoMGFYUnNaU0E5SUhScGRHeGxXekJkS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhWFJzWlM1bWFYSnpkRU5vYVd4a0xtNXZaR1ZXWVd4MVpTQTlJSFpoYkhWbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHbDBiR1VnUFNBa0tGd2lkR2wwYkdWY0lpazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCMllXd2dQU0JTTGw5bkxtUnZZeTVqY21WaGRHVlVaWGgwVG05a1pTaDJZV3gxWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnBkR3hsTG1Gd2NHVnVaRU5vYVd4a0tIWmhiQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc1dlpHVXVZWEJ3Wlc1a1EyaHBiR1FvZEdsMGJHVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1hDSm9jbVZtWENJNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1hDSjBZWEpuWlhSY0lqcGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ3YmlBOUlHNXZaR1V1Y0dGeVpXNTBUbTlrWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHdiaTUwWVdkT1lXMWxMblJ2VEc5M1pYSkRZWE5sS0NrZ0lUMGdYQ0poWENJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2FHd2dQU0FrS0Z3aVlWd2lLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2JpNXBibk5sY25SQ1pXWnZjbVVvYUd3c0lHNXZaR1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHaHNMbUZ3Y0dWdVpFTm9hV3hrS0c1dlpHVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCdUlEMGdhR3c3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1lYUjBJRDA5SUZ3aWRHRnlaMlYwWENJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3Ymk1elpYUkJkSFJ5YVdKMWRHVk9VeWg0YkdsdWF5d2dYQ0p6YUc5M1hDSXNJSFpoYkhWbElEMDlJRndpWW14aGJtdGNJaUEvSUZ3aWJtVjNYQ0lnT2lCMllXeDFaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCdUxuTmxkRUYwZEhKcFluVjBaVTVUS0hoc2FXNXJMQ0JoZEhRc0lIWmhiSFZsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRndpWTNWeWMyOXlYQ0k2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J1YjJSbExuTjBlV3hsTG1OMWNuTnZjaUE5SUhaaGJIVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1hDSjBjbUZ1YzJadmNtMWNJanBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzh1ZEhKaGJuTm1iM0p0S0haaGJIVmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElGd2lZWEp5YjNjdGMzUmhjblJjSWpwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdGa1pFRnljbTkzS0c4c0lIWmhiSFZsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRndpWVhKeWIzY3RaVzVrWENJNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaFpHUkJjbkp2ZHlodkxDQjJZV3gxWlN3Z01TazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCY0ltTnNhWEF0Y21WamRGd2lPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhKbFkzUWdQU0JUZEhJb2RtRnNkV1VwTG5Od2JHbDBLSE5sY0dGeVlYUnZjaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NtVmpkQzVzWlc1bmRHZ2dQVDBnTkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzh1WTJ4cGNDQW1KaUJ2TG1Oc2FYQXVjR0Z5Wlc1MFRtOWtaUzV3WVhKbGJuUk9iMlJsTG5KbGJXOTJaVU5vYVd4a0tHOHVZMnhwY0M1d1lYSmxiblJPYjJSbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1pXd2dQU0FrS0Z3aVkyeHBjRkJoZEdoY0lpa3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmpJRDBnSkNoY0luSmxZM1JjSWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaV3d1YVdRZ1BTQlNMbU55WldGMFpWVlZTVVFvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWtLSEpqTENCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhnNklISmxZM1JiTUYwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhrNklISmxZM1JiTVYwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhkcFpIUm9PaUJ5WldOMFd6SmRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm9aV2xuYUhRNklISmxZM1JiTTExY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJDNWhjSEJsYm1SRGFHbHNaQ2h5WXlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdieTV3WVhCbGNpNWtaV1p6TG1Gd2NHVnVaRU5vYVd4a0tHVnNLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBa0tHNXZaR1VzSUh0Y0ltTnNhWEF0Y0dGMGFGd2lPaUJjSW5WeWJDZ2pYQ0lnS3lCbGJDNXBaQ0FySUZ3aUtWd2lmU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2J5NWpiR2x3SUQwZ2NtTTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVhaaGJIVmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSEJoZEdnZ1BTQnViMlJsTG1kbGRFRjBkSEpwWW5WMFpTaGNJbU5zYVhBdGNHRjBhRndpS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY0dGMGFDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnWTJ4cGNDQTlJRkl1WDJjdVpHOWpMbWRsZEVWc1pXMWxiblJDZVVsa0tIQmhkR2d1Y21Wd2JHRmpaU2d2S0Y1MWNteGNYQ2dqZkZ4Y0tTUXBMMmNzSUVVcEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyeHBjQ0FtSmlCamJHbHdMbkJoY21WdWRFNXZaR1V1Y21WdGIzWmxRMmhwYkdRb1kyeHBjQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1FvYm05a1pTd2dlMXdpWTJ4cGNDMXdZWFJvWENJNklFVjlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR1ZzWlhSbElHOHVZMnhwY0R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRndpY0dGMGFGd2lPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0c4dWRIbHdaU0E5UFNCY0luQmhkR2hjSWlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1FvYm05a1pTd2dlMlE2SUhaaGJIVmxJRDhnWVhSMGNuTXVjR0YwYUNBOUlGSXVYM0JoZEdoVWIwRmljMjlzZFhSbEtIWmhiSFZsS1NBNklGd2lUVEFzTUZ3aWZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYnk1ZkxtUnBjblI1SUQwZ01UdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2J5NWZMbUZ5Y205M2N5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmNJbk4wWVhKMFUzUnlhVzVuWENJZ2FXNGdieTVmTG1GeWNtOTNjeUFtSmlCaFpHUkJjbkp2ZHlodkxDQnZMbDh1WVhKeWIzZHpMbk4wWVhKMFUzUnlhVzVuS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWENKbGJtUlRkSEpwYm1kY0lpQnBiaUJ2TGw4dVlYSnliM2R6SUNZbUlHRmtaRUZ5Y205M0tHOHNJRzh1WHk1aGNuSnZkM011Wlc1a1UzUnlhVzVuTENBeEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQmNJbmRwWkhSb1hDSTZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnViMlJsTG5ObGRFRjBkSEpwWW5WMFpTaGhkSFFzSUhaaGJIVmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzh1WHk1a2FYSjBlU0E5SURFN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ZWFIwY25NdVpuZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaGRIUWdQU0JjSW5oY0lqdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpTQTlJR0YwZEhKekxuZzdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElGd2llRndpT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHRjBkSEp6TG1aNEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVWdQU0F0WVhSMGNuTXVlQ0F0SUNoaGRIUnljeTUzYVdSMGFDQjhmQ0F3S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCY0luSjRYQ0k2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1lYUjBJRDA5SUZ3aWNuaGNJaUFtSmlCdkxuUjVjR1VnUFQwZ1hDSnlaV04wWENJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQmNJbU40WENJNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdWIyUmxMbk5sZEVGMGRISnBZblYwWlNoaGRIUXNJSFpoYkhWbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOHVjR0YwZEdWeWJpQW1KaUIxY0dSaGRHVlFiM05wZEdsdmJpaHZLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzh1WHk1a2FYSjBlU0E5SURFN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0JjSW1obGFXZG9kRndpT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYm05a1pTNXpaWFJCZEhSeWFXSjFkR1VvWVhSMExDQjJZV3gxWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdkxsOHVaR2x5ZEhrZ1BTQXhPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dGMGRISnpMbVo1S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZWFIwSUQwZ1hDSjVYQ0k3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1VnUFNCaGRIUnljeTU1TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0JjSW5sY0lqcGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hoZEhSeWN5NW1lU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsSUQwZ0xXRjBkSEp6TG5rZ0xTQW9ZWFIwY25NdWFHVnBaMmgwSUh4OElEQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRndpY25sY0lqcGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hoZEhRZ1BUMGdYQ0p5ZVZ3aUlDWW1JRzh1ZEhsd1pTQTlQU0JjSW5KbFkzUmNJaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUZ3aVkzbGNJanBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzV2WkdVdWMyVjBRWFIwY21saWRYUmxLR0YwZEN3Z2RtRnNkV1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYnk1d1lYUjBaWEp1SUNZbUlIVndaR0YwWlZCdmMybDBhVzl1S0c4cE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2J5NWZMbVJwY25SNUlEMGdNVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElGd2ljbHdpT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHOHVkSGx3WlNBOVBTQmNJbkpsWTNSY0lpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNRb2JtOWtaU3dnZTNKNE9pQjJZV3gxWlN3Z2NuazZJSFpoYkhWbGZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzV2WkdVdWMyVjBRWFIwY21saWRYUmxLR0YwZEN3Z2RtRnNkV1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYnk1ZkxtUnBjblI1SUQwZ01UdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUZ3aWMzSmpYQ0k2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2J5NTBlWEJsSUQwOUlGd2lhVzFoWjJWY0lpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc1dlpHVXVjMlYwUVhSMGNtbGlkWFJsVGxNb2VHeHBibXNzSUZ3aWFISmxabHdpTENCMllXeDFaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQmNJbk4wY205clpTMTNhV1IwYUZ3aU9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRzh1WHk1emVDQWhQU0F4SUh4OElHOHVYeTV6ZVNBaFBTQXhLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1VnTHowZ2JXMWhlQ2hoWW5Nb2J5NWZMbk40S1N3Z1lXSnpLRzh1WHk1emVTa3BJSHg4SURFN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdWIyUmxMbk5sZEVGMGRISnBZblYwWlNoaGRIUXNJSFpoYkhWbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hoZEhSeWMxdGNJbk4wY205clpTMWtZWE5vWVhKeVlYbGNJbDBwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhaR1JFWVhOb1pYTW9ieXdnWVhSMGNuTmJYQ0p6ZEhKdmEyVXRaR0Z6YUdGeWNtRjVYQ0pkTENCd1lYSmhiWE1wTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHOHVYeTVoY25KdmQzTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCY0luTjBZWEowVTNSeWFXNW5YQ0lnYVc0Z2J5NWZMbUZ5Y205M2N5QW1KaUJoWkdSQmNuSnZkeWh2TENCdkxsOHVZWEp5YjNkekxuTjBZWEowVTNSeWFXNW5LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCY0ltVnVaRk4wY21sdVoxd2lJR2x1SUc4dVh5NWhjbkp2ZDNNZ0ppWWdZV1JrUVhKeWIzY29ieXdnYnk1ZkxtRnljbTkzY3k1bGJtUlRkSEpwYm1jc0lERXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1hDSnpkSEp2YTJVdFpHRnphR0Z5Y21GNVhDSTZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhaR1JFWVhOb1pYTW9ieXdnZG1Gc2RXVXNJSEJoY21GdGN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCY0ltWnBiR3hjSWpwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQnBjMVZTVENBOUlGTjBjaWgyWVd4MVpTa3ViV0YwWTJnb1VpNWZTVk5WVWt3cE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2x6VlZKTUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWld3Z1BTQWtLRndpY0dGMGRHVnlibHdpS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnYVdjZ1BTQWtLRndpYVcxaFoyVmNJaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXd3VhV1FnUFNCU0xtTnlaV0YwWlZWVlNVUW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBa0tHVnNMQ0I3ZURvZ01Dd2dlVG9nTUN3Z2NHRjBkR1Z5YmxWdWFYUnpPaUJjSW5WelpYSlRjR0ZqWlU5dVZYTmxYQ0lzSUdobGFXZG9kRG9nTVN3Z2QybGtkR2c2SURGOUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FrS0dsbkxDQjdlRG9nTUN3Z2VUb2dNQ3dnWENKNGJHbHVhenBvY21WbVhDSTZJR2x6VlZKTVd6RmRmU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXd3VZWEJ3Wlc1a1EyaHBiR1FvYVdjcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS0daMWJtTjBhVzl1SUNobGJDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQlNMbDl3Y21Wc2IyRmtLR2x6VlZKTVd6RmRMQ0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnZHlBOUlIUm9hWE11YjJabWMyVjBWMmxrZEdnc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYUNBOUlIUm9hWE11YjJabWMyVjBTR1ZwWjJoME8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKQ2hsYkN3Z2UzZHBaSFJvT2lCM0xDQm9aV2xuYUhRNklHaDlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNRb2FXY3NJSHQzYVdSMGFEb2dkeXdnYUdWcFoyaDBPaUJvZlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwS0dWc0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J2TG5CaGNHVnlMbVJsWm5NdVlYQndaVzVrUTJocGJHUW9aV3dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDUW9ibTlrWlN3Z2UyWnBiR3c2SUZ3aWRYSnNLQ05jSWlBcklHVnNMbWxrSUNzZ1hDSXBYQ0o5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZMbkJoZEhSbGNtNGdQU0JsYkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZMbkJoZEhSbGNtNGdKaVlnZFhCa1lYUmxVRzl6YVhScGIyNG9ieWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1kyeHlJRDBnVWk1blpYUlNSMElvZG1Gc2RXVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGamJISXVaWEp5YjNJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWld4bGRHVWdjR0Z5WVcxekxtZHlZV1JwWlc1ME8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JsYkdWMFpTQmhkSFJ5Y3k1bmNtRmthV1Z1ZER0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWhVaTVwY3loaGRIUnljeTV2Y0dGamFYUjVMQ0JjSW5WdVpHVm1hVzVsWkZ3aUtTQW1KbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQlNMbWx6S0hCaGNtRnRjeTV2Y0dGamFYUjVMQ0JjSW5WdVpHVm1hVzVsWkZ3aUtTQW1KbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWtLRzV2WkdVc0lIdHZjR0ZqYVhSNU9pQmhkSFJ5Y3k1dmNHRmphWFI1ZlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJVkl1YVhNb1lYUjBjbk5iWENKbWFXeHNMVzl3WVdOcGRIbGNJbDBzSUZ3aWRXNWtaV1pwYm1Wa1hDSXBJQ1ltWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRkl1YVhNb2NHRnlZVzF6VzF3aVptbHNiQzF2Y0dGamFYUjVYQ0pkTENCY0luVnVaR1ZtYVc1bFpGd2lLU0FtSmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FrS0c1dlpHVXNJSHRjSW1acGJHd3RiM0JoWTJsMGVWd2lPaUJoZEhSeWMxdGNJbVpwYkd3dGIzQmhZMmwwZVZ3aVhYMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2dvYnk1MGVYQmxJRDA5SUZ3aVkybHlZMnhsWENJZ2ZId2dieTUwZVhCbElEMDlJRndpWld4c2FYQnpaVndpSUh4OElGTjBjaWgyWVd4MVpTa3VZMmhoY2tGMEtDa2dJVDBnWENKeVhDSXBJQ1ltSUdGa1pFZHlZV1JwWlc1MFJtbHNiQ2h2TENCMllXeDFaU2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWENKdmNHRmphWFI1WENJZ2FXNGdZWFIwY25NZ2ZId2dYQ0ptYVd4c0xXOXdZV05wZEhsY0lpQnBiaUJoZEhSeWN5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnWjNKaFpHbGxiblFnUFNCU0xsOW5MbVJ2WXk1blpYUkZiR1Z0Wlc1MFFubEpaQ2h1YjJSbExtZGxkRUYwZEhKcFluVjBaU2hjSW1acGJHeGNJaWt1Y21Wd2JHRmpaU2d2WG5WeWJGeGNLQ044WEZ3cEpDOW5MQ0JGS1NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaG5jbUZrYVdWdWRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlITjBiM0J6SUQwZ1ozSmhaR2xsYm5RdVoyVjBSV3hsYldWdWRITkNlVlJoWjA1aGJXVW9YQ0p6ZEc5d1hDSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSkNoemRHOXdjMXR6ZEc5d2N5NXNaVzVuZEdnZ0xTQXhYU3dnZTF3aWMzUnZjQzF2Y0dGamFYUjVYQ0k2SUNoY0ltOXdZV05wZEhsY0lpQnBiaUJoZEhSeWN5QS9JR0YwZEhKekxtOXdZV05wZEhrZ09pQXhLU0FxSUNoY0ltWnBiR3d0YjNCaFkybDBlVndpSUdsdUlHRjBkSEp6SUQ4Z1lYUjBjbk5iWENKbWFXeHNMVzl3WVdOcGRIbGNJbDBnT2lBeEtYMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRjBkSEp6TG1keVlXUnBaVzUwSUQwZ2RtRnNkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lYUjBjbk11Wm1sc2JDQTlJRndpYm05dVpWd2lPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMnh5VzJoaGMxMG9YQ0p2Y0dGamFYUjVYQ0lwSUNZbUlDUW9ibTlrWlN3Z2Uxd2labWxzYkMxdmNHRmphWFI1WENJNklHTnNjaTV2Y0dGamFYUjVJRDRnTVNBL0lHTnNjaTV2Y0dGamFYUjVJQzhnTVRBd0lEb2dZMnh5TG05d1lXTnBkSGw5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCY0luTjBjbTlyWlZ3aU9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyeHlJRDBnVWk1blpYUlNSMElvZG1Gc2RXVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdibTlrWlM1elpYUkJkSFJ5YVdKMWRHVW9ZWFIwTENCamJISXVhR1Y0S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdGMGRDQTlQU0JjSW5OMGNtOXJaVndpSUNZbUlHTnNjbHRvWVhOZEtGd2liM0JoWTJsMGVWd2lLU0FtSmlBa0tHNXZaR1VzSUh0Y0luTjBjbTlyWlMxdmNHRmphWFI1WENJNklHTnNjaTV2Y0dGamFYUjVJRDRnTVNBL0lHTnNjaTV2Y0dGamFYUjVJQzhnTVRBd0lEb2dZMnh5TG05d1lXTnBkSGw5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaGhkSFFnUFQwZ1hDSnpkSEp2YTJWY0lpQW1KaUJ2TGw4dVlYSnliM2R6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYQ0p6ZEdGeWRGTjBjbWx1WjF3aUlHbHVJRzh1WHk1aGNuSnZkM01nSmlZZ1lXUmtRWEp5YjNjb2J5d2dieTVmTG1GeWNtOTNjeTV6ZEdGeWRGTjBjbWx1WnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYQ0psYm1SVGRISnBibWRjSWlCcGJpQnZMbDh1WVhKeWIzZHpJQ1ltSUdGa1pFRnljbTkzS0c4c0lHOHVYeTVoY25KdmQzTXVaVzVrVTNSeWFXNW5MQ0F4S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRndpWjNKaFpHbGxiblJjSWpwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNodkxuUjVjR1VnUFQwZ1hDSmphWEpqYkdWY0lpQjhmQ0J2TG5SNWNHVWdQVDBnWENKbGJHeHBjSE5sWENJZ2ZId2dVM1J5S0haaGJIVmxLUzVqYUdGeVFYUW9LU0FoUFNCY0luSmNJaWtnSmlZZ1lXUmtSM0poWkdsbGJuUkdhV3hzS0c4c0lIWmhiSFZsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRndpYjNCaFkybDBlVndpT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHRjBkSEp6TG1keVlXUnBaVzUwSUNZbUlDRmhkSFJ5YzF0b1lYTmRLRndpYzNSeWIydGxMVzl3WVdOcGRIbGNJaWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWtLRzV2WkdVc0lIdGNJbk4wY205clpTMXZjR0ZqYVhSNVhDSTZJSFpoYkhWbElENGdNU0EvSUhaaGJIVmxJQzhnTVRBd0lEb2dkbUZzZFdWOUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJR1poYkd4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCY0ltWnBiR3d0YjNCaFkybDBlVndpT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHRjBkSEp6TG1keVlXUnBaVzUwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaM0poWkdsbGJuUWdQU0JTTGw5bkxtUnZZeTVuWlhSRmJHVnRaVzUwUW5sSlpDaHViMlJsTG1kbGRFRjBkSEpwWW5WMFpTaGNJbVpwYkd4Y0lpa3VjbVZ3YkdGalpTZ3ZYblZ5YkZ4Y0tDTjhYRndwSkM5bkxDQkZLU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2R5WVdScFpXNTBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE4wYjNCeklEMGdaM0poWkdsbGJuUXVaMlYwUld4bGJXVnVkSE5DZVZSaFowNWhiV1VvWENKemRHOXdYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FrS0hOMGIzQnpXM04wYjNCekxteGxibWQwYUNBdElERmRMQ0I3WENKemRHOXdMVzl3WVdOcGRIbGNJam9nZG1Gc2RXVjlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JsWm1GMWJIUTZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhkSFFnUFQwZ1hDSm1iMjUwTFhOcGVtVmNJaUFtSmlBb2RtRnNkV1VnUFNCMGIwbHVkQ2gyWVd4MVpTd2dNVEFwSUNzZ1hDSndlRndpS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQmpjM055ZFd4bElEMGdZWFIwTG5KbGNHeGhZMlVvTHloY1hDMHVLUzluTENCbWRXNWpkR2x2YmlBb2R5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIzTG5OMVluTjBjbWx1WnlneEtTNTBiMVZ3Y0dWeVEyRnpaU2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdWIyUmxMbk4wZVd4bFcyTnpjM0oxYkdWZElEMGdkbUZzZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdkxsOHVaR2x5ZEhrZ1BTQXhPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdibTlrWlM1elpYUkJkSFJ5YVdKMWRHVW9ZWFIwTENCMllXeDFaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0IwZFc1bFZHVjRkQ2h2TENCd1lYSmhiWE1wTzF4dUlDQWdJQ0FnSUNCdWIyUmxMbk4wZVd4bExuWnBjMmxpYVd4cGRIa2dQU0IyYVhNN1hHNGdJQ0FnZlN4Y2JpQWdJQ0JzWldGa2FXNW5JRDBnTVM0eUxGeHVJQ0FnSUhSMWJtVlVaWGgwSUQwZ1puVnVZM1JwYjI0Z0tHVnNMQ0J3WVhKaGJYTXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHVnNMblI1Y0dVZ0lUMGdYQ0owWlhoMFhDSWdmSHdnSVNod1lYSmhiWE5iYUdGelhTaGNJblJsZUhSY0lpa2dmSHdnY0dGeVlXMXpXMmhoYzEwb1hDSm1iMjUwWENJcElIeDhJSEJoY21GdGMxdG9ZWE5kS0Z3aVptOXVkQzF6YVhwbFhDSXBJSHg4SUhCaGNtRnRjMXRvWVhOZEtGd2llRndpS1NCOGZDQndZWEpoYlhOYmFHRnpYU2hjSW5sY0lpa3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkbUZ5SUdFZ1BTQmxiQzVoZEhSeWN5eGNiaUFnSUNBZ0lDQWdJQ0FnSUc1dlpHVWdQU0JsYkM1dWIyUmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1ptOXVkRk5wZW1VZ1BTQnViMlJsTG1acGNuTjBRMmhwYkdRZ1B5QjBiMGx1ZENoU0xsOW5MbVJ2WXk1a1pXWmhkV3gwVm1sbGR5NW5aWFJEYjIxd2RYUmxaRk4wZVd4bEtHNXZaR1V1Wm1seWMzUkRhR2xzWkN3Z1JTa3VaMlYwVUhKdmNHVnlkSGxXWVd4MVpTaGNJbVp2Ym5RdGMybDZaVndpS1N3Z01UQXBJRG9nTVRBN1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0hCaGNtRnRjMXRvWVhOZEtGd2lkR1Y0ZEZ3aUtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1lTNTBaWGgwSUQwZ2NHRnlZVzF6TG5SbGVIUTdYRzRnSUNBZ0lDQWdJQ0FnSUNCM2FHbHNaU0FvYm05a1pTNW1hWEp6ZEVOb2FXeGtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYm05a1pTNXlaVzF2ZG1WRGFHbHNaQ2h1YjJSbExtWnBjbk4wUTJocGJHUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIUmxlSFJ6SUQwZ1UzUnlLSEJoY21GdGN5NTBaWGgwS1M1emNHeHBkQ2hjSWx4Y2Jsd2lLU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYzNCaGJuTWdQU0JiWFN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGMzQmhianRjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3TENCcGFTQTlJSFJsZUhSekxteGxibWQwYURzZ2FTQThJR2xwT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYzNCaGJpQTlJQ1FvWENKMGMzQmhibHdpS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcElDWW1JQ1FvZEhOd1lXNHNJSHRrZVRvZ1ptOXVkRk5wZW1VZ0tpQnNaV0ZrYVc1bkxDQjRPaUJoTG5oOUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBjM0JoYmk1aGNIQmxibVJEYUdsc1pDaFNMbDluTG1Sdll5NWpjbVZoZEdWVVpYaDBUbTlrWlNoMFpYaDBjMXRwWFNrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHNXZaR1V1WVhCd1pXNWtRMmhwYkdRb2RITndZVzRwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSemNHRnVjMXRwWFNBOUlIUnpjR0Z1TzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RITndZVzV6SUQwZ2JtOWtaUzVuWlhSRmJHVnRaVzUwYzBKNVZHRm5UbUZ0WlNoY0luUnpjR0Z1WENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWm05eUlDaHBJRDBnTUN3Z2FXa2dQU0IwYzNCaGJuTXViR1Z1WjNSb095QnBJRHdnYVdrN0lHa3JLeWtnYVdZZ0tHa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FrS0hSemNHRnVjMXRwWFN3Z2UyUjVPaUJtYjI1MFUybDZaU0FxSUd4bFlXUnBibWNzSUhnNklHRXVlSDBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWtLSFJ6Y0dGdWMxc3dYU3dnZTJSNU9pQXdmU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSkNodWIyUmxMQ0I3ZURvZ1lTNTRMQ0I1T2lCaExubDlLVHRjYmlBZ0lDQWdJQ0FnWld3dVh5NWthWEowZVNBOUlERTdYRzRnSUNBZ0lDQWdJSFpoY2lCaVlpQTlJR1ZzTGw5blpYUkNRbTk0S0Nrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JrYVdZZ1BTQmhMbmtnTFNBb1ltSXVlU0FySUdKaUxtaGxhV2RvZENBdklESXBPMXh1SUNBZ0lDQWdJQ0JrYVdZZ0ppWWdVaTVwY3loa2FXWXNJRndpWm1sdWFYUmxYQ0lwSUNZbUlDUW9kSE53WVc1eld6QmRMQ0I3WkhrNklHUnBabjBwTzF4dUlDQWdJSDBzWEc0Z0lDQWdaMlYwVW1WaGJFNXZaR1VnUFNCbWRXNWpkR2x2YmlBb2JtOWtaU2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9ibTlrWlM1d1lYSmxiblJPYjJSbElDWW1JRzV2WkdVdWNHRnlaVzUwVG05a1pTNTBZV2RPWVcxbExuUnZURzkzWlhKRFlYTmxLQ2tnUFQwOUlGd2lZVndpS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdibTlrWlM1d1lYSmxiblJPYjJSbE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRzV2WkdVN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOUxGeHVJQ0FnSUVWc1pXMWxiblFnUFNCbWRXNWpkR2x2YmlBb2JtOWtaU3dnYzNabktTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCWUlEMGdNQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lGa2dQU0F3TzF4dUlDQWdJQ0FnSUNBdktseGNYRzRnSUNBZ0lDQWdJQ0FxSUVWc1pXMWxiblF1Ym05a1pWeHVJQ0FnSUNBZ0lDQWdXeUJ3Y205d1pYSjBlU0FvYjJKcVpXTjBLU0JkWEc0Z0lDQWdJQ0FnSUNBcUtseHVJQ0FnSUNBZ0lDQWdLaUJIYVhabGN5QjViM1VnWVNCeVpXWmxjbVZ1WTJVZ2RHOGdkR2hsSUVSUFRTQnZZbXBsWTNRc0lITnZJSGx2ZFNCallXNGdZWE56YVdkdUlHVjJaVzUwSUdoaGJtUnNaWEp6SUc5eUlHcDFjM1FnYldWemN5QmhjbTkxYm1RdVhHNGdJQ0FnSUNBZ0lDQXFLbHh1SUNBZ0lDQWdJQ0FnS2lCT2IzUmxPaUJFYjI3aWdKbDBJRzFsYzNNZ2QybDBhQ0JwZEM1Y2JpQWdJQ0FnSUNBZ0lENGdWWE5oWjJWY2JpQWdJQ0FnSUNBZ0lId2dMeThnWkhKaGR5QmhJR05wY21Oc1pTQmhkQ0JqYjI5eVpHbHVZWFJsSURFd0xERXdJSGRwZEdnZ2NtRmthWFZ6SUc5bUlERXdYRzRnSUNBZ0lDQWdJQ0I4SUhaaGNpQmpJRDBnY0dGd1pYSXVZMmx5WTJ4bEtERXdMQ0F4TUN3Z01UQXBPMXh1SUNBZ0lDQWdJQ0FnZkNCakxtNXZaR1V1YjI1amJHbGpheUE5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdJSHdnSUNBZ0lHTXVZWFIwY2loY0ltWnBiR3hjSWl3Z1hDSnlaV1JjSWlrN1hHNGdJQ0FnSUNBZ0lDQjhJSDA3WEc0Z0lDQWdJQ0FnSUZ4Y0tpOWNiaUFnSUNBZ0lDQWdkR2hwYzFzd1hTQTlJSFJvYVhNdWJtOWtaU0E5SUc1dlpHVTdYRzRnSUNBZ0lDQWdJQzhxWEZ4Y2JpQWdJQ0FnSUNBZ0lDb2dSV3hsYldWdWRDNXlZWEJvWVdWc1hHNGdJQ0FnSUNBZ0lDQmJJSEJ5YjNCbGNuUjVJQ2h2WW1wbFkzUXBJRjFjYmlBZ0lDQWdJQ0FnSUNvcVhHNGdJQ0FnSUNBZ0lDQXFJRWx1ZEdWeWJtRnNJSEpsWm1WeVpXNWpaU0IwYnlCQVVtRndhR0ZsYkNCdlltcGxZM1F1SUVsdUlHTmhjMlVnYVhRZ2FYTWdibTkwSUdGMllXbHNZV0pzWlM1Y2JpQWdJQ0FnSUNBZ0lENGdWWE5oWjJWY2JpQWdJQ0FnSUNBZ0lId2dVbUZ3YUdGbGJDNWxiQzV5WldRZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUNCOElDQWdJQ0IyWVhJZ2FITmlJRDBnZEdocGN5NXdZWEJsY2k1eVlYQm9ZV1ZzTG5KbllqSm9jMklvZEdocGN5NWhkSFJ5S0Z3aVptbHNiRndpS1NrN1hHNGdJQ0FnSUNBZ0lDQjhJQ0FnSUNCb2MySXVhQ0E5SURFN1hHNGdJQ0FnSUNBZ0lDQjhJQ0FnSUNCMGFHbHpMbUYwZEhJb2UyWnBiR3c2SUhSb2FYTXVjR0Z3WlhJdWNtRndhR0ZsYkM1b2MySXljbWRpS0doellpa3VhR1Y0ZlNrN1hHNGdJQ0FnSUNBZ0lDQjhJSDFjYmlBZ0lDQWdJQ0FnWEZ3cUwxeHVJQ0FnSUNBZ0lDQnViMlJsTG5KaGNHaGhaV3dnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0F2S2x4Y1hHNGdJQ0FnSUNBZ0lDQXFJRVZzWlcxbGJuUXVhV1JjYmlBZ0lDQWdJQ0FnSUZzZ2NISnZjR1Z5ZEhrZ0tHNTFiV0psY2lrZ1hWeHVJQ0FnSUNBZ0lDQWdLaXBjYmlBZ0lDQWdJQ0FnSUNvZ1ZXNXBjWFZsSUdsa0lHOW1JSFJvWlNCbGJHVnRaVzUwTGlCRmMzQmxZMmxoYkd4NUlIVnpaV1oxYkNCM2FHVnVJSGx2ZFNCM1lXNTBJSFJ2SUd4cGMzUmxiaUIwYnlCbGRtVnVkSE1nYjJZZ2RHaGxJR1ZzWlcxbGJuUXNYRzRnSUNBZ0lDQWdJQ0FxSUdKbFkyRjFjMlVnWVd4c0lHVjJaVzUwY3lCaGNtVWdabWx5WldRZ2FXNGdabTl5YldGMElHQThiVzlrZFd4bFBpNDhZV04wYVc5dVBpNDhhV1ErWUM0Z1FXeHpieUIxYzJWbWRXd2dabTl5SUVCUVlYQmxjaTVuWlhSQ2VVbGtJRzFsZEdodlpDNWNiaUFnSUNBZ0lDQWdYRndxTDF4dUlDQWdJQ0FnSUNCMGFHbHpMbWxrSUQwZ1ozVnBaQ2dwTzF4dUlDQWdJQ0FnSUNCdWIyUmxMbkpoY0doaFpXeHBaQ0E5SUhSb2FYTXVhV1E3WEc1Y2JpQWdJQ0FnSUNBZ0x5b3FYRzRnSUNBZ0lDQWdJQ29nVFdWMGFHOWtJSFJvWVhRZ2NtVjBkWEp1Y3lCaElEVWdiR1YwZEdWeUwyUnBaMmwwSUdsa0xDQmxibTkxWjJnZ1ptOXlJRE0yWGpVZ1BTQTJNRFEyTmpFM05pQmxiR1Z0Wlc1MGMxeHVJQ0FnSUNBZ0lDQXFJRUJ5WlhSMWNtNXpJSHR6ZEhKcGJtZDlJR2xrWEc0Z0lDQWdJQ0FnSUNvdlhHNGdJQ0FnSUNBZ0lHWjFibU4wYVc5dUlHZDFhV1FvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdLRndpTURBd01Gd2lJQ3NnS0UxaGRHZ3VjbUZ1Wkc5dEtDa3FUV0YwYUM1d2IzY29NellzTlNrZ1BEd2dNQ2t1ZEc5VGRISnBibWNvTXpZcEtTNXpiR2xqWlNndE5TazdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCMGFHbHpMbTFoZEhKcGVDQTlJRkl1YldGMGNtbDRLQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjbVZoYkZCaGRHZ2dQU0J1ZFd4c08xeHVJQ0FnSUNBZ0lDQXZLbHhjWEc0Z0lDQWdJQ0FnSUNBcUlFVnNaVzFsYm5RdWNHRndaWEpjYmlBZ0lDQWdJQ0FnSUZzZ2NISnZjR1Z5ZEhrZ0tHOWlhbVZqZENrZ1hWeHVJQ0FnSUNBZ0lDQWdLaXBjYmlBZ0lDQWdJQ0FnSUNvZ1NXNTBaWEp1WVd3Z2NtVm1aWEpsYm1ObElIUnZJT0tBbkhCaGNHVnk0b0NkSUhkb1pYSmxJRzlpYW1WamRDQmtjbUYzYmk0Z1RXRnBibXg1SUdadmNpQjFjMlVnYVc0Z2NHeDFaMmx1Y3lCaGJtUWdaV3hsYldWdWRDQmxlSFJsYm5OcGIyNXpMbHh1SUNBZ0lDQWdJQ0FnUGlCVmMyRm5aVnh1SUNBZ0lDQWdJQ0FnZkNCU1lYQm9ZV1ZzTG1Wc0xtTnliM056SUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0FnZkNBZ0lDQWdkR2hwY3k1aGRIUnlLSHRtYVd4c09pQmNJbkpsWkZ3aWZTazdYRzRnSUNBZ0lDQWdJQ0I4SUNBZ0lDQjBhR2x6TG5CaGNHVnlMbkJoZEdnb1hDSk5NVEFzTVRCTU5UQXNOVEJOTlRBc01UQk1NVEFzTlRCY0lpbGNiaUFnSUNBZ0lDQWdJSHdnSUNBZ0lDQWdJQ0F1WVhSMGNpaDdjM1J5YjJ0bE9pQmNJbkpsWkZ3aWZTazdYRzRnSUNBZ0lDQWdJQ0I4SUgxY2JpQWdJQ0FnSUNBZ1hGd3FMMXh1SUNBZ0lDQWdJQ0IwYUdsekxuQmhjR1Z5SUQwZ2MzWm5PMXh1SUNBZ0lDQWdJQ0IwYUdsekxtRjBkSEp6SUQwZ2RHaHBjeTVoZEhSeWN5QjhmQ0I3ZlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmSUQwZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEhKaGJuTm1iM0p0T2lCYlhTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhONE9pQXhMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2MzazZJREVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmtaV2M2SURBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JrZURvZ01DeGNiaUFnSUNBZ0lDQWdJQ0FnSUdSNU9pQXdMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1pHbHlkSGs2SURGY2JpQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lDQWdJWE4yWnk1aWIzUjBiMjBnSmlZZ0tITjJaeTVpYjNSMGIyMGdQU0IwYUdsektUdGNiaUFnSUNBZ0lDQWdMeXBjWEZ4dUlDQWdJQ0FnSUNBZ0tpQkZiR1Z0Wlc1MExuQnlaWFpjYmlBZ0lDQWdJQ0FnSUZzZ2NISnZjR1Z5ZEhrZ0tHOWlhbVZqZENrZ1hWeHVJQ0FnSUNBZ0lDQWdLaXBjYmlBZ0lDQWdJQ0FnSUNvZ1VtVm1aWEpsYm1ObElIUnZJSFJvWlNCd2NtVjJhVzkxY3lCbGJHVnRaVzUwSUdsdUlIUm9aU0JvYVdWeVlYSmphSGt1WEc0Z0lDQWdJQ0FnSUZ4Y0tpOWNiaUFnSUNBZ0lDQWdkR2hwY3k1d2NtVjJJRDBnYzNabkxuUnZjRHRjYmlBZ0lDQWdJQ0FnYzNabkxuUnZjQ0FtSmlBb2MzWm5MblJ2Y0M1dVpYaDBJRDBnZEdocGN5azdYRzRnSUNBZ0lDQWdJSE4yWnk1MGIzQWdQU0IwYUdsek8xeHVJQ0FnSUNBZ0lDQXZLbHhjWEc0Z0lDQWdJQ0FnSUNBcUlFVnNaVzFsYm5RdWJtVjRkRnh1SUNBZ0lDQWdJQ0FnV3lCd2NtOXdaWEowZVNBb2IySnFaV04wS1NCZFhHNGdJQ0FnSUNBZ0lDQXFLbHh1SUNBZ0lDQWdJQ0FnS2lCU1pXWmxjbVZ1WTJVZ2RHOGdkR2hsSUc1bGVIUWdaV3hsYldWdWRDQnBiaUIwYUdVZ2FHbGxjbUZ5WTJoNUxseHVJQ0FnSUNBZ0lDQmNYQ292WEc0Z0lDQWdJQ0FnSUhSb2FYTXVibVY0ZENBOUlHNTFiR3c3WEc0Z0lDQWdmU3hjYmlBZ0lDQmxiSEJ5YjNSdklEMGdVaTVsYkR0Y2JseHVJQ0FnSUVWc1pXMWxiblF1Y0hKdmRHOTBlWEJsSUQwZ1pXeHdjbTkwYnp0Y2JpQWdJQ0JsYkhCeWIzUnZMbU52Ym5OMGNuVmpkRzl5SUQwZ1JXeGxiV1Z1ZER0Y2JseHVJQ0FnSUZJdVgyVnVaMmx1WlM1d1lYUm9JRDBnWm5WdVkzUnBiMjRnS0hCaGRHaFRkSEpwYm1jc0lGTldSeWtnZTF4dUlDQWdJQ0FnSUNCMllYSWdaV3dnUFNBa0tGd2ljR0YwYUZ3aUtUdGNiaUFnSUNBZ0lDQWdVMVpITG1OaGJuWmhjeUFtSmlCVFZrY3VZMkZ1ZG1GekxtRndjR1Z1WkVOb2FXeGtLR1ZzS1R0Y2JpQWdJQ0FnSUNBZ2RtRnlJSEFnUFNCdVpYY2dSV3hsYldWdWRDaGxiQ3dnVTFaSEtUdGNiaUFnSUNBZ0lDQWdjQzUwZVhCbElEMGdYQ0p3WVhSb1hDSTdYRzRnSUNBZ0lDQWdJSE5sZEVacGJHeEJibVJUZEhKdmEyVW9jQ3dnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdabWxzYkRvZ1hDSnViMjVsWENJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6ZEhKdmEyVTZJRndpSXpBd01Gd2lMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2NHRjBhRG9nY0dGMGFGTjBjbWx1WjF4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIQTdYRzRnSUNBZ2ZUdGNiaUFnSUNBdktseGNYRzRnSUNBZ0lDb2dSV3hsYldWdWRDNXliM1JoZEdWY2JpQWdJQ0FnV3lCdFpYUm9iMlFnWFZ4dUlDQWdJQ0FxS2x4dUlDQWdJQ0FxSUVSbGNISmxZMkYwWldRaElGVnpaU0JBUld4bGJXVnVkQzUwY21GdWMyWnZjbTBnYVc1emRHVmhaQzVjYmlBZ0lDQWdLaUJCWkdSeklISnZkR0YwYVc5dUlHSjVJR2RwZG1WdUlHRnVaMnhsSUdGeWIzVnVaQ0JuYVhabGJpQndiMmx1ZENCMGJ5QjBhR1VnYkdsemRDQnZabHh1SUNBZ0lDQXFJSFJ5WVc1elptOXliV0YwYVc5dWN5QnZaaUIwYUdVZ1pXeGxiV1Z1ZEM1Y2JpQWdJQ0FnUGlCUVlYSmhiV1YwWlhKelhHNGdJQ0FnSUMwZ1pHVm5JQ2h1ZFcxaVpYSXBJR0Z1WjJ4bElHbHVJR1JsWjNKbFpYTmNiaUFnSUNBZ0xTQmplQ0FvYm5WdFltVnlLU0FqYjNCMGFXOXVZV3dnZUNCamIyOXlaR2x1WVhSbElHOW1JSFJvWlNCalpXNTBjbVVnYjJZZ2NtOTBZWFJwYjI1Y2JpQWdJQ0FnTFNCamVTQW9iblZ0WW1WeUtTQWpiM0IwYVc5dVlXd2dlU0JqYjI5eVpHbHVZWFJsSUc5bUlIUm9aU0JqWlc1MGNtVWdiMllnY205MFlYUnBiMjVjYmlBZ0lDQWdLaUJKWmlCamVDQW1JR041SUdGeVpXN2lnSmwwSUhOd1pXTnBabWxsWkNCalpXNTBjbVVnYjJZZ2RHaGxJSE5vWVhCbElHbHpJSFZ6WldRZ1lYTWdZU0J3YjJsdWRDQnZaaUJ5YjNSaGRHbHZiaTVjYmlBZ0lDQWdQU0FvYjJKcVpXTjBLU0JBUld4bGJXVnVkRnh1SUNBZ0lGeGNLaTljYmlBZ0lDQmxiSEJ5YjNSdkxuSnZkR0YwWlNBOUlHWjFibU4wYVc5dUlDaGtaV2NzSUdONExDQmplU2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1eVpXMXZkbVZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmtaV2NnUFNCVGRISW9aR1ZuS1M1emNHeHBkQ2h6WlhCaGNtRjBiM0lwTzF4dUlDQWdJQ0FnSUNCcFppQW9aR1ZuTG14bGJtZDBhQ0F0SURFcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdONElEMGdkRzlHYkc5aGRDaGtaV2RiTVYwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTNrZ1BTQjBiMFpzYjJGMEtHUmxaMXN5WFNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdaR1ZuSUQwZ2RHOUdiRzloZENoa1pXZGJNRjBwTzF4dUlDQWdJQ0FnSUNBb1kza2dQVDBnYm5Wc2JDa2dKaVlnS0dONElEMGdZM2twTzF4dUlDQWdJQ0FnSUNCcFppQW9ZM2dnUFQwZ2JuVnNiQ0I4ZkNCamVTQTlQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdZbUp2ZUNBOUlIUm9hWE11WjJWMFFrSnZlQ2d4S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR040SUQwZ1ltSnZlQzU0SUNzZ1ltSnZlQzUzYVdSMGFDQXZJREk3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmplU0E5SUdKaWIzZ3VlU0FySUdKaWIzZ3VhR1ZwWjJoMElDOGdNanRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCMGFHbHpMblJ5WVc1elptOXliU2gwYUdsekxsOHVkSEpoYm5ObWIzSnRMbU52Ym1OaGRDaGJXMXdpY2x3aUxDQmtaV2NzSUdONExDQmplVjFkS1NrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpPMXh1SUNBZ0lIMDdYRzRnSUNBZ0x5cGNYRnh1SUNBZ0lDQXFJRVZzWlcxbGJuUXVjMk5oYkdWY2JpQWdJQ0FnV3lCdFpYUm9iMlFnWFZ4dUlDQWdJQ0FxS2x4dUlDQWdJQ0FxSUVSbGNISmxZMkYwWldRaElGVnpaU0JBUld4bGJXVnVkQzUwY21GdWMyWnZjbTBnYVc1emRHVmhaQzVjYmlBZ0lDQWdLaUJCWkdSeklITmpZV3hsSUdKNUlHZHBkbVZ1SUdGdGIzVnVkQ0J5Wld4aGRHbDJaU0IwYnlCbmFYWmxiaUJ3YjJsdWRDQjBieUIwYUdVZ2JHbHpkQ0J2Wmx4dUlDQWdJQ0FxSUhSeVlXNXpabTl5YldGMGFXOXVjeUJ2WmlCMGFHVWdaV3hsYldWdWRDNWNiaUFnSUNBZ1BpQlFZWEpoYldWMFpYSnpYRzRnSUNBZ0lDMGdjM2dnS0c1MWJXSmxjaWtnYUc5eWFYTnZiblJoYkNCelkyRnNaU0JoYlc5MWJuUmNiaUFnSUNBZ0xTQnplU0FvYm5WdFltVnlLU0IyWlhKMGFXTmhiQ0J6WTJGc1pTQmhiVzkxYm5SY2JpQWdJQ0FnTFNCamVDQW9iblZ0WW1WeUtTQWpiM0IwYVc5dVlXd2dlQ0JqYjI5eVpHbHVZWFJsSUc5bUlIUm9aU0JqWlc1MGNtVWdiMllnYzJOaGJHVmNiaUFnSUNBZ0xTQmplU0FvYm5WdFltVnlLU0FqYjNCMGFXOXVZV3dnZVNCamIyOXlaR2x1WVhSbElHOW1JSFJvWlNCalpXNTBjbVVnYjJZZ2MyTmhiR1ZjYmlBZ0lDQWdLaUJKWmlCamVDQW1JR041SUdGeVpXN2lnSmwwSUhOd1pXTnBabWxsWkNCalpXNTBjbVVnYjJZZ2RHaGxJSE5vWVhCbElHbHpJSFZ6WldRZ2FXNXpkR1ZoWkM1Y2JpQWdJQ0FnUFNBb2IySnFaV04wS1NCQVJXeGxiV1Z1ZEZ4dUlDQWdJRnhjS2k5Y2JpQWdJQ0JsYkhCeWIzUnZMbk5qWVd4bElEMGdablZ1WTNScGIyNGdLSE40TENCemVTd2dZM2dzSUdONUtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbkpsYlc5MlpXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhONElEMGdVM1J5S0hONEtTNXpjR3hwZENoelpYQmhjbUYwYjNJcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvYzNndWJHVnVaM1JvSUMwZ01Ta2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2Mza2dQU0IwYjBac2IyRjBLSE40V3pGZEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdONElEMGdkRzlHYkc5aGRDaHplRnN5WFNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqZVNBOUlIUnZSbXh2WVhRb2MzaGJNMTBwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lITjRJRDBnZEc5R2JHOWhkQ2h6ZUZzd1hTazdYRzRnSUNBZ0lDQWdJQ2h6ZVNBOVBTQnVkV3hzS1NBbUppQW9jM2tnUFNCemVDazdYRzRnSUNBZ0lDQWdJQ2hqZVNBOVBTQnVkV3hzS1NBbUppQW9ZM2dnUFNCamVTazdYRzRnSUNBZ0lDQWdJR2xtSUNoamVDQTlQU0J1ZFd4c0lIeDhJR041SUQwOUlHNTFiR3dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCaVltOTRJRDBnZEdocGN5NW5aWFJDUW05NEtERXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdONElEMGdZM2dnUFQwZ2JuVnNiQ0EvSUdKaWIzZ3VlQ0FySUdKaWIzZ3VkMmxrZEdnZ0x5QXlJRG9nWTNnN1hHNGdJQ0FnSUNBZ0lHTjVJRDBnWTNrZ1BUMGdiblZzYkNBL0lHSmliM2d1ZVNBcklHSmliM2d1YUdWcFoyaDBJQzhnTWlBNklHTjVPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuUnlZVzV6Wm05eWJTaDBhR2x6TGw4dWRISmhibk5tYjNKdExtTnZibU5oZENoYlcxd2ljMXdpTENCemVDd2djM2tzSUdONExDQmplVjFkS1NrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpPMXh1SUNBZ0lIMDdYRzRnSUNBZ0x5cGNYRnh1SUNBZ0lDQXFJRVZzWlcxbGJuUXVkSEpoYm5Oc1lYUmxYRzRnSUNBZ0lGc2diV1YwYUc5a0lGMWNiaUFnSUNBZ0tpcGNiaUFnSUNBZ0tpQkVaWEJ5WldOaGRHVmtJU0JWYzJVZ1FFVnNaVzFsYm5RdWRISmhibk5tYjNKdElHbHVjM1JsWVdRdVhHNGdJQ0FnSUNvZ1FXUmtjeUIwY21GdWMyeGhkR2x2YmlCaWVTQm5hWFpsYmlCaGJXOTFiblFnZEc4Z2RHaGxJR3hwYzNRZ2IyWWdkSEpoYm5ObWIzSnRZWFJwYjI1eklHOW1JSFJvWlNCbGJHVnRaVzUwTGx4dUlDQWdJQ0ErSUZCaGNtRnRaWFJsY25OY2JpQWdJQ0FnTFNCa2VDQW9iblZ0WW1WeUtTQm9iM0pwYzI5dWRHRnNJSE5vYVdaMFhHNGdJQ0FnSUMwZ1pIa2dLRzUxYldKbGNpa2dkbVZ5ZEdsallXd2djMmhwWm5SY2JpQWdJQ0FnUFNBb2IySnFaV04wS1NCQVJXeGxiV1Z1ZEZ4dUlDQWdJRnhjS2k5Y2JpQWdJQ0JsYkhCeWIzUnZMblJ5WVc1emJHRjBaU0E5SUdaMWJtTjBhVzl1SUNoa2VDd2daSGtwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWNtVnRiM1psWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdaSGdnUFNCVGRISW9aSGdwTG5Od2JHbDBLSE5sY0dGeVlYUnZjaWs3WEc0Z0lDQWdJQ0FnSUdsbUlDaGtlQzVzWlc1bmRHZ2dMU0F4S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JrZVNBOUlIUnZSbXh2WVhRb1pIaGJNVjBwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHUjRJRDBnZEc5R2JHOWhkQ2hrZUZzd1hTa2dmSHdnTUR0Y2JpQWdJQ0FnSUNBZ1pIa2dQU0FyWkhrZ2ZId2dNRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTBjbUZ1YzJadmNtMG9kR2hwY3k1ZkxuUnlZVzV6Wm05eWJTNWpiMjVqWVhRb1cxdGNJblJjSWl3Z1pIZ3NJR1I1WFYwcEtUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03WEc0Z0lDQWdmVHRjYmlBZ0lDQXZLbHhjWEc0Z0lDQWdJQ29nUld4bGJXVnVkQzUwY21GdWMyWnZjbTFjYmlBZ0lDQWdXeUJ0WlhSb2IyUWdYVnh1SUNBZ0lDQXFLbHh1SUNBZ0lDQXFJRUZrWkhNZ2RISmhibk5tYjNKdFlYUnBiMjRnZEc4Z2RHaGxJR1ZzWlcxbGJuUWdkMmhwWTJnZ2FYTWdjMlZ3WVhKaGRHVWdkRzhnYjNSb1pYSWdZWFIwY21saWRYUmxjeXhjYmlBZ0lDQWdLaUJwTG1VdUlIUnlZVzV6YkdGMGFXOXVJR1J2WlhOdTRvQ1pkQ0JqYUdGdVoyVWdZSGhnSUc5eUlHQjVZQ0J2WmlCMGFHVWdjbVZqZEdGdVoyVXVJRlJvWlNCbWIzSnRZWFJjYmlBZ0lDQWdLaUJ2WmlCMGNtRnVjMlp2Y20xaGRHbHZiaUJ6ZEhKcGJtY2dhWE1nYzJsdGFXeGhjaUIwYnlCMGFHVWdjR0YwYUNCemRISnBibWNnYzNsdWRHRjRPbHh1SUNBZ0lDQjhJRndpZERFd01Dd3hNREJ5TXpBc01UQXdMREV3TUhNeUxESXNNVEF3TERFd01ISTBOWE14TGpWY0lseHVJQ0FnSUNBcUlFVmhZMmdnYkdWMGRHVnlJR2x6SUdFZ1kyOXRiV0Z1WkM0Z1ZHaGxjbVVnWVhKbElHWnZkWElnWTI5dGJXRnVaSE02SUdCMFlDQnBjeUJtYjNJZ2RISmhibk5zWVhSbExDQmdjbUFnYVhNZ1ptOXlJSEp2ZEdGMFpTd2dZSE5nSUdseklHWnZjbHh1SUNBZ0lDQXFJSE5qWVd4bElHRnVaQ0JnYldBZ2FYTWdabTl5SUcxaGRISnBlQzVjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRlJvWlhKbElHRnlaU0JoYkhOdklHRnNkR1Z5Ym1GMGFYWmxJT0tBbkdGaWMyOXNkWFJsNG9DZElIUnlZVzV6YkdGMGFXOXVMQ0J5YjNSaGRHbHZiaUJoYm1RZ2MyTmhiR1U2SUdCVVlDd2dZRkpnSUdGdVpDQmdVMkF1SUZSb1pYa2dkMmxzYkNCdWIzUWdkR0ZyWlNCd2NtVjJhVzkxY3lCMGNtRnVjMlp2Y20xaGRHbHZiaUJwYm5SdklHRmpZMjkxYm5RdUlFWnZjaUJsZUdGdGNHeGxMQ0JnTGk0dVZERXdNQ3d3WUNCM2FXeHNJR0ZzZDJGNWN5QnRiM1psSUdWc1pXMWxiblFnTVRBd0lIQjRJR2h2Y21semIyNTBZV3hzZVN3Z2QyaHBiR1VnWUM0dUxuUXhNREFzTUdBZ1kyOTFiR1FnYlc5MlpTQnBkQ0IyWlhKMGFXTmhiR3g1SUdsbUlIUm9aWEpsSUdseklHQnlPVEJnSUdKbFptOXlaUzRnU25WemRDQmpiMjF3WVhKbElISmxjM1ZzZEhNZ2IyWWdZSEk1TUhReE1EQXNNR0FnWVc1a0lHQnlPVEJVTVRBd0xEQmdMbHh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dVMjhzSUhSb1pTQmxlR0Z0Y0d4bElHeHBibVVnWVdKdmRtVWdZMjkxYkdRZ1ltVWdjbVZoWkNCc2FXdGxJT0tBbkhSeVlXNXpiR0YwWlNCaWVTQXhNREFzSURFd01Ec2djbTkwWVhSbElETXd3ckFnWVhKdmRXNWtJREV3TUN3Z01UQXdPeUJ6WTJGc1pTQjBkMmxqWlNCaGNtOTFibVFnTVRBd0xDQXhNREE3WEc0Z0lDQWdJQ29nY205MFlYUmxJRFExd3JBZ1lYSnZkVzVrSUdObGJuUnlaVHNnYzJOaGJHVWdNUzQxSUhScGJXVnpJSEpsYkdGMGFYWmxJSFJ2SUdObGJuUnlaZUtBblM0Z1FYTWdlVzkxSUdOaGJpQnpaV1VnY205MFlYUmxJR0Z1WkNCelkyRnNaU0JqYjIxdFlXNWtjeUJvWVhabElHOXlhV2RwYmx4dUlDQWdJQ0FxSUdOdmIzSmthVzVoZEdWeklHRnpJRzl3ZEdsdmJtRnNJSEJoY21GdFpYUmxjbk1zSUhSb1pTQmtaV1poZFd4MElHbHpJSFJvWlNCalpXNTBjbVVnY0c5cGJuUWdiMllnZEdobElHVnNaVzFsYm5RdVhHNGdJQ0FnSUNvZ1RXRjBjbWw0SUdGalkyVndkSE1nYzJsNElIQmhjbUZ0WlhSbGNuTXVYRzRnSUNBZ0lENGdWWE5oWjJWY2JpQWdJQ0FnZkNCMllYSWdaV3dnUFNCd1lYQmxjaTV5WldOMEtERXdMQ0F5TUN3Z016QXdMQ0F5TURBcE8xeHVJQ0FnSUNCOElDOHZJSFJ5WVc1emJHRjBaU0F4TURBc0lERXdNQ3dnY205MFlYUmxJRFExd3JBc0lIUnlZVzV6YkdGMFpTQXRNVEF3TENBd1hHNGdJQ0FnSUh3Z1pXd3VkSEpoYm5ObWIzSnRLRndpZERFd01Dd3hNREJ5TkRWMExURXdNQ3d3WENJcE8xeHVJQ0FnSUNCOElDOHZJR2xtSUhsdmRTQjNZVzUwSUhsdmRTQmpZVzRnWVhCd1pXNWtJRzl5SUhCeVpYQmxibVFnZEhKaGJuTm1iM0p0WVhScGIyNXpYRzRnSUNBZ0lId2daV3d1ZEhKaGJuTm1iM0p0S0Z3aUxpNHVkRFV3TERVd1hDSXBPMXh1SUNBZ0lDQjhJR1ZzTG5SeVlXNXpabTl5YlNoY0luTXlMaTR1WENJcE8xeHVJQ0FnSUNCOElDOHZJRzl5SUdWMlpXNGdkM0poY0Z4dUlDQWdJQ0I4SUdWc0xuUnlZVzV6Wm05eWJTaGNJblExTUN3MU1DNHVMblF0TlRBdE5UQmNJaWs3WEc0Z0lDQWdJSHdnTHk4Z2RHOGdjbVZ6WlhRZ2RISmhibk5tYjNKdFlYUnBiMjRnWTJGc2JDQnRaWFJvYjJRZ2QybDBhQ0JsYlhCMGVTQnpkSEpwYm1kY2JpQWdJQ0FnZkNCbGJDNTBjbUZ1YzJadmNtMG9YQ0pjSWlrN1hHNGdJQ0FnSUh3Z0x5OGdkRzhnWjJWMElHTjFjbkpsYm5RZ2RtRnNkV1VnWTJGc2JDQnBkQ0IzYVhSb2IzVjBJSEJoY21GdFpYUmxjbk5jYmlBZ0lDQWdmQ0JqYjI1emIyeGxMbXh2WnlobGJDNTBjbUZ1YzJadmNtMG9LU2s3WEc0Z0lDQWdJRDRnVUdGeVlXMWxkR1Z5YzF4dUlDQWdJQ0F0SUhSemRISWdLSE4wY21sdVp5a2dJMjl3ZEdsdmJtRnNJSFJ5WVc1elptOXliV0YwYVc5dUlITjBjbWx1WjF4dUlDQWdJQ0FxSUVsbUlIUnpkSElnYVhOdTRvQ1pkQ0J6Y0dWamFXWnBaV1JjYmlBZ0lDQWdQU0FvYzNSeWFXNW5LU0JqZFhKeVpXNTBJSFJ5WVc1elptOXliV0YwYVc5dUlITjBjbWx1WjF4dUlDQWdJQ0FxSUdWc2MyVmNiaUFnSUNBZ1BTQW9iMkpxWldOMEtTQkFSV3hsYldWdWRGeHVJQ0FnSUZ4Y0tpOWNiaUFnSUNCbGJIQnliM1J2TG5SeVlXNXpabTl5YlNBOUlHWjFibU4wYVc5dUlDaDBjM1J5S1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJmSUQwZ2RHaHBjeTVmTzF4dUlDQWdJQ0FnSUNCcFppQW9kSE4wY2lBOVBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdYeTUwY21GdWMyWnZjbTA3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1VpNWZaWGgwY21GamRGUnlZVzV6Wm05eWJTaDBhR2x6TENCMGMzUnlLVHRjYmx4dUlDQWdJQ0FnSUNCMGFHbHpMbU5zYVhBZ0ppWWdKQ2gwYUdsekxtTnNhWEFzSUh0MGNtRnVjMlp2Y20wNklIUm9hWE11YldGMGNtbDRMbWx1ZG1WeWRDZ3BmU2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjR0YwZEdWeWJpQW1KaUIxY0dSaGRHVlFiM05wZEdsdmJpaDBhR2x6S1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV1YjJSbElDWW1JQ1FvZEdocGN5NXViMlJsTENCN2RISmhibk5tYjNKdE9pQjBhR2x6TG0xaGRISnBlSDBwTzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2hmTG5ONElDRTlJREVnZkh3Z1h5NXplU0FoUFNBeEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdjM2NnUFNCMGFHbHpMbUYwZEhKelcyaGhjMTBvWENKemRISnZhMlV0ZDJsa2RHaGNJaWtnUHlCMGFHbHpMbUYwZEhKelcxd2ljM1J5YjJ0bExYZHBaSFJvWENKZElEb2dNVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WVhSMGNpaDdYQ0p6ZEhKdmEyVXRkMmxrZEdoY0lqb2djM2Q5S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TzF4dUlDQWdJSDA3WEc0Z0lDQWdMeXBjWEZ4dUlDQWdJQ0FxSUVWc1pXMWxiblF1YUdsa1pWeHVJQ0FnSUNCYklHMWxkR2h2WkNCZFhHNGdJQ0FnSUNvcVhHNGdJQ0FnSUNvZ1RXRnJaWE1nWld4bGJXVnVkQ0JwYm5acGMybGliR1V1SUZObFpTQkFSV3hsYldWdWRDNXphRzkzTGx4dUlDQWdJQ0E5SUNodlltcGxZM1FwSUVCRmJHVnRaVzUwWEc0Z0lDQWdYRndxTDF4dUlDQWdJR1ZzY0hKdmRHOHVhR2xrWlNBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnYVdZb0lYUm9hWE11Y21WdGIzWmxaQ2tnZEdocGN5NXViMlJsTG5OMGVXeGxMbVJwYzNCc1lYa2dQU0JjSW01dmJtVmNJanRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNGdJQ0FnZlR0Y2JpQWdJQ0F2S2x4Y1hHNGdJQ0FnSUNvZ1JXeGxiV1Z1ZEM1emFHOTNYRzRnSUNBZ0lGc2diV1YwYUc5a0lGMWNiaUFnSUNBZ0tpcGNiaUFnSUNBZ0tpQk5ZV3RsY3lCbGJHVnRaVzUwSUhacGMybGliR1V1SUZObFpTQkFSV3hsYldWdWRDNW9hV1JsTGx4dUlDQWdJQ0E5SUNodlltcGxZM1FwSUVCRmJHVnRaVzUwWEc0Z0lDQWdYRndxTDF4dUlDQWdJR1ZzY0hKdmRHOHVjMmh2ZHlBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnYVdZb0lYUm9hWE11Y21WdGIzWmxaQ2tnZEdocGN5NXViMlJsTG5OMGVXeGxMbVJwYzNCc1lYa2dQU0JjSWx3aU8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjenRjYmlBZ0lDQjlPMXh1SUNBZ0lDOHFYRnhjYmlBZ0lDQWdLaUJGYkdWdFpXNTBMbkpsYlc5MlpWeHVJQ0FnSUNCYklHMWxkR2h2WkNCZFhHNGdJQ0FnSUNvcVhHNGdJQ0FnSUNvZ1VtVnRiM1psY3lCbGJHVnRaVzUwSUdaeWIyMGdkR2hsSUhCaGNHVnlMbHh1SUNBZ0lGeGNLaTljYmlBZ0lDQmxiSEJ5YjNSdkxuSmxiVzkyWlNBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHNXZaR1VnUFNCblpYUlNaV0ZzVG05a1pTaDBhR2x6TG01dlpHVXBPMXh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTV5WlcxdmRtVmtJSHg4SUNGdWIyUmxMbkJoY21WdWRFNXZaR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0IyWVhJZ2NHRndaWElnUFNCMGFHbHpMbkJoY0dWeU8xeHVJQ0FnSUNBZ0lDQndZWEJsY2k1ZlgzTmxkRjlmSUNZbUlIQmhjR1Z5TGw5ZmMyVjBYMTh1WlhoamJIVmtaU2gwYUdsektUdGNiaUFnSUNBZ0lDQWdaWFpsTG5WdVltbHVaQ2hjSW5KaGNHaGhaV3d1S2k0cUxsd2lJQ3NnZEdocGN5NXBaQ2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG1keVlXUnBaVzUwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J3WVhCbGNpNWtaV1p6TG5KbGJXOTJaVU5vYVd4a0tIUm9hWE11WjNKaFpHbGxiblFwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lGSXVYM1JsWVhJb2RHaHBjeXdnY0dGd1pYSXBPMXh1WEc0Z0lDQWdJQ0FnSUc1dlpHVXVjR0Z5Wlc1MFRtOWtaUzV5WlcxdmRtVkRhR2xzWkNodWIyUmxLVHRjYmx4dUlDQWdJQ0FnSUNBdkx5QlNaVzF2ZG1VZ1kzVnpkRzl0SUdSaGRHRWdabTl5SUdWc1pXMWxiblJjYmlBZ0lDQWdJQ0FnZEdocGN5NXlaVzF2ZG1WRVlYUmhLQ2s3WEc1Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTQnBiaUIwYUdsektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpXMmxkSUQwZ2RIbHdaVzltSUhSb2FYTmJhVjBnUFQwZ1hDSm1kVzVqZEdsdmJsd2lJRDhnVWk1ZmNtVnRiM1psWkVaaFkzUnZjbmtvYVNrZ09pQnVkV3hzTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIUm9hWE11Y21WdGIzWmxaQ0E5SUhSeWRXVTdYRzRnSUNBZ2ZUdGNiaUFnSUNCbGJIQnliM1J2TGw5blpYUkNRbTk0SUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTV1YjJSbExuTjBlV3hsTG1ScGMzQnNZWGtnUFQwZ1hDSnViMjVsWENJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjMmh2ZHlncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHaHBaR1VnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhaaGNpQmpZVzUyWVhOSWFXUmtaVzRnUFNCbVlXeHpaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZiblJoYVc1bGNsTjBlV3hsTzF4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1d1lYQmxjaTVqWVc1MllYTXVjR0Z5Wlc1MFJXeGxiV1Z1ZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJR052Ym5SaGFXNWxjbE4wZVd4bElEMGdkR2hwY3k1d1lYQmxjaTVqWVc1MllYTXVjR0Z5Wlc1MFJXeGxiV1Z1ZEM1emRIbHNaVHRjYmlBZ0lDQWdJQ0FnZlNBdkwwbEZNVEFySUdOaGJpZDBJR1pwYm1RZ2NHRnlaVzUwUld4bGJXVnVkRnh1SUNBZ0lDQWdJQ0JsYkhObElHbG1JQ2gwYUdsekxuQmhjR1Z5TG1OaGJuWmhjeTV3WVhKbGJuUk9iMlJsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdZMjl1ZEdGcGJtVnlVM1I1YkdVZ1BTQjBhR2x6TG5CaGNHVnlMbU5oYm5aaGN5NXdZWEpsYm5ST2IyUmxMbk4wZVd4bE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnYVdZb1kyOXVkR0ZwYm1WeVUzUjViR1VnSmlZZ1kyOXVkR0ZwYm1WeVUzUjViR1V1WkdsemNHeGhlU0E5UFNCY0ltNXZibVZjSWlrZ2UxeHVJQ0FnSUNBZ0lDQWdJR05oYm5aaGMwaHBaR1JsYmlBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVkR0ZwYm1WeVUzUjViR1V1WkdsemNHeGhlU0E5SUZ3aVhDSTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZG1GeUlHSmliM2dnUFNCN2ZUdGNiaUFnSUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR0ppYjNnZ1BTQjBhR2x6TG01dlpHVXVaMlYwUWtKdmVDZ3BPMXh1SUNBZ0lDQWdJQ0I5SUdOaGRHTm9LR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUVacGNtVm1iM2dnTXk0d0xuZ3NJREkxTGpBdU1TQW9jSEp2WW1GaWJIa2diVzl5WlNCMlpYSnphVzl1Y3lCaFptWmxZM1JsWkNrZ2NHeGhlU0JpWVdSc2VTQm9aWEpsSUMwZ2NHOXpjMmxpYkdVZ1ptbDRYRzRnSUNBZ0lDQWdJQ0FnSUNCaVltOTRJRDBnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhnNklIUm9hWE11Ym05a1pTNWpiR2xsYm5STVpXWjBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGs2SUhSb2FYTXVibTlrWlM1amJHbGxiblJVYjNBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2QybGtkR2c2SUhSb2FYTXVibTlrWlM1amJHbGxiblJYYVdSMGFDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm9aV2xuYUhRNklIUm9hWE11Ym05a1pTNWpiR2xsYm5SSVpXbG5hSFJjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmU0JtYVc1aGJHeDVJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHSmliM2dnUFNCaVltOTRJSHg4SUh0OU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZb1kyRnVkbUZ6U0dsa1pHVnVLWHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1ZEdGcGJtVnlVM1I1YkdVdVpHbHpjR3hoZVNBOUlGd2libTl1WlZ3aU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHaHBaR1VnSmlZZ2RHaHBjeTVvYVdSbEtDazdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmlZbTk0TzF4dUlDQWdJSDA3WEc0Z0lDQWdMeXBjWEZ4dUlDQWdJQ0FxSUVWc1pXMWxiblF1WVhSMGNseHVJQ0FnSUNCYklHMWxkR2h2WkNCZFhHNGdJQ0FnSUNvcVhHNGdJQ0FnSUNvZ1UyVjBjeUIwYUdVZ1lYUjBjbWxpZFhSbGN5QnZaaUIwYUdVZ1pXeGxiV1Z1ZEM1Y2JpQWdJQ0FnUGlCUVlYSmhiV1YwWlhKelhHNGdJQ0FnSUMwZ1lYUjBjazVoYldVZ0tITjBjbWx1WnlrZ1lYUjBjbWxpZFhSbDRvQ1pjeUJ1WVcxbFhHNGdJQ0FnSUMwZ2RtRnNkV1VnS0hOMGNtbHVaeWtnZG1Gc2RXVmNiaUFnSUNBZ0tpQnZjbHh1SUNBZ0lDQXRJSEJoY21GdGN5QW9iMkpxWldOMEtTQnZZbXBsWTNRZ2IyWWdibUZ0WlM5MllXeDFaU0J3WVdseWMxeHVJQ0FnSUNBcUlHOXlYRzRnSUNBZ0lDMGdZWFIwY2s1aGJXVWdLSE4wY21sdVp5a2dZWFIwY21saWRYUmw0b0NaY3lCdVlXMWxYRzRnSUNBZ0lDb2diM0pjYmlBZ0lDQWdMU0JoZEhSeVRtRnRaWE1nS0dGeWNtRjVLU0JwYmlCMGFHbHpJR05oYzJVZ2JXVjBhRzlrSUhKbGRIVnlibk1nWVhKeVlYa2diMllnWTNWeWNtVnVkQ0IyWVd4MVpYTWdabTl5SUdkcGRtVnVJR0YwZEhKcFluVjBaU0J1WVcxbGMxeHVJQ0FnSUNBOUlDaHZZbXBsWTNRcElFQkZiR1Z0Wlc1MElHbG1JR0YwZEhKelRtRnRaU0FtSUhaaGJIVmxJRzl5SUhCaGNtRnRjeUJoY21VZ2NHRnpjMlZrSUdsdUxseHVJQ0FnSUNBOUlDZ3VMaTRwSUhaaGJIVmxJRzltSUhSb1pTQmhkSFJ5YVdKMWRHVWdhV1lnYjI1c2VTQmhkSFJ5YzA1aGJXVWdhWE1nY0dGemMyVmtJR2x1TGx4dUlDQWdJQ0E5SUNoaGNuSmhlU2tnWVhKeVlYa2diMllnZG1Gc2RXVnpJRzltSUhSb1pTQmhkSFJ5YVdKMWRHVWdhV1lnWVhSMGNuTk9ZVzFsY3lCcGN5QndZWE56WldRZ2FXNHVYRzRnSUNBZ0lEMGdLRzlpYW1WamRDa2diMkpxWldOMElHOW1JR0YwZEhKcFluVjBaWE1nYVdZZ2JtOTBhR2x1WnlCcGN5QndZWE56WldRZ2FXNHVYRzRnSUNBZ0lENGdVRzl6YzJsaWJHVWdjR0Z5WVcxbGRHVnljMXh1SUNBZ0lDQWpJRHh3UGxCc1pXRnpaU0J5WldabGNpQjBieUIwYUdVZ1BHRWdhSEpsWmoxY0ltaDBkSEE2THk5M2QzY3Vkek11YjNKbkwxUlNMMU5XUnk5Y0lpQjBhWFJzWlQxY0lsUm9aU0JYTTBNZ1VtVmpiMjF0Wlc1a1lYUnBiMjRnWm05eUlIUm9aU0JUVmtjZ2JHRnVaM1ZoWjJVZ1pHVnpZM0pwWW1WeklIUm9aWE5sSUhCeWIzQmxjblJwWlhNZ2FXNGdaR1YwWVdsc0xsd2lQbE5XUnlCemNHVmphV1pwWTJGMGFXOXVQQzloUGlCbWIzSWdZVzRnWlhod2JHRnVZWFJwYjI0Z2IyWWdkR2hsYzJVZ2NHRnlZVzFsZEdWeWN5NDhMM0ErWEc0Z0lDQWdJRzhnWVhKeWIzY3RaVzVrSUNoemRISnBibWNwSUdGeWNtOTNhR1ZoWkNCdmJpQjBhR1VnWlc1a0lHOW1JSFJvWlNCd1lYUm9MaUJVYUdVZ1ptOXliV0YwSUdadmNpQnpkSEpwYm1jZ2FYTWdZRHgwZVhCbFBsc3RQSGRwWkhSb1Bsc3RQR3hsYm1kMGFENWRYV0F1SUZCdmMzTnBZbXhsSUhSNWNHVnpPaUJnWTJ4aGMzTnBZMkFzSUdCaWJHOWphMkFzSUdCdmNHVnVZQ3dnWUc5MllXeGdMQ0JnWkdsaGJXOXVaR0FzSUdCdWIyNWxZQ3dnZDJsa2RHZzZJR0IzYVdSbFlDd2dZRzVoY25KdmQyQXNJR0J0WldScGRXMWdMQ0JzWlc1bmRHZzZJR0JzYjI1bllDd2dZSE5vYjNKMFlDd2dZRzFwWkdsMWJXQXVYRzRnSUNBZ0lHOGdZMnhwY0MxeVpXTjBJQ2h6ZEhKcGJtY3BJR052YlcxaElHOXlJSE53WVdObElITmxjR0Z5WVhSbFpDQjJZV3gxWlhNNklIZ3NJSGtzSUhkcFpIUm9JR0Z1WkNCb1pXbG5hSFJjYmlBZ0lDQWdieUJqZFhKemIzSWdLSE4wY21sdVp5a2dRMU5USUhSNWNHVWdiMllnZEdobElHTjFjbk52Y2x4dUlDQWdJQ0J2SUdONElDaHVkVzFpWlhJcElIUm9aU0I0TFdGNGFYTWdZMjl2Y21ScGJtRjBaU0J2WmlCMGFHVWdZMlZ1ZEdWeUlHOW1JSFJvWlNCamFYSmpiR1VzSUc5eUlHVnNiR2x3YzJWY2JpQWdJQ0FnYnlCamVTQW9iblZ0WW1WeUtTQjBhR1VnZVMxaGVHbHpJR052YjNKa2FXNWhkR1VnYjJZZ2RHaGxJR05sYm5SbGNpQnZaaUIwYUdVZ1kybHlZMnhsTENCdmNpQmxiR3hwY0hObFhHNGdJQ0FnSUc4Z1ptbHNiQ0FvYzNSeWFXNW5LU0JqYjJ4dmRYSXNJR2R5WVdScFpXNTBJRzl5SUdsdFlXZGxYRzRnSUNBZ0lHOGdabWxzYkMxdmNHRmphWFI1SUNodWRXMWlaWElwWEc0Z0lDQWdJRzhnWm05dWRDQW9jM1J5YVc1bktWeHVJQ0FnSUNCdklHWnZiblF0Wm1GdGFXeDVJQ2h6ZEhKcGJtY3BYRzRnSUNBZ0lHOGdabTl1ZEMxemFYcGxJQ2h1ZFcxaVpYSXBJR1p2Ym5RZ2MybDZaU0JwYmlCd2FYaGxiSE5jYmlBZ0lDQWdieUJtYjI1MExYZGxhV2RvZENBb2MzUnlhVzVuS1Z4dUlDQWdJQ0J2SUdobGFXZG9kQ0FvYm5WdFltVnlLVnh1SUNBZ0lDQnZJR2h5WldZZ0tITjBjbWx1WnlrZ1ZWSk1MQ0JwWmlCemNHVmphV1pwWldRZ1pXeGxiV1Z1ZENCaVpXaGhkbVZ6SUdGeklHaDVjR1Z5YkdsdWExeHVJQ0FnSUNCdklHOXdZV05wZEhrZ0tHNTFiV0psY2lsY2JpQWdJQ0FnYnlCd1lYUm9JQ2h6ZEhKcGJtY3BJRk5XUnlCd1lYUm9JSE4wY21sdVp5Qm1iM0p0WVhSY2JpQWdJQ0FnYnlCeUlDaHVkVzFpWlhJcElISmhaR2wxY3lCdlppQjBhR1VnWTJseVkyeGxMQ0JsYkd4cGNITmxJRzl5SUhKdmRXNWtaV1FnWTI5eWJtVnlJRzl1SUhSb1pTQnlaV04wWEc0Z0lDQWdJRzhnY25nZ0tHNTFiV0psY2lrZ2FHOXlhWE52Ym5SaGJDQnlZV1JwZFhNZ2IyWWdkR2hsSUdWc2JHbHdjMlZjYmlBZ0lDQWdieUJ5ZVNBb2JuVnRZbVZ5S1NCMlpYSjBhV05oYkNCeVlXUnBkWE1nYjJZZ2RHaGxJR1ZzYkdsd2MyVmNiaUFnSUNBZ2J5QnpjbU1nS0hOMGNtbHVaeWtnYVcxaFoyVWdWVkpNTENCdmJteDVJSGR2Y210eklHWnZjaUJBUld4bGJXVnVkQzVwYldGblpTQmxiR1Z0Wlc1MFhHNGdJQ0FnSUc4Z2MzUnliMnRsSUNoemRISnBibWNwSUhOMGNtOXJaU0JqYjJ4dmRYSmNiaUFnSUNBZ2J5QnpkSEp2YTJVdFpHRnphR0Z5Y21GNUlDaHpkSEpwYm1jcElGdmlnSnppZ0owc0lPS0FuRzV2Ym1YaWdKMHNJT0tBbkdBdFlPS0FuU3dnNG9DY1lDNWc0b0NkTENEaWdKeGdMUzVnNG9DZExDRGlnSnhnTFM0dVlPS0FuU3dnNG9DY1lDNGdZT0tBblN3ZzRvQ2NZQzBnWU9LQW5Td2c0b0NjWUMwdFlPS0FuU3dnNG9DY1lDMGdMbURpZ0owc0lPS0FuR0F0TFM1ZzRvQ2RMQ0RpZ0p4Z0xTMHVMbURpZ0oxZFhHNGdJQ0FnSUc4Z2MzUnliMnRsTFd4cGJtVmpZWEFnS0hOMGNtbHVaeWtnVytLQW5HQmlkWFIwWU9LQW5Td2c0b0NjWUhOeGRXRnlaV0RpZ0owc0lPS0FuR0J5YjNWdVpHRGlnSjFkWEc0Z0lDQWdJRzhnYzNSeWIydGxMV3hwYm1WcWIybHVJQ2h6ZEhKcGJtY3BJRnZpZ0p4Z1ltVjJaV3hnNG9DZExDRGlnSnhnY205MWJtUmc0b0NkTENEaWdKeGdiV2wwWlhKZzRvQ2RYVnh1SUNBZ0lDQnZJSE4wY205clpTMXRhWFJsY214cGJXbDBJQ2h1ZFcxaVpYSXBYRzRnSUNBZ0lHOGdjM1J5YjJ0bExXOXdZV05wZEhrZ0tHNTFiV0psY2lsY2JpQWdJQ0FnYnlCemRISnZhMlV0ZDJsa2RHZ2dLRzUxYldKbGNpa2djM1J5YjJ0bElIZHBaSFJvSUdsdUlIQnBlR1ZzY3l3Z1pHVm1ZWFZzZENCcGN5QW5NU2RjYmlBZ0lDQWdieUIwWVhKblpYUWdLSE4wY21sdVp5a2dkWE5sWkNCM2FYUm9JR2h5WldaY2JpQWdJQ0FnYnlCMFpYaDBJQ2h6ZEhKcGJtY3BJR052Ym5SbGJuUnpJRzltSUhSb1pTQjBaWGgwSUdWc1pXMWxiblF1SUZWelpTQmdYRnh1WUNCbWIzSWdiWFZzZEdsc2FXNWxJSFJsZUhSY2JpQWdJQ0FnYnlCMFpYaDBMV0Z1WTJodmNpQW9jM1J5YVc1bktTQmI0b0NjWUhOMFlYSjBZT0tBblN3ZzRvQ2NZRzFwWkdSc1pXRGlnSjBzSU9LQW5HQmxibVJnNG9DZFhTd2daR1ZtWVhWc2RDQnBjeURpZ0p4Z2JXbGtaR3hsWU9LQW5WeHVJQ0FnSUNCdklIUnBkR3hsSUNoemRISnBibWNwSUhkcGJHd2dZM0psWVhSbElIUnZiMngwYVhBZ2QybDBhQ0JoSUdkcGRtVnVJSFJsZUhSY2JpQWdJQ0FnYnlCMGNtRnVjMlp2Y20wZ0tITjBjbWx1WnlrZ2MyVmxJRUJGYkdWdFpXNTBMblJ5WVc1elptOXliVnh1SUNBZ0lDQnZJSGRwWkhSb0lDaHVkVzFpWlhJcFhHNGdJQ0FnSUc4Z2VDQW9iblZ0WW1WeUtWeHVJQ0FnSUNCdklIa2dLRzUxYldKbGNpbGNiaUFnSUNBZ1BpQkhjbUZrYVdWdWRITmNiaUFnSUNBZ0tpQk1hVzVsWVhJZ1ozSmhaR2xsYm5RZ1ptOXliV0YwT2lEaWdKeGc0b0M1WVc1bmJHWGlnTG90NG9DNVkyOXNiM1Z5NG9DNld5M2lnTGxqYjJ4dmRYTGlnTHBiT3VLQXVXOW1abk5sZE9LQXVsMWRLaTNpZ0xsamIyeHZkWExpZ0xwZzRvQ2RMQ0JsZUdGdGNHeGxPaURpZ0p4Z09UQXRJMlptWmkwak1EQXdZT0tBblNEaWdKTWdPVERDc0Z4dUlDQWdJQ0FxSUdkeVlXUnBaVzUwSUdaeWIyMGdkMmhwZEdVZ2RHOGdZbXhoWTJzZ2IzSWc0b0NjWURBdEkyWm1aaTBqWmpBd09qSXdMU013TURCZzRvQ2RJT0tBa3lBd3dyQWdaM0poWkdsbGJuUWdabkp2YlNCM2FHbDBaU0IyYVdFZ2NtVmtJQ2hoZENBeU1DVXBJSFJ2SUdKc1lXTnJMbHh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2djbUZrYVdGc0lHZHlZV1JwWlc1ME9pRGlnSnhnY2xzbzRvQzVabmppZ0xvc0lPS0F1V1o1NG9DNktWM2lnTGxqYjJ4dmRYTGlnTHBiTGVLQXVXTnZiRzkxY3VLQXVsczY0b0M1YjJabWMyVjA0b0M2WFYwcUxlS0F1V052Ykc5MWN1S0F1bURpZ0owc0lHVjRZVzF3YkdVNklPS0FuR0J5STJabVppMGpNREF3WU9LQW5TRGlnSk5jYmlBZ0lDQWdLaUJuY21Ga2FXVnVkQ0JtY205dElIZG9hWFJsSUhSdklHSnNZV05ySUc5eUlPS0FuR0J5S0RBdU1qVXNJREF1TnpVcEkyWm1aaTBqTURBd1lPS0FuU0RpZ0pNZ1ozSmhaR2xsYm5RZ1puSnZiU0IzYUdsMFpTQjBieUJpYkdGamF5QjNhWFJvSUdadlkzVnpJSEJ2YVc1MFhHNGdJQ0FnSUNvZ1lYUWdNQzR5TlN3Z01DNDNOUzRnUm05amRYTWdjRzlwYm5RZ1kyOXZjbVJwYm1GMFpYTWdZWEpsSUdsdUlEQXVMakVnY21GdVoyVXVJRkpoWkdsaGJDQm5jbUZrYVdWdWRITWdZMkZ1SUc5dWJIa2dZbVVnWVhCd2JHbGxaQ0IwYnlCamFYSmpiR1Z6SUdGdVpDQmxiR3hwY0hObGN5NWNiaUFnSUNBZ1BpQlFZWFJvSUZOMGNtbHVaMXh1SUNBZ0lDQWpJRHh3UGxCc1pXRnpaU0J5WldabGNpQjBieUE4WVNCb2NtVm1QVndpYUhSMGNEb3ZMM2QzZHk1M015NXZjbWN2VkZJdlUxWkhMM0JoZEdoekxtaDBiV3dqVUdGMGFFUmhkR0ZjSWlCMGFYUnNaVDFjSWtSbGRHRnBiSE1nYjJZZ1lTQndZWFJvNG9DWmN5QmtZWFJoSUdGMGRISnBZblYwWmVLQW1YTWdabTl5YldGMElHRnlaU0JrWlhOamNtbGlaV1FnYVc0Z2RHaGxJRk5XUnlCemNHVmphV1pwWTJGMGFXOXVMbHdpUGxOV1J5QmtiMk4xYldWdWRHRjBhVzl1SUhKbFoyRnlaR2x1WnlCd1lYUm9JSE4wY21sdVp6d3ZZVDR1SUZKaGNHaGh3NnRzSUdaMWJHeDVJSE4xY0hCdmNuUnpJR2wwTGp3dmNENWNiaUFnSUNBZ1BpQkRiMnh2ZFhJZ1VHRnljMmx1WjF4dUlDQWdJQ0FqSUR4MWJENWNiaUFnSUNBZ0l5QWdJQ0FnUEd4cFBrTnZiRzkxY2lCdVlXMWxJQ2ppZ0p3OFkyOWtaVDV5WldROEwyTnZaR1UrNG9DZExDRGlnSnc4WTI5a1pUNW5jbVZsYmp3dlkyOWtaVDdpZ0owc0lPS0FuRHhqYjJSbFBtTnZjbTVtYkc5M1pYSmliSFZsUEM5amIyUmxQdUtBblN3Z1pYUmpLVHd2YkdrK1hHNGdJQ0FnSUNNZ0lDQWdJRHhzYVQ0ajRvQ2k0b0NpNG9DaUlPS0FsQ0J6YUc5eWRHVnVaV1FnU0ZSTlRDQmpiMnh2ZFhJNklDamlnSnc4WTI5a1pUNGpNREF3UEM5amIyUmxQdUtBblN3ZzRvQ2NQR052WkdVK0kyWmpNRHd2WTI5a1pUN2lnSjBzSUdWMFl5azhMMnhwUGx4dUlDQWdJQ0FqSUNBZ0lDQThiR2srSStLQW91S0FvdUtBb3VLQW91S0FvdUtBb2lEaWdKUWdablZzYkNCc1pXNW5kR2dnU0ZSTlRDQmpiMnh2ZFhJNklDamlnSnc4WTI5a1pUNGpNREF3TURBd1BDOWpiMlJsUHVLQW5Td2c0b0NjUEdOdlpHVStJMkprTWpNd01Ed3ZZMjlrWlQ3aWdKMHBQQzlzYVQ1Y2JpQWdJQ0FnSXlBZ0lDQWdQR3hwUG5KbllpamlnS0xpZ0tMaWdLSXNJT0tBb3VLQW91S0FvaXdnNG9DaTRvQ2k0b0NpS1NEaWdKUWdjbVZrTENCbmNtVmxiaUJoYm1RZ1lteDFaU0JqYUdGdWJtVnNjK0tBbVNCMllXeDFaWE02SUNqaWdKdzhZMjlrWlQ1eVoySW9NakF3TENadVluTndPekV3TUN3bWJtSnpjRHN3S1R3dlkyOWtaVDdpZ0owcFBDOXNhVDVjYmlBZ0lDQWdJeUFnSUNBZ1BHeHBQbkpuWWlqaWdLTGlnS0xpZ0tJbExDRGlnS0xpZ0tMaWdLSWxMQ0RpZ0tMaWdLTGlnS0lsS1NEaWdKUWdjMkZ0WlNCaGN5QmhZbTkyWlN3Z1luVjBJR2x1SUNVNklDamlnSnc4WTI5a1pUNXlaMklvTVRBd0pTd21ibUp6Y0RzeE56VWxMQ1p1WW5Od096QWxLVHd2WTI5a1pUN2lnSjBwUEM5c2FUNWNiaUFnSUNBZ0l5QWdJQ0FnUEd4cFBuSm5ZbUVvNG9DaTRvQ2k0b0NpTENEaWdLTGlnS0xpZ0tJc0lPS0FvdUtBb3VLQW9pd2c0b0NpNG9DaTRvQ2lLU0RpZ0pRZ2NtVmtMQ0JuY21WbGJpQmhibVFnWW14MVpTQmphR0Z1Ym1Wc2MrS0FtU0IyWVd4MVpYTTZJQ2ppZ0p3OFkyOWtaVDV5WjJKaEtESXdNQ3dtYm1KemNEc3hNREFzSm01aWMzQTdNQ3dnTGpVcFBDOWpiMlJsUHVLQW5TazhMMnhwUGx4dUlDQWdJQ0FqSUNBZ0lDQThiR2srY21kaVlTamlnS0xpZ0tMaWdLSWxMQ0RpZ0tMaWdLTGlnS0lsTENEaWdLTGlnS0xpZ0tJbExDRGlnS0xpZ0tMaWdLSWxLU0RpZ0pRZ2MyRnRaU0JoY3lCaFltOTJaU3dnWW5WMElHbHVJQ1U2SUNqaWdKdzhZMjlrWlQ1eVoySmhLREV3TUNVc0ptNWljM0E3TVRjMUpTd21ibUp6Y0Rzd0pTd2dOVEFsS1R3dlkyOWtaVDdpZ0owcFBDOXNhVDVjYmlBZ0lDQWdJeUFnSUNBZ1BHeHBQbWh6WWlqaWdLTGlnS0xpZ0tJc0lPS0FvdUtBb3VLQW9pd2c0b0NpNG9DaTRvQ2lLU0RpZ0pRZ2FIVmxMQ0J6WVhSMWNtRjBhVzl1SUdGdVpDQmljbWxuYUhSdVpYTnpJSFpoYkhWbGN6b2dLT0tBbkR4amIyUmxQbWh6WWlnd0xqVXNKbTVpYzNBN01DNHlOU3dtYm1KemNEc3hLVHd2WTI5a1pUN2lnSjBwUEM5c2FUNWNiaUFnSUNBZ0l5QWdJQ0FnUEd4cFBtaHpZaWppZ0tMaWdLTGlnS0lsTENEaWdLTGlnS0xpZ0tJbExDRGlnS0xpZ0tMaWdLSWxLU0RpZ0pRZ2MyRnRaU0JoY3lCaFltOTJaU3dnWW5WMElHbHVJQ1U4TDJ4cFBseHVJQ0FnSUNBaklDQWdJQ0E4YkdrK2FITmlZU2ppZ0tMaWdLTGlnS0lzSU9LQW91S0FvdUtBb2l3ZzRvQ2k0b0NpNG9DaUxDRGlnS0xpZ0tMaWdLSXBJT0tBbENCellXMWxJR0Z6SUdGaWIzWmxMQ0JpZFhRZ2QybDBhQ0J2Y0dGamFYUjVQQzlzYVQ1Y2JpQWdJQ0FnSXlBZ0lDQWdQR3hwUG1oemJDamlnS0xpZ0tMaWdLSXNJT0tBb3VLQW91S0FvaXdnNG9DaTRvQ2k0b0NpS1NEaWdKUWdZV3h0YjNOMElIUm9aU0J6WVcxbElHRnpJR2h6WWl3Z2MyVmxJRHhoSUdoeVpXWTlYQ0pvZEhSd09pOHZaVzR1ZDJscmFYQmxaR2xoTG05eVp5OTNhV3RwTDBoVFRGOWhibVJmU0ZOV1hDSWdkR2wwYkdVOVhDSklVMHdnWVc1a0lFaFRWaUF0SUZkcGEybHdaV1JwWVN3Z2RHaGxJR1p5WldVZ1pXNWplV05zYjNCbFpHbGhYQ0krVjJscmFYQmxaR2xoSUhCaFoyVThMMkUrUEM5c2FUNWNiaUFnSUNBZ0l5QWdJQ0FnUEd4cFBtaHpiQ2ppZ0tMaWdLTGlnS0lsTENEaWdLTGlnS0xpZ0tJbExDRGlnS0xpZ0tMaWdLSWxLU0RpZ0pRZ2MyRnRaU0JoY3lCaFltOTJaU3dnWW5WMElHbHVJQ1U4TDJ4cFBseHVJQ0FnSUNBaklDQWdJQ0E4YkdrK2FITnNZU2ppZ0tMaWdLTGlnS0lzSU9LQW91S0FvdUtBb2l3ZzRvQ2k0b0NpNG9DaUxDRGlnS0xpZ0tMaWdLSXBJT0tBbENCellXMWxJR0Z6SUdGaWIzWmxMQ0JpZFhRZ2QybDBhQ0J2Y0dGamFYUjVQQzlzYVQ1Y2JpQWdJQ0FnSXlBZ0lDQWdQR3hwUGs5d2RHbHZibUZzYkhrZ1ptOXlJR2h6WWlCaGJtUWdhSE5zSUhsdmRTQmpiM1ZzWkNCemNHVmphV1o1SUdoMVpTQmhjeUJoSUdSbFozSmxaVG9nNG9DY1BHTnZaR1UrYUhOc0tESTBNR1JsWnl3bWJtSnpjRHN4TENadVluTndPeTQxS1R3dlkyOWtaVDdpZ0owZ2IzSXNJR2xtSUhsdmRTQjNZVzUwSUhSdklHZHZJR1poYm1ONUxDRGlnSnc4WTI5a1pUNW9jMndvTWpRd3dyQXNKbTVpYzNBN01Td21ibUp6Y0RzdU5TazhMMk52WkdVKzRvQ2RQQzlzYVQ1Y2JpQWdJQ0FnSXlBOEwzVnNQbHh1SUNBZ0lGeGNLaTljYmlBZ0lDQmxiSEJ5YjNSdkxtRjBkSElnUFNCbWRXNWpkR2x2YmlBb2JtRnRaU3dnZG1Gc2RXVXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11Y21WdGIzWmxaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2FXWWdLRzVoYldVZ1BUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlISmxjeUE5SUh0OU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWm05eUlDaDJZWElnWVNCcGJpQjBhR2x6TG1GMGRISnpLU0JwWmlBb2RHaHBjeTVoZEhSeWMxdG9ZWE5kS0dFcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZ6VzJGZElEMGdkR2hwY3k1aGRIUnljMXRoWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxjeTVuY21Ga2FXVnVkQ0FtSmlCeVpYTXVabWxzYkNBOVBTQmNJbTV2Ym1WY0lpQW1KaUFvY21WekxtWnBiR3dnUFNCeVpYTXVaM0poWkdsbGJuUXBJQ1ltSUdSbGJHVjBaU0J5WlhNdVozSmhaR2xsYm5RN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhNdWRISmhibk5tYjNKdElEMGdkR2hwY3k1ZkxuUnlZVzV6Wm05eWJUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ5WlhNN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lnS0haaGJIVmxJRDA5SUc1MWJHd2dKaVlnVWk1cGN5aHVZVzFsTENCY0luTjBjbWx1WjF3aUtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRzVoYldVZ1BUMGdYQ0ptYVd4c1hDSWdKaVlnZEdocGN5NWhkSFJ5Y3k1bWFXeHNJRDA5SUZ3aWJtOXVaVndpSUNZbUlIUm9hWE11WVhSMGNuTXVaM0poWkdsbGJuUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1aGRIUnljeTVuY21Ga2FXVnVkRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHVZVzFsSUQwOUlGd2lkSEpoYm5ObWIzSnRYQ0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZMblJ5WVc1elptOXliVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQnVZVzFsY3lBOUlHNWhiV1V1YzNCc2FYUW9jMlZ3WVhKaGRHOXlLU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J2ZFhRZ1BTQjdmVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3TENCcGFTQTlJRzVoYldWekxteGxibWQwYURzZ2FTQThJR2xwT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J1WVcxbElEMGdibUZ0WlhOYmFWMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0c1aGJXVWdhVzRnZEdocGN5NWhkSFJ5Y3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J2ZFhSYmJtRnRaVjBnUFNCMGFHbHpMbUYwZEhKelcyNWhiV1ZkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb1VpNXBjeWgwYUdsekxuQmhjR1Z5TG1OMWMzUnZiVUYwZEhKcFluVjBaWE5iYm1GdFpWMHNJRndpWm5WdVkzUnBiMjVjSWlrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYjNWMFcyNWhiV1ZkSUQwZ2RHaHBjeTV3WVhCbGNpNWpkWE4wYjIxQmRIUnlhV0oxZEdWelcyNWhiV1ZkTG1SbFpqdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J2ZFhSYmJtRnRaVjBnUFNCU0xsOWhkbUZwYkdGaWJHVkJkSFJ5YzF0dVlXMWxYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYVdrZ0xTQXhJRDhnYjNWMElEb2diM1YwVzI1aGJXVnpXekJkWFR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvZG1Gc2RXVWdQVDBnYm5Wc2JDQW1KaUJTTG1sektHNWhiV1VzSUZ3aVlYSnlZWGxjSWlrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUc5MWRDQTlJSHQ5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdabTl5SUNocElEMGdNQ3dnYVdrZ1BTQnVZVzFsTG14bGJtZDBhRHNnYVNBOElHbHBPeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZkWFJiYm1GdFpWdHBYVjBnUFNCMGFHbHpMbUYwZEhJb2JtRnRaVnRwWFNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2IzVjBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUlDaDJZV3gxWlNBaFBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2NHRnlZVzF6SUQwZ2UzMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCd1lYSmhiWE5iYm1GdFpWMGdQU0IyWVd4MVpUdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2h1WVcxbElDRTlJRzUxYkd3Z0ppWWdVaTVwY3lodVlXMWxMQ0JjSW05aWFtVmpkRndpS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY0dGeVlXMXpJRDBnYm1GdFpUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJyWlhrZ2FXNGdjR0Z5WVcxektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCbGRtVW9YQ0p5WVhCb1lXVnNMbUYwZEhJdVhDSWdLeUJyWlhrZ0t5QmNJaTVjSWlBcklIUm9hWE11YVdRc0lIUm9hWE1zSUhCaGNtRnRjMXRyWlhsZEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JtYjNJZ0tHdGxlU0JwYmlCMGFHbHpMbkJoY0dWeUxtTjFjM1J2YlVGMGRISnBZblYwWlhNcElHbG1JQ2gwYUdsekxuQmhjR1Z5TG1OMWMzUnZiVUYwZEhKcFluVjBaWE5iYUdGelhTaHJaWGtwSUNZbUlIQmhjbUZ0YzF0b1lYTmRLR3RsZVNrZ0ppWWdVaTVwY3loMGFHbHpMbkJoY0dWeUxtTjFjM1J2YlVGMGRISnBZblYwWlhOYmEyVjVYU3dnWENKbWRXNWpkR2x2Ymx3aUtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSEJoY2lBOUlIUm9hWE11Y0dGd1pYSXVZM1Z6ZEc5dFFYUjBjbWxpZFhSbGMxdHJaWGxkTG1Gd2NHeDVLSFJvYVhNc0lGdGRMbU52Ym1OaGRDaHdZWEpoYlhOYmEyVjVYU2twTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1aGRIUnljMXRyWlhsZElEMGdjR0Z5WVcxelcydGxlVjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnpkV0pyWlhrZ2FXNGdjR0Z5S1NCcFppQW9jR0Z5VzJoaGMxMG9jM1ZpYTJWNUtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJoY21GdGMxdHpkV0pyWlhsZElEMGdjR0Z5VzNOMVltdGxlVjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYzJWMFJtbHNiRUZ1WkZOMGNtOXJaU2gwYUdsekxDQndZWEpoYlhNcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjenRjYmlBZ0lDQjlPMXh1SUNBZ0lDOHFYRnhjYmlBZ0lDQWdLaUJGYkdWdFpXNTBMblJ2Um5KdmJuUmNiaUFnSUNBZ1d5QnRaWFJvYjJRZ1hWeHVJQ0FnSUNBcUtseHVJQ0FnSUNBcUlFMXZkbVZ6SUhSb1pTQmxiR1Z0Wlc1MElITnZJR2wwSUdseklIUm9aU0JqYkc5elpYTjBJSFJ2SUhSb1pTQjJhV1YzWlhMaWdKbHpJR1Y1WlhNc0lHOXVJSFJ2Y0NCdlppQnZkR2hsY2lCbGJHVnRaVzUwY3k1Y2JpQWdJQ0FnUFNBb2IySnFaV04wS1NCQVJXeGxiV1Z1ZEZ4dUlDQWdJRnhjS2k5Y2JpQWdJQ0JsYkhCeWIzUnZMblJ2Um5KdmJuUWdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxuSmxiVzkyWldRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSFpoY2lCdWIyUmxJRDBnWjJWMFVtVmhiRTV2WkdVb2RHaHBjeTV1YjJSbEtUdGNiaUFnSUNBZ0lDQWdibTlrWlM1d1lYSmxiblJPYjJSbExtRndjR1Z1WkVOb2FXeGtLRzV2WkdVcE8xeHVJQ0FnSUNBZ0lDQjJZWElnYzNabklEMGdkR2hwY3k1d1lYQmxjanRjYmlBZ0lDQWdJQ0FnYzNabkxuUnZjQ0FoUFNCMGFHbHpJQ1ltSUZJdVgzUnZabkp2Ym5Rb2RHaHBjeXdnYzNabktUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03WEc0Z0lDQWdmVHRjYmlBZ0lDQXZLbHhjWEc0Z0lDQWdJQ29nUld4bGJXVnVkQzUwYjBKaFkydGNiaUFnSUNBZ1d5QnRaWFJvYjJRZ1hWeHVJQ0FnSUNBcUtseHVJQ0FnSUNBcUlFMXZkbVZ6SUhSb1pTQmxiR1Z0Wlc1MElITnZJR2wwSUdseklIUm9aU0JtZFhKMGFHVnpkQ0JtY205dElIUm9aU0IyYVdWM1pYTGlnSmx6SUdWNVpYTXNJR0psYUdsdVpDQnZkR2hsY2lCbGJHVnRaVzUwY3k1Y2JpQWdJQ0FnUFNBb2IySnFaV04wS1NCQVJXeGxiV1Z1ZEZ4dUlDQWdJRnhjS2k5Y2JpQWdJQ0JsYkhCeWIzUnZMblJ2UW1GamF5QTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWNtVnRiM1psWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkbUZ5SUc1dlpHVWdQU0JuWlhSU1pXRnNUbTlrWlNoMGFHbHpMbTV2WkdVcE8xeHVJQ0FnSUNBZ0lDQjJZWElnY0dGeVpXNTBUbTlrWlNBOUlHNXZaR1V1Y0dGeVpXNTBUbTlrWlR0Y2JpQWdJQ0FnSUNBZ2NHRnlaVzUwVG05a1pTNXBibk5sY25SQ1pXWnZjbVVvYm05a1pTd2djR0Z5Wlc1MFRtOWtaUzVtYVhKemRFTm9hV3hrS1R0Y2JpQWdJQ0FnSUNBZ1VpNWZkRzlpWVdOcktIUm9hWE1zSUhSb2FYTXVjR0Z3WlhJcE8xeHVJQ0FnSUNBZ0lDQjJZWElnYzNabklEMGdkR2hwY3k1d1lYQmxjanRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNGdJQ0FnZlR0Y2JpQWdJQ0F2S2x4Y1hHNGdJQ0FnSUNvZ1JXeGxiV1Z1ZEM1cGJuTmxjblJCWm5SbGNseHVJQ0FnSUNCYklHMWxkR2h2WkNCZFhHNGdJQ0FnSUNvcVhHNGdJQ0FnSUNvZ1NXNXpaWEowY3lCamRYSnlaVzUwSUc5aWFtVmpkQ0JoWm5SbGNpQjBhR1VnWjJsMlpXNGdiMjVsTGx4dUlDQWdJQ0E5SUNodlltcGxZM1FwSUVCRmJHVnRaVzUwWEc0Z0lDQWdYRndxTDF4dUlDQWdJR1ZzY0hKdmRHOHVhVzV6WlhKMFFXWjBaWElnUFNCbWRXNWpkR2x2YmlBb1pXeGxiV1Z1ZENrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NXlaVzF2ZG1Wa0lIeDhJQ0ZsYkdWdFpXNTBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjenRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lIWmhjaUJ1YjJSbElEMGdaMlYwVW1WaGJFNXZaR1VvZEdocGN5NXViMlJsS1R0Y2JpQWdJQ0FnSUNBZ2RtRnlJR0ZtZEdWeVRtOWtaU0E5SUdkbGRGSmxZV3hPYjJSbEtHVnNaVzFsYm5RdWJtOWtaU0I4ZkNCbGJHVnRaVzUwVzJWc1pXMWxiblF1YkdWdVozUm9JQzBnTVYwdWJtOWtaU2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaGhablJsY2s1dlpHVXVibVY0ZEZOcFlteHBibWNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR0ZtZEdWeVRtOWtaUzV3WVhKbGJuUk9iMlJsTG1sdWMyVnlkRUpsWm05eVpTaHViMlJsTENCaFpuUmxjazV2WkdVdWJtVjRkRk5wWW14cGJtY3BPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1lXWjBaWEpPYjJSbExuQmhjbVZ1ZEU1dlpHVXVZWEJ3Wlc1a1EyaHBiR1FvYm05a1pTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnVWk1ZmFXNXpaWEowWVdaMFpYSW9kR2hwY3l3Z1pXeGxiV1Z1ZEN3Z2RHaHBjeTV3WVhCbGNpazdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TzF4dUlDQWdJSDA3WEc0Z0lDQWdMeXBjWEZ4dUlDQWdJQ0FxSUVWc1pXMWxiblF1YVc1elpYSjBRbVZtYjNKbFhHNGdJQ0FnSUZzZ2JXVjBhRzlrSUYxY2JpQWdJQ0FnS2lwY2JpQWdJQ0FnS2lCSmJuTmxjblJ6SUdOMWNuSmxiblFnYjJKcVpXTjBJR0psWm05eVpTQjBhR1VnWjJsMlpXNGdiMjVsTGx4dUlDQWdJQ0E5SUNodlltcGxZM1FwSUVCRmJHVnRaVzUwWEc0Z0lDQWdYRndxTDF4dUlDQWdJR1ZzY0hKdmRHOHVhVzV6WlhKMFFtVm1iM0psSUQwZ1puVnVZM1JwYjI0Z0tHVnNaVzFsYm5RcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVjbVZ0YjNabFpDQjhmQ0FoWld4bGJXVnVkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQjJZWElnYm05a1pTQTlJR2RsZEZKbFlXeE9iMlJsS0hSb2FYTXVibTlrWlNrN1hHNGdJQ0FnSUNBZ0lIWmhjaUJpWldadmNtVk9iMlJsSUQwZ1oyVjBVbVZoYkU1dlpHVW9aV3hsYldWdWRDNXViMlJsSUh4OElHVnNaVzFsYm5SYk1GMHVibTlrWlNrN1hHNGdJQ0FnSUNBZ0lHSmxabTl5WlU1dlpHVXVjR0Z5Wlc1MFRtOWtaUzVwYm5ObGNuUkNaV1p2Y21Vb2JtOWtaU3dnWW1WbWIzSmxUbTlrWlNrN1hHNGdJQ0FnSUNBZ0lGSXVYMmx1YzJWeWRHSmxabTl5WlNoMGFHbHpMQ0JsYkdWdFpXNTBMQ0IwYUdsekxuQmhjR1Z5S1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTTdYRzRnSUNBZ2ZUdGNiaUFnSUNCbGJIQnliM1J2TG1Kc2RYSWdQU0JtZFc1amRHbHZiaUFvYzJsNlpTa2dlMXh1SUNBZ0lDQWdJQ0F2THlCRmVIQmxjbWx0Wlc1MFlXd3VJRTV2SUZOaFptRnlhU0J6ZFhCd2IzSjBMaUJWYzJVZ2FYUWdiMjRnZVc5MWNpQnZkMjRnY21semF5NWNiaUFnSUNBZ0lDQWdkbUZ5SUhRZ1BTQjBhR2x6TzF4dUlDQWdJQ0FnSUNCcFppQW9LM05wZW1VZ0lUMDlJREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCbWJIUnlJRDBnSkNoY0ltWnBiSFJsY2x3aUtTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmliSFZ5SUQwZ0pDaGNJbVpsUjJGMWMzTnBZVzVDYkhWeVhDSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RDNWhkSFJ5Y3k1aWJIVnlJRDBnYzJsNlpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdac2RISXVhV1FnUFNCU0xtTnlaV0YwWlZWVlNVUW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDUW9ZbXgxY2l3Z2UzTjBaRVJsZG1saGRHbHZiam9nSzNOcGVtVWdmSHdnTVM0MWZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCbWJIUnlMbUZ3Y0dWdVpFTm9hV3hrS0dKc2RYSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RDNXdZWEJsY2k1a1pXWnpMbUZ3Y0dWdVpFTm9hV3hrS0dac2RISXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RDNWZZbXgxY2lBOUlHWnNkSEk3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWtLSFF1Ym05a1pTd2dlMlpwYkhSbGNqb2dYQ0oxY213b0kxd2lJQ3NnWm14MGNpNXBaQ0FySUZ3aUtWd2lmU2s3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEM1ZllteDFjaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhRdVgySnNkWEl1Y0dGeVpXNTBUbTlrWlM1eVpXMXZkbVZEYUdsc1pDaDBMbDlpYkhWeUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtaV3hsZEdVZ2RDNWZZbXgxY2p0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1pXeGxkR1VnZEM1aGRIUnljeTVpYkhWeU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdkQzV1YjJSbExuSmxiVzkyWlVGMGRISnBZblYwWlNoY0ltWnBiSFJsY2x3aUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkRHRjYmlBZ0lDQjlPMXh1SUNBZ0lGSXVYMlZ1WjJsdVpTNWphWEpqYkdVZ1BTQm1kVzVqZEdsdmJpQW9jM1puTENCNExDQjVMQ0J5S1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJsYkNBOUlDUW9YQ0pqYVhKamJHVmNJaWs3WEc0Z0lDQWdJQ0FnSUhOMlp5NWpZVzUyWVhNZ0ppWWdjM1puTG1OaGJuWmhjeTVoY0hCbGJtUkRhR2xzWkNobGJDazdYRzRnSUNBZ0lDQWdJSFpoY2lCeVpYTWdQU0J1WlhjZ1JXeGxiV1Z1ZENobGJDd2djM1puS1R0Y2JpQWdJQ0FnSUNBZ2NtVnpMbUYwZEhKeklEMGdlMk40T2lCNExDQmplVG9nZVN3Z2Nqb2djaXdnWm1sc2JEb2dYQ0p1YjI1bFhDSXNJSE4wY205clpUb2dYQ0lqTURBd1hDSjlPMXh1SUNBZ0lDQWdJQ0J5WlhNdWRIbHdaU0E5SUZ3aVkybHlZMnhsWENJN1hHNGdJQ0FnSUNBZ0lDUW9aV3dzSUhKbGN5NWhkSFJ5Y3lrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCeVpYTTdYRzRnSUNBZ2ZUdGNiaUFnSUNCU0xsOWxibWRwYm1VdWNtVmpkQ0E5SUdaMWJtTjBhVzl1SUNoemRtY3NJSGdzSUhrc0lIY3NJR2dzSUhJcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUdWc0lEMGdKQ2hjSW5KbFkzUmNJaWs3WEc0Z0lDQWdJQ0FnSUhOMlp5NWpZVzUyWVhNZ0ppWWdjM1puTG1OaGJuWmhjeTVoY0hCbGJtUkRhR2xzWkNobGJDazdYRzRnSUNBZ0lDQWdJSFpoY2lCeVpYTWdQU0J1WlhjZ1JXeGxiV1Z1ZENobGJDd2djM1puS1R0Y2JpQWdJQ0FnSUNBZ2NtVnpMbUYwZEhKeklEMGdlM2c2SUhnc0lIazZJSGtzSUhkcFpIUm9PaUIzTENCb1pXbG5hSFE2SUdnc0lISjRPaUJ5SUh4OElEQXNJSEo1T2lCeUlIeDhJREFzSUdacGJHdzZJRndpYm05dVpWd2lMQ0J6ZEhKdmEyVTZJRndpSXpBd01Gd2lmVHRjYmlBZ0lDQWdJQ0FnY21WekxuUjVjR1VnUFNCY0luSmxZM1JjSWp0Y2JpQWdJQ0FnSUNBZ0pDaGxiQ3dnY21WekxtRjBkSEp6S1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhKbGN6dGNiaUFnSUNCOU8xeHVJQ0FnSUZJdVgyVnVaMmx1WlM1bGJHeHBjSE5sSUQwZ1puVnVZM1JwYjI0Z0tITjJaeXdnZUN3Z2VTd2djbmdzSUhKNUtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCbGJDQTlJQ1FvWENKbGJHeHBjSE5sWENJcE8xeHVJQ0FnSUNBZ0lDQnpkbWN1WTJGdWRtRnpJQ1ltSUhOMlp5NWpZVzUyWVhNdVlYQndaVzVrUTJocGJHUW9aV3dwTzF4dUlDQWdJQ0FnSUNCMllYSWdjbVZ6SUQwZ2JtVjNJRVZzWlcxbGJuUW9aV3dzSUhOMlp5azdYRzRnSUNBZ0lDQWdJSEpsY3k1aGRIUnljeUE5SUh0amVEb2dlQ3dnWTNrNklIa3NJSEo0T2lCeWVDd2djbms2SUhKNUxDQm1hV3hzT2lCY0ltNXZibVZjSWl3Z2MzUnliMnRsT2lCY0lpTXdNREJjSW4wN1hHNGdJQ0FnSUNBZ0lISmxjeTUwZVhCbElEMGdYQ0psYkd4cGNITmxYQ0k3WEc0Z0lDQWdJQ0FnSUNRb1pXd3NJSEpsY3k1aGRIUnljeWs3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ5WlhNN1hHNGdJQ0FnZlR0Y2JpQWdJQ0JTTGw5bGJtZHBibVV1YVcxaFoyVWdQU0JtZFc1amRHbHZiaUFvYzNabkxDQnpjbU1zSUhnc0lIa3NJSGNzSUdncElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUdWc0lEMGdKQ2hjSW1sdFlXZGxYQ0lwTzF4dUlDQWdJQ0FnSUNBa0tHVnNMQ0I3ZURvZ2VDd2dlVG9nZVN3Z2QybGtkR2c2SUhjc0lHaGxhV2RvZERvZ2FDd2djSEpsYzJWeWRtVkJjM0JsWTNSU1lYUnBiem9nWENKdWIyNWxYQ0o5S1R0Y2JpQWdJQ0FnSUNBZ1pXd3VjMlYwUVhSMGNtbGlkWFJsVGxNb2VHeHBibXNzSUZ3aWFISmxabHdpTENCemNtTXBPMXh1SUNBZ0lDQWdJQ0J6ZG1jdVkyRnVkbUZ6SUNZbUlITjJaeTVqWVc1MllYTXVZWEJ3Wlc1a1EyaHBiR1FvWld3cE8xeHVJQ0FnSUNBZ0lDQjJZWElnY21WeklEMGdibVYzSUVWc1pXMWxiblFvWld3c0lITjJaeWs3WEc0Z0lDQWdJQ0FnSUhKbGN5NWhkSFJ5Y3lBOUlIdDRPaUI0TENCNU9pQjVMQ0IzYVdSMGFEb2dkeXdnYUdWcFoyaDBPaUJvTENCemNtTTZJSE55WTMwN1hHNGdJQ0FnSUNBZ0lISmxjeTUwZVhCbElEMGdYQ0pwYldGblpWd2lPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbVZ6TzF4dUlDQWdJSDA3WEc0Z0lDQWdVaTVmWlc1bmFXNWxMblJsZUhRZ1BTQm1kVzVqZEdsdmJpQW9jM1puTENCNExDQjVMQ0IwWlhoMEtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCbGJDQTlJQ1FvWENKMFpYaDBYQ0lwTzF4dUlDQWdJQ0FnSUNCemRtY3VZMkZ1ZG1GeklDWW1JSE4yWnk1allXNTJZWE11WVhCd1pXNWtRMmhwYkdRb1pXd3BPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2NtVnpJRDBnYm1WM0lFVnNaVzFsYm5Rb1pXd3NJSE4yWnlrN1hHNGdJQ0FnSUNBZ0lISmxjeTVoZEhSeWN5QTlJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIZzZJSGdzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjVPaUI1TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdYQ0owWlhoMExXRnVZMmh2Y2x3aU9pQmNJbTFwWkdSc1pWd2lMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHVjRkRG9nZEdWNGRDeGNiaUFnSUNBZ0lDQWdJQ0FnSUZ3aVptOXVkQzFtWVcxcGJIbGNJam9nVWk1ZllYWmhhV3hoWW14bFFYUjBjbk5iWENKbWIyNTBMV1poYldsc2VWd2lYU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lGd2labTl1ZEMxemFYcGxYQ0k2SUZJdVgyRjJZV2xzWVdKc1pVRjBkSEp6VzF3aVptOXVkQzF6YVhwbFhDSmRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2MzUnliMnRsT2lCY0ltNXZibVZjSWl4Y2JpQWdJQ0FnSUNBZ0lDQWdJR1pwYkd3NklGd2lJekF3TUZ3aVhHNGdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ0lDQWdJSEpsY3k1MGVYQmxJRDBnWENKMFpYaDBYQ0k3WEc0Z0lDQWdJQ0FnSUhObGRFWnBiR3hCYm1SVGRISnZhMlVvY21WekxDQnlaWE11WVhSMGNuTXBPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbVZ6TzF4dUlDQWdJSDA3WEc0Z0lDQWdVaTVmWlc1bmFXNWxMbk5sZEZOcGVtVWdQU0JtZFc1amRHbHZiaUFvZDJsa2RHZ3NJR2hsYVdkb2RDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuZHBaSFJvSUQwZ2QybGtkR2dnZkh3Z2RHaHBjeTUzYVdSMGFEdGNiaUFnSUNBZ0lDQWdkR2hwY3k1b1pXbG5hSFFnUFNCb1pXbG5hSFFnZkh3Z2RHaHBjeTVvWldsbmFIUTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVkyRnVkbUZ6TG5ObGRFRjBkSEpwWW5WMFpTaGNJbmRwWkhSb1hDSXNJSFJvYVhNdWQybGtkR2dwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbU5oYm5aaGN5NXpaWFJCZEhSeWFXSjFkR1VvWENKb1pXbG5hSFJjSWl3Z2RHaHBjeTVvWldsbmFIUXBPMXh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVmZG1sbGQwSnZlQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1elpYUldhV1YzUW05NExtRndjR3g1S0hSb2FYTXNJSFJvYVhNdVgzWnBaWGRDYjNncE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TzF4dUlDQWdJSDA3WEc0Z0lDQWdVaTVmWlc1bmFXNWxMbU55WldGMFpTQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR052YmlBOUlGSXVYMmRsZEVOdmJuUmhhVzVsY2k1aGNIQnNlU2d3TENCaGNtZDFiV1Z1ZEhNcExGeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWRHRnBibVZ5SUQwZ1kyOXVJQ1ltSUdOdmJpNWpiMjUwWVdsdVpYSTdYRzRnSUNBZ0lDQWdJR2xtSUNnaFkyOXVkR0ZwYm1WeUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWENKVFZrY2dZMjl1ZEdGcGJtVnlJRzV2ZENCbWIzVnVaQzVjSWlrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkbUZ5SUhnZ1BTQmpiMjR1ZUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSGtnUFNCamIyNHVlU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lIZHBaSFJvSUQwZ1kyOXVMbmRwWkhSb0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnYUdWcFoyaDBJRDBnWTI5dUxtaGxhV2RvZEN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR051ZG5NZ1BTQWtLRndpYzNablhDSXBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1kzTnpJRDBnWENKdmRtVnlabXh2ZHpwb2FXUmtaVzQ3WENJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwYzBac2IyRjBhVzVuTzF4dUlDQWdJQ0FnSUNCNElEMGdlQ0I4ZkNBd08xeHVJQ0FnSUNBZ0lDQjVJRDBnZVNCOGZDQXdPMXh1SUNBZ0lDQWdJQ0IzYVdSMGFDQTlJSGRwWkhSb0lIeDhJRFV4TWp0Y2JpQWdJQ0FnSUNBZ2FHVnBaMmgwSUQwZ2FHVnBaMmgwSUh4OElETTBNanRjYmlBZ0lDQWdJQ0FnSkNoamJuWnpMQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQm9aV2xuYUhRNklHaGxhV2RvZEN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpsY25OcGIyNDZJREV1TVN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSGRwWkhSb09pQjNhV1IwYUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSGh0Ykc1ek9pQmNJbWgwZEhBNkx5OTNkM2N1ZHpNdWIzSm5Mekl3TURBdmMzWm5YQ0lzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmNJbmh0Ykc1ek9uaHNhVzVyWENJNklGd2lhSFIwY0RvdkwzZDNkeTUzTXk1dmNtY3ZNVGs1T1M5NGJHbHVhMXdpWEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvWTI5dWRHRnBibVZ5SUQwOUlERXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnVkbk11YzNSNWJHVXVZM056VkdWNGRDQTlJR056Y3lBcklGd2ljRzl6YVhScGIyNDZZV0p6YjJ4MWRHVTdiR1ZtZERwY0lpQXJJSGdnS3lCY0luQjRPM1J2Y0RwY0lpQXJJSGtnS3lCY0luQjRYQ0k3WEc0Z0lDQWdJQ0FnSUNBZ0lDQlNMbDluTG1Sdll5NWliMlI1TG1Gd2NHVnVaRU5vYVd4a0tHTnVkbk1wTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhWE5HYkc5aGRHbHVaeUE5SURFN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYm5aekxuTjBlV3hsTG1OemMxUmxlSFFnUFNCamMzTWdLeUJjSW5CdmMybDBhVzl1T25KbGJHRjBhWFpsWENJN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1kyOXVkR0ZwYm1WeUxtWnBjbk4wUTJocGJHUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1MFlXbHVaWEl1YVc1elpYSjBRbVZtYjNKbEtHTnVkbk1zSUdOdmJuUmhhVzVsY2k1bWFYSnpkRU5vYVd4a0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWRHRnBibVZ5TG1Gd2NHVnVaRU5vYVd4a0tHTnVkbk1wTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdOdmJuUmhhVzVsY2lBOUlHNWxkeUJTTGw5UVlYQmxjanRjYmlBZ0lDQWdJQ0FnWTI5dWRHRnBibVZ5TG5kcFpIUm9JRDBnZDJsa2RHZzdYRzRnSUNBZ0lDQWdJR052Ym5SaGFXNWxjaTVvWldsbmFIUWdQU0JvWldsbmFIUTdYRzRnSUNBZ0lDQWdJR052Ym5SaGFXNWxjaTVqWVc1MllYTWdQU0JqYm5aek8xeHVJQ0FnSUNBZ0lDQmpiMjUwWVdsdVpYSXVZMnhsWVhJb0tUdGNiaUFnSUNBZ0lDQWdZMjl1ZEdGcGJtVnlMbDlzWldaMElEMGdZMjl1ZEdGcGJtVnlMbDkwYjNBZ1BTQXdPMXh1SUNBZ0lDQWdJQ0JwYzBac2IyRjBhVzVuSUNZbUlDaGpiMjUwWVdsdVpYSXVjbVZ1WkdWeVptbDRJRDBnWm5WdVkzUnBiMjRnS0NrZ2UzMHBPMXh1SUNBZ0lDQWdJQ0JqYjI1MFlXbHVaWEl1Y21WdVpHVnlabWw0S0NrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCamIyNTBZV2x1WlhJN1hHNGdJQ0FnZlR0Y2JpQWdJQ0JTTGw5bGJtZHBibVV1YzJWMFZtbGxkMEp2ZUNBOUlHWjFibU4wYVc5dUlDaDRMQ0I1TENCM0xDQm9MQ0JtYVhRcElIdGNiaUFnSUNBZ0lDQWdaWFpsS0Z3aWNtRndhR0ZsYkM1elpYUldhV1YzUW05NFhDSXNJSFJvYVhNc0lIUm9hWE11WDNacFpYZENiM2dzSUZ0NExDQjVMQ0IzTENCb0xDQm1hWFJkS1R0Y2JpQWdJQ0FnSUNBZ2RtRnlJSEJoY0dWeVUybDZaU0E5SUhSb2FYTXVaMlYwVTJsNlpTZ3BMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2MybDZaU0E5SUcxdFlYZ29keUF2SUhCaGNHVnlVMmw2WlM1M2FXUjBhQ3dnYUNBdklIQmhjR1Z5VTJsNlpTNW9aV2xuYUhRcExGeHVJQ0FnSUNBZ0lDQWdJQ0FnZEc5d0lEMGdkR2hwY3k1MGIzQXNYRzRnSUNBZ0lDQWdJQ0FnSUNCaGMzQmxZM1JTWVhScGJ5QTlJR1pwZENBL0lGd2llRTFwWkZsTmFXUWdiV1ZsZEZ3aUlEb2dYQ0o0VFdsdVdVMXBibHdpTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdkbUlzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnpkenRjYmlBZ0lDQWdJQ0FnYVdZZ0tIZ2dQVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgzWmlVMmw2WlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITnBlbVVnUFNBeE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdaR1ZzWlhSbElIUm9hWE11WDNaaVUybDZaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmlJRDBnWENJd0lEQWdYQ0lnS3lCMGFHbHpMbmRwWkhSb0lDc2dVeUFySUhSb2FYTXVhR1ZwWjJoME8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZkbUpUYVhwbElEMGdjMmw2WlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFppSUQwZ2VDQXJJRk1nS3lCNUlDc2dVeUFySUhjZ0t5QlRJQ3NnYUR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWtLSFJvYVhNdVkyRnVkbUZ6TENCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyYVdWM1FtOTRPaUIyWWl4Y2JpQWdJQ0FnSUNBZ0lDQWdJSEJ5WlhObGNuWmxRWE53WldOMFVtRjBhVzg2SUdGemNHVmpkRkpoZEdsdlhHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0IzYUdsc1pTQW9jMmw2WlNBbUppQjBiM0FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSE4zSUQwZ1hDSnpkSEp2YTJVdGQybGtkR2hjSWlCcGJpQjBiM0F1WVhSMGNuTWdQeUIwYjNBdVlYUjBjbk5iWENKemRISnZhMlV0ZDJsa2RHaGNJbDBnT2lBeE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEc5d0xtRjBkSElvZTF3aWMzUnliMnRsTFhkcFpIUm9YQ0k2SUhOM2ZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGIzQXVYeTVrYVhKMGVTQTlJREU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBiM0F1WHk1a2FYSjBlVlFnUFNBeE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEc5d0lEMGdkRzl3TG5CeVpYWTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZEdocGN5NWZkbWxsZDBKdmVDQTlJRnQ0TENCNUxDQjNMQ0JvTENBaElXWnBkRjA3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0FnSUgwN1hHNGdJQ0FnTHlwY1hGeHVJQ0FnSUNBcUlGQmhjR1Z5TG5KbGJtUmxjbVpwZUZ4dUlDQWdJQ0JiSUcxbGRHaHZaQ0JkWEc0Z0lDQWdJQ29xWEc0Z0lDQWdJQ29nUm1sNFpYTWdkR2hsSUdsemMzVmxJRzltSUVacGNtVm1iM2dnWVc1a0lFbEZPU0J5WldkaGNtUnBibWNnYzNWaWNHbDRaV3dnY21WdVpHVnlhVzVuTGlCSlppQndZWEJsY2lCcGN5QmtaWEJsYm1SbGJuUmNiaUFnSUNBZ0tpQnZiaUJ2ZEdobGNpQmxiR1Z0Wlc1MGN5QmhablJsY2lCeVpXWnNiM2NnYVhRZ1kyOTFiR1FnYzJocFpuUWdhR0ZzWmlCd2FYaGxiQ0IzYUdsamFDQmpZWFZ6WlNCbWIzSWdiR2x1WlhNZ2RHOGdiRzl6ZENCMGFHVnBjaUJqY21semNHNWxjM011WEc0Z0lDQWdJQ29nVkdocGN5QnRaWFJvYjJRZ1ptbDRaWE1nZEdobElHbHpjM1ZsTGx4dUlDQWdJQ0FxS2x4dUlDQWdJQ0FnSUZOd1pXTnBZV3dnZEdoaGJtdHpJSFJ2SUUxaGNtbDFjM29nVG05M1lXc2dLR2gwZEhBNkx5OTNkM2N1YldWa2FXdHZieTVqYjIwdktTQm1iM0lnZEdocGN5QnRaWFJvYjJRdVhHNGdJQ0FnWEZ3cUwxeHVJQ0FnSUZJdWNISnZkRzkwZVhCbExuSmxibVJsY21acGVDQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR051ZG5NZ1BTQjBhR2x6TG1OaGJuWmhjeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lITWdQU0JqYm5aekxuTjBlV3hsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjRzl6TzF4dUlDQWdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NHOXpJRDBnWTI1MmN5NW5aWFJUWTNKbFpXNURWRTBvS1NCOGZDQmpiblp6TG1OeVpXRjBaVk5XUjAxaGRISnBlQ2dwTzF4dUlDQWdJQ0FnSUNCOUlHTmhkR05vSUNobEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCd2IzTWdQU0JqYm5aekxtTnlaV0YwWlZOV1IwMWhkSEpwZUNncE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSFpoY2lCc1pXWjBJRDBnTFhCdmN5NWxJQ1VnTVN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJ2Y0NBOUlDMXdiM011WmlBbElERTdYRzRnSUNBZ0lDQWdJR2xtSUNoc1pXWjBJSHg4SUhSdmNDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR3hsWm5RcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5c1pXWjBJRDBnS0hSb2FYTXVYMnhsWm5RZ0t5QnNaV1owS1NBbElERTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjeTVzWldaMElEMGdkR2hwY3k1ZmJHVm1kQ0FySUZ3aWNIaGNJanRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBiM0FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDkwYjNBZ1BTQW9kR2hwY3k1ZmRHOXdJQ3NnZEc5d0tTQWxJREU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY3k1MGIzQWdQU0IwYUdsekxsOTBiM0FnS3lCY0luQjRYQ0k3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlPMXh1SUNBZ0lDOHFYRnhjYmlBZ0lDQWdLaUJRWVhCbGNpNWpiR1ZoY2x4dUlDQWdJQ0JiSUcxbGRHaHZaQ0JkWEc0Z0lDQWdJQ29xWEc0Z0lDQWdJQ29nUTJ4bFlYSnpJSFJvWlNCd1lYQmxjaXdnYVM1bExpQnlaVzF2ZG1WeklHRnNiQ0IwYUdVZ1pXeGxiV1Z1ZEhNdVhHNGdJQ0FnWEZ3cUwxeHVJQ0FnSUZJdWNISnZkRzkwZVhCbExtTnNaV0Z5SUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0JTTG1WMlpTaGNJbkpoY0doaFpXd3VZMnhsWVhKY0lpd2dkR2hwY3lrN1hHNGdJQ0FnSUNBZ0lIWmhjaUJqSUQwZ2RHaHBjeTVqWVc1MllYTTdYRzRnSUNBZ0lDQWdJSGRvYVd4bElDaGpMbVpwY25OMFEyaHBiR1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR011Y21WdGIzWmxRMmhwYkdRb1l5NW1hWEp6ZEVOb2FXeGtLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCMGFHbHpMbUp2ZEhSdmJTQTlJSFJvYVhNdWRHOXdJRDBnYm5Wc2JEdGNiaUFnSUNBZ0lDQWdLSFJvYVhNdVpHVnpZeUE5SUNRb1hDSmtaWE5qWENJcEtTNWhjSEJsYm1SRGFHbHNaQ2hTTGw5bkxtUnZZeTVqY21WaGRHVlVaWGgwVG05a1pTaGNJa055WldGMFpXUWdkMmwwYUNCU1lYQm9ZVnhjZUdWaWJDQmNJaUFySUZJdWRtVnljMmx2YmlrcE8xeHVJQ0FnSUNBZ0lDQmpMbUZ3Y0dWdVpFTm9hV3hrS0hSb2FYTXVaR1Z6WXlrN1hHNGdJQ0FnSUNBZ0lHTXVZWEJ3Wlc1a1EyaHBiR1FvZEdocGN5NWtaV1p6SUQwZ0pDaGNJbVJsWm5OY0lpa3BPMXh1SUNBZ0lIMDdYRzRnSUNBZ0x5cGNYRnh1SUNBZ0lDQXFJRkJoY0dWeUxuSmxiVzkyWlZ4dUlDQWdJQ0JiSUcxbGRHaHZaQ0JkWEc0Z0lDQWdJQ29xWEc0Z0lDQWdJQ29nVW1WdGIzWmxjeUIwYUdVZ2NHRndaWElnWm5KdmJTQjBhR1VnUkU5TkxseHVJQ0FnSUZ4Y0tpOWNiaUFnSUNCU0xuQnliM1J2ZEhsd1pTNXlaVzF2ZG1VZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUdWMlpTaGNJbkpoY0doaFpXd3VjbVZ0YjNabFhDSXNJSFJvYVhNcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1OaGJuWmhjeTV3WVhKbGJuUk9iMlJsSUNZbUlIUm9hWE11WTJGdWRtRnpMbkJoY21WdWRFNXZaR1V1Y21WdGIzWmxRMmhwYkdRb2RHaHBjeTVqWVc1MllYTXBPMXh1SUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJwSUdsdUlIUm9hWE1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhOYmFWMGdQU0IwZVhCbGIyWWdkR2hwYzF0cFhTQTlQU0JjSW1aMWJtTjBhVzl1WENJZ1B5QlNMbDl5WlcxdmRtVmtSbUZqZEc5eWVTaHBLU0E2SUc1MWJHdzdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlPMXh1SUNBZ0lIWmhjaUJ6WlhSd2NtOTBieUE5SUZJdWMzUTdYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2JXVjBhRzlrSUdsdUlHVnNjSEp2ZEc4cElHbG1JQ2hsYkhCeWIzUnZXMmhoYzEwb2JXVjBhRzlrS1NBbUppQWhjMlYwY0hKdmRHOWJhR0Z6WFNodFpYUm9iMlFwS1NCN1hHNGdJQ0FnSUNBZ0lITmxkSEJ5YjNSdlcyMWxkR2h2WkYwZ1BTQW9ablZ1WTNScGIyNGdLRzFsZEdodlpHNWhiV1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHRnlaeUE5SUdGeVozVnRaVzUwY3p0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NW1iM0pGWVdOb0tHWjFibU4wYVc5dUlDaGxiQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxiRnR0WlhSb2IyUnVZVzFsWFM1aGNIQnNlU2hsYkN3Z1lYSm5LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0FnSUgwcEtHMWxkR2h2WkNrN1hHNGdJQ0FnZlZ4dWZTazdYRzRpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZCUVRzaUxDSnpiM1Z5WTJWU2IyOTBJam9pSW4wPVxcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy8uL2Rldi9yYXBoYWVsLnN2Zy5qc1xcblwiKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9kZXYvcmFwaGFlbC52bWwuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9kZXYvcmFwaGFlbC52bWwuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcInZhciBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXzshKF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18gPSBbX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9yYXBoYWVsLmNvcmUgKi8gXFxcIi4vZGV2L3JhcGhhZWwuY29yZS5qc1xcXCIpXSwgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gPSAoZnVuY3Rpb24oUikge1xcbiAgICBpZiAoUiAmJiAhUi52bWwpIHtcXG4gICAgICAgIHJldHVybjtcXG4gICAgfVxcblxcbiAgICB2YXIgaGFzID0gXFxcImhhc093blByb3BlcnR5XFxcIixcXG4gICAgICAgIFN0ciA9IFN0cmluZyxcXG4gICAgICAgIHRvRmxvYXQgPSBwYXJzZUZsb2F0LFxcbiAgICAgICAgbWF0aCA9IE1hdGgsXFxuICAgICAgICByb3VuZCA9IG1hdGgucm91bmQsXFxuICAgICAgICBtbWF4ID0gbWF0aC5tYXgsXFxuICAgICAgICBtbWluID0gbWF0aC5taW4sXFxuICAgICAgICBhYnMgPSBtYXRoLmFicyxcXG4gICAgICAgIGZpbGxTdHJpbmcgPSBcXFwiZmlsbFxcXCIsXFxuICAgICAgICBzZXBhcmF0b3IgPSAvWywgXSsvLFxcbiAgICAgICAgZXZlID0gUi5ldmUsXFxuICAgICAgICBtcyA9IFxcXCIgcHJvZ2lkOkRYSW1hZ2VUcmFuc2Zvcm0uTWljcm9zb2Z0XFxcIixcXG4gICAgICAgIFMgPSBcXFwiIFxcXCIsXFxuICAgICAgICBFID0gXFxcIlxcXCIsXFxuICAgICAgICBtYXAgPSB7TTogXFxcIm1cXFwiLCBMOiBcXFwibFxcXCIsIEM6IFxcXCJjXFxcIiwgWjogXFxcInhcXFwiLCBtOiBcXFwidFxcXCIsIGw6IFxcXCJyXFxcIiwgYzogXFxcInZcXFwiLCB6OiBcXFwieFxcXCJ9LFxcbiAgICAgICAgYml0ZXMgPSAvKFtjbG16XSksPyhbXmNsbXpdKikvZ2ksXFxuICAgICAgICBibHVycmVnZXhwID0gLyBwcm9naWQ6XFxcXFMrQmx1clxcXFwoW15cXFxcKV0rXFxcXCkvZyxcXG4gICAgICAgIHZhbCA9IC8tP1teLFxcXFxzLV0rL2csXFxuICAgICAgICBjc3NEb3QgPSBcXFwicG9zaXRpb246YWJzb2x1dGU7bGVmdDowO3RvcDowO3dpZHRoOjFweDtoZWlnaHQ6MXB4O2JlaGF2aW9yOnVybCgjZGVmYXVsdCNWTUwpXFxcIixcXG4gICAgICAgIHpvb20gPSAyMTYwMCxcXG4gICAgICAgIHBhdGhUeXBlcyA9IHtwYXRoOiAxLCByZWN0OiAxLCBpbWFnZTogMX0sXFxuICAgICAgICBvdmFsVHlwZXMgPSB7Y2lyY2xlOiAxLCBlbGxpcHNlOiAxfSxcXG4gICAgICAgIHBhdGgydm1sID0gZnVuY3Rpb24gKHBhdGgpIHtcXG4gICAgICAgICAgICB2YXIgdG90YWwgPSAgL1thaHFzdHZdL2lnLFxcbiAgICAgICAgICAgICAgICBjb21tYW5kID0gUi5fcGF0aFRvQWJzb2x1dGU7XFxuICAgICAgICAgICAgU3RyKHBhdGgpLm1hdGNoKHRvdGFsKSAmJiAoY29tbWFuZCA9IFIuX3BhdGgyY3VydmUpO1xcbiAgICAgICAgICAgIHRvdGFsID0gL1tjbG16XS9nO1xcbiAgICAgICAgICAgIGlmIChjb21tYW5kID09IFIuX3BhdGhUb0Fic29sdXRlICYmICFTdHIocGF0aCkubWF0Y2godG90YWwpKSB7XFxuICAgICAgICAgICAgICAgIHZhciByZXMgPSBTdHIocGF0aCkucmVwbGFjZShiaXRlcywgZnVuY3Rpb24gKGFsbCwgY29tbWFuZCwgYXJncykge1xcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHMgPSBbXSxcXG4gICAgICAgICAgICAgICAgICAgICAgICBpc01vdmUgPSBjb21tYW5kLnRvTG93ZXJDYXNlKCkgPT0gXFxcIm1cXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcyA9IG1hcFtjb21tYW5kXTtcXG4gICAgICAgICAgICAgICAgICAgIGFyZ3MucmVwbGFjZSh2YWwsIGZ1bmN0aW9uICh2YWx1ZSkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc01vdmUgJiYgdmFscy5sZW5ndGggPT0gMikge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXMgKz0gdmFscyArIG1hcFtjb21tYW5kID09IFxcXCJtXFxcIiA/IFxcXCJsXFxcIiA6IFxcXCJMXFxcIl07XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHMgPSBbXTtcXG4gICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFscy5wdXNoKHJvdW5kKHZhbHVlICogem9vbSkpO1xcbiAgICAgICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzICsgdmFscztcXG4gICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgICAgIHJldHVybiByZXM7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIHZhciBwYSA9IGNvbW1hbmQocGF0aCksIHAsIHI7XFxuICAgICAgICAgICAgcmVzID0gW107XFxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gcGEubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xcbiAgICAgICAgICAgICAgICBwID0gcGFbaV07XFxuICAgICAgICAgICAgICAgIHIgPSBwYVtpXVswXS50b0xvd2VyQ2FzZSgpO1xcbiAgICAgICAgICAgICAgICByID09IFxcXCJ6XFxcIiAmJiAociA9IFxcXCJ4XFxcIik7XFxuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAxLCBqaiA9IHAubGVuZ3RoOyBqIDwgamo7IGorKykge1xcbiAgICAgICAgICAgICAgICAgICAgciArPSByb3VuZChwW2pdICogem9vbSkgKyAoaiAhPSBqaiAtIDEgPyBcXFwiLFxcXCIgOiBFKTtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICByZXMucHVzaChyKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgcmV0dXJuIHJlcy5qb2luKFMpO1xcbiAgICAgICAgfSxcXG4gICAgICAgIGNvbXBlbnNhdGlvbiA9IGZ1bmN0aW9uIChkZWcsIGR4LCBkeSkge1xcbiAgICAgICAgICAgIHZhciBtID0gUi5tYXRyaXgoKTtcXG4gICAgICAgICAgICBtLnJvdGF0ZSgtZGVnLCAuNSwgLjUpO1xcbiAgICAgICAgICAgIHJldHVybiB7XFxuICAgICAgICAgICAgICAgIGR4OiBtLngoZHgsIGR5KSxcXG4gICAgICAgICAgICAgICAgZHk6IG0ueShkeCwgZHkpXFxuICAgICAgICAgICAgfTtcXG4gICAgICAgIH0sXFxuICAgICAgICBzZXRDb29yZHMgPSBmdW5jdGlvbiAocCwgc3gsIHN5LCBkeCwgZHksIGRlZykge1xcbiAgICAgICAgICAgIHZhciBfID0gcC5fLFxcbiAgICAgICAgICAgICAgICBtID0gcC5tYXRyaXgsXFxuICAgICAgICAgICAgICAgIGZpbGxwb3MgPSBfLmZpbGxwb3MsXFxuICAgICAgICAgICAgICAgIG8gPSBwLm5vZGUsXFxuICAgICAgICAgICAgICAgIHMgPSBvLnN0eWxlLFxcbiAgICAgICAgICAgICAgICB5ID0gMSxcXG4gICAgICAgICAgICAgICAgZmxpcCA9IFxcXCJcXFwiLFxcbiAgICAgICAgICAgICAgICBkeGR5LFxcbiAgICAgICAgICAgICAgICBreCA9IHpvb20gLyBzeCxcXG4gICAgICAgICAgICAgICAga3kgPSB6b29tIC8gc3k7XFxuICAgICAgICAgICAgcy52aXNpYmlsaXR5ID0gXFxcImhpZGRlblxcXCI7XFxuICAgICAgICAgICAgaWYgKCFzeCB8fCAhc3kpIHtcXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBvLmNvb3Jkc2l6ZSA9IGFicyhreCkgKyBTICsgYWJzKGt5KTtcXG4gICAgICAgICAgICBzLnJvdGF0aW9uID0gZGVnICogKHN4ICogc3kgPCAwID8gLTEgOiAxKTtcXG4gICAgICAgICAgICBpZiAoZGVnKSB7XFxuICAgICAgICAgICAgICAgIHZhciBjID0gY29tcGVuc2F0aW9uKGRlZywgZHgsIGR5KTtcXG4gICAgICAgICAgICAgICAgZHggPSBjLmR4O1xcbiAgICAgICAgICAgICAgICBkeSA9IGMuZHk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIHN4IDwgMCAmJiAoZmxpcCArPSBcXFwieFxcXCIpO1xcbiAgICAgICAgICAgIHN5IDwgMCAmJiAoZmxpcCArPSBcXFwiIHlcXFwiKSAmJiAoeSA9IC0xKTtcXG4gICAgICAgICAgICBzLmZsaXAgPSBmbGlwO1xcbiAgICAgICAgICAgIG8uY29vcmRvcmlnaW4gPSAoZHggKiAta3gpICsgUyArIChkeSAqIC1reSk7XFxuICAgICAgICAgICAgaWYgKGZpbGxwb3MgfHwgXy5maWxsc2l6ZSkge1xcbiAgICAgICAgICAgICAgICB2YXIgZmlsbCA9IG8uZ2V0RWxlbWVudHNCeVRhZ05hbWUoZmlsbFN0cmluZyk7XFxuICAgICAgICAgICAgICAgIGZpbGwgPSBmaWxsICYmIGZpbGxbMF07XFxuICAgICAgICAgICAgICAgIG8ucmVtb3ZlQ2hpbGQoZmlsbCk7XFxuICAgICAgICAgICAgICAgIGlmIChmaWxscG9zKSB7XFxuICAgICAgICAgICAgICAgICAgICBjID0gY29tcGVuc2F0aW9uKGRlZywgbS54KGZpbGxwb3NbMF0sIGZpbGxwb3NbMV0pLCBtLnkoZmlsbHBvc1swXSwgZmlsbHBvc1sxXSkpO1xcbiAgICAgICAgICAgICAgICAgICAgZmlsbC5wb3NpdGlvbiA9IGMuZHggKiB5ICsgUyArIGMuZHkgKiB5O1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIGlmIChfLmZpbGxzaXplKSB7XFxuICAgICAgICAgICAgICAgICAgICBmaWxsLnNpemUgPSBfLmZpbGxzaXplWzBdICogYWJzKHN4KSArIFMgKyBfLmZpbGxzaXplWzFdICogYWJzKHN5KTtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICBvLmFwcGVuZENoaWxkKGZpbGwpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBzLnZpc2liaWxpdHkgPSBcXFwidmlzaWJsZVxcXCI7XFxuICAgICAgICB9O1xcbiAgICBSLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xcbiAgICAgICAgcmV0dXJuICBcXFwiWW91ciBicm93c2VyIGRvZXNuXFxcXHUyMDE5dCBzdXBwb3J0IFNWRy4gRmFsbGluZyBkb3duIHRvIFZNTC5cXFxcbllvdSBhcmUgcnVubmluZyBSYXBoYVxcXFx4ZWJsIFxcXCIgKyB0aGlzLnZlcnNpb247XFxuICAgIH07XFxuICAgIHZhciBhZGRBcnJvdyA9IGZ1bmN0aW9uIChvLCB2YWx1ZSwgaXNFbmQpIHtcXG4gICAgICAgIHZhciB2YWx1ZXMgPSBTdHIodmFsdWUpLnRvTG93ZXJDYXNlKCkuc3BsaXQoXFxcIi1cXFwiKSxcXG4gICAgICAgICAgICBzZSA9IGlzRW5kID8gXFxcImVuZFxcXCIgOiBcXFwic3RhcnRcXFwiLFxcbiAgICAgICAgICAgIGkgPSB2YWx1ZXMubGVuZ3RoLFxcbiAgICAgICAgICAgIHR5cGUgPSBcXFwiY2xhc3NpY1xcXCIsXFxuICAgICAgICAgICAgdyA9IFxcXCJtZWRpdW1cXFwiLFxcbiAgICAgICAgICAgIGggPSBcXFwibWVkaXVtXFxcIjtcXG4gICAgICAgIHdoaWxlIChpLS0pIHtcXG4gICAgICAgICAgICBzd2l0Y2ggKHZhbHVlc1tpXSkge1xcbiAgICAgICAgICAgICAgICBjYXNlIFxcXCJibG9ja1xcXCI6XFxuICAgICAgICAgICAgICAgIGNhc2UgXFxcImNsYXNzaWNcXFwiOlxcbiAgICAgICAgICAgICAgICBjYXNlIFxcXCJvdmFsXFxcIjpcXG4gICAgICAgICAgICAgICAgY2FzZSBcXFwiZGlhbW9uZFxcXCI6XFxuICAgICAgICAgICAgICAgIGNhc2UgXFxcIm9wZW5cXFwiOlxcbiAgICAgICAgICAgICAgICBjYXNlIFxcXCJub25lXFxcIjpcXG4gICAgICAgICAgICAgICAgICAgIHR5cGUgPSB2YWx1ZXNbaV07XFxuICAgICAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICAgICAgY2FzZSBcXFwid2lkZVxcXCI6XFxuICAgICAgICAgICAgICAgIGNhc2UgXFxcIm5hcnJvd1xcXCI6IGggPSB2YWx1ZXNbaV07IGJyZWFrO1xcbiAgICAgICAgICAgICAgICBjYXNlIFxcXCJsb25nXFxcIjpcXG4gICAgICAgICAgICAgICAgY2FzZSBcXFwic2hvcnRcXFwiOiB3ID0gdmFsdWVzW2ldOyBicmVhaztcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgICB2YXIgc3Ryb2tlID0gby5ub2RlLmdldEVsZW1lbnRzQnlUYWdOYW1lKFxcXCJzdHJva2VcXFwiKVswXTtcXG4gICAgICAgIHN0cm9rZVtzZSArIFxcXCJhcnJvd1xcXCJdID0gdHlwZTtcXG4gICAgICAgIHN0cm9rZVtzZSArIFxcXCJhcnJvd2xlbmd0aFxcXCJdID0gdztcXG4gICAgICAgIHN0cm9rZVtzZSArIFxcXCJhcnJvd3dpZHRoXFxcIl0gPSBoO1xcbiAgICB9LFxcbiAgICBzZXRGaWxsQW5kU3Ryb2tlID0gZnVuY3Rpb24gKG8sIHBhcmFtcykge1xcbiAgICAgICAgLy8gby5wYXBlci5jYW52YXMuc3R5bGUuZGlzcGxheSA9IFxcXCJub25lXFxcIjtcXG4gICAgICAgIG8uYXR0cnMgPSBvLmF0dHJzIHx8IHt9O1xcbiAgICAgICAgdmFyIG5vZGUgPSBvLm5vZGUsXFxuICAgICAgICAgICAgYSA9IG8uYXR0cnMsXFxuICAgICAgICAgICAgcyA9IG5vZGUuc3R5bGUsXFxuICAgICAgICAgICAgeHksXFxuICAgICAgICAgICAgbmV3cGF0aCA9IHBhdGhUeXBlc1tvLnR5cGVdICYmIChwYXJhbXMueCAhPSBhLnggfHwgcGFyYW1zLnkgIT0gYS55IHx8IHBhcmFtcy53aWR0aCAhPSBhLndpZHRoIHx8IHBhcmFtcy5oZWlnaHQgIT0gYS5oZWlnaHQgfHwgcGFyYW1zLmN4ICE9IGEuY3ggfHwgcGFyYW1zLmN5ICE9IGEuY3kgfHwgcGFyYW1zLnJ4ICE9IGEucnggfHwgcGFyYW1zLnJ5ICE9IGEucnkgfHwgcGFyYW1zLnIgIT0gYS5yKSxcXG4gICAgICAgICAgICBpc092YWwgPSBvdmFsVHlwZXNbby50eXBlXSAmJiAoYS5jeCAhPSBwYXJhbXMuY3ggfHwgYS5jeSAhPSBwYXJhbXMuY3kgfHwgYS5yICE9IHBhcmFtcy5yIHx8IGEucnggIT0gcGFyYW1zLnJ4IHx8IGEucnkgIT0gcGFyYW1zLnJ5KSxcXG4gICAgICAgICAgICByZXMgPSBvO1xcblxcblxcbiAgICAgICAgZm9yICh2YXIgcGFyIGluIHBhcmFtcykgaWYgKHBhcmFtc1toYXNdKHBhcikpIHtcXG4gICAgICAgICAgICBhW3Bhcl0gPSBwYXJhbXNbcGFyXTtcXG4gICAgICAgIH1cXG4gICAgICAgIGlmIChuZXdwYXRoKSB7XFxuICAgICAgICAgICAgYS5wYXRoID0gUi5fZ2V0UGF0aFtvLnR5cGVdKG8pO1xcbiAgICAgICAgICAgIG8uXy5kaXJ0eSA9IDE7XFxuICAgICAgICB9XFxuICAgICAgICBwYXJhbXMuaHJlZiAmJiAobm9kZS5ocmVmID0gcGFyYW1zLmhyZWYpO1xcbiAgICAgICAgcGFyYW1zLnRpdGxlICYmIChub2RlLnRpdGxlID0gcGFyYW1zLnRpdGxlKTtcXG4gICAgICAgIHBhcmFtcy50YXJnZXQgJiYgKG5vZGUudGFyZ2V0ID0gcGFyYW1zLnRhcmdldCk7XFxuICAgICAgICBwYXJhbXMuY3Vyc29yICYmIChzLmN1cnNvciA9IHBhcmFtcy5jdXJzb3IpO1xcbiAgICAgICAgXFxcImJsdXJcXFwiIGluIHBhcmFtcyAmJiBvLmJsdXIocGFyYW1zLmJsdXIpO1xcbiAgICAgICAgaWYgKHBhcmFtcy5wYXRoICYmIG8udHlwZSA9PSBcXFwicGF0aFxcXCIgfHwgbmV3cGF0aCkge1xcbiAgICAgICAgICAgIG5vZGUucGF0aCA9IHBhdGgydm1sKH5TdHIoYS5wYXRoKS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoXFxcInJcXFwiKSA/IFIuX3BhdGhUb0Fic29sdXRlKGEucGF0aCkgOiBhLnBhdGgpO1xcbiAgICAgICAgICAgIG8uXy5kaXJ0eSA9IDE7XFxuICAgICAgICAgICAgaWYgKG8udHlwZSA9PSBcXFwiaW1hZ2VcXFwiKSB7XFxuICAgICAgICAgICAgICAgIG8uXy5maWxscG9zID0gW2EueCwgYS55XTtcXG4gICAgICAgICAgICAgICAgby5fLmZpbGxzaXplID0gW2Eud2lkdGgsIGEuaGVpZ2h0XTtcXG4gICAgICAgICAgICAgICAgc2V0Q29vcmRzKG8sIDEsIDEsIDAsIDAsIDApO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIFxcXCJ0cmFuc2Zvcm1cXFwiIGluIHBhcmFtcyAmJiBvLnRyYW5zZm9ybShwYXJhbXMudHJhbnNmb3JtKTtcXG4gICAgICAgIGlmIChpc092YWwpIHtcXG4gICAgICAgICAgICB2YXIgY3ggPSArYS5jeCxcXG4gICAgICAgICAgICAgICAgY3kgPSArYS5jeSxcXG4gICAgICAgICAgICAgICAgcnggPSArYS5yeCB8fCArYS5yIHx8IDAsXFxuICAgICAgICAgICAgICAgIHJ5ID0gK2EucnkgfHwgK2EuciB8fCAwO1xcbiAgICAgICAgICAgIG5vZGUucGF0aCA9IFIuZm9ybWF0KFxcXCJhcnswfSx7MX0sezJ9LHszfSx7NH0sezF9LHs0fSx7MX14XFxcIiwgcm91bmQoKGN4IC0gcngpICogem9vbSksIHJvdW5kKChjeSAtIHJ5KSAqIHpvb20pLCByb3VuZCgoY3ggKyByeCkgKiB6b29tKSwgcm91bmQoKGN5ICsgcnkpICogem9vbSksIHJvdW5kKGN4ICogem9vbSkpO1xcbiAgICAgICAgICAgIG8uXy5kaXJ0eSA9IDE7XFxuICAgICAgICB9XFxuICAgICAgICBpZiAoXFxcImNsaXAtcmVjdFxcXCIgaW4gcGFyYW1zKSB7XFxuICAgICAgICAgICAgdmFyIHJlY3QgPSBTdHIocGFyYW1zW1xcXCJjbGlwLXJlY3RcXFwiXSkuc3BsaXQoc2VwYXJhdG9yKTtcXG4gICAgICAgICAgICBpZiAocmVjdC5sZW5ndGggPT0gNCkge1xcbiAgICAgICAgICAgICAgICByZWN0WzJdID0gK3JlY3RbMl0gKyAoK3JlY3RbMF0pO1xcbiAgICAgICAgICAgICAgICByZWN0WzNdID0gK3JlY3RbM10gKyAoK3JlY3RbMV0pO1xcbiAgICAgICAgICAgICAgICB2YXIgZGl2ID0gbm9kZS5jbGlwUmVjdCB8fCBSLl9nLmRvYy5jcmVhdGVFbGVtZW50KFxcXCJkaXZcXFwiKSxcXG4gICAgICAgICAgICAgICAgICAgIGRzdHlsZSA9IGRpdi5zdHlsZTtcXG4gICAgICAgICAgICAgICAgZHN0eWxlLmNsaXAgPSBSLmZvcm1hdChcXFwicmVjdCh7MX1weCB7Mn1weCB7M31weCB7MH1weClcXFwiLCByZWN0KTtcXG4gICAgICAgICAgICAgICAgaWYgKCFub2RlLmNsaXBSZWN0KSB7XFxuICAgICAgICAgICAgICAgICAgICBkc3R5bGUucG9zaXRpb24gPSBcXFwiYWJzb2x1dGVcXFwiO1xcbiAgICAgICAgICAgICAgICAgICAgZHN0eWxlLnRvcCA9IDA7XFxuICAgICAgICAgICAgICAgICAgICBkc3R5bGUubGVmdCA9IDA7XFxuICAgICAgICAgICAgICAgICAgICBkc3R5bGUud2lkdGggPSBvLnBhcGVyLndpZHRoICsgXFxcInB4XFxcIjtcXG4gICAgICAgICAgICAgICAgICAgIGRzdHlsZS5oZWlnaHQgPSBvLnBhcGVyLmhlaWdodCArIFxcXCJweFxcXCI7XFxuICAgICAgICAgICAgICAgICAgICBub2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGRpdiwgbm9kZSk7XFxuICAgICAgICAgICAgICAgICAgICBkaXYuYXBwZW5kQ2hpbGQobm9kZSk7XFxuICAgICAgICAgICAgICAgICAgICBub2RlLmNsaXBSZWN0ID0gZGl2O1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIGlmICghcGFyYW1zW1xcXCJjbGlwLXJlY3RcXFwiXSkge1xcbiAgICAgICAgICAgICAgICBub2RlLmNsaXBSZWN0ICYmIChub2RlLmNsaXBSZWN0LnN0eWxlLmNsaXAgPSBcXFwiYXV0b1xcXCIpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIGlmIChvLnRleHRwYXRoKSB7XFxuICAgICAgICAgICAgdmFyIHRleHRwYXRoU3R5bGUgPSBvLnRleHRwYXRoLnN0eWxlO1xcbiAgICAgICAgICAgIHBhcmFtcy5mb250ICYmICh0ZXh0cGF0aFN0eWxlLmZvbnQgPSBwYXJhbXMuZm9udCk7XFxuICAgICAgICAgICAgcGFyYW1zW1xcXCJmb250LWZhbWlseVxcXCJdICYmICh0ZXh0cGF0aFN0eWxlLmZvbnRGYW1pbHkgPSAnXFxcIicgKyBwYXJhbXNbXFxcImZvbnQtZmFtaWx5XFxcIl0uc3BsaXQoXFxcIixcXFwiKVswXS5yZXBsYWNlKC9eWydcXFwiXSt8WydcXFwiXSskL2csIEUpICsgJ1xcXCInKTtcXG4gICAgICAgICAgICBwYXJhbXNbXFxcImZvbnQtc2l6ZVxcXCJdICYmICh0ZXh0cGF0aFN0eWxlLmZvbnRTaXplID0gcGFyYW1zW1xcXCJmb250LXNpemVcXFwiXSk7XFxuICAgICAgICAgICAgcGFyYW1zW1xcXCJmb250LXdlaWdodFxcXCJdICYmICh0ZXh0cGF0aFN0eWxlLmZvbnRXZWlnaHQgPSBwYXJhbXNbXFxcImZvbnQtd2VpZ2h0XFxcIl0pO1xcbiAgICAgICAgICAgIHBhcmFtc1tcXFwiZm9udC1zdHlsZVxcXCJdICYmICh0ZXh0cGF0aFN0eWxlLmZvbnRTdHlsZSA9IHBhcmFtc1tcXFwiZm9udC1zdHlsZVxcXCJdKTtcXG4gICAgICAgIH1cXG4gICAgICAgIGlmIChcXFwiYXJyb3ctc3RhcnRcXFwiIGluIHBhcmFtcykge1xcbiAgICAgICAgICAgIGFkZEFycm93KHJlcywgcGFyYW1zW1xcXCJhcnJvdy1zdGFydFxcXCJdKTtcXG4gICAgICAgIH1cXG4gICAgICAgIGlmIChcXFwiYXJyb3ctZW5kXFxcIiBpbiBwYXJhbXMpIHtcXG4gICAgICAgICAgICBhZGRBcnJvdyhyZXMsIHBhcmFtc1tcXFwiYXJyb3ctZW5kXFxcIl0sIDEpO1xcbiAgICAgICAgfVxcbiAgICAgICAgaWYgKHBhcmFtcy5vcGFjaXR5ICE9IG51bGwgfHxcXG4gICAgICAgICAgICBwYXJhbXMuZmlsbCAhPSBudWxsIHx8XFxuICAgICAgICAgICAgcGFyYW1zLnNyYyAhPSBudWxsIHx8XFxuICAgICAgICAgICAgcGFyYW1zLnN0cm9rZSAhPSBudWxsIHx8XFxuICAgICAgICAgICAgcGFyYW1zW1xcXCJzdHJva2Utd2lkdGhcXFwiXSAhPSBudWxsIHx8XFxuICAgICAgICAgICAgcGFyYW1zW1xcXCJzdHJva2Utb3BhY2l0eVxcXCJdICE9IG51bGwgfHxcXG4gICAgICAgICAgICBwYXJhbXNbXFxcImZpbGwtb3BhY2l0eVxcXCJdICE9IG51bGwgfHxcXG4gICAgICAgICAgICBwYXJhbXNbXFxcInN0cm9rZS1kYXNoYXJyYXlcXFwiXSAhPSBudWxsIHx8XFxuICAgICAgICAgICAgcGFyYW1zW1xcXCJzdHJva2UtbWl0ZXJsaW1pdFxcXCJdICE9IG51bGwgfHxcXG4gICAgICAgICAgICBwYXJhbXNbXFxcInN0cm9rZS1saW5lam9pblxcXCJdICE9IG51bGwgfHxcXG4gICAgICAgICAgICBwYXJhbXNbXFxcInN0cm9rZS1saW5lY2FwXFxcIl0gIT0gbnVsbCkge1xcbiAgICAgICAgICAgIHZhciBmaWxsID0gbm9kZS5nZXRFbGVtZW50c0J5VGFnTmFtZShmaWxsU3RyaW5nKSxcXG4gICAgICAgICAgICAgICAgbmV3ZmlsbCA9IGZhbHNlO1xcbiAgICAgICAgICAgIGZpbGwgPSBmaWxsICYmIGZpbGxbMF07XFxuICAgICAgICAgICAgIWZpbGwgJiYgKG5ld2ZpbGwgPSBmaWxsID0gY3JlYXRlTm9kZShmaWxsU3RyaW5nKSk7XFxuICAgICAgICAgICAgaWYgKG8udHlwZSA9PSBcXFwiaW1hZ2VcXFwiICYmIHBhcmFtcy5zcmMpIHtcXG4gICAgICAgICAgICAgICAgZmlsbC5zcmMgPSBwYXJhbXMuc3JjO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBwYXJhbXMuZmlsbCAmJiAoZmlsbC5vbiA9IHRydWUpO1xcbiAgICAgICAgICAgIGlmIChmaWxsLm9uID09IG51bGwgfHwgcGFyYW1zLmZpbGwgPT0gXFxcIm5vbmVcXFwiIHx8IHBhcmFtcy5maWxsID09PSBudWxsKSB7XFxuICAgICAgICAgICAgICAgIGZpbGwub24gPSBmYWxzZTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgaWYgKGZpbGwub24gJiYgcGFyYW1zLmZpbGwpIHtcXG4gICAgICAgICAgICAgICAgdmFyIGlzVVJMID0gU3RyKHBhcmFtcy5maWxsKS5tYXRjaChSLl9JU1VSTCk7XFxuICAgICAgICAgICAgICAgIGlmIChpc1VSTCkge1xcbiAgICAgICAgICAgICAgICAgICAgZmlsbC5wYXJlbnROb2RlID09IG5vZGUgJiYgbm9kZS5yZW1vdmVDaGlsZChmaWxsKTtcXG4gICAgICAgICAgICAgICAgICAgIGZpbGwucm90YXRlID0gdHJ1ZTtcXG4gICAgICAgICAgICAgICAgICAgIGZpbGwuc3JjID0gaXNVUkxbMV07XFxuICAgICAgICAgICAgICAgICAgICBmaWxsLnR5cGUgPSBcXFwidGlsZVxcXCI7XFxuICAgICAgICAgICAgICAgICAgICB2YXIgYmJveCA9IG8uZ2V0QkJveCgxKTtcXG4gICAgICAgICAgICAgICAgICAgIGZpbGwucG9zaXRpb24gPSBiYm94LnggKyBTICsgYmJveC55O1xcbiAgICAgICAgICAgICAgICAgICAgby5fLmZpbGxwb3MgPSBbYmJveC54LCBiYm94LnldO1xcblxcbiAgICAgICAgICAgICAgICAgICAgUi5fcHJlbG9hZChpc1VSTFsxXSwgZnVuY3Rpb24gKCkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIG8uXy5maWxsc2l6ZSA9IFt0aGlzLm9mZnNldFdpZHRoLCB0aGlzLm9mZnNldEhlaWdodF07XFxuICAgICAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICAgIGZpbGwuY29sb3IgPSBSLmdldFJHQihwYXJhbXMuZmlsbCkuaGV4O1xcbiAgICAgICAgICAgICAgICAgICAgZmlsbC5zcmMgPSBFO1xcbiAgICAgICAgICAgICAgICAgICAgZmlsbC50eXBlID0gXFxcInNvbGlkXFxcIjtcXG4gICAgICAgICAgICAgICAgICAgIGlmIChSLmdldFJHQihwYXJhbXMuZmlsbCkuZXJyb3IgJiYgKHJlcy50eXBlIGluIHtjaXJjbGU6IDEsIGVsbGlwc2U6IDF9IHx8IFN0cihwYXJhbXMuZmlsbCkuY2hhckF0KCkgIT0gXFxcInJcXFwiKSAmJiBhZGRHcmFkaWVudEZpbGwocmVzLCBwYXJhbXMuZmlsbCwgZmlsbCkpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBhLmZpbGwgPSBcXFwibm9uZVxcXCI7XFxuICAgICAgICAgICAgICAgICAgICAgICAgYS5ncmFkaWVudCA9IHBhcmFtcy5maWxsO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGwucm90YXRlID0gZmFsc2U7XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgaWYgKFxcXCJmaWxsLW9wYWNpdHlcXFwiIGluIHBhcmFtcyB8fCBcXFwib3BhY2l0eVxcXCIgaW4gcGFyYW1zKSB7XFxuICAgICAgICAgICAgICAgIHZhciBvcGFjaXR5ID0gKCgrYVtcXFwiZmlsbC1vcGFjaXR5XFxcIl0gKyAxIHx8IDIpIC0gMSkgKiAoKCthLm9wYWNpdHkgKyAxIHx8IDIpIC0gMSkgKiAoKCtSLmdldFJHQihwYXJhbXMuZmlsbCkubyArIDEgfHwgMikgLSAxKTtcXG4gICAgICAgICAgICAgICAgb3BhY2l0eSA9IG1taW4obW1heChvcGFjaXR5LCAwKSwgMSk7XFxuICAgICAgICAgICAgICAgIGZpbGwub3BhY2l0eSA9IG9wYWNpdHk7XFxuICAgICAgICAgICAgICAgIGlmIChmaWxsLnNyYykge1xcbiAgICAgICAgICAgICAgICAgICAgZmlsbC5jb2xvciA9IFxcXCJub25lXFxcIjtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBub2RlLmFwcGVuZENoaWxkKGZpbGwpO1xcbiAgICAgICAgICAgIHZhciBzdHJva2UgPSAobm9kZS5nZXRFbGVtZW50c0J5VGFnTmFtZShcXFwic3Ryb2tlXFxcIikgJiYgbm9kZS5nZXRFbGVtZW50c0J5VGFnTmFtZShcXFwic3Ryb2tlXFxcIilbMF0pLFxcbiAgICAgICAgICAgIG5ld3N0cm9rZSA9IGZhbHNlO1xcbiAgICAgICAgICAgICFzdHJva2UgJiYgKG5ld3N0cm9rZSA9IHN0cm9rZSA9IGNyZWF0ZU5vZGUoXFxcInN0cm9rZVxcXCIpKTtcXG4gICAgICAgICAgICBpZiAoKHBhcmFtcy5zdHJva2UgJiYgcGFyYW1zLnN0cm9rZSAhPSBcXFwibm9uZVxcXCIpIHx8XFxuICAgICAgICAgICAgICAgIHBhcmFtc1tcXFwic3Ryb2tlLXdpZHRoXFxcIl0gfHxcXG4gICAgICAgICAgICAgICAgcGFyYW1zW1xcXCJzdHJva2Utb3BhY2l0eVxcXCJdICE9IG51bGwgfHxcXG4gICAgICAgICAgICAgICAgcGFyYW1zW1xcXCJzdHJva2UtZGFzaGFycmF5XFxcIl0gfHxcXG4gICAgICAgICAgICAgICAgcGFyYW1zW1xcXCJzdHJva2UtbWl0ZXJsaW1pdFxcXCJdIHx8XFxuICAgICAgICAgICAgICAgIHBhcmFtc1tcXFwic3Ryb2tlLWxpbmVqb2luXFxcIl0gfHxcXG4gICAgICAgICAgICAgICAgcGFyYW1zW1xcXCJzdHJva2UtbGluZWNhcFxcXCJdKSB7XFxuICAgICAgICAgICAgICAgIHN0cm9rZS5vbiA9IHRydWU7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIChwYXJhbXMuc3Ryb2tlID09IFxcXCJub25lXFxcIiB8fCBwYXJhbXMuc3Ryb2tlID09PSBudWxsIHx8IHN0cm9rZS5vbiA9PSBudWxsIHx8IHBhcmFtcy5zdHJva2UgPT0gMCB8fCBwYXJhbXNbXFxcInN0cm9rZS13aWR0aFxcXCJdID09IDApICYmIChzdHJva2Uub24gPSBmYWxzZSk7XFxuICAgICAgICAgICAgdmFyIHN0cm9rZUNvbG9yID0gUi5nZXRSR0IocGFyYW1zLnN0cm9rZSk7XFxuICAgICAgICAgICAgc3Ryb2tlLm9uICYmIHBhcmFtcy5zdHJva2UgJiYgKHN0cm9rZS5jb2xvciA9IHN0cm9rZUNvbG9yLmhleCk7XFxuICAgICAgICAgICAgb3BhY2l0eSA9ICgoK2FbXFxcInN0cm9rZS1vcGFjaXR5XFxcIl0gKyAxIHx8IDIpIC0gMSkgKiAoKCthLm9wYWNpdHkgKyAxIHx8IDIpIC0gMSkgKiAoKCtzdHJva2VDb2xvci5vICsgMSB8fCAyKSAtIDEpO1xcbiAgICAgICAgICAgIHZhciB3aWR0aCA9ICh0b0Zsb2F0KHBhcmFtc1tcXFwic3Ryb2tlLXdpZHRoXFxcIl0pIHx8IDEpICogLjc1O1xcbiAgICAgICAgICAgIG9wYWNpdHkgPSBtbWluKG1tYXgob3BhY2l0eSwgMCksIDEpO1xcbiAgICAgICAgICAgIHBhcmFtc1tcXFwic3Ryb2tlLXdpZHRoXFxcIl0gPT0gbnVsbCAmJiAod2lkdGggPSBhW1xcXCJzdHJva2Utd2lkdGhcXFwiXSk7XFxuICAgICAgICAgICAgcGFyYW1zW1xcXCJzdHJva2Utd2lkdGhcXFwiXSAmJiAoc3Ryb2tlLndlaWdodCA9IHdpZHRoKTtcXG4gICAgICAgICAgICB3aWR0aCAmJiB3aWR0aCA8IDEgJiYgKG9wYWNpdHkgKj0gd2lkdGgpICYmIChzdHJva2Uud2VpZ2h0ID0gMSk7XFxuICAgICAgICAgICAgc3Ryb2tlLm9wYWNpdHkgPSBvcGFjaXR5O1xcblxcbiAgICAgICAgICAgIHBhcmFtc1tcXFwic3Ryb2tlLWxpbmVqb2luXFxcIl0gJiYgKHN0cm9rZS5qb2luc3R5bGUgPSBwYXJhbXNbXFxcInN0cm9rZS1saW5lam9pblxcXCJdIHx8IFxcXCJtaXRlclxcXCIpO1xcbiAgICAgICAgICAgIHN0cm9rZS5taXRlcmxpbWl0ID0gcGFyYW1zW1xcXCJzdHJva2UtbWl0ZXJsaW1pdFxcXCJdIHx8IDg7XFxuICAgICAgICAgICAgcGFyYW1zW1xcXCJzdHJva2UtbGluZWNhcFxcXCJdICYmIChzdHJva2UuZW5kY2FwID0gcGFyYW1zW1xcXCJzdHJva2UtbGluZWNhcFxcXCJdID09IFxcXCJidXR0XFxcIiA/IFxcXCJmbGF0XFxcIiA6IHBhcmFtc1tcXFwic3Ryb2tlLWxpbmVjYXBcXFwiXSA9PSBcXFwic3F1YXJlXFxcIiA/IFxcXCJzcXVhcmVcXFwiIDogXFxcInJvdW5kXFxcIik7XFxuICAgICAgICAgICAgaWYgKFxcXCJzdHJva2UtZGFzaGFycmF5XFxcIiBpbiBwYXJhbXMpIHtcXG4gICAgICAgICAgICAgICAgdmFyIGRhc2hhcnJheSA9IHtcXG4gICAgICAgICAgICAgICAgICAgIFxcXCItXFxcIjogXFxcInNob3J0ZGFzaFxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwiLlxcXCI6IFxcXCJzaG9ydGRvdFxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwiLS5cXFwiOiBcXFwic2hvcnRkYXNoZG90XFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCItLi5cXFwiOiBcXFwic2hvcnRkYXNoZG90ZG90XFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCIuIFxcXCI6IFxcXCJkb3RcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcIi0gXFxcIjogXFxcImRhc2hcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcIi0tXFxcIjogXFxcImxvbmdkYXNoXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCItIC5cXFwiOiBcXFwiZGFzaGRvdFxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwiLS0uXFxcIjogXFxcImxvbmdkYXNoZG90XFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCItLS4uXFxcIjogXFxcImxvbmdkYXNoZG90ZG90XFxcIlxcbiAgICAgICAgICAgICAgICB9O1xcbiAgICAgICAgICAgICAgICBzdHJva2UuZGFzaHN0eWxlID0gZGFzaGFycmF5W2hhc10ocGFyYW1zW1xcXCJzdHJva2UtZGFzaGFycmF5XFxcIl0pID8gZGFzaGFycmF5W3BhcmFtc1tcXFwic3Ryb2tlLWRhc2hhcnJheVxcXCJdXSA6IEU7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIG5ld3N0cm9rZSAmJiBub2RlLmFwcGVuZENoaWxkKHN0cm9rZSk7XFxuICAgICAgICB9XFxuICAgICAgICBpZiAocmVzLnR5cGUgPT0gXFxcInRleHRcXFwiKSB7XFxuICAgICAgICAgICAgcmVzLnBhcGVyLmNhbnZhcy5zdHlsZS5kaXNwbGF5ID0gRTtcXG4gICAgICAgICAgICB2YXIgc3BhbiA9IHJlcy5wYXBlci5zcGFuLFxcbiAgICAgICAgICAgICAgICBtID0gMTAwLFxcbiAgICAgICAgICAgICAgICBmb250U2l6ZSA9IGEuZm9udCAmJiBhLmZvbnQubWF0Y2goL1xcXFxkKyg/OlxcXFwuXFxcXGQqKT8oPz1weCkvKTtcXG4gICAgICAgICAgICBzID0gc3Bhbi5zdHlsZTtcXG4gICAgICAgICAgICBhLmZvbnQgJiYgKHMuZm9udCA9IGEuZm9udCk7XFxuICAgICAgICAgICAgYVtcXFwiZm9udC1mYW1pbHlcXFwiXSAmJiAocy5mb250RmFtaWx5ID0gYVtcXFwiZm9udC1mYW1pbHlcXFwiXSk7XFxuICAgICAgICAgICAgYVtcXFwiZm9udC13ZWlnaHRcXFwiXSAmJiAocy5mb250V2VpZ2h0ID0gYVtcXFwiZm9udC13ZWlnaHRcXFwiXSk7XFxuICAgICAgICAgICAgYVtcXFwiZm9udC1zdHlsZVxcXCJdICYmIChzLmZvbnRTdHlsZSA9IGFbXFxcImZvbnQtc3R5bGVcXFwiXSk7XFxuICAgICAgICAgICAgZm9udFNpemUgPSB0b0Zsb2F0KGFbXFxcImZvbnQtc2l6ZVxcXCJdIHx8IGZvbnRTaXplICYmIGZvbnRTaXplWzBdKSB8fCAxMDtcXG4gICAgICAgICAgICBzLmZvbnRTaXplID0gZm9udFNpemUgKiBtICsgXFxcInB4XFxcIjtcXG4gICAgICAgICAgICByZXMudGV4dHBhdGguc3RyaW5nICYmIChzcGFuLmlubmVySFRNTCA9IFN0cihyZXMudGV4dHBhdGguc3RyaW5nKS5yZXBsYWNlKC88L2csIFxcXCImIzYwO1xcXCIpLnJlcGxhY2UoLyYvZywgXFxcIiYjMzg7XFxcIikucmVwbGFjZSgvXFxcXG4vZywgXFxcIjxicj5cXFwiKSk7XFxuICAgICAgICAgICAgdmFyIGJyZWN0ID0gc3Bhbi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcXG4gICAgICAgICAgICByZXMuVyA9IGEudyA9IChicmVjdC5yaWdodCAtIGJyZWN0LmxlZnQpIC8gbTtcXG4gICAgICAgICAgICByZXMuSCA9IGEuaCA9IChicmVjdC5ib3R0b20gLSBicmVjdC50b3ApIC8gbTtcXG4gICAgICAgICAgICAvLyByZXMucGFwZXIuY2FudmFzLnN0eWxlLmRpc3BsYXkgPSBcXFwibm9uZVxcXCI7XFxuICAgICAgICAgICAgcmVzLlggPSBhLng7XFxuICAgICAgICAgICAgcmVzLlkgPSBhLnkgKyByZXMuSCAvIDI7XFxuXFxuICAgICAgICAgICAgKFxcXCJ4XFxcIiBpbiBwYXJhbXMgfHwgXFxcInlcXFwiIGluIHBhcmFtcykgJiYgKHJlcy5wYXRoLnYgPSBSLmZvcm1hdChcXFwibXswfSx7MX1sezJ9LHsxfVxcXCIsIHJvdW5kKGEueCAqIHpvb20pLCByb3VuZChhLnkgKiB6b29tKSwgcm91bmQoYS54ICogem9vbSkgKyAxKSk7XFxuICAgICAgICAgICAgdmFyIGRpcnR5YXR0cnMgPSBbXFxcInhcXFwiLCBcXFwieVxcXCIsIFxcXCJ0ZXh0XFxcIiwgXFxcImZvbnRcXFwiLCBcXFwiZm9udC1mYW1pbHlcXFwiLCBcXFwiZm9udC13ZWlnaHRcXFwiLCBcXFwiZm9udC1zdHlsZVxcXCIsIFxcXCJmb250LXNpemVcXFwiXTtcXG4gICAgICAgICAgICBmb3IgKHZhciBkID0gMCwgZGQgPSBkaXJ0eWF0dHJzLmxlbmd0aDsgZCA8IGRkOyBkKyspIGlmIChkaXJ0eWF0dHJzW2RdIGluIHBhcmFtcykge1xcbiAgICAgICAgICAgICAgICByZXMuXy5kaXJ0eSA9IDE7XFxuICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAvLyB0ZXh0LWFuY2hvciBlbXVsYXRpb25cXG4gICAgICAgICAgICBzd2l0Y2ggKGFbXFxcInRleHQtYW5jaG9yXFxcIl0pIHtcXG4gICAgICAgICAgICAgICAgY2FzZSBcXFwic3RhcnRcXFwiOlxcbiAgICAgICAgICAgICAgICAgICAgcmVzLnRleHRwYXRoLnN0eWxlW1xcXCJ2LXRleHQtYWxpZ25cXFwiXSA9IFxcXCJsZWZ0XFxcIjtcXG4gICAgICAgICAgICAgICAgICAgIHJlcy5iYnggPSByZXMuVyAvIDI7XFxuICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgICAgICBjYXNlIFxcXCJlbmRcXFwiOlxcbiAgICAgICAgICAgICAgICAgICAgcmVzLnRleHRwYXRoLnN0eWxlW1xcXCJ2LXRleHQtYWxpZ25cXFwiXSA9IFxcXCJyaWdodFxcXCI7XFxuICAgICAgICAgICAgICAgICAgICByZXMuYmJ4ID0gLXJlcy5XIC8gMjtcXG4gICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XFxuICAgICAgICAgICAgICAgICAgICByZXMudGV4dHBhdGguc3R5bGVbXFxcInYtdGV4dC1hbGlnblxcXCJdID0gXFxcImNlbnRlclxcXCI7XFxuICAgICAgICAgICAgICAgICAgICByZXMuYmJ4ID0gMDtcXG4gICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIHJlcy50ZXh0cGF0aC5zdHlsZVtcXFwidi10ZXh0LWtlcm5cXFwiXSA9IHRydWU7XFxuICAgICAgICB9XFxuICAgICAgICAvLyByZXMucGFwZXIuY2FudmFzLnN0eWxlLmRpc3BsYXkgPSBFO1xcbiAgICB9LFxcbiAgICBhZGRHcmFkaWVudEZpbGwgPSBmdW5jdGlvbiAobywgZ3JhZGllbnQsIGZpbGwpIHtcXG4gICAgICAgIG8uYXR0cnMgPSBvLmF0dHJzIHx8IHt9O1xcbiAgICAgICAgdmFyIGF0dHJzID0gby5hdHRycyxcXG4gICAgICAgICAgICBwb3cgPSBNYXRoLnBvdyxcXG4gICAgICAgICAgICBvcGFjaXR5LFxcbiAgICAgICAgICAgIG9pbmRleCxcXG4gICAgICAgICAgICB0eXBlID0gXFxcImxpbmVhclxcXCIsXFxuICAgICAgICAgICAgZnhmeSA9IFxcXCIuNSAuNVxcXCI7XFxuICAgICAgICBvLmF0dHJzLmdyYWRpZW50ID0gZ3JhZGllbnQ7XFxuICAgICAgICBncmFkaWVudCA9IFN0cihncmFkaWVudCkucmVwbGFjZShSLl9yYWRpYWxfZ3JhZGllbnQsIGZ1bmN0aW9uIChhbGwsIGZ4LCBmeSkge1xcbiAgICAgICAgICAgIHR5cGUgPSBcXFwicmFkaWFsXFxcIjtcXG4gICAgICAgICAgICBpZiAoZnggJiYgZnkpIHtcXG4gICAgICAgICAgICAgICAgZnggPSB0b0Zsb2F0KGZ4KTtcXG4gICAgICAgICAgICAgICAgZnkgPSB0b0Zsb2F0KGZ5KTtcXG4gICAgICAgICAgICAgICAgcG93KGZ4IC0gLjUsIDIpICsgcG93KGZ5IC0gLjUsIDIpID4gLjI1ICYmIChmeSA9IG1hdGguc3FydCguMjUgLSBwb3coZnggLSAuNSwgMikpICogKChmeSA+IC41KSAqIDIgLSAxKSArIC41KTtcXG4gICAgICAgICAgICAgICAgZnhmeSA9IGZ4ICsgUyArIGZ5O1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICByZXR1cm4gRTtcXG4gICAgICAgIH0pO1xcbiAgICAgICAgZ3JhZGllbnQgPSBncmFkaWVudC5zcGxpdCgvXFxcXHMqXFxcXC1cXFxccyovKTtcXG4gICAgICAgIGlmICh0eXBlID09IFxcXCJsaW5lYXJcXFwiKSB7XFxuICAgICAgICAgICAgdmFyIGFuZ2xlID0gZ3JhZGllbnQuc2hpZnQoKTtcXG4gICAgICAgICAgICBhbmdsZSA9IC10b0Zsb2F0KGFuZ2xlKTtcXG4gICAgICAgICAgICBpZiAoaXNOYU4oYW5nbGUpKSB7XFxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIHZhciBkb3RzID0gUi5fcGFyc2VEb3RzKGdyYWRpZW50KTtcXG4gICAgICAgIGlmICghZG90cykge1xcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xcbiAgICAgICAgfVxcbiAgICAgICAgbyA9IG8uc2hhcGUgfHwgby5ub2RlO1xcbiAgICAgICAgaWYgKGRvdHMubGVuZ3RoKSB7XFxuICAgICAgICAgICAgby5yZW1vdmVDaGlsZChmaWxsKTtcXG4gICAgICAgICAgICBmaWxsLm9uID0gdHJ1ZTtcXG4gICAgICAgICAgICBmaWxsLm1ldGhvZCA9IFxcXCJub25lXFxcIjtcXG4gICAgICAgICAgICBmaWxsLmNvbG9yID0gZG90c1swXS5jb2xvcjtcXG4gICAgICAgICAgICBmaWxsLmNvbG9yMiA9IGRvdHNbZG90cy5sZW5ndGggLSAxXS5jb2xvcjtcXG4gICAgICAgICAgICB2YXIgY2xycyA9IFtdO1xcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IGRvdHMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xcbiAgICAgICAgICAgICAgICBkb3RzW2ldLm9mZnNldCAmJiBjbHJzLnB1c2goZG90c1tpXS5vZmZzZXQgKyBTICsgZG90c1tpXS5jb2xvcik7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIGZpbGwuY29sb3JzID0gY2xycy5sZW5ndGggPyBjbHJzLmpvaW4oKSA6IFxcXCIwJSBcXFwiICsgZmlsbC5jb2xvcjtcXG4gICAgICAgICAgICBpZiAodHlwZSA9PSBcXFwicmFkaWFsXFxcIikge1xcbiAgICAgICAgICAgICAgICBmaWxsLnR5cGUgPSBcXFwiZ3JhZGllbnRUaXRsZVxcXCI7XFxuICAgICAgICAgICAgICAgIGZpbGwuZm9jdXMgPSBcXFwiMTAwJVxcXCI7XFxuICAgICAgICAgICAgICAgIGZpbGwuZm9jdXNzaXplID0gXFxcIjAgMFxcXCI7XFxuICAgICAgICAgICAgICAgIGZpbGwuZm9jdXNwb3NpdGlvbiA9IGZ4Znk7XFxuICAgICAgICAgICAgICAgIGZpbGwuYW5nbGUgPSAwO1xcbiAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgIC8vIGZpbGwucm90YXRlPSB0cnVlO1xcbiAgICAgICAgICAgICAgICBmaWxsLnR5cGUgPSBcXFwiZ3JhZGllbnRcXFwiO1xcbiAgICAgICAgICAgICAgICBmaWxsLmFuZ2xlID0gKDI3MCAtIGFuZ2xlKSAlIDM2MDtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgby5hcHBlbmRDaGlsZChmaWxsKTtcXG4gICAgICAgIH1cXG4gICAgICAgIHJldHVybiAxO1xcbiAgICB9LFxcbiAgICBFbGVtZW50ID0gZnVuY3Rpb24gKG5vZGUsIHZtbCkge1xcbiAgICAgICAgdGhpc1swXSA9IHRoaXMubm9kZSA9IG5vZGU7XFxuICAgICAgICBub2RlLnJhcGhhZWwgPSB0cnVlO1xcbiAgICAgICAgdGhpcy5pZCA9IFIuX29pZCsrO1xcbiAgICAgICAgbm9kZS5yYXBoYWVsaWQgPSB0aGlzLmlkO1xcbiAgICAgICAgdGhpcy5YID0gMDtcXG4gICAgICAgIHRoaXMuWSA9IDA7XFxuICAgICAgICB0aGlzLmF0dHJzID0ge307XFxuICAgICAgICB0aGlzLnBhcGVyID0gdm1sO1xcbiAgICAgICAgdGhpcy5tYXRyaXggPSBSLm1hdHJpeCgpO1xcbiAgICAgICAgdGhpcy5fID0ge1xcbiAgICAgICAgICAgIHRyYW5zZm9ybTogW10sXFxuICAgICAgICAgICAgc3g6IDEsXFxuICAgICAgICAgICAgc3k6IDEsXFxuICAgICAgICAgICAgZHg6IDAsXFxuICAgICAgICAgICAgZHk6IDAsXFxuICAgICAgICAgICAgZGVnOiAwLFxcbiAgICAgICAgICAgIGRpcnR5OiAxLFxcbiAgICAgICAgICAgIGRpcnR5VDogMVxcbiAgICAgICAgfTtcXG4gICAgICAgICF2bWwuYm90dG9tICYmICh2bWwuYm90dG9tID0gdGhpcyk7XFxuICAgICAgICB0aGlzLnByZXYgPSB2bWwudG9wO1xcbiAgICAgICAgdm1sLnRvcCAmJiAodm1sLnRvcC5uZXh0ID0gdGhpcyk7XFxuICAgICAgICB2bWwudG9wID0gdGhpcztcXG4gICAgICAgIHRoaXMubmV4dCA9IG51bGw7XFxuICAgIH07XFxuICAgIHZhciBlbHByb3RvID0gUi5lbDtcXG5cXG4gICAgRWxlbWVudC5wcm90b3R5cGUgPSBlbHByb3RvO1xcbiAgICBlbHByb3RvLmNvbnN0cnVjdG9yID0gRWxlbWVudDtcXG4gICAgZWxwcm90by50cmFuc2Zvcm0gPSBmdW5jdGlvbiAodHN0cikge1xcbiAgICAgICAgaWYgKHRzdHIgPT0gbnVsbCkge1xcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl8udHJhbnNmb3JtO1xcbiAgICAgICAgfVxcbiAgICAgICAgdmFyIHZicyA9IHRoaXMucGFwZXIuX3ZpZXdCb3hTaGlmdCxcXG4gICAgICAgICAgICB2YnQgPSB2YnMgPyBcXFwic1xcXCIgKyBbdmJzLnNjYWxlLCB2YnMuc2NhbGVdICsgXFxcIi0xLTF0XFxcIiArIFt2YnMuZHgsIHZicy5keV0gOiBFLFxcbiAgICAgICAgICAgIG9sZHQ7XFxuICAgICAgICBpZiAodmJzKSB7XFxuICAgICAgICAgICAgb2xkdCA9IHRzdHIgPSBTdHIodHN0cikucmVwbGFjZSgvXFxcXC57M318XFxcXHUyMDI2L2csIHRoaXMuXy50cmFuc2Zvcm0gfHwgRSk7XFxuICAgICAgICB9XFxuICAgICAgICBSLl9leHRyYWN0VHJhbnNmb3JtKHRoaXMsIHZidCArIHRzdHIpO1xcbiAgICAgICAgdmFyIG1hdHJpeCA9IHRoaXMubWF0cml4LmNsb25lKCksXFxuICAgICAgICAgICAgc2tldyA9IHRoaXMuc2tldyxcXG4gICAgICAgICAgICBvID0gdGhpcy5ub2RlLFxcbiAgICAgICAgICAgIHNwbGl0LFxcbiAgICAgICAgICAgIGlzR3JhZCA9IH5TdHIodGhpcy5hdHRycy5maWxsKS5pbmRleE9mKFxcXCItXFxcIiksXFxuICAgICAgICAgICAgaXNQYXR0ID0gIVN0cih0aGlzLmF0dHJzLmZpbGwpLmluZGV4T2YoXFxcInVybChcXFwiKTtcXG4gICAgICAgIG1hdHJpeC50cmFuc2xhdGUoMSwgMSk7XFxuICAgICAgICBpZiAoaXNQYXR0IHx8IGlzR3JhZCB8fCB0aGlzLnR5cGUgPT0gXFxcImltYWdlXFxcIikge1xcbiAgICAgICAgICAgIHNrZXcubWF0cml4ID0gXFxcIjEgMCAwIDFcXFwiO1xcbiAgICAgICAgICAgIHNrZXcub2Zmc2V0ID0gXFxcIjAgMFxcXCI7XFxuICAgICAgICAgICAgc3BsaXQgPSBtYXRyaXguc3BsaXQoKTtcXG4gICAgICAgICAgICBpZiAoKGlzR3JhZCAmJiBzcGxpdC5ub1JvdGF0aW9uKSB8fCAhc3BsaXQuaXNTaW1wbGUpIHtcXG4gICAgICAgICAgICAgICAgby5zdHlsZS5maWx0ZXIgPSBtYXRyaXgudG9GaWx0ZXIoKTtcXG4gICAgICAgICAgICAgICAgdmFyIGJiID0gdGhpcy5nZXRCQm94KCksXFxuICAgICAgICAgICAgICAgICAgICBiYnQgPSB0aGlzLmdldEJCb3goMSksXFxuICAgICAgICAgICAgICAgICAgICBkeCA9IGJiLnggLSBiYnQueCxcXG4gICAgICAgICAgICAgICAgICAgIGR5ID0gYmIueSAtIGJidC55O1xcbiAgICAgICAgICAgICAgICBvLmNvb3Jkb3JpZ2luID0gKGR4ICogLXpvb20pICsgUyArIChkeSAqIC16b29tKTtcXG4gICAgICAgICAgICAgICAgc2V0Q29vcmRzKHRoaXMsIDEsIDEsIGR4LCBkeSwgMCk7XFxuICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgby5zdHlsZS5maWx0ZXIgPSBFO1xcbiAgICAgICAgICAgICAgICBzZXRDb29yZHModGhpcywgc3BsaXQuc2NhbGV4LCBzcGxpdC5zY2FsZXksIHNwbGl0LmR4LCBzcGxpdC5keSwgc3BsaXQucm90YXRlKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgIG8uc3R5bGUuZmlsdGVyID0gRTtcXG4gICAgICAgICAgICBza2V3Lm1hdHJpeCA9IFN0cihtYXRyaXgpO1xcbiAgICAgICAgICAgIHNrZXcub2Zmc2V0ID0gbWF0cml4Lm9mZnNldCgpO1xcbiAgICAgICAgfVxcbiAgICAgICAgaWYgKG9sZHQgIT09IG51bGwpIHsgLy8gZW1wdHkgc3RyaW5nIHZhbHVlIGlzIHRydWUgYXMgd2VsbFxcbiAgICAgICAgICAgIHRoaXMuXy50cmFuc2Zvcm0gPSBvbGR0O1xcbiAgICAgICAgICAgIFIuX2V4dHJhY3RUcmFuc2Zvcm0odGhpcywgb2xkdCk7XFxuICAgICAgICB9XFxuICAgICAgICByZXR1cm4gdGhpcztcXG4gICAgfTtcXG4gICAgZWxwcm90by5yb3RhdGUgPSBmdW5jdGlvbiAoZGVnLCBjeCwgY3kpIHtcXG4gICAgICAgIGlmICh0aGlzLnJlbW92ZWQpIHtcXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcXG4gICAgICAgIH1cXG4gICAgICAgIGlmIChkZWcgPT0gbnVsbCkge1xcbiAgICAgICAgICAgIHJldHVybjtcXG4gICAgICAgIH1cXG4gICAgICAgIGRlZyA9IFN0cihkZWcpLnNwbGl0KHNlcGFyYXRvcik7XFxuICAgICAgICBpZiAoZGVnLmxlbmd0aCAtIDEpIHtcXG4gICAgICAgICAgICBjeCA9IHRvRmxvYXQoZGVnWzFdKTtcXG4gICAgICAgICAgICBjeSA9IHRvRmxvYXQoZGVnWzJdKTtcXG4gICAgICAgIH1cXG4gICAgICAgIGRlZyA9IHRvRmxvYXQoZGVnWzBdKTtcXG4gICAgICAgIChjeSA9PSBudWxsKSAmJiAoY3ggPSBjeSk7XFxuICAgICAgICBpZiAoY3ggPT0gbnVsbCB8fCBjeSA9PSBudWxsKSB7XFxuICAgICAgICAgICAgdmFyIGJib3ggPSB0aGlzLmdldEJCb3goMSk7XFxuICAgICAgICAgICAgY3ggPSBiYm94LnggKyBiYm94LndpZHRoIC8gMjtcXG4gICAgICAgICAgICBjeSA9IGJib3gueSArIGJib3guaGVpZ2h0IC8gMjtcXG4gICAgICAgIH1cXG4gICAgICAgIHRoaXMuXy5kaXJ0eVQgPSAxO1xcbiAgICAgICAgdGhpcy50cmFuc2Zvcm0odGhpcy5fLnRyYW5zZm9ybS5jb25jYXQoW1tcXFwiclxcXCIsIGRlZywgY3gsIGN5XV0pKTtcXG4gICAgICAgIHJldHVybiB0aGlzO1xcbiAgICB9O1xcbiAgICBlbHByb3RvLnRyYW5zbGF0ZSA9IGZ1bmN0aW9uIChkeCwgZHkpIHtcXG4gICAgICAgIGlmICh0aGlzLnJlbW92ZWQpIHtcXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcXG4gICAgICAgIH1cXG4gICAgICAgIGR4ID0gU3RyKGR4KS5zcGxpdChzZXBhcmF0b3IpO1xcbiAgICAgICAgaWYgKGR4Lmxlbmd0aCAtIDEpIHtcXG4gICAgICAgICAgICBkeSA9IHRvRmxvYXQoZHhbMV0pO1xcbiAgICAgICAgfVxcbiAgICAgICAgZHggPSB0b0Zsb2F0KGR4WzBdKSB8fCAwO1xcbiAgICAgICAgZHkgPSArZHkgfHwgMDtcXG4gICAgICAgIGlmICh0aGlzLl8uYmJveCkge1xcbiAgICAgICAgICAgIHRoaXMuXy5iYm94LnggKz0gZHg7XFxuICAgICAgICAgICAgdGhpcy5fLmJib3gueSArPSBkeTtcXG4gICAgICAgIH1cXG4gICAgICAgIHRoaXMudHJhbnNmb3JtKHRoaXMuXy50cmFuc2Zvcm0uY29uY2F0KFtbXFxcInRcXFwiLCBkeCwgZHldXSkpO1xcbiAgICAgICAgcmV0dXJuIHRoaXM7XFxuICAgIH07XFxuICAgIGVscHJvdG8uc2NhbGUgPSBmdW5jdGlvbiAoc3gsIHN5LCBjeCwgY3kpIHtcXG4gICAgICAgIGlmICh0aGlzLnJlbW92ZWQpIHtcXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcXG4gICAgICAgIH1cXG4gICAgICAgIHN4ID0gU3RyKHN4KS5zcGxpdChzZXBhcmF0b3IpO1xcbiAgICAgICAgaWYgKHN4Lmxlbmd0aCAtIDEpIHtcXG4gICAgICAgICAgICBzeSA9IHRvRmxvYXQoc3hbMV0pO1xcbiAgICAgICAgICAgIGN4ID0gdG9GbG9hdChzeFsyXSk7XFxuICAgICAgICAgICAgY3kgPSB0b0Zsb2F0KHN4WzNdKTtcXG4gICAgICAgICAgICBpc05hTihjeCkgJiYgKGN4ID0gbnVsbCk7XFxuICAgICAgICAgICAgaXNOYU4oY3kpICYmIChjeSA9IG51bGwpO1xcbiAgICAgICAgfVxcbiAgICAgICAgc3ggPSB0b0Zsb2F0KHN4WzBdKTtcXG4gICAgICAgIChzeSA9PSBudWxsKSAmJiAoc3kgPSBzeCk7XFxuICAgICAgICAoY3kgPT0gbnVsbCkgJiYgKGN4ID0gY3kpO1xcbiAgICAgICAgaWYgKGN4ID09IG51bGwgfHwgY3kgPT0gbnVsbCkge1xcbiAgICAgICAgICAgIHZhciBiYm94ID0gdGhpcy5nZXRCQm94KDEpO1xcbiAgICAgICAgfVxcbiAgICAgICAgY3ggPSBjeCA9PSBudWxsID8gYmJveC54ICsgYmJveC53aWR0aCAvIDIgOiBjeDtcXG4gICAgICAgIGN5ID0gY3kgPT0gbnVsbCA/IGJib3gueSArIGJib3guaGVpZ2h0IC8gMiA6IGN5O1xcblxcbiAgICAgICAgdGhpcy50cmFuc2Zvcm0odGhpcy5fLnRyYW5zZm9ybS5jb25jYXQoW1tcXFwic1xcXCIsIHN4LCBzeSwgY3gsIGN5XV0pKTtcXG4gICAgICAgIHRoaXMuXy5kaXJ0eVQgPSAxO1xcbiAgICAgICAgcmV0dXJuIHRoaXM7XFxuICAgIH07XFxuICAgIGVscHJvdG8uaGlkZSA9IGZ1bmN0aW9uICgpIHtcXG4gICAgICAgICF0aGlzLnJlbW92ZWQgJiYgKHRoaXMubm9kZS5zdHlsZS5kaXNwbGF5ID0gXFxcIm5vbmVcXFwiKTtcXG4gICAgICAgIHJldHVybiB0aGlzO1xcbiAgICB9O1xcbiAgICBlbHByb3RvLnNob3cgPSBmdW5jdGlvbiAoKSB7XFxuICAgICAgICAhdGhpcy5yZW1vdmVkICYmICh0aGlzLm5vZGUuc3R5bGUuZGlzcGxheSA9IEUpO1xcbiAgICAgICAgcmV0dXJuIHRoaXM7XFxuICAgIH07XFxuICAgIC8vIE5lZWRlZCB0byBmaXggdGhlIHZtbCBzZXRWaWV3Qm94IGlzc3Vlc1xcbiAgICBlbHByb3RvLmF1eEdldEJCb3ggPSBSLmVsLmdldEJCb3g7XFxuICAgIGVscHJvdG8uZ2V0QkJveCA9IGZ1bmN0aW9uKCl7XFxuICAgICAgdmFyIGIgPSB0aGlzLmF1eEdldEJCb3goKTtcXG4gICAgICBpZiAodGhpcy5wYXBlciAmJiB0aGlzLnBhcGVyLl92aWV3Qm94U2hpZnQpXFxuICAgICAge1xcbiAgICAgICAgdmFyIGMgPSB7fTtcXG4gICAgICAgIHZhciB6ID0gMS90aGlzLnBhcGVyLl92aWV3Qm94U2hpZnQuc2NhbGU7XFxuICAgICAgICBjLnggPSBiLnggLSB0aGlzLnBhcGVyLl92aWV3Qm94U2hpZnQuZHg7XFxuICAgICAgICBjLnggKj0gejtcXG4gICAgICAgIGMueSA9IGIueSAtIHRoaXMucGFwZXIuX3ZpZXdCb3hTaGlmdC5keTtcXG4gICAgICAgIGMueSAqPSB6O1xcbiAgICAgICAgYy53aWR0aCAgPSBiLndpZHRoICAqIHo7XFxuICAgICAgICBjLmhlaWdodCA9IGIuaGVpZ2h0ICogejtcXG4gICAgICAgIGMueDIgPSBjLnggKyBjLndpZHRoO1xcbiAgICAgICAgYy55MiA9IGMueSArIGMuaGVpZ2h0O1xcbiAgICAgICAgcmV0dXJuIGM7XFxuICAgICAgfVxcbiAgICAgIHJldHVybiBiO1xcbiAgICB9O1xcbiAgICBlbHByb3RvLl9nZXRCQm94ID0gZnVuY3Rpb24gKCkge1xcbiAgICAgICAgaWYgKHRoaXMucmVtb3ZlZCkge1xcbiAgICAgICAgICAgIHJldHVybiB7fTtcXG4gICAgICAgIH1cXG4gICAgICAgIHJldHVybiB7XFxuICAgICAgICAgICAgeDogdGhpcy5YICsgKHRoaXMuYmJ4IHx8IDApIC0gdGhpcy5XIC8gMixcXG4gICAgICAgICAgICB5OiB0aGlzLlkgLSB0aGlzLkgsXFxuICAgICAgICAgICAgd2lkdGg6IHRoaXMuVyxcXG4gICAgICAgICAgICBoZWlnaHQ6IHRoaXMuSFxcbiAgICAgICAgfTtcXG4gICAgfTtcXG4gICAgZWxwcm90by5yZW1vdmUgPSBmdW5jdGlvbiAoKSB7XFxuICAgICAgICBpZiAodGhpcy5yZW1vdmVkIHx8ICF0aGlzLm5vZGUucGFyZW50Tm9kZSkge1xcbiAgICAgICAgICAgIHJldHVybjtcXG4gICAgICAgIH1cXG4gICAgICAgIHRoaXMucGFwZXIuX19zZXRfXyAmJiB0aGlzLnBhcGVyLl9fc2V0X18uZXhjbHVkZSh0aGlzKTtcXG4gICAgICAgIFIuZXZlLnVuYmluZChcXFwicmFwaGFlbC4qLiouXFxcIiArIHRoaXMuaWQpO1xcbiAgICAgICAgUi5fdGVhcih0aGlzLCB0aGlzLnBhcGVyKTtcXG4gICAgICAgIHRoaXMubm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMubm9kZSk7XFxuICAgICAgICB0aGlzLnNoYXBlICYmIHRoaXMuc2hhcGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLnNoYXBlKTtcXG4gICAgICAgIGZvciAodmFyIGkgaW4gdGhpcykge1xcbiAgICAgICAgICAgIHRoaXNbaV0gPSB0eXBlb2YgdGhpc1tpXSA9PSBcXFwiZnVuY3Rpb25cXFwiID8gUi5fcmVtb3ZlZEZhY3RvcnkoaSkgOiBudWxsO1xcbiAgICAgICAgfVxcbiAgICAgICAgdGhpcy5yZW1vdmVkID0gdHJ1ZTtcXG4gICAgfTtcXG4gICAgZWxwcm90by5hdHRyID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XFxuICAgICAgICBpZiAodGhpcy5yZW1vdmVkKSB7XFxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XFxuICAgICAgICB9XFxuICAgICAgICBpZiAobmFtZSA9PSBudWxsKSB7XFxuICAgICAgICAgICAgdmFyIHJlcyA9IHt9O1xcbiAgICAgICAgICAgIGZvciAodmFyIGEgaW4gdGhpcy5hdHRycykgaWYgKHRoaXMuYXR0cnNbaGFzXShhKSkge1xcbiAgICAgICAgICAgICAgICByZXNbYV0gPSB0aGlzLmF0dHJzW2FdO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICByZXMuZ3JhZGllbnQgJiYgcmVzLmZpbGwgPT0gXFxcIm5vbmVcXFwiICYmIChyZXMuZmlsbCA9IHJlcy5ncmFkaWVudCkgJiYgZGVsZXRlIHJlcy5ncmFkaWVudDtcXG4gICAgICAgICAgICByZXMudHJhbnNmb3JtID0gdGhpcy5fLnRyYW5zZm9ybTtcXG4gICAgICAgICAgICByZXR1cm4gcmVzO1xcbiAgICAgICAgfVxcbiAgICAgICAgaWYgKHZhbHVlID09IG51bGwgJiYgUi5pcyhuYW1lLCBcXFwic3RyaW5nXFxcIikpIHtcXG4gICAgICAgICAgICBpZiAobmFtZSA9PSBmaWxsU3RyaW5nICYmIHRoaXMuYXR0cnMuZmlsbCA9PSBcXFwibm9uZVxcXCIgJiYgdGhpcy5hdHRycy5ncmFkaWVudCkge1xcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hdHRycy5ncmFkaWVudDtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgdmFyIG5hbWVzID0gbmFtZS5zcGxpdChzZXBhcmF0b3IpLFxcbiAgICAgICAgICAgICAgICBvdXQgPSB7fTtcXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBuYW1lcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XFxuICAgICAgICAgICAgICAgIG5hbWUgPSBuYW1lc1tpXTtcXG4gICAgICAgICAgICAgICAgaWYgKG5hbWUgaW4gdGhpcy5hdHRycykge1xcbiAgICAgICAgICAgICAgICAgICAgb3V0W25hbWVdID0gdGhpcy5hdHRyc1tuYW1lXTtcXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChSLmlzKHRoaXMucGFwZXIuY3VzdG9tQXR0cmlidXRlc1tuYW1lXSwgXFxcImZ1bmN0aW9uXFxcIikpIHtcXG4gICAgICAgICAgICAgICAgICAgIG91dFtuYW1lXSA9IHRoaXMucGFwZXIuY3VzdG9tQXR0cmlidXRlc1tuYW1lXS5kZWY7XFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICBvdXRbbmFtZV0gPSBSLl9hdmFpbGFibGVBdHRyc1tuYW1lXTtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICByZXR1cm4gaWkgLSAxID8gb3V0IDogb3V0W25hbWVzWzBdXTtcXG4gICAgICAgIH1cXG4gICAgICAgIGlmICh0aGlzLmF0dHJzICYmIHZhbHVlID09IG51bGwgJiYgUi5pcyhuYW1lLCBcXFwiYXJyYXlcXFwiKSkge1xcbiAgICAgICAgICAgIG91dCA9IHt9O1xcbiAgICAgICAgICAgIGZvciAoaSA9IDAsIGlpID0gbmFtZS5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XFxuICAgICAgICAgICAgICAgIG91dFtuYW1lW2ldXSA9IHRoaXMuYXR0cihuYW1lW2ldKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgcmV0dXJuIG91dDtcXG4gICAgICAgIH1cXG4gICAgICAgIHZhciBwYXJhbXM7XFxuICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xcbiAgICAgICAgICAgIHBhcmFtcyA9IHt9O1xcbiAgICAgICAgICAgIHBhcmFtc1tuYW1lXSA9IHZhbHVlO1xcbiAgICAgICAgfVxcbiAgICAgICAgdmFsdWUgPT0gbnVsbCAmJiBSLmlzKG5hbWUsIFxcXCJvYmplY3RcXFwiKSAmJiAocGFyYW1zID0gbmFtZSk7XFxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gcGFyYW1zKSB7XFxuICAgICAgICAgICAgZXZlKFxcXCJyYXBoYWVsLmF0dHIuXFxcIiArIGtleSArIFxcXCIuXFxcIiArIHRoaXMuaWQsIHRoaXMsIHBhcmFtc1trZXldKTtcXG4gICAgICAgIH1cXG4gICAgICAgIGlmIChwYXJhbXMpIHtcXG4gICAgICAgICAgICBmb3IgKGtleSBpbiB0aGlzLnBhcGVyLmN1c3RvbUF0dHJpYnV0ZXMpIGlmICh0aGlzLnBhcGVyLmN1c3RvbUF0dHJpYnV0ZXNbaGFzXShrZXkpICYmIHBhcmFtc1toYXNdKGtleSkgJiYgUi5pcyh0aGlzLnBhcGVyLmN1c3RvbUF0dHJpYnV0ZXNba2V5XSwgXFxcImZ1bmN0aW9uXFxcIikpIHtcXG4gICAgICAgICAgICAgICAgdmFyIHBhciA9IHRoaXMucGFwZXIuY3VzdG9tQXR0cmlidXRlc1trZXldLmFwcGx5KHRoaXMsIFtdLmNvbmNhdChwYXJhbXNba2V5XSkpO1xcbiAgICAgICAgICAgICAgICB0aGlzLmF0dHJzW2tleV0gPSBwYXJhbXNba2V5XTtcXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgc3Via2V5IGluIHBhcikgaWYgKHBhcltoYXNdKHN1YmtleSkpIHtcXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtc1tzdWJrZXldID0gcGFyW3N1YmtleV07XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgLy8gdGhpcy5wYXBlci5jYW52YXMuc3R5bGUuZGlzcGxheSA9IFxcXCJub25lXFxcIjtcXG4gICAgICAgICAgICBpZiAocGFyYW1zLnRleHQgJiYgdGhpcy50eXBlID09IFxcXCJ0ZXh0XFxcIikge1xcbiAgICAgICAgICAgICAgICB0aGlzLnRleHRwYXRoLnN0cmluZyA9IHBhcmFtcy50ZXh0O1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBzZXRGaWxsQW5kU3Ryb2tlKHRoaXMsIHBhcmFtcyk7XFxuICAgICAgICAgICAgLy8gdGhpcy5wYXBlci5jYW52YXMuc3R5bGUuZGlzcGxheSA9IEU7XFxuICAgICAgICB9XFxuICAgICAgICByZXR1cm4gdGhpcztcXG4gICAgfTtcXG4gICAgZWxwcm90by50b0Zyb250ID0gZnVuY3Rpb24gKCkge1xcbiAgICAgICAgIXRoaXMucmVtb3ZlZCAmJiB0aGlzLm5vZGUucGFyZW50Tm9kZS5hcHBlbmRDaGlsZCh0aGlzLm5vZGUpO1xcbiAgICAgICAgdGhpcy5wYXBlciAmJiB0aGlzLnBhcGVyLnRvcCAhPSB0aGlzICYmIFIuX3RvZnJvbnQodGhpcywgdGhpcy5wYXBlcik7XFxuICAgICAgICByZXR1cm4gdGhpcztcXG4gICAgfTtcXG4gICAgZWxwcm90by50b0JhY2sgPSBmdW5jdGlvbiAoKSB7XFxuICAgICAgICBpZiAodGhpcy5yZW1vdmVkKSB7XFxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XFxuICAgICAgICB9XFxuICAgICAgICBpZiAodGhpcy5ub2RlLnBhcmVudE5vZGUuZmlyc3RDaGlsZCAhPSB0aGlzLm5vZGUpIHtcXG4gICAgICAgICAgICB0aGlzLm5vZGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcy5ub2RlLCB0aGlzLm5vZGUucGFyZW50Tm9kZS5maXJzdENoaWxkKTtcXG4gICAgICAgICAgICBSLl90b2JhY2sodGhpcywgdGhpcy5wYXBlcik7XFxuICAgICAgICB9XFxuICAgICAgICByZXR1cm4gdGhpcztcXG4gICAgfTtcXG4gICAgZWxwcm90by5pbnNlcnRBZnRlciA9IGZ1bmN0aW9uIChlbGVtZW50KSB7XFxuICAgICAgICBpZiAodGhpcy5yZW1vdmVkKSB7XFxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XFxuICAgICAgICB9XFxuICAgICAgICBpZiAoZWxlbWVudC5jb25zdHJ1Y3RvciA9PSBSLnN0LmNvbnN0cnVjdG9yKSB7XFxuICAgICAgICAgICAgZWxlbWVudCA9IGVsZW1lbnRbZWxlbWVudC5sZW5ndGggLSAxXTtcXG4gICAgICAgIH1cXG4gICAgICAgIGlmIChlbGVtZW50Lm5vZGUubmV4dFNpYmxpbmcpIHtcXG4gICAgICAgICAgICBlbGVtZW50Lm5vZGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcy5ub2RlLCBlbGVtZW50Lm5vZGUubmV4dFNpYmxpbmcpO1xcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICBlbGVtZW50Lm5vZGUucGFyZW50Tm9kZS5hcHBlbmRDaGlsZCh0aGlzLm5vZGUpO1xcbiAgICAgICAgfVxcbiAgICAgICAgUi5faW5zZXJ0YWZ0ZXIodGhpcywgZWxlbWVudCwgdGhpcy5wYXBlcik7XFxuICAgICAgICByZXR1cm4gdGhpcztcXG4gICAgfTtcXG4gICAgZWxwcm90by5pbnNlcnRCZWZvcmUgPSBmdW5jdGlvbiAoZWxlbWVudCkge1xcbiAgICAgICAgaWYgKHRoaXMucmVtb3ZlZCkge1xcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xcbiAgICAgICAgfVxcbiAgICAgICAgaWYgKGVsZW1lbnQuY29uc3RydWN0b3IgPT0gUi5zdC5jb25zdHJ1Y3Rvcikge1xcbiAgICAgICAgICAgIGVsZW1lbnQgPSBlbGVtZW50WzBdO1xcbiAgICAgICAgfVxcbiAgICAgICAgZWxlbWVudC5ub2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMubm9kZSwgZWxlbWVudC5ub2RlKTtcXG4gICAgICAgIFIuX2luc2VydGJlZm9yZSh0aGlzLCBlbGVtZW50LCB0aGlzLnBhcGVyKTtcXG4gICAgICAgIHJldHVybiB0aGlzO1xcbiAgICB9O1xcbiAgICBlbHByb3RvLmJsdXIgPSBmdW5jdGlvbiAoc2l6ZSkge1xcbiAgICAgICAgdmFyIHMgPSB0aGlzLm5vZGUucnVudGltZVN0eWxlLFxcbiAgICAgICAgICAgIGYgPSBzLmZpbHRlcjtcXG4gICAgICAgIGYgPSBmLnJlcGxhY2UoYmx1cnJlZ2V4cCwgRSk7XFxuICAgICAgICBpZiAoK3NpemUgIT09IDApIHtcXG4gICAgICAgICAgICB0aGlzLmF0dHJzLmJsdXIgPSBzaXplO1xcbiAgICAgICAgICAgIHMuZmlsdGVyID0gZiArIFMgKyBtcyArIFxcXCIuQmx1cihwaXhlbHJhZGl1cz1cXFwiICsgKCtzaXplIHx8IDEuNSkgKyBcXFwiKVxcXCI7XFxuICAgICAgICAgICAgcy5tYXJnaW4gPSBSLmZvcm1hdChcXFwiLXswfXB4IDAgMCAtezB9cHhcXFwiLCByb3VuZCgrc2l6ZSB8fCAxLjUpKTtcXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgcy5maWx0ZXIgPSBmO1xcbiAgICAgICAgICAgIHMubWFyZ2luID0gMDtcXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5hdHRycy5ibHVyO1xcbiAgICAgICAgfVxcbiAgICAgICAgcmV0dXJuIHRoaXM7XFxuICAgIH07XFxuXFxuICAgIFIuX2VuZ2luZS5wYXRoID0gZnVuY3Rpb24gKHBhdGhTdHJpbmcsIHZtbCkge1xcbiAgICAgICAgdmFyIGVsID0gY3JlYXRlTm9kZShcXFwic2hhcGVcXFwiKTtcXG4gICAgICAgIGVsLnN0eWxlLmNzc1RleHQgPSBjc3NEb3Q7XFxuICAgICAgICBlbC5jb29yZHNpemUgPSB6b29tICsgUyArIHpvb207XFxuICAgICAgICBlbC5jb29yZG9yaWdpbiA9IHZtbC5jb29yZG9yaWdpbjtcXG4gICAgICAgIHZhciBwID0gbmV3IEVsZW1lbnQoZWwsIHZtbCksXFxuICAgICAgICAgICAgYXR0ciA9IHtmaWxsOiBcXFwibm9uZVxcXCIsIHN0cm9rZTogXFxcIiMwMDBcXFwifTtcXG4gICAgICAgIHBhdGhTdHJpbmcgJiYgKGF0dHIucGF0aCA9IHBhdGhTdHJpbmcpO1xcbiAgICAgICAgcC50eXBlID0gXFxcInBhdGhcXFwiO1xcbiAgICAgICAgcC5wYXRoID0gW107XFxuICAgICAgICBwLlBhdGggPSBFO1xcbiAgICAgICAgc2V0RmlsbEFuZFN0cm9rZShwLCBhdHRyKTtcXG4gICAgICAgIHZtbC5jYW52YXMgJiYgdm1sLmNhbnZhcy5hcHBlbmRDaGlsZChlbCk7XFxuICAgICAgICB2YXIgc2tldyA9IGNyZWF0ZU5vZGUoXFxcInNrZXdcXFwiKTtcXG4gICAgICAgIHNrZXcub24gPSB0cnVlO1xcbiAgICAgICAgZWwuYXBwZW5kQ2hpbGQoc2tldyk7XFxuICAgICAgICBwLnNrZXcgPSBza2V3O1xcbiAgICAgICAgcC50cmFuc2Zvcm0oRSk7XFxuICAgICAgICByZXR1cm4gcDtcXG4gICAgfTtcXG4gICAgUi5fZW5naW5lLnJlY3QgPSBmdW5jdGlvbiAodm1sLCB4LCB5LCB3LCBoLCByKSB7XFxuICAgICAgICB2YXIgcGF0aCA9IFIuX3JlY3RQYXRoKHgsIHksIHcsIGgsIHIpLFxcbiAgICAgICAgICAgIHJlcyA9IHZtbC5wYXRoKHBhdGgpLFxcbiAgICAgICAgICAgIGEgPSByZXMuYXR0cnM7XFxuICAgICAgICByZXMuWCA9IGEueCA9IHg7XFxuICAgICAgICByZXMuWSA9IGEueSA9IHk7XFxuICAgICAgICByZXMuVyA9IGEud2lkdGggPSB3O1xcbiAgICAgICAgcmVzLkggPSBhLmhlaWdodCA9IGg7XFxuICAgICAgICBhLnIgPSByO1xcbiAgICAgICAgYS5wYXRoID0gcGF0aDtcXG4gICAgICAgIHJlcy50eXBlID0gXFxcInJlY3RcXFwiO1xcbiAgICAgICAgcmV0dXJuIHJlcztcXG4gICAgfTtcXG4gICAgUi5fZW5naW5lLmVsbGlwc2UgPSBmdW5jdGlvbiAodm1sLCB4LCB5LCByeCwgcnkpIHtcXG4gICAgICAgIHZhciByZXMgPSB2bWwucGF0aCgpLFxcbiAgICAgICAgICAgIGEgPSByZXMuYXR0cnM7XFxuICAgICAgICByZXMuWCA9IHggLSByeDtcXG4gICAgICAgIHJlcy5ZID0geSAtIHJ5O1xcbiAgICAgICAgcmVzLlcgPSByeCAqIDI7XFxuICAgICAgICByZXMuSCA9IHJ5ICogMjtcXG4gICAgICAgIHJlcy50eXBlID0gXFxcImVsbGlwc2VcXFwiO1xcbiAgICAgICAgc2V0RmlsbEFuZFN0cm9rZShyZXMsIHtcXG4gICAgICAgICAgICBjeDogeCxcXG4gICAgICAgICAgICBjeTogeSxcXG4gICAgICAgICAgICByeDogcngsXFxuICAgICAgICAgICAgcnk6IHJ5XFxuICAgICAgICB9KTtcXG4gICAgICAgIHJldHVybiByZXM7XFxuICAgIH07XFxuICAgIFIuX2VuZ2luZS5jaXJjbGUgPSBmdW5jdGlvbiAodm1sLCB4LCB5LCByKSB7XFxuICAgICAgICB2YXIgcmVzID0gdm1sLnBhdGgoKSxcXG4gICAgICAgICAgICBhID0gcmVzLmF0dHJzO1xcbiAgICAgICAgcmVzLlggPSB4IC0gcjtcXG4gICAgICAgIHJlcy5ZID0geSAtIHI7XFxuICAgICAgICByZXMuVyA9IHJlcy5IID0gciAqIDI7XFxuICAgICAgICByZXMudHlwZSA9IFxcXCJjaXJjbGVcXFwiO1xcbiAgICAgICAgc2V0RmlsbEFuZFN0cm9rZShyZXMsIHtcXG4gICAgICAgICAgICBjeDogeCxcXG4gICAgICAgICAgICBjeTogeSxcXG4gICAgICAgICAgICByOiByXFxuICAgICAgICB9KTtcXG4gICAgICAgIHJldHVybiByZXM7XFxuICAgIH07XFxuICAgIFIuX2VuZ2luZS5pbWFnZSA9IGZ1bmN0aW9uICh2bWwsIHNyYywgeCwgeSwgdywgaCkge1xcbiAgICAgICAgdmFyIHBhdGggPSBSLl9yZWN0UGF0aCh4LCB5LCB3LCBoKSxcXG4gICAgICAgICAgICByZXMgPSB2bWwucGF0aChwYXRoKS5hdHRyKHtzdHJva2U6IFxcXCJub25lXFxcIn0pLFxcbiAgICAgICAgICAgIGEgPSByZXMuYXR0cnMsXFxuICAgICAgICAgICAgbm9kZSA9IHJlcy5ub2RlLFxcbiAgICAgICAgICAgIGZpbGwgPSBub2RlLmdldEVsZW1lbnRzQnlUYWdOYW1lKGZpbGxTdHJpbmcpWzBdO1xcbiAgICAgICAgYS5zcmMgPSBzcmM7XFxuICAgICAgICByZXMuWCA9IGEueCA9IHg7XFxuICAgICAgICByZXMuWSA9IGEueSA9IHk7XFxuICAgICAgICByZXMuVyA9IGEud2lkdGggPSB3O1xcbiAgICAgICAgcmVzLkggPSBhLmhlaWdodCA9IGg7XFxuICAgICAgICBhLnBhdGggPSBwYXRoO1xcbiAgICAgICAgcmVzLnR5cGUgPSBcXFwiaW1hZ2VcXFwiO1xcbiAgICAgICAgZmlsbC5wYXJlbnROb2RlID09IG5vZGUgJiYgbm9kZS5yZW1vdmVDaGlsZChmaWxsKTtcXG4gICAgICAgIGZpbGwucm90YXRlID0gdHJ1ZTtcXG4gICAgICAgIGZpbGwuc3JjID0gc3JjO1xcbiAgICAgICAgZmlsbC50eXBlID0gXFxcInRpbGVcXFwiO1xcbiAgICAgICAgcmVzLl8uZmlsbHBvcyA9IFt4LCB5XTtcXG4gICAgICAgIHJlcy5fLmZpbGxzaXplID0gW3csIGhdO1xcbiAgICAgICAgbm9kZS5hcHBlbmRDaGlsZChmaWxsKTtcXG4gICAgICAgIHNldENvb3JkcyhyZXMsIDEsIDEsIDAsIDAsIDApO1xcbiAgICAgICAgcmV0dXJuIHJlcztcXG4gICAgfTtcXG4gICAgUi5fZW5naW5lLnRleHQgPSBmdW5jdGlvbiAodm1sLCB4LCB5LCB0ZXh0KSB7XFxuICAgICAgICB2YXIgZWwgPSBjcmVhdGVOb2RlKFxcXCJzaGFwZVxcXCIpLFxcbiAgICAgICAgICAgIHBhdGggPSBjcmVhdGVOb2RlKFxcXCJwYXRoXFxcIiksXFxuICAgICAgICAgICAgbyA9IGNyZWF0ZU5vZGUoXFxcInRleHRwYXRoXFxcIik7XFxuICAgICAgICB4ID0geCB8fCAwO1xcbiAgICAgICAgeSA9IHkgfHwgMDtcXG4gICAgICAgIHRleHQgPSB0ZXh0IHx8IFxcXCJcXFwiO1xcbiAgICAgICAgcGF0aC52ID0gUi5mb3JtYXQoXFxcIm17MH0sezF9bHsyfSx7MX1cXFwiLCByb3VuZCh4ICogem9vbSksIHJvdW5kKHkgKiB6b29tKSwgcm91bmQoeCAqIHpvb20pICsgMSk7XFxuICAgICAgICBwYXRoLnRleHRwYXRob2sgPSB0cnVlO1xcbiAgICAgICAgby5zdHJpbmcgPSBTdHIodGV4dCk7XFxuICAgICAgICBvLm9uID0gdHJ1ZTtcXG4gICAgICAgIGVsLnN0eWxlLmNzc1RleHQgPSBjc3NEb3Q7XFxuICAgICAgICBlbC5jb29yZHNpemUgPSB6b29tICsgUyArIHpvb207XFxuICAgICAgICBlbC5jb29yZG9yaWdpbiA9IFxcXCIwIDBcXFwiO1xcbiAgICAgICAgdmFyIHAgPSBuZXcgRWxlbWVudChlbCwgdm1sKSxcXG4gICAgICAgICAgICBhdHRyID0ge1xcbiAgICAgICAgICAgICAgICBmaWxsOiBcXFwiIzAwMFxcXCIsXFxuICAgICAgICAgICAgICAgIHN0cm9rZTogXFxcIm5vbmVcXFwiLFxcbiAgICAgICAgICAgICAgICBmb250OiBSLl9hdmFpbGFibGVBdHRycy5mb250LFxcbiAgICAgICAgICAgICAgICB0ZXh0OiB0ZXh0XFxuICAgICAgICAgICAgfTtcXG4gICAgICAgIHAuc2hhcGUgPSBlbDtcXG4gICAgICAgIHAucGF0aCA9IHBhdGg7XFxuICAgICAgICBwLnRleHRwYXRoID0gbztcXG4gICAgICAgIHAudHlwZSA9IFxcXCJ0ZXh0XFxcIjtcXG4gICAgICAgIHAuYXR0cnMudGV4dCA9IFN0cih0ZXh0KTtcXG4gICAgICAgIHAuYXR0cnMueCA9IHg7XFxuICAgICAgICBwLmF0dHJzLnkgPSB5O1xcbiAgICAgICAgcC5hdHRycy53ID0gMTtcXG4gICAgICAgIHAuYXR0cnMuaCA9IDE7XFxuICAgICAgICBzZXRGaWxsQW5kU3Ryb2tlKHAsIGF0dHIpO1xcbiAgICAgICAgZWwuYXBwZW5kQ2hpbGQobyk7XFxuICAgICAgICBlbC5hcHBlbmRDaGlsZChwYXRoKTtcXG4gICAgICAgIHZtbC5jYW52YXMuYXBwZW5kQ2hpbGQoZWwpO1xcbiAgICAgICAgdmFyIHNrZXcgPSBjcmVhdGVOb2RlKFxcXCJza2V3XFxcIik7XFxuICAgICAgICBza2V3Lm9uID0gdHJ1ZTtcXG4gICAgICAgIGVsLmFwcGVuZENoaWxkKHNrZXcpO1xcbiAgICAgICAgcC5za2V3ID0gc2tldztcXG4gICAgICAgIHAudHJhbnNmb3JtKEUpO1xcbiAgICAgICAgcmV0dXJuIHA7XFxuICAgIH07XFxuICAgIFIuX2VuZ2luZS5zZXRTaXplID0gZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQpIHtcXG4gICAgICAgIHZhciBjcyA9IHRoaXMuY2FudmFzLnN0eWxlO1xcbiAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XFxuICAgICAgICB3aWR0aCA9PSArd2lkdGggJiYgKHdpZHRoICs9IFxcXCJweFxcXCIpO1xcbiAgICAgICAgaGVpZ2h0ID09ICtoZWlnaHQgJiYgKGhlaWdodCArPSBcXFwicHhcXFwiKTtcXG4gICAgICAgIGNzLndpZHRoID0gd2lkdGg7XFxuICAgICAgICBjcy5oZWlnaHQgPSBoZWlnaHQ7XFxuICAgICAgICBjcy5jbGlwID0gXFxcInJlY3QoMCBcXFwiICsgd2lkdGggKyBcXFwiIFxcXCIgKyBoZWlnaHQgKyBcXFwiIDApXFxcIjtcXG4gICAgICAgIGlmICh0aGlzLl92aWV3Qm94KSB7XFxuICAgICAgICAgICAgUi5fZW5naW5lLnNldFZpZXdCb3guYXBwbHkodGhpcywgdGhpcy5fdmlld0JveCk7XFxuICAgICAgICB9XFxuICAgICAgICByZXR1cm4gdGhpcztcXG4gICAgfTtcXG4gICAgUi5fZW5naW5lLnNldFZpZXdCb3ggPSBmdW5jdGlvbiAoeCwgeSwgdywgaCwgZml0KSB7XFxuICAgICAgICBSLmV2ZShcXFwicmFwaGFlbC5zZXRWaWV3Qm94XFxcIiwgdGhpcywgdGhpcy5fdmlld0JveCwgW3gsIHksIHcsIGgsIGZpdF0pO1xcbiAgICAgICAgdmFyIHBhcGVyU2l6ZSA9IHRoaXMuZ2V0U2l6ZSgpLFxcbiAgICAgICAgICAgIHdpZHRoID0gcGFwZXJTaXplLndpZHRoLFxcbiAgICAgICAgICAgIGhlaWdodCA9IHBhcGVyU2l6ZS5oZWlnaHQsXFxuICAgICAgICAgICAgSCwgVztcXG4gICAgICAgIGlmIChmaXQpIHtcXG4gICAgICAgICAgICBIID0gaGVpZ2h0IC8gaDtcXG4gICAgICAgICAgICBXID0gd2lkdGggLyB3O1xcbiAgICAgICAgICAgIGlmICh3ICogSCA8IHdpZHRoKSB7XFxuICAgICAgICAgICAgICAgIHggLT0gKHdpZHRoIC0gdyAqIEgpIC8gMiAvIEg7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIGlmIChoICogVyA8IGhlaWdodCkge1xcbiAgICAgICAgICAgICAgICB5IC09IChoZWlnaHQgLSBoICogVykgLyAyIC8gVztcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgICB0aGlzLl92aWV3Qm94ID0gW3gsIHksIHcsIGgsICEhZml0XTtcXG4gICAgICAgIHRoaXMuX3ZpZXdCb3hTaGlmdCA9IHtcXG4gICAgICAgICAgICBkeDogLXgsXFxuICAgICAgICAgICAgZHk6IC15LFxcbiAgICAgICAgICAgIHNjYWxlOiBwYXBlclNpemVcXG4gICAgICAgIH07XFxuICAgICAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XFxuICAgICAgICAgICAgZWwudHJhbnNmb3JtKFxcXCIuLi5cXFwiKTtcXG4gICAgICAgIH0pO1xcbiAgICAgICAgcmV0dXJuIHRoaXM7XFxuICAgIH07XFxuICAgIHZhciBjcmVhdGVOb2RlO1xcbiAgICBSLl9lbmdpbmUuaW5pdFdpbiA9IGZ1bmN0aW9uICh3aW4pIHtcXG4gICAgICAgICAgICB2YXIgZG9jID0gd2luLmRvY3VtZW50O1xcbiAgICAgICAgICAgIGlmIChkb2Muc3R5bGVTaGVldHMubGVuZ3RoIDwgMzEpIHtcXG4gICAgICAgICAgICAgICAgZG9jLmNyZWF0ZVN0eWxlU2hlZXQoKS5hZGRSdWxlKFxcXCIucnZtbFxcXCIsIFxcXCJiZWhhdmlvcjp1cmwoI2RlZmF1bHQjVk1MKVxcXCIpO1xcbiAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgIC8vIG5vIG1vcmUgcm9vbSwgYWRkIHRvIHRoZSBleGlzdGluZyBvbmVcXG4gICAgICAgICAgICAgICAgLy8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNTMxMTk0JTI4VlMuODUlMjkuYXNweFxcbiAgICAgICAgICAgICAgICBkb2Muc3R5bGVTaGVldHNbMF0uYWRkUnVsZShcXFwiLnJ2bWxcXFwiLCBcXFwiYmVoYXZpb3I6dXJsKCNkZWZhdWx0I1ZNTClcXFwiKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgdHJ5IHtcXG4gICAgICAgICAgICAgICAgIWRvYy5uYW1lc3BhY2VzLnJ2bWwgJiYgZG9jLm5hbWVzcGFjZXMuYWRkKFxcXCJydm1sXFxcIiwgXFxcInVybjpzY2hlbWFzLW1pY3Jvc29mdC1jb206dm1sXFxcIik7XFxuICAgICAgICAgICAgICAgIGNyZWF0ZU5vZGUgPSBmdW5jdGlvbiAodGFnTmFtZSkge1xcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRvYy5jcmVhdGVFbGVtZW50KCc8cnZtbDonICsgdGFnTmFtZSArICcgY2xhc3M9XFxcInJ2bWxcXFwiPicpO1xcbiAgICAgICAgICAgICAgICB9O1xcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcXG4gICAgICAgICAgICAgICAgY3JlYXRlTm9kZSA9IGZ1bmN0aW9uICh0YWdOYW1lKSB7XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG9jLmNyZWF0ZUVsZW1lbnQoJzwnICsgdGFnTmFtZSArICcgeG1sbnM9XFxcInVybjpzY2hlbWFzLW1pY3Jvc29mdC5jb206dm1sXFxcIiBjbGFzcz1cXFwicnZtbFxcXCI+Jyk7XFxuICAgICAgICAgICAgICAgIH07XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfTtcXG4gICAgUi5fZW5naW5lLmluaXRXaW4oUi5fZy53aW4pO1xcbiAgICBSLl9lbmdpbmUuY3JlYXRlID0gZnVuY3Rpb24gKCkge1xcbiAgICAgICAgdmFyIGNvbiA9IFIuX2dldENvbnRhaW5lci5hcHBseSgwLCBhcmd1bWVudHMpLFxcbiAgICAgICAgICAgIGNvbnRhaW5lciA9IGNvbi5jb250YWluZXIsXFxuICAgICAgICAgICAgaGVpZ2h0ID0gY29uLmhlaWdodCxcXG4gICAgICAgICAgICBzLFxcbiAgICAgICAgICAgIHdpZHRoID0gY29uLndpZHRoLFxcbiAgICAgICAgICAgIHggPSBjb24ueCxcXG4gICAgICAgICAgICB5ID0gY29uLnk7XFxuICAgICAgICBpZiAoIWNvbnRhaW5lcikge1xcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcXFwiVk1MIGNvbnRhaW5lciBub3QgZm91bmQuXFxcIik7XFxuICAgICAgICB9XFxuICAgICAgICB2YXIgcmVzID0gbmV3IFIuX1BhcGVyLFxcbiAgICAgICAgICAgIGMgPSByZXMuY2FudmFzID0gUi5fZy5kb2MuY3JlYXRlRWxlbWVudChcXFwiZGl2XFxcIiksXFxuICAgICAgICAgICAgY3MgPSBjLnN0eWxlO1xcbiAgICAgICAgeCA9IHggfHwgMDtcXG4gICAgICAgIHkgPSB5IHx8IDA7XFxuICAgICAgICB3aWR0aCA9IHdpZHRoIHx8IDUxMjtcXG4gICAgICAgIGhlaWdodCA9IGhlaWdodCB8fCAzNDI7XFxuICAgICAgICByZXMud2lkdGggPSB3aWR0aDtcXG4gICAgICAgIHJlcy5oZWlnaHQgPSBoZWlnaHQ7XFxuICAgICAgICB3aWR0aCA9PSArd2lkdGggJiYgKHdpZHRoICs9IFxcXCJweFxcXCIpO1xcbiAgICAgICAgaGVpZ2h0ID09ICtoZWlnaHQgJiYgKGhlaWdodCArPSBcXFwicHhcXFwiKTtcXG4gICAgICAgIHJlcy5jb29yZHNpemUgPSB6b29tICogMWUzICsgUyArIHpvb20gKiAxZTM7XFxuICAgICAgICByZXMuY29vcmRvcmlnaW4gPSBcXFwiMCAwXFxcIjtcXG4gICAgICAgIHJlcy5zcGFuID0gUi5fZy5kb2MuY3JlYXRlRWxlbWVudChcXFwic3BhblxcXCIpO1xcbiAgICAgICAgcmVzLnNwYW4uc3R5bGUuY3NzVGV4dCA9IFxcXCJwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi05OTk5ZW07dG9wOi05OTk5ZW07cGFkZGluZzowO21hcmdpbjowO2xpbmUtaGVpZ2h0OjE7XFxcIjtcXG4gICAgICAgIGMuYXBwZW5kQ2hpbGQocmVzLnNwYW4pO1xcbiAgICAgICAgY3MuY3NzVGV4dCA9IFIuZm9ybWF0KFxcXCJ0b3A6MDtsZWZ0OjA7d2lkdGg6ezB9O2hlaWdodDp7MX07ZGlzcGxheTppbmxpbmUtYmxvY2s7cG9zaXRpb246cmVsYXRpdmU7Y2xpcDpyZWN0KDAgezB9IHsxfSAwKTtvdmVyZmxvdzpoaWRkZW5cXFwiLCB3aWR0aCwgaGVpZ2h0KTtcXG4gICAgICAgIGlmIChjb250YWluZXIgPT0gMSkge1xcbiAgICAgICAgICAgIFIuX2cuZG9jLmJvZHkuYXBwZW5kQ2hpbGQoYyk7XFxuICAgICAgICAgICAgY3MubGVmdCA9IHggKyBcXFwicHhcXFwiO1xcbiAgICAgICAgICAgIGNzLnRvcCA9IHkgKyBcXFwicHhcXFwiO1xcbiAgICAgICAgICAgIGNzLnBvc2l0aW9uID0gXFxcImFic29sdXRlXFxcIjtcXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgaWYgKGNvbnRhaW5lci5maXJzdENoaWxkKSB7XFxuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5pbnNlcnRCZWZvcmUoYywgY29udGFpbmVyLmZpcnN0Q2hpbGQpO1xcbiAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChjKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgICByZXMucmVuZGVyZml4ID0gZnVuY3Rpb24gKCkge307XFxuICAgICAgICByZXR1cm4gcmVzO1xcbiAgICB9O1xcbiAgICBSLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcXG4gICAgICAgIFIuZXZlKFxcXCJyYXBoYWVsLmNsZWFyXFxcIiwgdGhpcyk7XFxuICAgICAgICB0aGlzLmNhbnZhcy5pbm5lckhUTUwgPSBFO1xcbiAgICAgICAgdGhpcy5zcGFuID0gUi5fZy5kb2MuY3JlYXRlRWxlbWVudChcXFwic3BhblxcXCIpO1xcbiAgICAgICAgdGhpcy5zcGFuLnN0eWxlLmNzc1RleHQgPSBcXFwicG9zaXRpb246YWJzb2x1dGU7bGVmdDotOTk5OWVtO3RvcDotOTk5OWVtO3BhZGRpbmc6MDttYXJnaW46MDtsaW5lLWhlaWdodDoxO2Rpc3BsYXk6aW5saW5lO1xcXCI7XFxuICAgICAgICB0aGlzLmNhbnZhcy5hcHBlbmRDaGlsZCh0aGlzLnNwYW4pO1xcbiAgICAgICAgdGhpcy5ib3R0b20gPSB0aGlzLnRvcCA9IG51bGw7XFxuICAgIH07XFxuICAgIFIucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcXG4gICAgICAgIFIuZXZlKFxcXCJyYXBoYWVsLnJlbW92ZVxcXCIsIHRoaXMpO1xcbiAgICAgICAgdGhpcy5jYW52YXMucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmNhbnZhcyk7XFxuICAgICAgICBmb3IgKHZhciBpIGluIHRoaXMpIHtcXG4gICAgICAgICAgICB0aGlzW2ldID0gdHlwZW9mIHRoaXNbaV0gPT0gXFxcImZ1bmN0aW9uXFxcIiA/IFIuX3JlbW92ZWRGYWN0b3J5KGkpIDogbnVsbDtcXG4gICAgICAgIH1cXG4gICAgICAgIHJldHVybiB0cnVlO1xcbiAgICB9O1xcblxcbiAgICB2YXIgc2V0cHJvdG8gPSBSLnN0O1xcbiAgICBmb3IgKHZhciBtZXRob2QgaW4gZWxwcm90bykgaWYgKGVscHJvdG9baGFzXShtZXRob2QpICYmICFzZXRwcm90b1toYXNdKG1ldGhvZCkpIHtcXG4gICAgICAgIHNldHByb3RvW21ldGhvZF0gPSAoZnVuY3Rpb24gKG1ldGhvZG5hbWUpIHtcXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xcbiAgICAgICAgICAgICAgICB2YXIgYXJnID0gYXJndW1lbnRzO1xcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xcbiAgICAgICAgICAgICAgICAgICAgZWxbbWV0aG9kbmFtZV0uYXBwbHkoZWwsIGFyZyk7XFxuICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgIH07XFxuICAgICAgICB9KShtZXRob2QpO1xcbiAgICB9XFxufSkuYXBwbHkoZXhwb3J0cywgX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXyksXFxuXFx0XFx0XFx0XFx0X19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gIT09IHVuZGVmaW5lZCAmJiAobW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXykpO1xcbi8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaUxpOWtaWFl2Y21Gd2FHRmxiQzUyYld3dWFuTXVhbk1pTENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OVNZWEJvWVdWc0x5NHZaR1YyTDNKaGNHaGhaV3d1ZG0xc0xtcHpQMkpoWmpBaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2laR1ZtYVc1bEtGdGNJaTR2Y21Gd2FHRmxiQzVqYjNKbFhDSmRMQ0JtZFc1amRHbHZiaWhTS1NCN1hHNGdJQ0FnYVdZZ0tGSWdKaVlnSVZJdWRtMXNLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQjlYRzVjYmlBZ0lDQjJZWElnYUdGeklEMGdYQ0pvWVhOUGQyNVFjbTl3WlhKMGVWd2lMRnh1SUNBZ0lDQWdJQ0JUZEhJZ1BTQlRkSEpwYm1jc1hHNGdJQ0FnSUNBZ0lIUnZSbXh2WVhRZ1BTQndZWEp6WlVac2IyRjBMRnh1SUNBZ0lDQWdJQ0J0WVhSb0lEMGdUV0YwYUN4Y2JpQWdJQ0FnSUNBZ2NtOTFibVFnUFNCdFlYUm9Mbkp2ZFc1a0xGeHVJQ0FnSUNBZ0lDQnRiV0Y0SUQwZ2JXRjBhQzV0WVhnc1hHNGdJQ0FnSUNBZ0lHMXRhVzRnUFNCdFlYUm9MbTFwYml4Y2JpQWdJQ0FnSUNBZ1lXSnpJRDBnYldGMGFDNWhZbk1zWEc0Z0lDQWdJQ0FnSUdacGJHeFRkSEpwYm1jZ1BTQmNJbVpwYkd4Y0lpeGNiaUFnSUNBZ0lDQWdjMlZ3WVhKaGRHOXlJRDBnTDFzc0lGMHJMeXhjYmlBZ0lDQWdJQ0FnWlhabElEMGdVaTVsZG1Vc1hHNGdJQ0FnSUNBZ0lHMXpJRDBnWENJZ2NISnZaMmxrT2tSWVNXMWhaMlZVY21GdWMyWnZjbTB1VFdsamNtOXpiMlowWENJc1hHNGdJQ0FnSUNBZ0lGTWdQU0JjSWlCY0lpeGNiaUFnSUNBZ0lDQWdSU0E5SUZ3aVhDSXNYRzRnSUNBZ0lDQWdJRzFoY0NBOUlIdE5PaUJjSW0xY0lpd2dURG9nWENKc1hDSXNJRU02SUZ3aVkxd2lMQ0JhT2lCY0luaGNJaXdnYlRvZ1hDSjBYQ0lzSUd3NklGd2ljbHdpTENCak9pQmNJblpjSWl3Z2Vqb2dYQ0o0WENKOUxGeHVJQ0FnSUNBZ0lDQmlhWFJsY3lBOUlDOG9XMk5zYlhwZEtTdy9LRnRlWTJ4dGVsMHFLUzluYVN4Y2JpQWdJQ0FnSUNBZ1lteDFjbkpsWjJWNGNDQTlJQzhnY0hKdloybGtPbHhjVXl0Q2JIVnlYRndvVzE1Y1hDbGRLMXhjS1M5bkxGeHVJQ0FnSUNBZ0lDQjJZV3dnUFNBdkxUOWJYaXhjWEhNdFhTc3ZaeXhjYmlBZ0lDQWdJQ0FnWTNOelJHOTBJRDBnWENKd2IzTnBkR2x2YmpwaFluTnZiSFYwWlR0c1pXWjBPakE3ZEc5d09qQTdkMmxrZEdnNk1YQjRPMmhsYVdkb2REb3hjSGc3WW1Wb1lYWnBiM0k2ZFhKc0tDTmtaV1poZFd4MEkxWk5UQ2xjSWl4Y2JpQWdJQ0FnSUNBZ2VtOXZiU0E5SURJeE5qQXdMRnh1SUNBZ0lDQWdJQ0J3WVhSb1ZIbHdaWE1nUFNCN2NHRjBhRG9nTVN3Z2NtVmpkRG9nTVN3Z2FXMWhaMlU2SURGOUxGeHVJQ0FnSUNBZ0lDQnZkbUZzVkhsd1pYTWdQU0I3WTJseVkyeGxPaUF4TENCbGJHeHBjSE5sT2lBeGZTeGNiaUFnSUNBZ0lDQWdjR0YwYURKMmJXd2dQU0JtZFc1amRHbHZiaUFvY0dGMGFDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSFJ2ZEdGc0lEMGdJQzliWVdoeGMzUjJYUzlwWnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyMXRZVzVrSUQwZ1VpNWZjR0YwYUZSdlFXSnpiMngxZEdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JUZEhJb2NHRjBhQ2t1YldGMFkyZ29kRzkwWVd3cElDWW1JQ2hqYjIxdFlXNWtJRDBnVWk1ZmNHRjBhREpqZFhKMlpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGIzUmhiQ0E5SUM5YlkyeHRlbDB2Wnp0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoamIyMXRZVzVrSUQwOUlGSXVYM0JoZEdoVWIwRmljMjlzZFhSbElDWW1JQ0ZUZEhJb2NHRjBhQ2t1YldGMFkyZ29kRzkwWVd3cEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhKbGN5QTlJRk4wY2lod1lYUm9LUzV5WlhCc1lXTmxLR0pwZEdWekxDQm1kVzVqZEdsdmJpQW9ZV3hzTENCamIyMXRZVzVrTENCaGNtZHpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUIyWVd4eklEMGdXMTBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwYzAxdmRtVWdQU0JqYjIxdFlXNWtMblJ2VEc5M1pYSkRZWE5sS0NrZ1BUMGdYQ0p0WENJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYTWdQU0J0WVhCYlkyOXRiV0Z1WkYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0Z5WjNNdWNtVndiR0ZqWlNoMllXd3NJR1oxYm1OMGFXOXVJQ2gyWVd4MVpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dselRXOTJaU0FtSmlCMllXeHpMbXhsYm1kMGFDQTlQU0F5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZ6SUNzOUlIWmhiSE1nS3lCdFlYQmJZMjl0YldGdVpDQTlQU0JjSW0xY0lpQS9JRndpYkZ3aUlEb2dYQ0pNWENKZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhNZ1BTQmJYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhNdWNIVnphQ2h5YjNWdVpDaDJZV3gxWlNBcUlIcHZiMjBwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCeVpYTWdLeUIyWVd4ek8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnlaWE03WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdjR0VnUFNCamIyMXRZVzVrS0hCaGRHZ3BMQ0J3TENCeU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WeklEMGdXMTA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTUN3Z2FXa2dQU0J3WVM1c1pXNW5kR2c3SUdrZ1BDQnBhVHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjQ0E5SUhCaFcybGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSElnUFNCd1lWdHBYVnN3WFM1MGIweHZkMlZ5UTJGelpTZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSElnUFQwZ1hDSjZYQ0lnSmlZZ0tISWdQU0JjSW5oY0lpazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5SUNoMllYSWdhaUE5SURFc0lHcHFJRDBnY0M1c1pXNW5kR2c3SUdvZ1BDQnFhanNnYWlzcktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhJZ0t6MGdjbTkxYm1Rb2NGdHFYU0FxSUhwdmIyMHBJQ3NnS0dvZ0lUMGdhbW9nTFNBeElEOGdYQ0lzWENJZ09pQkZLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WekxuQjFjMmdvY2lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2NtVnpMbXB2YVc0b1V5azdYRzRnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUdOdmJYQmxibk5oZEdsdmJpQTlJR1oxYm1OMGFXOXVJQ2hrWldjc0lHUjRMQ0JrZVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHMGdQU0JTTG0xaGRISnBlQ2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdiUzV5YjNSaGRHVW9MV1JsWnl3Z0xqVXNJQzQxS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaSGc2SUcwdWVDaGtlQ3dnWkhrcExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUjVPaUJ0TG5rb1pIZ3NJR1I1S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdmVHRjYmlBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ2MyVjBRMjl2Y21SeklEMGdablZ1WTNScGIyNGdLSEFzSUhONExDQnplU3dnWkhnc0lHUjVMQ0JrWldjcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQmZJRDBnY0M1ZkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMGdQU0J3TG0xaGRISnBlQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYVd4c2NHOXpJRDBnWHk1bWFXeHNjRzl6TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc4Z1BTQndMbTV2WkdVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2N5QTlJRzh1YzNSNWJHVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlU0E5SURFc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pteHBjQ0E5SUZ3aVhDSXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaSGhrZVN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcmVDQTlJSHB2YjIwZ0x5QnplQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JyZVNBOUlIcHZiMjBnTHlCemVUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhNdWRtbHphV0pwYkdsMGVTQTlJRndpYUdsa1pHVnVYQ0k3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVhONElIeDhJQ0Z6ZVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHOHVZMjl2Y21SemFYcGxJRDBnWVdKektHdDRLU0FySUZNZ0t5QmhZbk1vYTNrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY3k1eWIzUmhkR2x2YmlBOUlHUmxaeUFxSUNoemVDQXFJSE41SUR3Z01DQS9JQzB4SURvZ01TazdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9aR1ZuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR01nUFNCamIyMXdaVzV6WVhScGIyNG9aR1ZuTENCa2VDd2daSGtwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSNElEMGdZeTVrZUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa2VTQTlJR011WkhrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnplQ0E4SURBZ0ppWWdLR1pzYVhBZ0t6MGdYQ0o0WENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYzNrZ1BDQXdJQ1ltSUNobWJHbHdJQ3M5SUZ3aUlIbGNJaWtnSmlZZ0tIa2dQU0F0TVNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6TG1ac2FYQWdQU0JtYkdsd08xeHVJQ0FnSUNBZ0lDQWdJQ0FnYnk1amIyOXlaRzl5YVdkcGJpQTlJQ2hrZUNBcUlDMXJlQ2tnS3lCVElDc2dLR1I1SUNvZ0xXdDVLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2htYVd4c2NHOXpJSHg4SUY4dVptbHNiSE5wZW1VcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnWm1sc2JDQTlJRzh1WjJWMFJXeGxiV1Z1ZEhOQ2VWUmhaMDVoYldVb1ptbHNiRk4wY21sdVp5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabWxzYkNBOUlHWnBiR3dnSmlZZ1ptbHNiRnN3WFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdkxuSmxiVzkyWlVOb2FXeGtLR1pwYkd3cE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2htYVd4c2NHOXpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTWdQU0JqYjIxd1pXNXpZWFJwYjI0b1pHVm5MQ0J0TG5nb1ptbHNiSEJ2YzFzd1hTd2dabWxzYkhCdmMxc3hYU2tzSUcwdWVTaG1hV3hzY0c5eld6QmRMQ0JtYVd4c2NHOXpXekZkS1NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1pwYkd3dWNHOXphWFJwYjI0Z1BTQmpMbVI0SUNvZ2VTQXJJRk1nS3lCakxtUjVJQ29nZVR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRjh1Wm1sc2JITnBlbVVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabWxzYkM1emFYcGxJRDBnWHk1bWFXeHNjMmw2WlZzd1hTQXFJR0ZpY3loemVDa2dLeUJUSUNzZ1h5NW1hV3hzYzJsNlpWc3hYU0FxSUdGaWN5aHplU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc4dVlYQndaVzVrUTJocGJHUW9abWxzYkNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpMblpwYzJsaWFXeHBkSGtnUFNCY0luWnBjMmxpYkdWY0lqdGNiaUFnSUNBZ0lDQWdmVHRjYmlBZ0lDQlNMblJ2VTNSeWFXNW5JRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z0lGd2lXVzkxY2lCaWNtOTNjMlZ5SUdSdlpYTnVYRngxTWpBeE9YUWdjM1Z3Y0c5eWRDQlRWa2N1SUVaaGJHeHBibWNnWkc5M2JpQjBieUJXVFV3dVhGeHVXVzkxSUdGeVpTQnlkVzV1YVc1bklGSmhjR2hoWEZ4NFpXSnNJRndpSUNzZ2RHaHBjeTUyWlhKemFXOXVPMXh1SUNBZ0lIMDdYRzRnSUNBZ2RtRnlJR0ZrWkVGeWNtOTNJRDBnWm5WdVkzUnBiMjRnS0c4c0lIWmhiSFZsTENCcGMwVnVaQ2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdkbUZzZFdWeklEMGdVM1J5S0haaGJIVmxLUzUwYjB4dmQyVnlRMkZ6WlNncExuTndiR2wwS0Z3aUxWd2lLU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lITmxJRDBnYVhORmJtUWdQeUJjSW1WdVpGd2lJRG9nWENKemRHRnlkRndpTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdhU0E5SUhaaGJIVmxjeTVzWlc1bmRHZ3NYRzRnSUNBZ0lDQWdJQ0FnSUNCMGVYQmxJRDBnWENKamJHRnpjMmxqWENJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IzSUQwZ1hDSnRaV1JwZFcxY0lpeGNiaUFnSUNBZ0lDQWdJQ0FnSUdnZ1BTQmNJbTFsWkdsMWJWd2lPMXh1SUNBZ0lDQWdJQ0IzYUdsc1pTQW9hUzB0S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6ZDJsMFkyZ2dLSFpoYkhWbGMxdHBYU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdYQ0ppYkc5amExd2lPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1hDSmpiR0Z6YzJsalhDSTZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCY0ltOTJZV3hjSWpwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRndpWkdsaGJXOXVaRndpT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdYQ0p2Y0dWdVhDSTZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCY0ltNXZibVZjSWpwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSGx3WlNBOUlIWmhiSFZsYzF0cFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCY0luZHBaR1ZjSWpwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRndpYm1GeWNtOTNYQ0k2SUdnZ1BTQjJZV3gxWlhOYmFWMDdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnWENKc2IyNW5YQ0k2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQmNJbk5vYjNKMFhDSTZJSGNnUFNCMllXeDFaWE5iYVYwN0lHSnlaV0ZyTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhaaGNpQnpkSEp2YTJVZ1BTQnZMbTV2WkdVdVoyVjBSV3hsYldWdWRITkNlVlJoWjA1aGJXVW9YQ0p6ZEhKdmEyVmNJaWxiTUYwN1hHNGdJQ0FnSUNBZ0lITjBjbTlyWlZ0elpTQXJJRndpWVhKeWIzZGNJbDBnUFNCMGVYQmxPMXh1SUNBZ0lDQWdJQ0J6ZEhKdmEyVmJjMlVnS3lCY0ltRnljbTkzYkdWdVozUm9YQ0pkSUQwZ2R6dGNiaUFnSUNBZ0lDQWdjM1J5YjJ0bFczTmxJQ3NnWENKaGNuSnZkM2RwWkhSb1hDSmRJRDBnYUR0Y2JpQWdJQ0I5TEZ4dUlDQWdJSE5sZEVacGJHeEJibVJUZEhKdmEyVWdQU0JtZFc1amRHbHZiaUFvYnl3Z2NHRnlZVzF6S1NCN1hHNGdJQ0FnSUNBZ0lDOHZJRzh1Y0dGd1pYSXVZMkZ1ZG1GekxuTjBlV3hsTG1ScGMzQnNZWGtnUFNCY0ltNXZibVZjSWp0Y2JpQWdJQ0FnSUNBZ2J5NWhkSFJ5Y3lBOUlHOHVZWFIwY25NZ2ZId2dlMzA3WEc0Z0lDQWdJQ0FnSUhaaGNpQnViMlJsSUQwZ2J5NXViMlJsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdZU0E5SUc4dVlYUjBjbk1zWEc0Z0lDQWdJQ0FnSUNBZ0lDQnpJRDBnYm05a1pTNXpkSGxzWlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSGg1TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdibVYzY0dGMGFDQTlJSEJoZEdoVWVYQmxjMXR2TG5SNWNHVmRJQ1ltSUNod1lYSmhiWE11ZUNBaFBTQmhMbmdnZkh3Z2NHRnlZVzF6TG5rZ0lUMGdZUzU1SUh4OElIQmhjbUZ0Y3k1M2FXUjBhQ0FoUFNCaExuZHBaSFJvSUh4OElIQmhjbUZ0Y3k1b1pXbG5hSFFnSVQwZ1lTNW9aV2xuYUhRZ2ZId2djR0Z5WVcxekxtTjRJQ0U5SUdFdVkzZ2dmSHdnY0dGeVlXMXpMbU41SUNFOUlHRXVZM2tnZkh3Z2NHRnlZVzF6TG5KNElDRTlJR0V1Y25nZ2ZId2djR0Z5WVcxekxuSjVJQ0U5SUdFdWNua2dmSHdnY0dGeVlXMXpMbklnSVQwZ1lTNXlLU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHbHpUM1poYkNBOUlHOTJZV3hVZVhCbGMxdHZMblI1Y0dWZElDWW1JQ2hoTG1ONElDRTlJSEJoY21GdGN5NWplQ0I4ZkNCaExtTjVJQ0U5SUhCaGNtRnRjeTVqZVNCOGZDQmhMbklnSVQwZ2NHRnlZVzF6TG5JZ2ZId2dZUzV5ZUNBaFBTQndZWEpoYlhNdWNuZ2dmSHdnWVM1eWVTQWhQU0J3WVhKaGJYTXVjbmtwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZ6SUQwZ2J6dGNibHh1WEc0Z0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUhCaGNpQnBiaUJ3WVhKaGJYTXBJR2xtSUNod1lYSmhiWE5iYUdGelhTaHdZWElwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JoVzNCaGNsMGdQU0J3WVhKaGJYTmJjR0Z5WFR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvYm1WM2NHRjBhQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZUzV3WVhSb0lEMGdVaTVmWjJWMFVHRjBhRnR2TG5SNWNHVmRLRzhwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdieTVmTG1ScGNuUjVJRDBnTVR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQndZWEpoYlhNdWFISmxaaUFtSmlBb2JtOWtaUzVvY21WbUlEMGdjR0Z5WVcxekxtaHlaV1lwTzF4dUlDQWdJQ0FnSUNCd1lYSmhiWE11ZEdsMGJHVWdKaVlnS0c1dlpHVXVkR2wwYkdVZ1BTQndZWEpoYlhNdWRHbDBiR1VwTzF4dUlDQWdJQ0FnSUNCd1lYSmhiWE11ZEdGeVoyVjBJQ1ltSUNodWIyUmxMblJoY21kbGRDQTlJSEJoY21GdGN5NTBZWEpuWlhRcE8xeHVJQ0FnSUNBZ0lDQndZWEpoYlhNdVkzVnljMjl5SUNZbUlDaHpMbU4xY25OdmNpQTlJSEJoY21GdGN5NWpkWEp6YjNJcE8xeHVJQ0FnSUNBZ0lDQmNJbUpzZFhKY0lpQnBiaUJ3WVhKaGJYTWdKaVlnYnk1aWJIVnlLSEJoY21GdGN5NWliSFZ5S1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLSEJoY21GdGN5NXdZWFJvSUNZbUlHOHVkSGx3WlNBOVBTQmNJbkJoZEdoY0lpQjhmQ0J1Wlhkd1lYUm9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnViMlJsTG5CaGRHZ2dQU0J3WVhSb01uWnRiQ2grVTNSeUtHRXVjR0YwYUNrdWRHOU1iM2RsY2tOaGMyVW9LUzVwYm1SbGVFOW1LRndpY2x3aUtTQS9JRkl1WDNCaGRHaFViMEZpYzI5c2RYUmxLR0V1Y0dGMGFDa2dPaUJoTG5CaGRHZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2J5NWZMbVJwY25SNUlEMGdNVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h2TG5SNWNHVWdQVDBnWENKcGJXRm5aVndpS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2J5NWZMbVpwYkd4d2IzTWdQU0JiWVM1NExDQmhMbmxkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc4dVh5NW1hV3hzYzJsNlpTQTlJRnRoTG5kcFpIUm9MQ0JoTG1obGFXZG9kRjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJWMFEyOXZjbVJ6S0c4c0lERXNJREVzSURBc0lEQXNJREFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUZ3aWRISmhibk5tYjNKdFhDSWdhVzRnY0dGeVlXMXpJQ1ltSUc4dWRISmhibk5tYjNKdEtIQmhjbUZ0Y3k1MGNtRnVjMlp2Y20wcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvYVhOUGRtRnNLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnWTNnZ1BTQXJZUzVqZUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamVTQTlJQ3RoTG1ONUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISjRJRDBnSzJFdWNuZ2dmSHdnSzJFdWNpQjhmQ0F3TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKNUlEMGdLMkV1Y25rZ2ZId2dLMkV1Y2lCOGZDQXdPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JtOWtaUzV3WVhSb0lEMGdVaTVtYjNKdFlYUW9YQ0poY25zd2ZTeDdNWDBzZXpKOUxIc3pmU3g3Tkgwc2V6RjlMSHMwZlN4N01YMTRYQ0lzSUhKdmRXNWtLQ2hqZUNBdElISjRLU0FxSUhwdmIyMHBMQ0J5YjNWdVpDZ29ZM2tnTFNCeWVTa2dLaUI2YjI5dEtTd2djbTkxYm1Rb0tHTjRJQ3NnY25ncElDb2dlbTl2YlNrc0lISnZkVzVrS0NoamVTQXJJSEo1S1NBcUlIcHZiMjBwTENCeWIzVnVaQ2hqZUNBcUlIcHZiMjBwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJRzh1WHk1a2FYSjBlU0E5SURFN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lnS0Z3aVkyeHBjQzF5WldOMFhDSWdhVzRnY0dGeVlXMXpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnY21WamRDQTlJRk4wY2lod1lYSmhiWE5iWENKamJHbHdMWEpsWTNSY0lsMHBMbk53YkdsMEtITmxjR0Z5WVhSdmNpazdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jbVZqZEM1c1pXNW5kR2dnUFQwZ05Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsWTNSYk1sMGdQU0FyY21WamRGc3lYU0FySUNncmNtVmpkRnN3WFNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVmpkRnN6WFNBOUlDdHlaV04wV3pOZElDc2dLQ3R5WldOMFd6RmRLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1pHbDJJRDBnYm05a1pTNWpiR2x3VW1WamRDQjhmQ0JTTGw5bkxtUnZZeTVqY21WaGRHVkZiR1Z0Wlc1MEtGd2laR2wyWENJcExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrYzNSNWJHVWdQU0JrYVhZdWMzUjViR1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkhOMGVXeGxMbU5zYVhBZ1BTQlNMbVp2Y20xaGRDaGNJbkpsWTNRb2V6RjljSGdnZXpKOWNIZ2dlek45Y0hnZ2V6QjljSGdwWENJc0lISmxZM1FwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hibTlrWlM1amJHbHdVbVZqZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrYzNSNWJHVXVjRzl6YVhScGIyNGdQU0JjSW1GaWMyOXNkWFJsWENJN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1J6ZEhsc1pTNTBiM0FnUFNBd08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrYzNSNWJHVXViR1ZtZENBOUlEQTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSemRIbHNaUzUzYVdSMGFDQTlJRzh1Y0dGd1pYSXVkMmxrZEdnZ0t5QmNJbkI0WENJN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1J6ZEhsc1pTNW9aV2xuYUhRZ1BTQnZMbkJoY0dWeUxtaGxhV2RvZENBcklGd2ljSGhjSWp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdibTlrWlM1d1lYSmxiblJPYjJSbExtbHVjMlZ5ZEVKbFptOXlaU2hrYVhZc0lHNXZaR1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmthWFl1WVhCd1pXNWtRMmhwYkdRb2JtOWtaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHNXZaR1V1WTJ4cGNGSmxZM1FnUFNCa2FYWTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRndZWEpoYlhOYlhDSmpiR2x3TFhKbFkzUmNJbDBwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdWIyUmxMbU5zYVhCU1pXTjBJQ1ltSUNodWIyUmxMbU5zYVhCU1pXTjBMbk4wZVd4bExtTnNhWEFnUFNCY0ltRjFkRzljSWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2FXWWdLRzh1ZEdWNGRIQmhkR2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCMFpYaDBjR0YwYUZOMGVXeGxJRDBnYnk1MFpYaDBjR0YwYUM1emRIbHNaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIQmhjbUZ0Y3k1bWIyNTBJQ1ltSUNoMFpYaDBjR0YwYUZOMGVXeGxMbVp2Ym5RZ1BTQndZWEpoYlhNdVptOXVkQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQndZWEpoYlhOYlhDSm1iMjUwTFdaaGJXbHNlVndpWFNBbUppQW9kR1Y0ZEhCaGRHaFRkSGxzWlM1bWIyNTBSbUZ0YVd4NUlEMGdKMXdpSnlBcklIQmhjbUZ0YzF0Y0ltWnZiblF0Wm1GdGFXeDVYQ0pkTG5Od2JHbDBLRndpTEZ3aUtWc3dYUzV5WlhCc1lXTmxLQzllV3lkY0lsMHJmRnNuWENKZEt5UXZaeXdnUlNrZ0t5QW5YQ0luS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEJoY21GdGMxdGNJbVp2Ym5RdGMybDZaVndpWFNBbUppQW9kR1Y0ZEhCaGRHaFRkSGxzWlM1bWIyNTBVMmw2WlNBOUlIQmhjbUZ0YzF0Y0ltWnZiblF0YzJsNlpWd2lYU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQndZWEpoYlhOYlhDSm1iMjUwTFhkbGFXZG9kRndpWFNBbUppQW9kR1Y0ZEhCaGRHaFRkSGxzWlM1bWIyNTBWMlZwWjJoMElEMGdjR0Z5WVcxelcxd2labTl1ZEMxM1pXbG5hSFJjSWwwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY0dGeVlXMXpXMXdpWm05dWRDMXpkSGxzWlZ3aVhTQW1KaUFvZEdWNGRIQmhkR2hUZEhsc1pTNW1iMjUwVTNSNWJHVWdQU0J3WVhKaGJYTmJYQ0ptYjI1MExYTjBlV3hsWENKZEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JwWmlBb1hDSmhjbkp2ZHkxemRHRnlkRndpSUdsdUlIQmhjbUZ0Y3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWVdSa1FYSnliM2NvY21WekxDQndZWEpoYlhOYlhDSmhjbkp2ZHkxemRHRnlkRndpWFNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lnS0Z3aVlYSnliM2N0Wlc1a1hDSWdhVzRnY0dGeVlXMXpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmhaR1JCY25KdmR5aHlaWE1zSUhCaGNtRnRjMXRjSW1GeWNtOTNMV1Z1WkZ3aVhTd2dNU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2FXWWdLSEJoY21GdGN5NXZjR0ZqYVhSNUlDRTlJRzUxYkd3Z2ZIeGNiaUFnSUNBZ0lDQWdJQ0FnSUhCaGNtRnRjeTVtYVd4c0lDRTlJRzUxYkd3Z2ZIeGNiaUFnSUNBZ0lDQWdJQ0FnSUhCaGNtRnRjeTV6Y21NZ0lUMGdiblZzYkNCOGZGeHVJQ0FnSUNBZ0lDQWdJQ0FnY0dGeVlXMXpMbk4wY205clpTQWhQU0J1ZFd4c0lIeDhYRzRnSUNBZ0lDQWdJQ0FnSUNCd1lYSmhiWE5iWENKemRISnZhMlV0ZDJsa2RHaGNJbDBnSVQwZ2JuVnNiQ0I4ZkZ4dUlDQWdJQ0FnSUNBZ0lDQWdjR0Z5WVcxelcxd2ljM1J5YjJ0bExXOXdZV05wZEhsY0lsMGdJVDBnYm5Wc2JDQjhmRnh1SUNBZ0lDQWdJQ0FnSUNBZ2NHRnlZVzF6VzF3aVptbHNiQzF2Y0dGamFYUjVYQ0pkSUNFOUlHNTFiR3dnZkh4Y2JpQWdJQ0FnSUNBZ0lDQWdJSEJoY21GdGMxdGNJbk4wY205clpTMWtZWE5vWVhKeVlYbGNJbDBnSVQwZ2JuVnNiQ0I4ZkZ4dUlDQWdJQ0FnSUNBZ0lDQWdjR0Z5WVcxelcxd2ljM1J5YjJ0bExXMXBkR1Z5YkdsdGFYUmNJbDBnSVQwZ2JuVnNiQ0I4ZkZ4dUlDQWdJQ0FnSUNBZ0lDQWdjR0Z5WVcxelcxd2ljM1J5YjJ0bExXeHBibVZxYjJsdVhDSmRJQ0U5SUc1MWJHd2dmSHhjYmlBZ0lDQWdJQ0FnSUNBZ0lIQmhjbUZ0YzF0Y0luTjBjbTlyWlMxc2FXNWxZMkZ3WENKZElDRTlJRzUxYkd3cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQm1hV3hzSUQwZ2JtOWtaUzVuWlhSRmJHVnRaVzUwYzBKNVZHRm5UbUZ0WlNobWFXeHNVM1J5YVc1bktTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnVaWGRtYVd4c0lEMGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JtYVd4c0lEMGdabWxzYkNBbUppQm1hV3hzV3pCZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSVdacGJHd2dKaVlnS0c1bGQyWnBiR3dnUFNCbWFXeHNJRDBnWTNKbFlYUmxUbTlrWlNobWFXeHNVM1J5YVc1bktTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ieTUwZVhCbElEMDlJRndpYVcxaFoyVmNJaUFtSmlCd1lYSmhiWE11YzNKaktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabWxzYkM1emNtTWdQU0J3WVhKaGJYTXVjM0pqTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2NHRnlZVzF6TG1acGJHd2dKaVlnS0dacGJHd3ViMjRnUFNCMGNuVmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2htYVd4c0xtOXVJRDA5SUc1MWJHd2dmSHdnY0dGeVlXMXpMbVpwYkd3Z1BUMGdYQ0p1YjI1bFhDSWdmSHdnY0dGeVlXMXpMbVpwYkd3Z1BUMDlJRzUxYkd3cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1hV3hzTG05dUlEMGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWm1sc2JDNXZiaUFtSmlCd1lYSmhiWE11Wm1sc2JDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCcGMxVlNUQ0E5SUZOMGNpaHdZWEpoYlhNdVptbHNiQ2t1YldGMFkyZ29VaTVmU1ZOVlVrd3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNocGMxVlNUQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1hV3hzTG5CaGNtVnVkRTV2WkdVZ1BUMGdibTlrWlNBbUppQnViMlJsTG5KbGJXOTJaVU5vYVd4a0tHWnBiR3dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1hV3hzTG5KdmRHRjBaU0E5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdacGJHd3VjM0pqSUQwZ2FYTlZVa3hiTVYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1pwYkd3dWRIbHdaU0E5SUZ3aWRHbHNaVndpTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnWW1KdmVDQTlJRzh1WjJWMFFrSnZlQ2d4S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabWxzYkM1d2IzTnBkR2x2YmlBOUlHSmliM2d1ZUNBcklGTWdLeUJpWW05NExuazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc4dVh5NW1hV3hzY0c5eklEMGdXMkppYjNndWVDd2dZbUp2ZUM1NVhUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCU0xsOXdjbVZzYjJGa0tHbHpWVkpNV3pGZExDQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J2TGw4dVptbHNiSE5wZW1VZ1BTQmJkR2hwY3k1dlptWnpaWFJYYVdSMGFDd2dkR2hwY3k1dlptWnpaWFJJWldsbmFIUmRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYVd4c0xtTnZiRzl5SUQwZ1VpNW5aWFJTUjBJb2NHRnlZVzF6TG1acGJHd3BMbWhsZUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabWxzYkM1emNtTWdQU0JGTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1hV3hzTG5SNWNHVWdQU0JjSW5OdmJHbGtYQ0k3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hTTG1kbGRGSkhRaWh3WVhKaGJYTXVabWxzYkNrdVpYSnliM0lnSmlZZ0tISmxjeTUwZVhCbElHbHVJSHRqYVhKamJHVTZJREVzSUdWc2JHbHdjMlU2SURGOUlIeDhJRk4wY2lod1lYSmhiWE11Wm1sc2JDa3VZMmhoY2tGMEtDa2dJVDBnWENKeVhDSXBJQ1ltSUdGa1pFZHlZV1JwWlc1MFJtbHNiQ2h5WlhNc0lIQmhjbUZ0Y3k1bWFXeHNMQ0JtYVd4c0tTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZUzVtYVd4c0lEMGdYQ0p1YjI1bFhDSTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhMbWR5WVdScFpXNTBJRDBnY0dGeVlXMXpMbVpwYkd3N1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWFXeHNMbkp2ZEdGMFpTQTlJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRndpWm1sc2JDMXZjR0ZqYVhSNVhDSWdhVzRnY0dGeVlXMXpJSHg4SUZ3aWIzQmhZMmwwZVZ3aUlHbHVJSEJoY21GdGN5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCdmNHRmphWFI1SUQwZ0tDZ3JZVnRjSW1acGJHd3RiM0JoWTJsMGVWd2lYU0FySURFZ2ZId2dNaWtnTFNBeEtTQXFJQ2dvSzJFdWIzQmhZMmwwZVNBcklERWdmSHdnTWlrZ0xTQXhLU0FxSUNnb0sxSXVaMlYwVWtkQ0tIQmhjbUZ0Y3k1bWFXeHNLUzV2SUNzZ01TQjhmQ0F5S1NBdElERXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzl3WVdOcGRIa2dQU0J0YldsdUtHMXRZWGdvYjNCaFkybDBlU3dnTUNrc0lERXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1pwYkd3dWIzQmhZMmwwZVNBOUlHOXdZV05wZEhrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1pwYkd3dWMzSmpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnBiR3d1WTI5c2IzSWdQU0JjSW01dmJtVmNJanRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCdWIyUmxMbUZ3Y0dWdVpFTm9hV3hrS0dacGJHd3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSE4wY205clpTQTlJQ2h1YjJSbExtZGxkRVZzWlcxbGJuUnpRbmxVWVdkT1lXMWxLRndpYzNSeWIydGxYQ0lwSUNZbUlHNXZaR1V1WjJWMFJXeGxiV1Z1ZEhOQ2VWUmhaMDVoYldVb1hDSnpkSEp2YTJWY0lpbGJNRjBwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdibVYzYzNSeWIydGxJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBaGMzUnliMnRsSUNZbUlDaHVaWGR6ZEhKdmEyVWdQU0J6ZEhKdmEyVWdQU0JqY21WaGRHVk9iMlJsS0Z3aWMzUnliMnRsWENJcEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDZ29jR0Z5WVcxekxuTjBjbTlyWlNBbUppQndZWEpoYlhNdWMzUnliMnRsSUNFOUlGd2libTl1WlZ3aUtTQjhmRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJoY21GdGMxdGNJbk4wY205clpTMTNhV1IwYUZ3aVhTQjhmRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJoY21GdGMxdGNJbk4wY205clpTMXZjR0ZqYVhSNVhDSmRJQ0U5SUc1MWJHd2dmSHhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3WVhKaGJYTmJYQ0p6ZEhKdmEyVXRaR0Z6YUdGeWNtRjVYQ0pkSUh4OFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NHRnlZVzF6VzF3aWMzUnliMnRsTFcxcGRHVnliR2x0YVhSY0lsMGdmSHhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3WVhKaGJYTmJYQ0p6ZEhKdmEyVXRiR2x1WldwdmFXNWNJbDBnZkh4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd1lYSmhiWE5iWENKemRISnZhMlV0YkdsdVpXTmhjRndpWFNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITjBjbTlyWlM1dmJpQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQW9jR0Z5WVcxekxuTjBjbTlyWlNBOVBTQmNJbTV2Ym1WY0lpQjhmQ0J3WVhKaGJYTXVjM1J5YjJ0bElEMDlQU0J1ZFd4c0lIeDhJSE4wY205clpTNXZiaUE5UFNCdWRXeHNJSHg4SUhCaGNtRnRjeTV6ZEhKdmEyVWdQVDBnTUNCOGZDQndZWEpoYlhOYlhDSnpkSEp2YTJVdGQybGtkR2hjSWwwZ1BUMGdNQ2tnSmlZZ0tITjBjbTlyWlM1dmJpQTlJR1poYkhObEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQnpkSEp2YTJWRGIyeHZjaUE5SUZJdVoyVjBVa2RDS0hCaGNtRnRjeTV6ZEhKdmEyVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2MzUnliMnRsTG05dUlDWW1JSEJoY21GdGN5NXpkSEp2YTJVZ0ppWWdLSE4wY205clpTNWpiMnh2Y2lBOUlITjBjbTlyWlVOdmJHOXlMbWhsZUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J2Y0dGamFYUjVJRDBnS0NncllWdGNJbk4wY205clpTMXZjR0ZqYVhSNVhDSmRJQ3NnTVNCOGZDQXlLU0F0SURFcElDb2dLQ2dyWVM1dmNHRmphWFI1SUNzZ01TQjhmQ0F5S1NBdElERXBJQ29nS0NncmMzUnliMnRsUTI5c2IzSXVieUFySURFZ2ZId2dNaWtnTFNBeEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQjNhV1IwYUNBOUlDaDBiMFpzYjJGMEtIQmhjbUZ0YzF0Y0luTjBjbTlyWlMxM2FXUjBhRndpWFNrZ2ZId2dNU2tnS2lBdU56VTdYRzRnSUNBZ0lDQWdJQ0FnSUNCdmNHRmphWFI1SUQwZ2JXMXBiaWh0YldGNEtHOXdZV05wZEhrc0lEQXBMQ0F4S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEJoY21GdGMxdGNJbk4wY205clpTMTNhV1IwYUZ3aVhTQTlQU0J1ZFd4c0lDWW1JQ2gzYVdSMGFDQTlJR0ZiWENKemRISnZhMlV0ZDJsa2RHaGNJbDBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjR0Z5WVcxelcxd2ljM1J5YjJ0bExYZHBaSFJvWENKZElDWW1JQ2h6ZEhKdmEyVXVkMlZwWjJoMElEMGdkMmxrZEdncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZDJsa2RHZ2dKaVlnZDJsa2RHZ2dQQ0F4SUNZbUlDaHZjR0ZqYVhSNUlDbzlJSGRwWkhSb0tTQW1KaUFvYzNSeWIydGxMbmRsYVdkb2RDQTlJREVwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjM1J5YjJ0bExtOXdZV05wZEhrZ1BTQnZjR0ZqYVhSNU8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCd1lYSmhiWE5iWENKemRISnZhMlV0YkdsdVpXcHZhVzVjSWwwZ0ppWWdLSE4wY205clpTNXFiMmx1YzNSNWJHVWdQU0J3WVhKaGJYTmJYQ0p6ZEhKdmEyVXRiR2x1WldwdmFXNWNJbDBnZkh3Z1hDSnRhWFJsY2x3aUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhOMGNtOXJaUzV0YVhSbGNteHBiV2wwSUQwZ2NHRnlZVzF6VzF3aWMzUnliMnRsTFcxcGRHVnliR2x0YVhSY0lsMGdmSHdnT0R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEJoY21GdGMxdGNJbk4wY205clpTMXNhVzVsWTJGd1hDSmRJQ1ltSUNoemRISnZhMlV1Wlc1a1kyRndJRDBnY0dGeVlXMXpXMXdpYzNSeWIydGxMV3hwYm1WallYQmNJbDBnUFQwZ1hDSmlkWFIwWENJZ1B5QmNJbVpzWVhSY0lpQTZJSEJoY21GdGMxdGNJbk4wY205clpTMXNhVzVsWTJGd1hDSmRJRDA5SUZ3aWMzRjFZWEpsWENJZ1B5QmNJbk54ZFdGeVpWd2lJRG9nWENKeWIzVnVaRndpS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoY0luTjBjbTlyWlMxa1lYTm9ZWEp5WVhsY0lpQnBiaUJ3WVhKaGJYTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1pHRnphR0Z5Y21GNUlEMGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCY0lpMWNJam9nWENKemFHOXlkR1JoYzJoY0lpeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWENJdVhDSTZJRndpYzJodmNuUmtiM1JjSWl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYQ0l0TGx3aU9pQmNJbk5vYjNKMFpHRnphR1J2ZEZ3aUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JjSWkwdUxsd2lPaUJjSW5Ob2IzSjBaR0Z6YUdSdmRHUnZkRndpTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmNJaTRnWENJNklGd2laRzkwWENJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRndpTFNCY0lqb2dYQ0prWVhOb1hDSXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZ3aUxTMWNJam9nWENKc2IyNW5aR0Z6YUZ3aUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JjSWkwZ0xsd2lPaUJjSW1SaGMyaGtiM1JjSWl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYQ0l0TFM1Y0lqb2dYQ0pzYjI1blpHRnphR1J2ZEZ3aUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JjSWkwdExpNWNJam9nWENKc2IyNW5aR0Z6YUdSdmRHUnZkRndpWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemRISnZhMlV1WkdGemFITjBlV3hsSUQwZ1pHRnphR0Z5Y21GNVcyaGhjMTBvY0dGeVlXMXpXMXdpYzNSeWIydGxMV1JoYzJoaGNuSmhlVndpWFNrZ1B5QmtZWE5vWVhKeVlYbGJjR0Z5WVcxelcxd2ljM1J5YjJ0bExXUmhjMmhoY25KaGVWd2lYVjBnT2lCRk8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdibVYzYzNSeWIydGxJQ1ltSUc1dlpHVXVZWEJ3Wlc1a1EyaHBiR1FvYzNSeWIydGxLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCcFppQW9jbVZ6TG5SNWNHVWdQVDBnWENKMFpYaDBYQ0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsY3k1d1lYQmxjaTVqWVc1MllYTXVjM1I1YkdVdVpHbHpjR3hoZVNBOUlFVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdjM0JoYmlBOUlISmxjeTV3WVhCbGNpNXpjR0Z1TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcwZ1BTQXhNREFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05dWRGTnBlbVVnUFNCaExtWnZiblFnSmlZZ1lTNW1iMjUwTG0xaGRHTm9LQzljWEdRcktEODZYRnd1WEZ4a0tpay9LRDg5Y0hncEx5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCeklEMGdjM0JoYmk1emRIbHNaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHRXVabTl1ZENBbUppQW9jeTVtYjI1MElEMGdZUzVtYjI1MEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdGYlhDSm1iMjUwTFdaaGJXbHNlVndpWFNBbUppQW9jeTVtYjI1MFJtRnRhV3g1SUQwZ1lWdGNJbVp2Ym5RdFptRnRhV3g1WENKZEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdGYlhDSm1iMjUwTFhkbGFXZG9kRndpWFNBbUppQW9jeTVtYjI1MFYyVnBaMmgwSUQwZ1lWdGNJbVp2Ym5RdGQyVnBaMmgwWENKZEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdGYlhDSm1iMjUwTFhOMGVXeGxYQ0pkSUNZbUlDaHpMbVp2Ym5SVGRIbHNaU0E5SUdGYlhDSm1iMjUwTFhOMGVXeGxYQ0pkS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1p2Ym5SVGFYcGxJRDBnZEc5R2JHOWhkQ2hoVzF3aVptOXVkQzF6YVhwbFhDSmRJSHg4SUdadmJuUlRhWHBsSUNZbUlHWnZiblJUYVhwbFd6QmRLU0I4ZkNBeE1EdGNiaUFnSUNBZ0lDQWdJQ0FnSUhNdVptOXVkRk5wZW1VZ1BTQm1iMjUwVTJsNlpTQXFJRzBnS3lCY0luQjRYQ0k3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWE11ZEdWNGRIQmhkR2d1YzNSeWFXNW5JQ1ltSUNoemNHRnVMbWx1Ym1WeVNGUk5UQ0E5SUZOMGNpaHlaWE11ZEdWNGRIQmhkR2d1YzNSeWFXNW5LUzV5WlhCc1lXTmxLQzg4TDJjc0lGd2lKaU0yTUR0Y0lpa3VjbVZ3YkdGalpTZ3ZKaTluTENCY0lpWWpNemc3WENJcExuSmxjR3hoWTJVb0wxeGNiaTluTENCY0lqeGljajVjSWlrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHSnlaV04wSUQwZ2MzQmhiaTVuWlhSQ2IzVnVaR2x1WjBOc2FXVnVkRkpsWTNRb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGN5NVhJRDBnWVM1M0lEMGdLR0p5WldOMExuSnBaMmgwSUMwZ1luSmxZM1F1YkdWbWRDa2dMeUJ0TzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZ6TGtnZ1BTQmhMbWdnUFNBb1luSmxZM1F1WW05MGRHOXRJQzBnWW5KbFkzUXVkRzl3S1NBdklHMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QnlaWE11Y0dGd1pYSXVZMkZ1ZG1GekxuTjBlV3hsTG1ScGMzQnNZWGtnUFNCY0ltNXZibVZjSWp0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsY3k1WUlEMGdZUzU0TzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZ6TGxrZ1BTQmhMbmtnS3lCeVpYTXVTQ0F2SURJN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNoY0luaGNJaUJwYmlCd1lYSmhiWE1nZkh3Z1hDSjVYQ0lnYVc0Z2NHRnlZVzF6S1NBbUppQW9jbVZ6TG5CaGRHZ3VkaUE5SUZJdVptOXliV0YwS0Z3aWJYc3dmU3g3TVgxc2V6SjlMSHN4ZlZ3aUxDQnliM1Z1WkNoaExuZ2dLaUI2YjI5dEtTd2djbTkxYm1Rb1lTNTVJQ29nZW05dmJTa3NJSEp2ZFc1a0tHRXVlQ0FxSUhwdmIyMHBJQ3NnTVNrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHUnBjblI1WVhSMGNuTWdQU0JiWENKNFhDSXNJRndpZVZ3aUxDQmNJblJsZUhSY0lpd2dYQ0ptYjI1MFhDSXNJRndpWm05dWRDMW1ZVzFwYkhsY0lpd2dYQ0ptYjI1MExYZGxhV2RvZEZ3aUxDQmNJbVp2Ym5RdGMzUjViR1ZjSWl3Z1hDSm1iMjUwTFhOcGVtVmNJbDA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQmtJRDBnTUN3Z1pHUWdQU0JrYVhKMGVXRjBkSEp6TG14bGJtZDBhRHNnWkNBOElHUmtPeUJrS3lzcElHbG1JQ2hrYVhKMGVXRjBkSEp6VzJSZElHbHVJSEJoY21GdGN5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsY3k1ZkxtUnBjblI1SUQwZ01UdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnZEdWNGRDMWhibU5vYjNJZ1pXMTFiR0YwYVc5dVhHNGdJQ0FnSUNBZ0lDQWdJQ0J6ZDJsMFkyZ2dLR0ZiWENKMFpYaDBMV0Z1WTJodmNsd2lYU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdYQ0p6ZEdGeWRGd2lPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYTXVkR1Y0ZEhCaGRHZ3VjM1I1YkdWYlhDSjJMWFJsZUhRdFlXeHBaMjVjSWwwZ1BTQmNJbXhsWm5SY0lqdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WekxtSmllQ0E5SUhKbGN5NVhJQzhnTWp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElGd2laVzVrWENJNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsY3k1MFpYaDBjR0YwYUM1emRIbHNaVnRjSW5ZdGRHVjRkQzFoYkdsbmJsd2lYU0E5SUZ3aWNtbG5hSFJjSWp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZ6TG1KaWVDQTlJQzF5WlhNdVZ5QXZJREk3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR1ZtWVhWc2REcGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WekxuUmxlSFJ3WVhSb0xuTjBlV3hsVzF3aWRpMTBaWGgwTFdGc2FXZHVYQ0pkSUQwZ1hDSmpaVzUwWlhKY0lqdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WekxtSmllQ0E5SURBN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYTXVkR1Y0ZEhCaGRHZ3VjM1I1YkdWYlhDSjJMWFJsZUhRdGEyVnlibHdpWFNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0x5OGdjbVZ6TG5CaGNHVnlMbU5oYm5aaGN5NXpkSGxzWlM1a2FYTndiR0Y1SUQwZ1JUdGNiaUFnSUNCOUxGeHVJQ0FnSUdGa1pFZHlZV1JwWlc1MFJtbHNiQ0E5SUdaMWJtTjBhVzl1SUNodkxDQm5jbUZrYVdWdWRDd2dabWxzYkNrZ2UxeHVJQ0FnSUNBZ0lDQnZMbUYwZEhKeklEMGdieTVoZEhSeWN5QjhmQ0I3ZlR0Y2JpQWdJQ0FnSUNBZ2RtRnlJR0YwZEhKeklEMGdieTVoZEhSeWN5eGNiaUFnSUNBZ0lDQWdJQ0FnSUhCdmR5QTlJRTFoZEdndWNHOTNMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2IzQmhZMmwwZVN4Y2JpQWdJQ0FnSUNBZ0lDQWdJRzlwYm1SbGVDeGNiaUFnSUNBZ0lDQWdJQ0FnSUhSNWNHVWdQU0JjSW14cGJtVmhjbHdpTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdabmhtZVNBOUlGd2lMalVnTGpWY0lqdGNiaUFnSUNBZ0lDQWdieTVoZEhSeWN5NW5jbUZrYVdWdWRDQTlJR2R5WVdScFpXNTBPMXh1SUNBZ0lDQWdJQ0JuY21Ga2FXVnVkQ0E5SUZOMGNpaG5jbUZrYVdWdWRDa3VjbVZ3YkdGalpTaFNMbDl5WVdScFlXeGZaM0poWkdsbGJuUXNJR1oxYm1OMGFXOXVJQ2hoYkd3c0lHWjRMQ0JtZVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pTQTlJRndpY21Ga2FXRnNYQ0k3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWm5nZ0ppWWdabmtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWVDQTlJSFJ2Um14dllYUW9abmdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdaNUlEMGdkRzlHYkc5aGRDaG1lU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0c5M0tHWjRJQzBnTGpVc0lESXBJQ3NnY0c5M0tHWjVJQzBnTGpVc0lESXBJRDRnTGpJMUlDWW1JQ2htZVNBOUlHMWhkR2d1YzNGeWRDZ3VNalVnTFNCd2IzY29abmdnTFNBdU5Td2dNaWtwSUNvZ0tDaG1lU0ErSUM0MUtTQXFJRElnTFNBeEtTQXJJQzQxS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWVHWjVJRDBnWm5nZ0t5QlRJQ3NnWm5rN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1JUdGNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUdkeVlXUnBaVzUwSUQwZ1ozSmhaR2xsYm5RdWMzQnNhWFFvTDF4Y2N5cGNYQzFjWEhNcUx5azdYRzRnSUNBZ0lDQWdJR2xtSUNoMGVYQmxJRDA5SUZ3aWJHbHVaV0Z5WENJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQmhibWRzWlNBOUlHZHlZV1JwWlc1MExuTm9hV1owS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JoYm1kc1pTQTlJQzEwYjBac2IyRjBLR0Z1WjJ4bEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHBjMDVoVGloaGJtZHNaU2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYm5Wc2JEdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjJZWElnWkc5MGN5QTlJRkl1WDNCaGNuTmxSRzkwY3lobmNtRmthV1Z1ZENrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2doWkc5MGN5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1MWJHdzdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYnlBOUlHOHVjMmhoY0dVZ2ZId2dieTV1YjJSbE8xeHVJQ0FnSUNBZ0lDQnBaaUFvWkc5MGN5NXNaVzVuZEdncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUc4dWNtVnRiM1psUTJocGJHUW9abWxzYkNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JtYVd4c0xtOXVJRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdacGJHd3ViV1YwYUc5a0lEMGdYQ0p1YjI1bFhDSTdYRzRnSUNBZ0lDQWdJQ0FnSUNCbWFXeHNMbU52Ykc5eUlEMGdaRzkwYzFzd1hTNWpiMnh2Y2p0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1pwYkd3dVkyOXNiM0l5SUQwZ1pHOTBjMXRrYjNSekxteGxibWQwYUNBdElERmRMbU52Ykc5eU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHTnNjbk1nUFNCYlhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdMQ0JwYVNBOUlHUnZkSE11YkdWdVozUm9PeUJwSUR3Z2FXazdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUnZkSE5iYVYwdWIyWm1jMlYwSUNZbUlHTnNjbk11Y0hWemFDaGtiM1J6VzJsZExtOW1abk5sZENBcklGTWdLeUJrYjNSelcybGRMbU52Ykc5eUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJR1pwYkd3dVkyOXNiM0p6SUQwZ1kyeHljeTVzWlc1bmRHZ2dQeUJqYkhKekxtcHZhVzRvS1NBNklGd2lNQ1VnWENJZ0t5Qm1hV3hzTG1OdmJHOXlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dVZ1BUMGdYQ0p5WVdScFlXeGNJaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdacGJHd3VkSGx3WlNBOUlGd2laM0poWkdsbGJuUlVhWFJzWlZ3aU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnBiR3d1Wm05amRYTWdQU0JjSWpFd01DVmNJanRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYVd4c0xtWnZZM1Z6YzJsNlpTQTlJRndpTUNBd1hDSTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabWxzYkM1bWIyTjFjM0J2YzJsMGFXOXVJRDBnWm5obWVUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1hV3hzTG1GdVoyeGxJRDBnTUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnWm1sc2JDNXliM1JoZEdVOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm1sc2JDNTBlWEJsSUQwZ1hDSm5jbUZrYVdWdWRGd2lPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1pwYkd3dVlXNW5iR1VnUFNBb01qY3dJQzBnWVc1bmJHVXBJQ1VnTXpZd08xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdieTVoY0hCbGJtUkRhR2xzWkNobWFXeHNLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnTVR0Y2JpQWdJQ0I5TEZ4dUlDQWdJRVZzWlcxbGJuUWdQU0JtZFc1amRHbHZiaUFvYm05a1pTd2dkbTFzS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE5iTUYwZ1BTQjBhR2x6TG01dlpHVWdQU0J1YjJSbE8xeHVJQ0FnSUNBZ0lDQnViMlJsTG5KaGNHaGhaV3dnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtbGtJRDBnVWk1ZmIybGtLeXM3WEc0Z0lDQWdJQ0FnSUc1dlpHVXVjbUZ3YUdGbGJHbGtJRDBnZEdocGN5NXBaRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NVlJRDBnTUR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVaSUQwZ01EdGNiaUFnSUNBZ0lDQWdkR2hwY3k1aGRIUnljeUE5SUh0OU8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5CaGNHVnlJRDBnZG0xc08xeHVJQ0FnSUNBZ0lDQjBhR2x6TG0xaGRISnBlQ0E5SUZJdWJXRjBjbWw0S0NrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WHlBOUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSeVlXNXpabTl5YlRvZ1cxMHNYRzRnSUNBZ0lDQWdJQ0FnSUNCemVEb2dNU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lITjVPaUF4TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdaSGc2SURBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JrZVRvZ01DeGNiaUFnSUNBZ0lDQWdJQ0FnSUdSbFp6b2dNQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHUnBjblI1T2lBeExGeHVJQ0FnSUNBZ0lDQWdJQ0FnWkdseWRIbFVPaUF4WEc0Z0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUNBZ0lDRjJiV3d1WW05MGRHOXRJQ1ltSUNoMmJXd3VZbTkwZEc5dElEMGdkR2hwY3lrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Y0hKbGRpQTlJSFp0YkM1MGIzQTdYRzRnSUNBZ0lDQWdJSFp0YkM1MGIzQWdKaVlnS0hadGJDNTBiM0F1Ym1WNGRDQTlJSFJvYVhNcE8xeHVJQ0FnSUNBZ0lDQjJiV3d1ZEc5d0lEMGdkR2hwY3p0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV1WlhoMElEMGdiblZzYkR0Y2JpQWdJQ0I5TzF4dUlDQWdJSFpoY2lCbGJIQnliM1J2SUQwZ1VpNWxiRHRjYmx4dUlDQWdJRVZzWlcxbGJuUXVjSEp2ZEc5MGVYQmxJRDBnWld4d2NtOTBienRjYmlBZ0lDQmxiSEJ5YjNSdkxtTnZibk4wY25WamRHOXlJRDBnUld4bGJXVnVkRHRjYmlBZ0lDQmxiSEJ5YjNSdkxuUnlZVzV6Wm05eWJTQTlJR1oxYm1OMGFXOXVJQ2gwYzNSeUtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGMzUnlJRDA5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDh1ZEhKaGJuTm1iM0p0TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIWmhjaUIyWW5NZ1BTQjBhR2x6TG5CaGNHVnlMbDkyYVdWM1FtOTRVMmhwWm5Rc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWW5RZ1BTQjJZbk1nUHlCY0luTmNJaUFySUZ0MlluTXVjMk5oYkdVc0lIWmljeTV6WTJGc1pWMGdLeUJjSWkweExURjBYQ0lnS3lCYmRtSnpMbVI0TENCMlluTXVaSGxkSURvZ1JTeGNiaUFnSUNBZ0lDQWdJQ0FnSUc5c1pIUTdYRzRnSUNBZ0lDQWdJR2xtSUNoMlluTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHOXNaSFFnUFNCMGMzUnlJRDBnVTNSeUtIUnpkSElwTG5KbGNHeGhZMlVvTDF4Y0xuc3pmWHhjWEhVeU1ESTJMMmNzSUhSb2FYTXVYeTUwY21GdWMyWnZjbTBnZkh3Z1JTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnVWk1ZlpYaDBjbUZqZEZSeVlXNXpabTl5YlNoMGFHbHpMQ0IyWW5RZ0t5QjBjM1J5S1R0Y2JpQWdJQ0FnSUNBZ2RtRnlJRzFoZEhKcGVDQTlJSFJvYVhNdWJXRjBjbWw0TG1Oc2IyNWxLQ2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnphMlYzSUQwZ2RHaHBjeTV6YTJWM0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnYnlBOUlIUm9hWE11Ym05a1pTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhOd2JHbDBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2FYTkhjbUZrSUQwZ2ZsTjBjaWgwYUdsekxtRjBkSEp6TG1acGJHd3BMbWx1WkdWNFQyWW9YQ0l0WENJcExGeHVJQ0FnSUNBZ0lDQWdJQ0FnYVhOUVlYUjBJRDBnSVZOMGNpaDBhR2x6TG1GMGRISnpMbVpwYkd3cExtbHVaR1Y0VDJZb1hDSjFjbXdvWENJcE8xeHVJQ0FnSUNBZ0lDQnRZWFJ5YVhndWRISmhibk5zWVhSbEtERXNJREVwTzF4dUlDQWdJQ0FnSUNCcFppQW9hWE5RWVhSMElIeDhJR2x6UjNKaFpDQjhmQ0IwYUdsekxuUjVjR1VnUFQwZ1hDSnBiV0ZuWlZ3aUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCemEyVjNMbTFoZEhKcGVDQTlJRndpTVNBd0lEQWdNVndpTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjMnRsZHk1dlptWnpaWFFnUFNCY0lqQWdNRndpTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjM0JzYVhRZ1BTQnRZWFJ5YVhndWMzQnNhWFFvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnb2FYTkhjbUZrSUNZbUlITndiR2wwTG01dlVtOTBZWFJwYjI0cElIeDhJQ0Z6Y0d4cGRDNXBjMU5wYlhCc1pTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzh1YzNSNWJHVXVabWxzZEdWeUlEMGdiV0YwY21sNExuUnZSbWxzZEdWeUtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdKaUlEMGdkR2hwY3k1blpYUkNRbTk0S0Nrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0ppZENBOUlIUm9hWE11WjJWMFFrSnZlQ2d4S1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaSGdnUFNCaVlpNTRJQzBnWW1KMExuZ3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSNUlEMGdZbUl1ZVNBdElHSmlkQzU1TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc4dVkyOXZjbVJ2Y21sbmFXNGdQU0FvWkhnZ0tpQXRlbTl2YlNrZ0t5QlRJQ3NnS0dSNUlDb2dMWHB2YjIwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmxkRU52YjNKa2N5aDBhR2x6TENBeExDQXhMQ0JrZUN3Z1pIa3NJREFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZMbk4wZVd4bExtWnBiSFJsY2lBOUlFVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMlYwUTI5dmNtUnpLSFJvYVhNc0lITndiR2wwTG5OallXeGxlQ3dnYzNCc2FYUXVjMk5oYkdWNUxDQnpjR3hwZEM1a2VDd2djM0JzYVhRdVpIa3NJSE53YkdsMExuSnZkR0YwWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnZMbk4wZVd4bExtWnBiSFJsY2lBOUlFVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCemEyVjNMbTFoZEhKcGVDQTlJRk4wY2lodFlYUnlhWGdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjMnRsZHk1dlptWnpaWFFnUFNCdFlYUnlhWGd1YjJabWMyVjBLQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2FXWWdLRzlzWkhRZ0lUMDlJRzUxYkd3cElIc2dMeThnWlcxd2RIa2djM1J5YVc1bklIWmhiSFZsSUdseklIUnlkV1VnWVhNZ2QyVnNiRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmTG5SeVlXNXpabTl5YlNBOUlHOXNaSFE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQlNMbDlsZUhSeVlXTjBWSEpoYm5ObWIzSnRLSFJvYVhNc0lHOXNaSFFwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpPMXh1SUNBZ0lIMDdYRzRnSUNBZ1pXeHdjbTkwYnk1eWIzUmhkR1VnUFNCbWRXNWpkR2x2YmlBb1pHVm5MQ0JqZUN3Z1kza3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11Y21WdGIzWmxaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2FXWWdLR1JsWnlBOVBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWkdWbklEMGdVM1J5S0dSbFp5a3VjM0JzYVhRb2MyVndZWEpoZEc5eUtUdGNiaUFnSUNBZ0lDQWdhV1lnS0dSbFp5NXNaVzVuZEdnZ0xTQXhLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmplQ0E5SUhSdlJteHZZWFFvWkdWbld6RmRLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTjVJRDBnZEc5R2JHOWhkQ2hrWldkYk1sMHBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdSbFp5QTlJSFJ2Um14dllYUW9aR1ZuV3pCZEtUdGNiaUFnSUNBZ0lDQWdLR041SUQwOUlHNTFiR3dwSUNZbUlDaGplQ0E5SUdONUtUdGNiaUFnSUNBZ0lDQWdhV1lnS0dONElEMDlJRzUxYkd3Z2ZId2dZM2tnUFQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdKaWIzZ2dQU0IwYUdsekxtZGxkRUpDYjNnb01TazdYRzRnSUNBZ0lDQWdJQ0FnSUNCamVDQTlJR0ppYjNndWVDQXJJR0ppYjNndWQybGtkR2dnTHlBeU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTNrZ1BTQmlZbTk0TG5rZ0t5QmlZbTk0TG1obGFXZG9kQ0F2SURJN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkR2hwY3k1ZkxtUnBjblI1VkNBOUlERTdYRzRnSUNBZ0lDQWdJSFJvYVhNdWRISmhibk5tYjNKdEtIUm9hWE11WHk1MGNtRnVjMlp2Y20wdVkyOXVZMkYwS0Z0YlhDSnlYQ0lzSUdSbFp5d2dZM2dzSUdONVhWMHBLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNGdJQ0FnZlR0Y2JpQWdJQ0JsYkhCeWIzUnZMblJ5WVc1emJHRjBaU0E5SUdaMWJtTjBhVzl1SUNoa2VDd2daSGtwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWNtVnRiM1psWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdaSGdnUFNCVGRISW9aSGdwTG5Od2JHbDBLSE5sY0dGeVlYUnZjaWs3WEc0Z0lDQWdJQ0FnSUdsbUlDaGtlQzVzWlc1bmRHZ2dMU0F4S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JrZVNBOUlIUnZSbXh2WVhRb1pIaGJNVjBwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHUjRJRDBnZEc5R2JHOWhkQ2hrZUZzd1hTa2dmSHdnTUR0Y2JpQWdJQ0FnSUNBZ1pIa2dQU0FyWkhrZ2ZId2dNRHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WHk1aVltOTRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw4dVltSnZlQzU0SUNzOUlHUjRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmTG1KaWIzZ3VlU0FyUFNCa2VUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0IwYUdsekxuUnlZVzV6Wm05eWJTaDBhR2x6TGw4dWRISmhibk5tYjNKdExtTnZibU5oZENoYlcxd2lkRndpTENCa2VDd2daSGxkWFNrcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjenRjYmlBZ0lDQjlPMXh1SUNBZ0lHVnNjSEp2ZEc4dWMyTmhiR1VnUFNCbWRXNWpkR2x2YmlBb2MzZ3NJSE41TENCamVDd2dZM2twSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWNtVnRiM1psWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjM2dnUFNCVGRISW9jM2dwTG5Od2JHbDBLSE5sY0dGeVlYUnZjaWs3WEc0Z0lDQWdJQ0FnSUdsbUlDaHplQzVzWlc1bmRHZ2dMU0F4S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6ZVNBOUlIUnZSbXh2WVhRb2MzaGJNVjBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZM2dnUFNCMGIwWnNiMkYwS0hONFd6SmRLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTjVJRDBnZEc5R2JHOWhkQ2h6ZUZzelhTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCcGMwNWhUaWhqZUNrZ0ppWWdLR040SUQwZ2JuVnNiQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBjMDVoVGloamVTa2dKaVlnS0dONUlEMGdiblZzYkNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjM2dnUFNCMGIwWnNiMkYwS0hONFd6QmRLVHRjYmlBZ0lDQWdJQ0FnS0hONUlEMDlJRzUxYkd3cElDWW1JQ2h6ZVNBOUlITjRLVHRjYmlBZ0lDQWdJQ0FnS0dONUlEMDlJRzUxYkd3cElDWW1JQ2hqZUNBOUlHTjVLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHTjRJRDA5SUc1MWJHd2dmSHdnWTNrZ1BUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHSmliM2dnUFNCMGFHbHpMbWRsZEVKQ2IzZ29NU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1kzZ2dQU0JqZUNBOVBTQnVkV3hzSUQ4Z1ltSnZlQzU0SUNzZ1ltSnZlQzUzYVdSMGFDQXZJRElnT2lCamVEdGNiaUFnSUNBZ0lDQWdZM2tnUFNCamVTQTlQU0J1ZFd4c0lEOGdZbUp2ZUM1NUlDc2dZbUp2ZUM1b1pXbG5hSFFnTHlBeUlEb2dZM2s3WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUwY21GdWMyWnZjbTBvZEdocGN5NWZMblJ5WVc1elptOXliUzVqYjI1allYUW9XMXRjSW5OY0lpd2djM2dzSUhONUxDQmplQ3dnWTNsZFhTa3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOHVaR2x5ZEhsVUlEMGdNVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNGdJQ0FnZlR0Y2JpQWdJQ0JsYkhCeWIzUnZMbWhwWkdVZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUNGMGFHbHpMbkpsYlc5MlpXUWdKaVlnS0hSb2FYTXVibTlrWlM1emRIbHNaUzVrYVhOd2JHRjVJRDBnWENKdWIyNWxYQ0lwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6dGNiaUFnSUNCOU8xeHVJQ0FnSUdWc2NISnZkRzh1YzJodmR5QTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ0lYUm9hWE11Y21WdGIzWmxaQ0FtSmlBb2RHaHBjeTV1YjJSbExuTjBlV3hsTG1ScGMzQnNZWGtnUFNCRktUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03WEc0Z0lDQWdmVHRjYmlBZ0lDQXZMeUJPWldWa1pXUWdkRzhnWm1sNElIUm9aU0IyYld3Z2MyVjBWbWxsZDBKdmVDQnBjM04xWlhOY2JpQWdJQ0JsYkhCeWIzUnZMbUYxZUVkbGRFSkNiM2dnUFNCU0xtVnNMbWRsZEVKQ2IzZzdYRzRnSUNBZ1pXeHdjbTkwYnk1blpYUkNRbTk0SUQwZ1puVnVZM1JwYjI0b0tYdGNiaUFnSUNBZ0lIWmhjaUJpSUQwZ2RHaHBjeTVoZFhoSFpYUkNRbTk0S0NrN1hHNGdJQ0FnSUNCcFppQW9kR2hwY3k1d1lYQmxjaUFtSmlCMGFHbHpMbkJoY0dWeUxsOTJhV1YzUW05NFUyaHBablFwWEc0Z0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQmpJRDBnZTMwN1hHNGdJQ0FnSUNBZ0lIWmhjaUI2SUQwZ01TOTBhR2x6TG5CaGNHVnlMbDkyYVdWM1FtOTRVMmhwWm5RdWMyTmhiR1U3WEc0Z0lDQWdJQ0FnSUdNdWVDQTlJR0l1ZUNBdElIUm9hWE11Y0dGd1pYSXVYM1pwWlhkQ2IzaFRhR2xtZEM1a2VEdGNiaUFnSUNBZ0lDQWdZeTU0SUNvOUlIbzdYRzRnSUNBZ0lDQWdJR011ZVNBOUlHSXVlU0F0SUhSb2FYTXVjR0Z3WlhJdVgzWnBaWGRDYjNoVGFHbG1kQzVrZVR0Y2JpQWdJQ0FnSUNBZ1l5NTVJQ285SUhvN1hHNGdJQ0FnSUNBZ0lHTXVkMmxrZEdnZ0lEMGdZaTUzYVdSMGFDQWdLaUI2TzF4dUlDQWdJQ0FnSUNCakxtaGxhV2RvZENBOUlHSXVhR1ZwWjJoMElDb2dlanRjYmlBZ0lDQWdJQ0FnWXk1NE1pQTlJR011ZUNBcklHTXVkMmxrZEdnN1hHNGdJQ0FnSUNBZ0lHTXVlVElnUFNCakxua2dLeUJqTG1obGFXZG9kRHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR003WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdZanRjYmlBZ0lDQjlPMXh1SUNBZ0lHVnNjSEp2ZEc4dVgyZGxkRUpDYjNnZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG5KbGJXOTJaV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjdmVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdlRG9nZEdocGN5NVlJQ3NnS0hSb2FYTXVZbUo0SUh4OElEQXBJQzBnZEdocGN5NVhJQzhnTWl4Y2JpQWdJQ0FnSUNBZ0lDQWdJSGs2SUhSb2FYTXVXU0F0SUhSb2FYTXVTQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lIZHBaSFJvT2lCMGFHbHpMbGNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQm9aV2xuYUhRNklIUm9hWE11U0Z4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUgwN1hHNGdJQ0FnWld4d2NtOTBieTV5WlcxdmRtVWdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxuSmxiVzkyWldRZ2ZId2dJWFJvYVhNdWJtOWtaUzV3WVhKbGJuUk9iMlJsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZEdocGN5NXdZWEJsY2k1ZlgzTmxkRjlmSUNZbUlIUm9hWE11Y0dGd1pYSXVYMTl6WlhSZlh5NWxlR05zZFdSbEtIUm9hWE1wTzF4dUlDQWdJQ0FnSUNCU0xtVjJaUzUxYm1KcGJtUW9YQ0p5WVhCb1lXVnNMaW91S2k1Y0lpQXJJSFJvYVhNdWFXUXBPMXh1SUNBZ0lDQWdJQ0JTTGw5MFpXRnlLSFJvYVhNc0lIUm9hWE11Y0dGd1pYSXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtNXZaR1V1Y0dGeVpXNTBUbTlrWlM1eVpXMXZkbVZEYUdsc1pDaDBhR2x6TG01dlpHVXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTm9ZWEJsSUNZbUlIUm9hWE11YzJoaGNHVXVjR0Z5Wlc1MFRtOWtaUzV5WlcxdmRtVkRhR2xzWkNoMGFHbHpMbk5vWVhCbEtUdGNiaUFnSUNBZ0lDQWdabTl5SUNoMllYSWdhU0JwYmlCMGFHbHpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6VzJsZElEMGdkSGx3Wlc5bUlIUm9hWE5iYVYwZ1BUMGdYQ0ptZFc1amRHbHZibHdpSUQ4Z1VpNWZjbVZ0YjNabFpFWmhZM1J2Y25rb2FTa2dPaUJ1ZFd4c08xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSFJvYVhNdWNtVnRiM1psWkNBOUlIUnlkV1U3WEc0Z0lDQWdmVHRjYmlBZ0lDQmxiSEJ5YjNSdkxtRjBkSElnUFNCbWRXNWpkR2x2YmlBb2JtRnRaU3dnZG1Gc2RXVXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11Y21WdGIzWmxaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2FXWWdLRzVoYldVZ1BUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlISmxjeUE5SUh0OU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWm05eUlDaDJZWElnWVNCcGJpQjBhR2x6TG1GMGRISnpLU0JwWmlBb2RHaHBjeTVoZEhSeWMxdG9ZWE5kS0dFcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZ6VzJGZElEMGdkR2hwY3k1aGRIUnljMXRoWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxjeTVuY21Ga2FXVnVkQ0FtSmlCeVpYTXVabWxzYkNBOVBTQmNJbTV2Ym1WY0lpQW1KaUFvY21WekxtWnBiR3dnUFNCeVpYTXVaM0poWkdsbGJuUXBJQ1ltSUdSbGJHVjBaU0J5WlhNdVozSmhaR2xsYm5RN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhNdWRISmhibk5tYjNKdElEMGdkR2hwY3k1ZkxuUnlZVzV6Wm05eWJUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ5WlhNN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lnS0haaGJIVmxJRDA5SUc1MWJHd2dKaVlnVWk1cGN5aHVZVzFsTENCY0luTjBjbWx1WjF3aUtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRzVoYldVZ1BUMGdabWxzYkZOMGNtbHVaeUFtSmlCMGFHbHpMbUYwZEhKekxtWnBiR3dnUFQwZ1hDSnViMjVsWENJZ0ppWWdkR2hwY3k1aGRIUnljeTVuY21Ga2FXVnVkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtRjBkSEp6TG1keVlXUnBaVzUwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJRzVoYldWeklEMGdibUZ0WlM1emNHeHBkQ2h6WlhCaGNtRjBiM0lwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5MWRDQTlJSHQ5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURBc0lHbHBJRDBnYm1GdFpYTXViR1Z1WjNSb095QnBJRHdnYVdrN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc1aGJXVWdQU0J1WVcxbGMxdHBYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2JtRnRaU0JwYmlCMGFHbHpMbUYwZEhKektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5MWRGdHVZVzFsWFNBOUlIUm9hWE11WVhSMGNuTmJibUZ0WlYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaFNMbWx6S0hSb2FYTXVjR0Z3WlhJdVkzVnpkRzl0UVhSMGNtbGlkWFJsYzF0dVlXMWxYU3dnWENKbWRXNWpkR2x2Ymx3aUtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdmRYUmJibUZ0WlYwZ1BTQjBhR2x6TG5CaGNHVnlMbU4xYzNSdmJVRjBkSEpwWW5WMFpYTmJibUZ0WlYwdVpHVm1PMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5MWRGdHVZVzFsWFNBOUlGSXVYMkYyWVdsc1lXSnNaVUYwZEhKelcyNWhiV1ZkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCcGFTQXRJREVnUHlCdmRYUWdPaUJ2ZFhSYmJtRnRaWE5iTUYxZE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbUYwZEhKeklDWW1JSFpoYkhWbElEMDlJRzUxYkd3Z0ppWWdVaTVwY3lodVlXMWxMQ0JjSW1GeWNtRjVYQ0lwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J2ZFhRZ1BTQjdmVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUFvYVNBOUlEQXNJR2xwSUQwZ2JtRnRaUzVzWlc1bmRHZzdJR2tnUENCcGFUc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2IzVjBXMjVoYldWYmFWMWRJRDBnZEdocGN5NWhkSFJ5S0c1aGJXVmJhVjBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUc5MWREdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0IyWVhJZ2NHRnlZVzF6TzF4dUlDQWdJQ0FnSUNCcFppQW9kbUZzZFdVZ0lUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY0dGeVlXMXpJRDBnZTMwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J3WVhKaGJYTmJibUZ0WlYwZ1BTQjJZV3gxWlR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjJZV3gxWlNBOVBTQnVkV3hzSUNZbUlGSXVhWE1vYm1GdFpTd2dYQ0p2WW1wbFkzUmNJaWtnSmlZZ0tIQmhjbUZ0Y3lBOUlHNWhiV1VwTzF4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCclpYa2dhVzRnY0dGeVlXMXpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxkbVVvWENKeVlYQm9ZV1ZzTG1GMGRISXVYQ0lnS3lCclpYa2dLeUJjSWk1Y0lpQXJJSFJvYVhNdWFXUXNJSFJvYVhNc0lIQmhjbUZ0YzF0clpYbGRLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCcFppQW9jR0Z5WVcxektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCbWIzSWdLR3RsZVNCcGJpQjBhR2x6TG5CaGNHVnlMbU4xYzNSdmJVRjBkSEpwWW5WMFpYTXBJR2xtSUNoMGFHbHpMbkJoY0dWeUxtTjFjM1J2YlVGMGRISnBZblYwWlhOYmFHRnpYU2hyWlhrcElDWW1JSEJoY21GdGMxdG9ZWE5kS0d0bGVTa2dKaVlnVWk1cGN5aDBhR2x6TG5CaGNHVnlMbU4xYzNSdmJVRjBkSEpwWW5WMFpYTmJhMlY1WFN3Z1hDSm1kVzVqZEdsdmJsd2lLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQndZWElnUFNCMGFHbHpMbkJoY0dWeUxtTjFjM1J2YlVGMGRISnBZblYwWlhOYmEyVjVYUzVoY0hCc2VTaDBhR2x6TENCYlhTNWpiMjVqWVhRb2NHRnlZVzF6VzJ0bGVWMHBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtRjBkSEp6VzJ0bGVWMGdQU0J3WVhKaGJYTmJhMlY1WFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCemRXSnJaWGtnYVc0Z2NHRnlLU0JwWmlBb2NHRnlXMmhoYzEwb2MzVmlhMlY1S1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3WVhKaGJYTmJjM1ZpYTJWNVhTQTlJSEJoY2x0emRXSnJaWGxkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJSFJvYVhNdWNHRndaWEl1WTJGdWRtRnpMbk4wZVd4bExtUnBjM0JzWVhrZ1BTQmNJbTV2Ym1WY0lqdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHdZWEpoYlhNdWRHVjRkQ0FtSmlCMGFHbHpMblI1Y0dVZ1BUMGdYQ0owWlhoMFhDSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuUmxlSFJ3WVhSb0xuTjBjbWx1WnlBOUlIQmhjbUZ0Y3k1MFpYaDBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYzJWMFJtbHNiRUZ1WkZOMGNtOXJaU2gwYUdsekxDQndZWEpoYlhNcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2RHaHBjeTV3WVhCbGNpNWpZVzUyWVhNdWMzUjViR1V1WkdsemNHeGhlU0E5SUVVN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03WEc0Z0lDQWdmVHRjYmlBZ0lDQmxiSEJ5YjNSdkxuUnZSbkp2Ym5RZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUNGMGFHbHpMbkpsYlc5MlpXUWdKaVlnZEdocGN5NXViMlJsTG5CaGNtVnVkRTV2WkdVdVlYQndaVzVrUTJocGJHUW9kR2hwY3k1dWIyUmxLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXdZWEJsY2lBbUppQjBhR2x6TG5CaGNHVnlMblJ2Y0NBaFBTQjBhR2x6SUNZbUlGSXVYM1J2Wm5KdmJuUW9kR2hwY3l3Z2RHaHBjeTV3WVhCbGNpazdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TzF4dUlDQWdJSDA3WEc0Z0lDQWdaV3h3Y205MGJ5NTBiMEpoWTJzZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG5KbGJXOTJaV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtNXZaR1V1Y0dGeVpXNTBUbTlrWlM1bWFYSnpkRU5vYVd4a0lDRTlJSFJvYVhNdWJtOWtaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1dWIyUmxMbkJoY21WdWRFNXZaR1V1YVc1elpYSjBRbVZtYjNKbEtIUm9hWE11Ym05a1pTd2dkR2hwY3k1dWIyUmxMbkJoY21WdWRFNXZaR1V1Wm1seWMzUkRhR2xzWkNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JTTGw5MGIySmhZMnNvZEdocGN5d2dkR2hwY3k1d1lYQmxjaWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTTdYRzRnSUNBZ2ZUdGNiaUFnSUNCbGJIQnliM1J2TG1sdWMyVnlkRUZtZEdWeUlEMGdablZ1WTNScGIyNGdLR1ZzWlcxbGJuUXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11Y21WdGIzWmxaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2FXWWdLR1ZzWlcxbGJuUXVZMjl1YzNSeWRXTjBiM0lnUFQwZ1VpNXpkQzVqYjI1emRISjFZM1J2Y2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWld4bGJXVnVkQ0E5SUdWc1pXMWxiblJiWld4bGJXVnVkQzVzWlc1bmRHZ2dMU0F4WFR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvWld4bGJXVnVkQzV1YjJSbExtNWxlSFJUYVdKc2FXNW5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxiR1Z0Wlc1MExtNXZaR1V1Y0dGeVpXNTBUbTlrWlM1cGJuTmxjblJDWldadmNtVW9kR2hwY3k1dWIyUmxMQ0JsYkdWdFpXNTBMbTV2WkdVdWJtVjRkRk5wWW14cGJtY3BPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pXeGxiV1Z1ZEM1dWIyUmxMbkJoY21WdWRFNXZaR1V1WVhCd1pXNWtRMmhwYkdRb2RHaHBjeTV1YjJSbEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JTTGw5cGJuTmxjblJoWm5SbGNpaDBhR2x6TENCbGJHVnRaVzUwTENCMGFHbHpMbkJoY0dWeUtUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03WEc0Z0lDQWdmVHRjYmlBZ0lDQmxiSEJ5YjNSdkxtbHVjMlZ5ZEVKbFptOXlaU0E5SUdaMWJtTjBhVzl1SUNobGJHVnRaVzUwS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxuSmxiVzkyWldRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR2xtSUNobGJHVnRaVzUwTG1OdmJuTjBjblZqZEc5eUlEMDlJRkl1YzNRdVkyOXVjM1J5ZFdOMGIzSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnNaVzFsYm5RZ1BTQmxiR1Z0Wlc1MFd6QmRPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdWc1pXMWxiblF1Ym05a1pTNXdZWEpsYm5ST2IyUmxMbWx1YzJWeWRFSmxabTl5WlNoMGFHbHpMbTV2WkdVc0lHVnNaVzFsYm5RdWJtOWtaU2s3WEc0Z0lDQWdJQ0FnSUZJdVgybHVjMlZ5ZEdKbFptOXlaU2gwYUdsekxDQmxiR1Z0Wlc1MExDQjBhR2x6TG5CaGNHVnlLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNGdJQ0FnZlR0Y2JpQWdJQ0JsYkhCeWIzUnZMbUpzZFhJZ1BTQm1kVzVqZEdsdmJpQW9jMmw2WlNrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnY3lBOUlIUm9hWE11Ym05a1pTNXlkVzUwYVcxbFUzUjViR1VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQm1JRDBnY3k1bWFXeDBaWEk3WEc0Z0lDQWdJQ0FnSUdZZ1BTQm1MbkpsY0d4aFkyVW9ZbXgxY25KbFoyVjRjQ3dnUlNrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2dyYzJsNlpTQWhQVDBnTUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWhkSFJ5Y3k1aWJIVnlJRDBnYzJsNlpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhNdVptbHNkR1Z5SUQwZ1ppQXJJRk1nS3lCdGN5QXJJRndpTGtKc2RYSW9jR2w0Wld4eVlXUnBkWE05WENJZ0t5QW9LM05wZW1VZ2ZId2dNUzQxS1NBcklGd2lLVndpTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjeTV0WVhKbmFXNGdQU0JTTG1admNtMWhkQ2hjSWkxN01IMXdlQ0F3SURBZ0xYc3dmWEI0WENJc0lISnZkVzVrS0N0emFYcGxJSHg4SURFdU5Ta3BPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2N5NW1hV3gwWlhJZ1BTQm1PMXh1SUNBZ0lDQWdJQ0FnSUNBZ2N5NXRZWEpuYVc0Z1BTQXdPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pHVnNaWFJsSUhSb2FYTXVZWFIwY25NdVlteDFjanRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6dGNiaUFnSUNCOU8xeHVYRzRnSUNBZ1VpNWZaVzVuYVc1bExuQmhkR2dnUFNCbWRXNWpkR2x2YmlBb2NHRjBhRk4wY21sdVp5d2dkbTFzS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJsYkNBOUlHTnlaV0YwWlU1dlpHVW9YQ0p6YUdGd1pWd2lLVHRjYmlBZ0lDQWdJQ0FnWld3dWMzUjViR1V1WTNOelZHVjRkQ0E5SUdOemMwUnZkRHRjYmlBZ0lDQWdJQ0FnWld3dVkyOXZjbVJ6YVhwbElEMGdlbTl2YlNBcklGTWdLeUI2YjI5dE8xeHVJQ0FnSUNBZ0lDQmxiQzVqYjI5eVpHOXlhV2RwYmlBOUlIWnRiQzVqYjI5eVpHOXlhV2RwYmp0Y2JpQWdJQ0FnSUNBZ2RtRnlJSEFnUFNCdVpYY2dSV3hsYldWdWRDaGxiQ3dnZG0xc0tTeGNiaUFnSUNBZ0lDQWdJQ0FnSUdGMGRISWdQU0I3Wm1sc2JEb2dYQ0p1YjI1bFhDSXNJSE4wY205clpUb2dYQ0lqTURBd1hDSjlPMXh1SUNBZ0lDQWdJQ0J3WVhSb1UzUnlhVzVuSUNZbUlDaGhkSFJ5TG5CaGRHZ2dQU0J3WVhSb1UzUnlhVzVuS1R0Y2JpQWdJQ0FnSUNBZ2NDNTBlWEJsSUQwZ1hDSndZWFJvWENJN1hHNGdJQ0FnSUNBZ0lIQXVjR0YwYUNBOUlGdGRPMXh1SUNBZ0lDQWdJQ0J3TGxCaGRHZ2dQU0JGTzF4dUlDQWdJQ0FnSUNCelpYUkdhV3hzUVc1a1UzUnliMnRsS0hBc0lHRjBkSElwTzF4dUlDQWdJQ0FnSUNCMmJXd3VZMkZ1ZG1GeklDWW1JSFp0YkM1allXNTJZWE11WVhCd1pXNWtRMmhwYkdRb1pXd3BPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2MydGxkeUE5SUdOeVpXRjBaVTV2WkdVb1hDSnphMlYzWENJcE8xeHVJQ0FnSUNBZ0lDQnphMlYzTG05dUlEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ1pXd3VZWEJ3Wlc1a1EyaHBiR1FvYzJ0bGR5azdYRzRnSUNBZ0lDQWdJSEF1YzJ0bGR5QTlJSE5yWlhjN1hHNGdJQ0FnSUNBZ0lIQXVkSEpoYm5ObWIzSnRLRVVwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnY0R0Y2JpQWdJQ0I5TzF4dUlDQWdJRkl1WDJWdVoybHVaUzV5WldOMElEMGdablZ1WTNScGIyNGdLSFp0YkN3Z2VDd2dlU3dnZHl3Z2FDd2djaWtnZTF4dUlDQWdJQ0FnSUNCMllYSWdjR0YwYUNBOUlGSXVYM0psWTNSUVlYUm9LSGdzSUhrc0lIY3NJR2dzSUhJcExGeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WeklEMGdkbTFzTG5CaGRHZ29jR0YwYUNrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JoSUQwZ2NtVnpMbUYwZEhKek8xeHVJQ0FnSUNBZ0lDQnlaWE11V0NBOUlHRXVlQ0E5SUhnN1hHNGdJQ0FnSUNBZ0lISmxjeTVaSUQwZ1lTNTVJRDBnZVR0Y2JpQWdJQ0FnSUNBZ2NtVnpMbGNnUFNCaExuZHBaSFJvSUQwZ2R6dGNiaUFnSUNBZ0lDQWdjbVZ6TGtnZ1BTQmhMbWhsYVdkb2RDQTlJR2c3WEc0Z0lDQWdJQ0FnSUdFdWNpQTlJSEk3WEc0Z0lDQWdJQ0FnSUdFdWNHRjBhQ0E5SUhCaGRHZzdYRzRnSUNBZ0lDQWdJSEpsY3k1MGVYQmxJRDBnWENKeVpXTjBYQ0k3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ5WlhNN1hHNGdJQ0FnZlR0Y2JpQWdJQ0JTTGw5bGJtZHBibVV1Wld4c2FYQnpaU0E5SUdaMWJtTjBhVzl1SUNoMmJXd3NJSGdzSUhrc0lISjRMQ0J5ZVNrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnY21WeklEMGdkbTFzTG5CaGRHZ29LU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHRWdQU0J5WlhNdVlYUjBjbk03WEc0Z0lDQWdJQ0FnSUhKbGN5NVlJRDBnZUNBdElISjRPMXh1SUNBZ0lDQWdJQ0J5WlhNdVdTQTlJSGtnTFNCeWVUdGNiaUFnSUNBZ0lDQWdjbVZ6TGxjZ1BTQnllQ0FxSURJN1hHNGdJQ0FnSUNBZ0lISmxjeTVJSUQwZ2Nua2dLaUF5TzF4dUlDQWdJQ0FnSUNCeVpYTXVkSGx3WlNBOUlGd2laV3hzYVhCelpWd2lPMXh1SUNBZ0lDQWdJQ0J6WlhSR2FXeHNRVzVrVTNSeWIydGxLSEpsY3l3Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTNnNklIZ3NYRzRnSUNBZ0lDQWdJQ0FnSUNCamVUb2dlU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lISjRPaUJ5ZUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSEo1T2lCeWVWeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSEpsY3p0Y2JpQWdJQ0I5TzF4dUlDQWdJRkl1WDJWdVoybHVaUzVqYVhKamJHVWdQU0JtZFc1amRHbHZiaUFvZG0xc0xDQjRMQ0I1TENCeUtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCeVpYTWdQU0IyYld3dWNHRjBhQ2dwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdZU0E5SUhKbGN5NWhkSFJ5Y3p0Y2JpQWdJQ0FnSUNBZ2NtVnpMbGdnUFNCNElDMGdjanRjYmlBZ0lDQWdJQ0FnY21Wekxsa2dQU0I1SUMwZ2NqdGNiaUFnSUNBZ0lDQWdjbVZ6TGxjZ1BTQnlaWE11U0NBOUlISWdLaUF5TzF4dUlDQWdJQ0FnSUNCeVpYTXVkSGx3WlNBOUlGd2lZMmx5WTJ4bFhDSTdYRzRnSUNBZ0lDQWdJSE5sZEVacGJHeEJibVJUZEhKdmEyVW9jbVZ6TENCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqZURvZ2VDeGNiaUFnSUNBZ0lDQWdJQ0FnSUdONU9pQjVMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2Nqb2djbHh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhKbGN6dGNiaUFnSUNCOU8xeHVJQ0FnSUZJdVgyVnVaMmx1WlM1cGJXRm5aU0E5SUdaMWJtTjBhVzl1SUNoMmJXd3NJSE55WXl3Z2VDd2dlU3dnZHl3Z2FDa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2NHRjBhQ0E5SUZJdVgzSmxZM1JRWVhSb0tIZ3NJSGtzSUhjc0lHZ3BMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnpJRDBnZG0xc0xuQmhkR2dvY0dGMGFDa3VZWFIwY2loN2MzUnliMnRsT2lCY0ltNXZibVZjSW4wcExGeHVJQ0FnSUNBZ0lDQWdJQ0FnWVNBOUlISmxjeTVoZEhSeWN5eGNiaUFnSUNBZ0lDQWdJQ0FnSUc1dlpHVWdQU0J5WlhNdWJtOWtaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnBiR3dnUFNCdWIyUmxMbWRsZEVWc1pXMWxiblJ6UW5sVVlXZE9ZVzFsS0dacGJHeFRkSEpwYm1jcFd6QmRPMXh1SUNBZ0lDQWdJQ0JoTG5OeVl5QTlJSE55WXp0Y2JpQWdJQ0FnSUNBZ2NtVnpMbGdnUFNCaExuZ2dQU0I0TzF4dUlDQWdJQ0FnSUNCeVpYTXVXU0E5SUdFdWVTQTlJSGs3WEc0Z0lDQWdJQ0FnSUhKbGN5NVhJRDBnWVM1M2FXUjBhQ0E5SUhjN1hHNGdJQ0FnSUNBZ0lISmxjeTVJSUQwZ1lTNW9aV2xuYUhRZ1BTQm9PMXh1SUNBZ0lDQWdJQ0JoTG5CaGRHZ2dQU0J3WVhSb08xeHVJQ0FnSUNBZ0lDQnlaWE11ZEhsd1pTQTlJRndpYVcxaFoyVmNJanRjYmlBZ0lDQWdJQ0FnWm1sc2JDNXdZWEpsYm5ST2IyUmxJRDA5SUc1dlpHVWdKaVlnYm05a1pTNXlaVzF2ZG1WRGFHbHNaQ2htYVd4c0tUdGNiaUFnSUNBZ0lDQWdabWxzYkM1eWIzUmhkR1VnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0JtYVd4c0xuTnlZeUE5SUhOeVl6dGNiaUFnSUNBZ0lDQWdabWxzYkM1MGVYQmxJRDBnWENKMGFXeGxYQ0k3WEc0Z0lDQWdJQ0FnSUhKbGN5NWZMbVpwYkd4d2IzTWdQU0JiZUN3Z2VWMDdYRzRnSUNBZ0lDQWdJSEpsY3k1ZkxtWnBiR3h6YVhwbElEMGdXM2NzSUdoZE8xeHVJQ0FnSUNBZ0lDQnViMlJsTG1Gd2NHVnVaRU5vYVd4a0tHWnBiR3dwTzF4dUlDQWdJQ0FnSUNCelpYUkRiMjl5WkhNb2NtVnpMQ0F4TENBeExDQXdMQ0F3TENBd0tUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlISmxjenRjYmlBZ0lDQjlPMXh1SUNBZ0lGSXVYMlZ1WjJsdVpTNTBaWGgwSUQwZ1puVnVZM1JwYjI0Z0tIWnRiQ3dnZUN3Z2VTd2dkR1Y0ZENrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnWld3Z1BTQmpjbVZoZEdWT2IyUmxLRndpYzJoaGNHVmNJaWtzWEc0Z0lDQWdJQ0FnSUNBZ0lDQndZWFJvSUQwZ1kzSmxZWFJsVG05a1pTaGNJbkJoZEdoY0lpa3NYRzRnSUNBZ0lDQWdJQ0FnSUNCdklEMGdZM0psWVhSbFRtOWtaU2hjSW5SbGVIUndZWFJvWENJcE8xeHVJQ0FnSUNBZ0lDQjRJRDBnZUNCOGZDQXdPMXh1SUNBZ0lDQWdJQ0I1SUQwZ2VTQjhmQ0F3TzF4dUlDQWdJQ0FnSUNCMFpYaDBJRDBnZEdWNGRDQjhmQ0JjSWx3aU8xeHVJQ0FnSUNBZ0lDQndZWFJvTG5ZZ1BTQlNMbVp2Y20xaGRDaGNJbTE3TUgwc2V6RjliSHN5ZlN4N01YMWNJaXdnY205MWJtUW9lQ0FxSUhwdmIyMHBMQ0J5YjNWdVpDaDVJQ29nZW05dmJTa3NJSEp2ZFc1a0tIZ2dLaUI2YjI5dEtTQXJJREVwTzF4dUlDQWdJQ0FnSUNCd1lYUm9MblJsZUhSd1lYUm9iMnNnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0J2TG5OMGNtbHVaeUE5SUZOMGNpaDBaWGgwS1R0Y2JpQWdJQ0FnSUNBZ2J5NXZiaUE5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJR1ZzTG5OMGVXeGxMbU56YzFSbGVIUWdQU0JqYzNORWIzUTdYRzRnSUNBZ0lDQWdJR1ZzTG1OdmIzSmtjMmw2WlNBOUlIcHZiMjBnS3lCVElDc2dlbTl2YlR0Y2JpQWdJQ0FnSUNBZ1pXd3VZMjl2Y21SdmNtbG5hVzRnUFNCY0lqQWdNRndpTzF4dUlDQWdJQ0FnSUNCMllYSWdjQ0E5SUc1bGR5QkZiR1Z0Wlc1MEtHVnNMQ0IyYld3cExGeHVJQ0FnSUNBZ0lDQWdJQ0FnWVhSMGNpQTlJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYVd4c09pQmNJaU13TURCY0lpeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpkSEp2YTJVNklGd2libTl1WlZ3aUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZiblE2SUZJdVgyRjJZV2xzWVdKc1pVRjBkSEp6TG1admJuUXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR1Y0ZERvZ2RHVjRkRnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lDQWdjQzV6YUdGd1pTQTlJR1ZzTzF4dUlDQWdJQ0FnSUNCd0xuQmhkR2dnUFNCd1lYUm9PMXh1SUNBZ0lDQWdJQ0J3TG5SbGVIUndZWFJvSUQwZ2J6dGNiaUFnSUNBZ0lDQWdjQzUwZVhCbElEMGdYQ0owWlhoMFhDSTdYRzRnSUNBZ0lDQWdJSEF1WVhSMGNuTXVkR1Y0ZENBOUlGTjBjaWgwWlhoMEtUdGNiaUFnSUNBZ0lDQWdjQzVoZEhSeWN5NTRJRDBnZUR0Y2JpQWdJQ0FnSUNBZ2NDNWhkSFJ5Y3k1NUlEMGdlVHRjYmlBZ0lDQWdJQ0FnY0M1aGRIUnljeTUzSUQwZ01UdGNiaUFnSUNBZ0lDQWdjQzVoZEhSeWN5NW9JRDBnTVR0Y2JpQWdJQ0FnSUNBZ2MyVjBSbWxzYkVGdVpGTjBjbTlyWlNod0xDQmhkSFJ5S1R0Y2JpQWdJQ0FnSUNBZ1pXd3VZWEJ3Wlc1a1EyaHBiR1FvYnlrN1hHNGdJQ0FnSUNBZ0lHVnNMbUZ3Y0dWdVpFTm9hV3hrS0hCaGRHZ3BPMXh1SUNBZ0lDQWdJQ0IyYld3dVkyRnVkbUZ6TG1Gd2NHVnVaRU5vYVd4a0tHVnNLVHRjYmlBZ0lDQWdJQ0FnZG1GeUlITnJaWGNnUFNCamNtVmhkR1ZPYjJSbEtGd2ljMnRsZDF3aUtUdGNiaUFnSUNBZ0lDQWdjMnRsZHk1dmJpQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lHVnNMbUZ3Y0dWdVpFTm9hV3hrS0hOclpYY3BPMXh1SUNBZ0lDQWdJQ0J3TG5OclpYY2dQU0J6YTJWM08xeHVJQ0FnSUNBZ0lDQndMblJ5WVc1elptOXliU2hGS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhBN1hHNGdJQ0FnZlR0Y2JpQWdJQ0JTTGw5bGJtZHBibVV1YzJWMFUybDZaU0E5SUdaMWJtTjBhVzl1SUNoM2FXUjBhQ3dnYUdWcFoyaDBLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQmpjeUE5SUhSb2FYTXVZMkZ1ZG1GekxuTjBlV3hsTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbmRwWkhSb0lEMGdkMmxrZEdnN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YUdWcFoyaDBJRDBnYUdWcFoyaDBPMXh1SUNBZ0lDQWdJQ0IzYVdSMGFDQTlQU0FyZDJsa2RHZ2dKaVlnS0hkcFpIUm9JQ3M5SUZ3aWNIaGNJaWs3WEc0Z0lDQWdJQ0FnSUdobGFXZG9kQ0E5UFNBcmFHVnBaMmgwSUNZbUlDaG9aV2xuYUhRZ0t6MGdYQ0p3ZUZ3aUtUdGNiaUFnSUNBZ0lDQWdZM011ZDJsa2RHZ2dQU0IzYVdSMGFEdGNiaUFnSUNBZ0lDQWdZM011YUdWcFoyaDBJRDBnYUdWcFoyaDBPMXh1SUNBZ0lDQWdJQ0JqY3k1amJHbHdJRDBnWENKeVpXTjBLREFnWENJZ0t5QjNhV1IwYUNBcklGd2lJRndpSUNzZ2FHVnBaMmgwSUNzZ1hDSWdNQ2xjSWp0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgzWnBaWGRDYjNncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUZJdVgyVnVaMmx1WlM1elpYUldhV1YzUW05NExtRndjR3g1S0hSb2FYTXNJSFJvYVhNdVgzWnBaWGRDYjNncE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TzF4dUlDQWdJSDA3WEc0Z0lDQWdVaTVmWlc1bmFXNWxMbk5sZEZacFpYZENiM2dnUFNCbWRXNWpkR2x2YmlBb2VDd2dlU3dnZHl3Z2FDd2dabWwwS1NCN1hHNGdJQ0FnSUNBZ0lGSXVaWFpsS0Z3aWNtRndhR0ZsYkM1elpYUldhV1YzUW05NFhDSXNJSFJvYVhNc0lIUm9hWE11WDNacFpYZENiM2dzSUZ0NExDQjVMQ0IzTENCb0xDQm1hWFJkS1R0Y2JpQWdJQ0FnSUNBZ2RtRnlJSEJoY0dWeVUybDZaU0E5SUhSb2FYTXVaMlYwVTJsNlpTZ3BMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2QybGtkR2dnUFNCd1lYQmxjbE5wZW1VdWQybGtkR2dzWEc0Z0lDQWdJQ0FnSUNBZ0lDQm9aV2xuYUhRZ1BTQndZWEJsY2xOcGVtVXVhR1ZwWjJoMExGeHVJQ0FnSUNBZ0lDQWdJQ0FnU0N3Z1Z6dGNiaUFnSUNBZ0lDQWdhV1lnS0dacGRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1NDQTlJR2hsYVdkb2RDQXZJR2c3WEc0Z0lDQWdJQ0FnSUNBZ0lDQlhJRDBnZDJsa2RHZ2dMeUIzTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hjZ0tpQklJRHdnZDJsa2RHZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I0SUMwOUlDaDNhV1IwYUNBdElIY2dLaUJJS1NBdklESWdMeUJJTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2dnS2lCWElEd2dhR1ZwWjJoMEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlU0F0UFNBb2FHVnBaMmgwSUMwZ2FDQXFJRmNwSUM4Z01pQXZJRmM3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZEdocGN5NWZkbWxsZDBKdmVDQTlJRnQ0TENCNUxDQjNMQ0JvTENBaElXWnBkRjA3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM1pwWlhkQ2IzaFRhR2xtZENBOUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdSNE9pQXRlQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHUjVPaUF0ZVN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSE5qWVd4bE9pQndZWEJsY2xOcGVtVmNiaUFnSUNBZ0lDQWdmVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NW1iM0pGWVdOb0tHWjFibU4wYVc5dUlDaGxiQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdaV3d1ZEhKaGJuTm1iM0p0S0Z3aUxpNHVYQ0lwTzF4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03WEc0Z0lDQWdmVHRjYmlBZ0lDQjJZWElnWTNKbFlYUmxUbTlrWlR0Y2JpQWdJQ0JTTGw5bGJtZHBibVV1YVc1cGRGZHBiaUE5SUdaMWJtTjBhVzl1SUNoM2FXNHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJrYjJNZ1BTQjNhVzR1Wkc5amRXMWxiblE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWkc5akxuTjBlV3hsVTJobFpYUnpMbXhsYm1kMGFDQThJRE14S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHOWpMbU55WldGMFpWTjBlV3hsVTJobFpYUW9LUzVoWkdSU2RXeGxLRndpTG5KMmJXeGNJaXdnWENKaVpXaGhkbWx2Y2pwMWNtd29JMlJsWm1GMWJIUWpWazFNS1Z3aUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2JtOGdiVzl5WlNCeWIyOXRMQ0JoWkdRZ2RHOGdkR2hsSUdWNGFYTjBhVzVuSUc5dVpWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJR2gwZEhBNkx5OXRjMlJ1TG0xcFkzSnZjMjltZEM1amIyMHZaVzR0ZFhNdmJHbGljbUZ5ZVM5dGN6VXpNVEU1TkNVeU9GWlRMamcxSlRJNUxtRnpjSGhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrYjJNdWMzUjViR1ZUYUdWbGRITmJNRjB1WVdSa1VuVnNaU2hjSWk1eWRtMXNYQ0lzSUZ3aVltVm9ZWFpwYjNJNmRYSnNLQ05rWldaaGRXeDBJMVpOVENsY0lpazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDRmtiMk11Ym1GdFpYTndZV05sY3k1eWRtMXNJQ1ltSUdSdll5NXVZVzFsYzNCaFkyVnpMbUZrWkNoY0luSjJiV3hjSWl3Z1hDSjFjbTQ2YzJOb1pXMWhjeTF0YVdOeWIzTnZablF0WTI5dE9uWnRiRndpS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamNtVmhkR1ZPYjJSbElEMGdablZ1WTNScGIyNGdLSFJoWjA1aGJXVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdSdll5NWpjbVZoZEdWRmJHVnRaVzUwS0NjOGNuWnRiRG9uSUNzZ2RHRm5UbUZ0WlNBcklDY2dZMnhoYzNNOVhDSnlkbTFzWENJK0p5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMGdZMkYwWTJnZ0tHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqY21WaGRHVk9iMlJsSUQwZ1puVnVZM1JwYjI0Z0tIUmhaMDVoYldVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1J2WXk1amNtVmhkR1ZGYkdWdFpXNTBLQ2M4SnlBcklIUmhaMDVoYldVZ0t5QW5JSGh0Ykc1elBWd2lkWEp1T25OamFHVnRZWE10YldsamNtOXpiMlowTG1OdmJUcDJiV3hjSWlCamJHRnpjejFjSW5KMmJXeGNJajRuS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUZJdVgyVnVaMmx1WlM1cGJtbDBWMmx1S0ZJdVgyY3VkMmx1S1R0Y2JpQWdJQ0JTTGw5bGJtZHBibVV1WTNKbFlYUmxJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnWTI5dUlEMGdVaTVmWjJWMFEyOXVkR0ZwYm1WeUxtRndjR3g1S0RBc0lHRnlaM1Z0Wlc1MGN5a3NYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNTBZV2x1WlhJZ1BTQmpiMjR1WTI5dWRHRnBibVZ5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdhR1ZwWjJoMElEMGdZMjl1TG1obGFXZG9kQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lITXNYRzRnSUNBZ0lDQWdJQ0FnSUNCM2FXUjBhQ0E5SUdOdmJpNTNhV1IwYUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSGdnUFNCamIyNHVlQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lIa2dQU0JqYjI0dWVUdGNiaUFnSUNBZ0lDQWdhV1lnS0NGamIyNTBZV2x1WlhJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhjSWxaTlRDQmpiMjUwWVdsdVpYSWdibTkwSUdadmRXNWtMbHdpS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjJZWElnY21WeklEMGdibVYzSUZJdVgxQmhjR1Z5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdZeUE5SUhKbGN5NWpZVzUyWVhNZ1BTQlNMbDluTG1Sdll5NWpjbVZoZEdWRmJHVnRaVzUwS0Z3aVpHbDJYQ0lwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdZM01nUFNCakxuTjBlV3hsTzF4dUlDQWdJQ0FnSUNCNElEMGdlQ0I4ZkNBd08xeHVJQ0FnSUNBZ0lDQjVJRDBnZVNCOGZDQXdPMXh1SUNBZ0lDQWdJQ0IzYVdSMGFDQTlJSGRwWkhSb0lIeDhJRFV4TWp0Y2JpQWdJQ0FnSUNBZ2FHVnBaMmgwSUQwZ2FHVnBaMmgwSUh4OElETTBNanRjYmlBZ0lDQWdJQ0FnY21WekxuZHBaSFJvSUQwZ2QybGtkR2c3WEc0Z0lDQWdJQ0FnSUhKbGN5NW9aV2xuYUhRZ1BTQm9aV2xuYUhRN1hHNGdJQ0FnSUNBZ0lIZHBaSFJvSUQwOUlDdDNhV1IwYUNBbUppQW9kMmxrZEdnZ0t6MGdYQ0p3ZUZ3aUtUdGNiaUFnSUNBZ0lDQWdhR1ZwWjJoMElEMDlJQ3RvWldsbmFIUWdKaVlnS0dobGFXZG9kQ0FyUFNCY0luQjRYQ0lwTzF4dUlDQWdJQ0FnSUNCeVpYTXVZMjl2Y21SemFYcGxJRDBnZW05dmJTQXFJREZsTXlBcklGTWdLeUI2YjI5dElDb2dNV1V6TzF4dUlDQWdJQ0FnSUNCeVpYTXVZMjl2Y21SdmNtbG5hVzRnUFNCY0lqQWdNRndpTzF4dUlDQWdJQ0FnSUNCeVpYTXVjM0JoYmlBOUlGSXVYMmN1Wkc5akxtTnlaV0YwWlVWc1pXMWxiblFvWENKemNHRnVYQ0lwTzF4dUlDQWdJQ0FnSUNCeVpYTXVjM0JoYmk1emRIbHNaUzVqYzNOVVpYaDBJRDBnWENKd2IzTnBkR2x2YmpwaFluTnZiSFYwWlR0c1pXWjBPaTA1T1RrNVpXMDdkRzl3T2kwNU9UazVaVzA3Y0dGa1pHbHVaem93TzIxaGNtZHBiam93TzJ4cGJtVXRhR1ZwWjJoME9qRTdYQ0k3WEc0Z0lDQWdJQ0FnSUdNdVlYQndaVzVrUTJocGJHUW9jbVZ6TG5Od1lXNHBPMXh1SUNBZ0lDQWdJQ0JqY3k1amMzTlVaWGgwSUQwZ1VpNW1iM0p0WVhRb1hDSjBiM0E2TUR0c1pXWjBPakE3ZDJsa2RHZzZlekI5TzJobGFXZG9kRHA3TVgwN1pHbHpjR3hoZVRwcGJteHBibVV0WW14dlkyczdjRzl6YVhScGIyNDZjbVZzWVhScGRtVTdZMnhwY0RweVpXTjBLREFnZXpCOUlIc3hmU0F3S1R0dmRtVnlabXh2ZHpwb2FXUmtaVzVjSWl3Z2QybGtkR2dzSUdobGFXZG9kQ2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaGpiMjUwWVdsdVpYSWdQVDBnTVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnVWk1Zlp5NWtiMk11WW05a2VTNWhjSEJsYm1SRGFHbHNaQ2hqS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR056TG14bFpuUWdQU0I0SUNzZ1hDSndlRndpTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZM011ZEc5d0lEMGdlU0FySUZ3aWNIaGNJanRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnpMbkJ2YzJsMGFXOXVJRDBnWENKaFluTnZiSFYwWlZ3aU8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHTnZiblJoYVc1bGNpNW1hWEp6ZEVOb2FXeGtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWRHRnBibVZ5TG1sdWMyVnlkRUpsWm05eVpTaGpMQ0JqYjI1MFlXbHVaWEl1Wm1seWMzUkRhR2xzWkNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5SaGFXNWxjaTVoY0hCbGJtUkRhR2xzWkNoaktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnlaWE11Y21WdVpHVnlabWw0SUQwZ1puVnVZM1JwYjI0Z0tDa2dlMzA3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ5WlhNN1hHNGdJQ0FnZlR0Y2JpQWdJQ0JTTG5CeWIzUnZkSGx3WlM1amJHVmhjaUE5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdVaTVsZG1Vb1hDSnlZWEJvWVdWc0xtTnNaV0Z5WENJc0lIUm9hWE1wTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbU5oYm5aaGN5NXBibTVsY2toVVRVd2dQU0JGTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbk53WVc0Z1BTQlNMbDluTG1Sdll5NWpjbVZoZEdWRmJHVnRaVzUwS0Z3aWMzQmhibHdpS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6Y0dGdUxuTjBlV3hsTG1OemMxUmxlSFFnUFNCY0luQnZjMmwwYVc5dU9tRmljMjlzZFhSbE8yeGxablE2TFRrNU9UbGxiVHQwYjNBNkxUazVPVGxsYlR0d1lXUmthVzVuT2pBN2JXRnlaMmx1T2pBN2JHbHVaUzFvWldsbmFIUTZNVHRrYVhOd2JHRjVPbWx1YkdsdVpUdGNJanRjYmlBZ0lDQWdJQ0FnZEdocGN5NWpZVzUyWVhNdVlYQndaVzVrUTJocGJHUW9kR2hwY3k1emNHRnVLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWliM1IwYjIwZ1BTQjBhR2x6TG5SdmNDQTlJRzUxYkd3N1hHNGdJQ0FnZlR0Y2JpQWdJQ0JTTG5CeWIzUnZkSGx3WlM1eVpXMXZkbVVnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJRkl1WlhabEtGd2ljbUZ3YUdGbGJDNXlaVzF2ZG1WY0lpd2dkR2hwY3lrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WTJGdWRtRnpMbkJoY21WdWRFNXZaR1V1Y21WdGIzWmxRMmhwYkdRb2RHaHBjeTVqWVc1MllYTXBPMXh1SUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJwSUdsdUlIUm9hWE1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhOYmFWMGdQU0IwZVhCbGIyWWdkR2hwYzF0cFhTQTlQU0JjSW1aMWJtTjBhVzl1WENJZ1B5QlNMbDl5WlcxdmRtVmtSbUZqZEc5eWVTaHBLU0E2SUc1MWJHdzdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNGdJQ0FnZlR0Y2JseHVJQ0FnSUhaaGNpQnpaWFJ3Y205MGJ5QTlJRkl1YzNRN1hHNGdJQ0FnWm05eUlDaDJZWElnYldWMGFHOWtJR2x1SUdWc2NISnZkRzhwSUdsbUlDaGxiSEJ5YjNSdlcyaGhjMTBvYldWMGFHOWtLU0FtSmlBaGMyVjBjSEp2ZEc5YmFHRnpYU2h0WlhSb2IyUXBLU0I3WEc0Z0lDQWdJQ0FnSUhObGRIQnliM1J2VzIxbGRHaHZaRjBnUFNBb1puVnVZM1JwYjI0Z0tHMWxkR2h2Wkc1aGJXVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdGeVp5QTlJR0Z5WjNWdFpXNTBjenRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1bWIzSkZZV05vS0daMWJtTjBhVzl1SUNobGJDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJGdHRaWFJvYjJSdVlXMWxYUzVoY0hCc2VTaGxiQ3dnWVhKbktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ0lDQWdJSDBwS0cxbGRHaHZaQ2s3WEc0Z0lDQWdmVnh1ZlNrN1hHNGlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVRkJPeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlmUT09XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLy4vZGV2L3JhcGhhZWwudm1sLmpzXFxuXCIpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9ldmUtcmFwaGFlbC9ldmUuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL2V2ZS1yYXBoYWVsL2V2ZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcInZhciBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXzsvLyBDb3B5cmlnaHQgKGMpIDIwMTMgQWRvYmUgU3lzdGVtcyBJbmNvcnBvcmF0ZWQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXFxuLy8gXFxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFxcXCJMaWNlbnNlXFxcIik7XFxuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxcbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxcbi8vIFxcbi8vIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxcbi8vIFxcbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcXFwiQVMgSVNcXFwiIEJBU0lTLFxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxcbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cXG4vLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJAgXFxcXFxcXFxcXG4vLyDilIIgRXZlIDAuNS4wIC0gSmF2YVNjcmlwdCBFdmVudHMgTGlicmFyeSAgICAgICAgICAgICAgICAgICAgICDilIIgXFxcXFxcXFxcXG4vLyDilJzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilKQgXFxcXFxcXFxcXG4vLyDilIIgQXV0aG9yIERtaXRyeSBCYXJhbm92c2tpeSAoaHR0cDovL2RtaXRyeS5iYXJhbm92c2tpeS5jb20vKSDilIIgXFxcXFxcXFxcXG4vLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJggXFxcXFxcXFxcXG5cXG4oZnVuY3Rpb24gKGdsb2IpIHtcXG4gICAgdmFyIHZlcnNpb24gPSBcXFwiMC41LjBcXFwiLFxcbiAgICAgICAgaGFzID0gXFxcImhhc093blByb3BlcnR5XFxcIixcXG4gICAgICAgIHNlcGFyYXRvciA9IC9bXFxcXC5cXFxcL10vLFxcbiAgICAgICAgY29tYXNlcGFyYXRvciA9IC9cXFxccyosXFxcXHMqLyxcXG4gICAgICAgIHdpbGRjYXJkID0gXFxcIipcXFwiLFxcbiAgICAgICAgZnVuID0gZnVuY3Rpb24gKCkge30sXFxuICAgICAgICBudW1zb3J0ID0gZnVuY3Rpb24gKGEsIGIpIHtcXG4gICAgICAgICAgICByZXR1cm4gYSAtIGI7XFxuICAgICAgICB9LFxcbiAgICAgICAgY3VycmVudF9ldmVudCxcXG4gICAgICAgIHN0b3AsXFxuICAgICAgICBldmVudHMgPSB7bjoge319LFxcbiAgICAgICAgZmlyc3REZWZpbmVkID0gZnVuY3Rpb24gKCkge1xcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IHRoaXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRoaXNbaV0gIT0gXFxcInVuZGVmaW5lZFxcXCIpIHtcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzW2ldO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfSxcXG4gICAgICAgIGxhc3REZWZpbmVkID0gZnVuY3Rpb24gKCkge1xcbiAgICAgICAgICAgIHZhciBpID0gdGhpcy5sZW5ndGg7XFxuICAgICAgICAgICAgd2hpbGUgKC0taSkge1xcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRoaXNbaV0gIT0gXFxcInVuZGVmaW5lZFxcXCIpIHtcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzW2ldO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfSxcXG4gICAgICAgIG9ianRvcyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcsXFxuICAgICAgICBTdHIgPSBTdHJpbmcsXFxuICAgICAgICBpc0FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXIpIHtcXG4gICAgICAgICAgICByZXR1cm4gYXIgaW5zdGFuY2VvZiBBcnJheSB8fCBvYmp0b3MuY2FsbChhcikgPT0gXFxcIltvYmplY3QgQXJyYXldXFxcIjtcXG4gICAgICAgIH07XFxuICAgIC8qXFxcXFxcbiAgICAgKiBldmVcXG4gICAgIFsgbWV0aG9kIF1cXG5cXG4gICAgICogRmlyZXMgZXZlbnQgd2l0aCBnaXZlbiBgbmFtZWAsIGdpdmVuIHNjb3BlIGFuZCBvdGhlciBwYXJhbWV0ZXJzLlxcblxcbiAgICAgPiBBcmd1bWVudHNcXG5cXG4gICAgIC0gbmFtZSAoc3RyaW5nKSBuYW1lIG9mIHRoZSAqZXZlbnQqLCBkb3QgKGAuYCkgb3Igc2xhc2ggKGAvYCkgc2VwYXJhdGVkXFxuICAgICAtIHNjb3BlIChvYmplY3QpIGNvbnRleHQgZm9yIHRoZSBldmVudCBoYW5kbGVyc1xcbiAgICAgLSB2YXJhcmdzICguLi4pIHRoZSByZXN0IG9mIGFyZ3VtZW50cyB3aWxsIGJlIHNlbnQgdG8gZXZlbnQgaGFuZGxlcnNcXG5cXG4gICAgID0gKG9iamVjdCkgYXJyYXkgb2YgcmV0dXJuZWQgdmFsdWVzIGZyb20gdGhlIGxpc3RlbmVycy4gQXJyYXkgaGFzIHR3byBtZXRob2RzIGAuZmlyc3REZWZpbmVkKClgIGFuZCBgLmxhc3REZWZpbmVkKClgIHRvIGdldCBmaXJzdCBvciBsYXN0IG5vdCBgdW5kZWZpbmVkYCB2YWx1ZS5cXG4gICAgXFxcXCovXFxuICAgICAgICB2YXIgZXZlID0gZnVuY3Rpb24gKG5hbWUsIHNjb3BlKSB7XFxuICAgICAgICAgICAgdmFyIGUgPSBldmVudHMsXFxuICAgICAgICAgICAgICAgIG9sZHN0b3AgPSBzdG9wLFxcbiAgICAgICAgICAgICAgICBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKSxcXG4gICAgICAgICAgICAgICAgbGlzdGVuZXJzID0gZXZlLmxpc3RlbmVycyhuYW1lKSxcXG4gICAgICAgICAgICAgICAgeiA9IDAsXFxuICAgICAgICAgICAgICAgIGYgPSBmYWxzZSxcXG4gICAgICAgICAgICAgICAgbCxcXG4gICAgICAgICAgICAgICAgaW5kZXhlZCA9IFtdLFxcbiAgICAgICAgICAgICAgICBxdWV1ZSA9IHt9LFxcbiAgICAgICAgICAgICAgICBvdXQgPSBbXSxcXG4gICAgICAgICAgICAgICAgY2UgPSBjdXJyZW50X2V2ZW50LFxcbiAgICAgICAgICAgICAgICBlcnJvcnMgPSBbXTtcXG4gICAgICAgICAgICBvdXQuZmlyc3REZWZpbmVkID0gZmlyc3REZWZpbmVkO1xcbiAgICAgICAgICAgIG91dC5sYXN0RGVmaW5lZCA9IGxhc3REZWZpbmVkO1xcbiAgICAgICAgICAgIGN1cnJlbnRfZXZlbnQgPSBuYW1lO1xcbiAgICAgICAgICAgIHN0b3AgPSAwO1xcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IGxpc3RlbmVycy5sZW5ndGg7IGkgPCBpaTsgaSsrKSBpZiAoXFxcInpJbmRleFxcXCIgaW4gbGlzdGVuZXJzW2ldKSB7XFxuICAgICAgICAgICAgICAgIGluZGV4ZWQucHVzaChsaXN0ZW5lcnNbaV0uekluZGV4KTtcXG4gICAgICAgICAgICAgICAgaWYgKGxpc3RlbmVyc1tpXS56SW5kZXggPCAwKSB7XFxuICAgICAgICAgICAgICAgICAgICBxdWV1ZVtsaXN0ZW5lcnNbaV0uekluZGV4XSA9IGxpc3RlbmVyc1tpXTtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBpbmRleGVkLnNvcnQobnVtc29ydCk7XFxuICAgICAgICAgICAgd2hpbGUgKGluZGV4ZWRbel0gPCAwKSB7XFxuICAgICAgICAgICAgICAgIGwgPSBxdWV1ZVtpbmRleGVkW3orK11dO1xcbiAgICAgICAgICAgICAgICBvdXQucHVzaChsLmFwcGx5KHNjb3BlLCBhcmdzKSk7XFxuICAgICAgICAgICAgICAgIGlmIChzdG9wKSB7XFxuICAgICAgICAgICAgICAgICAgICBzdG9wID0gb2xkc3RvcDtcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvdXQ7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGlpOyBpKyspIHtcXG4gICAgICAgICAgICAgICAgbCA9IGxpc3RlbmVyc1tpXTtcXG4gICAgICAgICAgICAgICAgaWYgKFxcXCJ6SW5kZXhcXFwiIGluIGwpIHtcXG4gICAgICAgICAgICAgICAgICAgIGlmIChsLnpJbmRleCA9PSBpbmRleGVkW3pdKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgb3V0LnB1c2gobC5hcHBseShzY29wZSwgYXJncykpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdG9wKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgICAgICBkbyB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHorKztcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbCA9IHF1ZXVlW2luZGV4ZWRbel1dO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsICYmIG91dC5wdXNoKGwuYXBwbHkoc2NvcGUsIGFyZ3MpKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0b3ApIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgfSB3aGlsZSAobClcXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgcXVldWVbbC56SW5kZXhdID0gbDtcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICAgIG91dC5wdXNoKGwuYXBwbHkoc2NvcGUsIGFyZ3MpKTtcXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdG9wKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgc3RvcCA9IG9sZHN0b3A7XFxuICAgICAgICAgICAgY3VycmVudF9ldmVudCA9IGNlO1xcbiAgICAgICAgICAgIHJldHVybiBvdXQ7XFxuICAgICAgICB9O1xcbiAgICAgICAgLy8gVW5kb2N1bWVudGVkLiBEZWJ1ZyBvbmx5LlxcbiAgICAgICAgZXZlLl9ldmVudHMgPSBldmVudHM7XFxuICAgIC8qXFxcXFxcbiAgICAgKiBldmUubGlzdGVuZXJzXFxuICAgICBbIG1ldGhvZCBdXFxuXFxuICAgICAqIEludGVybmFsIG1ldGhvZCB3aGljaCBnaXZlcyB5b3UgYXJyYXkgb2YgYWxsIGV2ZW50IGhhbmRsZXJzIHRoYXQgd2lsbCBiZSB0cmlnZ2VyZWQgYnkgdGhlIGdpdmVuIGBuYW1lYC5cXG5cXG4gICAgID4gQXJndW1lbnRzXFxuXFxuICAgICAtIG5hbWUgKHN0cmluZykgbmFtZSBvZiB0aGUgZXZlbnQsIGRvdCAoYC5gKSBvciBzbGFzaCAoYC9gKSBzZXBhcmF0ZWRcXG5cXG4gICAgID0gKGFycmF5KSBhcnJheSBvZiBldmVudCBoYW5kbGVyc1xcbiAgICBcXFxcKi9cXG4gICAgZXZlLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7XFxuICAgICAgICB2YXIgbmFtZXMgPSBpc0FycmF5KG5hbWUpID8gbmFtZSA6IG5hbWUuc3BsaXQoc2VwYXJhdG9yKSxcXG4gICAgICAgICAgICBlID0gZXZlbnRzLFxcbiAgICAgICAgICAgIGl0ZW0sXFxuICAgICAgICAgICAgaXRlbXMsXFxuICAgICAgICAgICAgayxcXG4gICAgICAgICAgICBpLFxcbiAgICAgICAgICAgIGlpLFxcbiAgICAgICAgICAgIGosXFxuICAgICAgICAgICAgamosXFxuICAgICAgICAgICAgbmVzLFxcbiAgICAgICAgICAgIGVzID0gW2VdLFxcbiAgICAgICAgICAgIG91dCA9IFtdO1xcbiAgICAgICAgZm9yIChpID0gMCwgaWkgPSBuYW1lcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XFxuICAgICAgICAgICAgbmVzID0gW107XFxuICAgICAgICAgICAgZm9yIChqID0gMCwgamogPSBlcy5sZW5ndGg7IGogPCBqajsgaisrKSB7XFxuICAgICAgICAgICAgICAgIGUgPSBlc1tqXS5uO1xcbiAgICAgICAgICAgICAgICBpdGVtcyA9IFtlW25hbWVzW2ldXSwgZVt3aWxkY2FyZF1dO1xcbiAgICAgICAgICAgICAgICBrID0gMjtcXG4gICAgICAgICAgICAgICAgd2hpbGUgKGstLSkge1xcbiAgICAgICAgICAgICAgICAgICAgaXRlbSA9IGl0ZW1zW2tdO1xcbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0pIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXMucHVzaChpdGVtKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICBvdXQgPSBvdXQuY29uY2F0KGl0ZW0uZiB8fCBbXSk7XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgZXMgPSBuZXM7XFxuICAgICAgICB9XFxuICAgICAgICByZXR1cm4gb3V0O1xcbiAgICB9O1xcbiAgICAvKlxcXFxcXG4gICAgICogZXZlLnNlcGFyYXRvclxcbiAgICAgWyBtZXRob2QgXVxcblxcbiAgICAgKiBJZiBmb3Igc29tZSByZWFzb25zIHlvdSBkb27igJl0IGxpa2UgZGVmYXVsdCBzZXBhcmF0b3JzIChgLmAgb3IgYC9gKSB5b3UgY2FuIHNwZWNpZnkgeW91cnNcXG4gICAgICogaGVyZS4gQmUgYXdhcmUgdGhhdCBpZiB5b3UgcGFzcyBhIHN0cmluZyBsb25nZXIgdGhhbiBvbmUgY2hhcmFjdGVyIGl0IHdpbGwgYmUgdHJlYXRlZCBhc1xcbiAgICAgKiBhIGxpc3Qgb2YgY2hhcmFjdGVycy5cXG5cXG4gICAgIC0gc2VwYXJhdG9yIChzdHJpbmcpIG5ldyBzZXBhcmF0b3IuIEVtcHR5IHN0cmluZyByZXNldHMgdG8gZGVmYXVsdDogYC5gIG9yIGAvYC5cXG4gICAgXFxcXCovXFxuICAgIGV2ZS5zZXBhcmF0b3IgPSBmdW5jdGlvbiAoc2VwKSB7XFxuICAgICAgICBpZiAoc2VwKSB7XFxuICAgICAgICAgICAgc2VwID0gU3RyKHNlcCkucmVwbGFjZSgvKD89W1xcXFwuXFxcXF5cXFxcXVxcXFxbXFxcXC1dKS9nLCBcXFwiXFxcXFxcXFxcXFwiKTtcXG4gICAgICAgICAgICBzZXAgPSBcXFwiW1xcXCIgKyBzZXAgKyBcXFwiXVxcXCI7XFxuICAgICAgICAgICAgc2VwYXJhdG9yID0gbmV3IFJlZ0V4cChzZXApO1xcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICBzZXBhcmF0b3IgPSAvW1xcXFwuXFxcXC9dLztcXG4gICAgICAgIH1cXG4gICAgfTtcXG4gICAgLypcXFxcXFxuICAgICAqIGV2ZS5vblxcbiAgICAgWyBtZXRob2QgXVxcbiAgICAgKipcXG4gICAgICogQmluZHMgZ2l2ZW4gZXZlbnQgaGFuZGxlciB3aXRoIGEgZ2l2ZW4gbmFtZS4gWW91IGNhbiB1c2Ugd2lsZGNhcmRzIOKAnGAqYOKAnSBmb3IgdGhlIG5hbWVzOlxcbiAgICAgfCBldmUub24oXFxcIioudW5kZXIuKlxcXCIsIGYpO1xcbiAgICAgfCBldmUoXFxcIm1vdXNlLnVuZGVyLmZsb29yXFxcIik7IC8vIHRyaWdnZXJzIGZcXG4gICAgICogVXNlIEBldmUgdG8gdHJpZ2dlciB0aGUgbGlzdGVuZXIuXFxuICAgICAqKlxcbiAgICAgLSBuYW1lIChzdHJpbmcpIG5hbWUgb2YgdGhlIGV2ZW50LCBkb3QgKGAuYCkgb3Igc2xhc2ggKGAvYCkgc2VwYXJhdGVkLCB3aXRoIG9wdGlvbmFsIHdpbGRjYXJkc1xcbiAgICAgLSBmIChmdW5jdGlvbikgZXZlbnQgaGFuZGxlciBmdW5jdGlvblxcbiAgICAgKipcXG4gICAgIC0gbmFtZSAoYXJyYXkpIGlmIHlvdSBkb27igJl0IHdhbnQgdG8gdXNlIHNlcGFyYXRvcnMsIHlvdSBjYW4gdXNlIGFycmF5IG9mIHN0cmluZ3NcXG4gICAgIC0gZiAoZnVuY3Rpb24pIGV2ZW50IGhhbmRsZXIgZnVuY3Rpb25cXG4gICAgICoqXFxuICAgICA9IChmdW5jdGlvbikgcmV0dXJuZWQgZnVuY3Rpb24gYWNjZXB0cyBhIHNpbmdsZSBudW1lcmljIHBhcmFtZXRlciB0aGF0IHJlcHJlc2VudHMgei1pbmRleCBvZiB0aGUgaGFuZGxlci4gSXQgaXMgYW4gb3B0aW9uYWwgZmVhdHVyZSBhbmQgb25seSB1c2VkIHdoZW4geW91IG5lZWQgdG8gZW5zdXJlIHRoYXQgc29tZSBzdWJzZXQgb2YgaGFuZGxlcnMgd2lsbCBiZSBpbnZva2VkIGluIGEgZ2l2ZW4gb3JkZXIsIGRlc3BpdGUgb2YgdGhlIG9yZGVyIG9mIGFzc2lnbm1lbnQuIFxcbiAgICAgPiBFeGFtcGxlOlxcbiAgICAgfCBldmUub24oXFxcIm1vdXNlXFxcIiwgZWF0SXQpKDIpO1xcbiAgICAgfCBldmUub24oXFxcIm1vdXNlXFxcIiwgc2NyZWFtKTtcXG4gICAgIHwgZXZlLm9uKFxcXCJtb3VzZVxcXCIsIGNhdGNoSXQpKDEpO1xcbiAgICAgKiBUaGlzIHdpbGwgZW5zdXJlIHRoYXQgYGNhdGNoSXRgIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIGJlZm9yZSBgZWF0SXRgLlxcbiAgICAgKlxcbiAgICAgKiBJZiB5b3Ugd2FudCB0byBwdXQgeW91ciBoYW5kbGVyIGJlZm9yZSBub24taW5kZXhlZCBoYW5kbGVycywgc3BlY2lmeSBhIG5lZ2F0aXZlIHZhbHVlLlxcbiAgICAgKiBOb3RlOiBJIGFzc3VtZSBtb3N0IG9mIHRoZSB0aW1lIHlvdSBkb27igJl0IG5lZWQgdG8gd29ycnkgYWJvdXQgei1pbmRleCwgYnV0IGl04oCZcyBuaWNlIHRvIGhhdmUgdGhpcyBmZWF0dXJlIOKAnGp1c3QgaW4gY2FzZeKAnS5cXG4gICAgXFxcXCovXFxuICAgIGV2ZS5vbiA9IGZ1bmN0aW9uIChuYW1lLCBmKSB7XFxuICAgICAgICBpZiAodHlwZW9mIGYgIT0gXFxcImZ1bmN0aW9uXFxcIikge1xcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7fTtcXG4gICAgICAgIH1cXG4gICAgICAgIHZhciBuYW1lcyA9IGlzQXJyYXkobmFtZSkgPyAoaXNBcnJheShuYW1lWzBdKSA/IG5hbWUgOiBbbmFtZV0pIDogU3RyKG5hbWUpLnNwbGl0KGNvbWFzZXBhcmF0b3IpO1xcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gbmFtZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xcbiAgICAgICAgICAgIChmdW5jdGlvbiAobmFtZSkge1xcbiAgICAgICAgICAgICAgICB2YXIgbmFtZXMgPSBpc0FycmF5KG5hbWUpID8gbmFtZSA6IFN0cihuYW1lKS5zcGxpdChzZXBhcmF0b3IpLFxcbiAgICAgICAgICAgICAgICAgICAgZSA9IGV2ZW50cyxcXG4gICAgICAgICAgICAgICAgICAgIGV4aXN0O1xcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBuYW1lcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XFxuICAgICAgICAgICAgICAgICAgICBlID0gZS5uO1xcbiAgICAgICAgICAgICAgICAgICAgZSA9IGUuaGFzT3duUHJvcGVydHkobmFtZXNbaV0pICYmIGVbbmFtZXNbaV1dIHx8IChlW25hbWVzW2ldXSA9IHtuOiB7fX0pO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIGUuZiA9IGUuZiB8fCBbXTtcXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMCwgaWkgPSBlLmYubGVuZ3RoOyBpIDwgaWk7IGkrKykgaWYgKGUuZltpXSA9PSBmKSB7XFxuICAgICAgICAgICAgICAgICAgICBleGlzdCA9IHRydWU7XFxuICAgICAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAhZXhpc3QgJiYgZS5mLnB1c2goZik7XFxuICAgICAgICAgICAgfShuYW1lc1tpXSkpO1xcbiAgICAgICAgfVxcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh6SW5kZXgpIHtcXG4gICAgICAgICAgICBpZiAoK3pJbmRleCA9PSArekluZGV4KSB7XFxuICAgICAgICAgICAgICAgIGYuekluZGV4ID0gK3pJbmRleDtcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9O1xcbiAgICB9O1xcbiAgICAvKlxcXFxcXG4gICAgICogZXZlLmZcXG4gICAgIFsgbWV0aG9kIF1cXG4gICAgICoqXFxuICAgICAqIFJldHVybnMgZnVuY3Rpb24gdGhhdCB3aWxsIGZpcmUgZ2l2ZW4gZXZlbnQgd2l0aCBvcHRpb25hbCBhcmd1bWVudHMuXFxuICAgICAqIEFyZ3VtZW50cyB0aGF0IHdpbGwgYmUgcGFzc2VkIHRvIHRoZSByZXN1bHQgZnVuY3Rpb24gd2lsbCBiZSBhbHNvXFxuICAgICAqIGNvbmNhdGVkIHRvIHRoZSBsaXN0IG9mIGZpbmFsIGFyZ3VtZW50cy5cXG4gICAgIHwgZWwub25jbGljayA9IGV2ZS5mKFxcXCJjbGlja1xcXCIsIDEsIDIpO1xcbiAgICAgfCBldmUub24oXFxcImNsaWNrXFxcIiwgZnVuY3Rpb24gKGEsIGIsIGMpIHtcXG4gICAgIHwgICAgIGNvbnNvbGUubG9nKGEsIGIsIGMpOyAvLyAxLCAyLCBbZXZlbnQgb2JqZWN0XVxcbiAgICAgfCB9KTtcXG4gICAgID4gQXJndW1lbnRzXFxuICAgICAtIGV2ZW50IChzdHJpbmcpIGV2ZW50IG5hbWVcXG4gICAgIC0gdmFyYXJncyAo4oCmKSBhbmQgYW55IG90aGVyIGFyZ3VtZW50c1xcbiAgICAgPSAoZnVuY3Rpb24pIHBvc3NpYmxlIGV2ZW50IGhhbmRsZXIgZnVuY3Rpb25cXG4gICAgXFxcXCovXFxuICAgIGV2ZS5mID0gZnVuY3Rpb24gKGV2ZW50KSB7XFxuICAgICAgICB2YXIgYXR0cnMgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XFxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xcbiAgICAgICAgICAgIGV2ZS5hcHBseShudWxsLCBbZXZlbnQsIG51bGxdLmNvbmNhdChhdHRycykuY29uY2F0KFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKSkpO1xcbiAgICAgICAgfTtcXG4gICAgfTtcXG4gICAgLypcXFxcXFxuICAgICAqIGV2ZS5zdG9wXFxuICAgICBbIG1ldGhvZCBdXFxuICAgICAqKlxcbiAgICAgKiBJcyB1c2VkIGluc2lkZSBhbiBldmVudCBoYW5kbGVyIHRvIHN0b3AgdGhlIGV2ZW50LCBwcmV2ZW50aW5nIGFueSBzdWJzZXF1ZW50IGxpc3RlbmVycyBmcm9tIGZpcmluZy5cXG4gICAgXFxcXCovXFxuICAgIGV2ZS5zdG9wID0gZnVuY3Rpb24gKCkge1xcbiAgICAgICAgc3RvcCA9IDE7XFxuICAgIH07XFxuICAgIC8qXFxcXFxcbiAgICAgKiBldmUubnRcXG4gICAgIFsgbWV0aG9kIF1cXG4gICAgICoqXFxuICAgICAqIENvdWxkIGJlIHVzZWQgaW5zaWRlIGV2ZW50IGhhbmRsZXIgdG8gZmlndXJlIG91dCBhY3R1YWwgbmFtZSBvZiB0aGUgZXZlbnQuXFxuICAgICAqKlxcbiAgICAgPiBBcmd1bWVudHNcXG4gICAgICoqXFxuICAgICAtIHN1Ym5hbWUgKHN0cmluZykgI29wdGlvbmFsIHN1Ym5hbWUgb2YgdGhlIGV2ZW50XFxuICAgICAqKlxcbiAgICAgPSAoc3RyaW5nKSBuYW1lIG9mIHRoZSBldmVudCwgaWYgYHN1Ym5hbWVgIGlzIG5vdCBzcGVjaWZpZWRcXG4gICAgICogb3JcXG4gICAgID0gKGJvb2xlYW4pIGB0cnVlYCwgaWYgY3VycmVudCBldmVudOKAmXMgbmFtZSBjb250YWlucyBgc3VibmFtZWBcXG4gICAgXFxcXCovXFxuICAgIGV2ZS5udCA9IGZ1bmN0aW9uIChzdWJuYW1lKSB7XFxuICAgICAgICB2YXIgY3VyID0gaXNBcnJheShjdXJyZW50X2V2ZW50KSA/IGN1cnJlbnRfZXZlbnQuam9pbihcXFwiLlxcXCIpIDogY3VycmVudF9ldmVudDtcXG4gICAgICAgIGlmIChzdWJuYW1lKSB7XFxuICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoXFxcIig/OlxcXFxcXFxcLnxcXFxcXFxcXC98XilcXFwiICsgc3VibmFtZSArIFxcXCIoPzpcXFxcXFxcXC58XFxcXFxcXFwvfCQpXFxcIikudGVzdChjdXIpO1xcbiAgICAgICAgfVxcbiAgICAgICAgcmV0dXJuIGN1cjtcXG4gICAgfTtcXG4gICAgLypcXFxcXFxuICAgICAqIGV2ZS5udHNcXG4gICAgIFsgbWV0aG9kIF1cXG4gICAgICoqXFxuICAgICAqIENvdWxkIGJlIHVzZWQgaW5zaWRlIGV2ZW50IGhhbmRsZXIgdG8gZmlndXJlIG91dCBhY3R1YWwgbmFtZSBvZiB0aGUgZXZlbnQuXFxuICAgICAqKlxcbiAgICAgKipcXG4gICAgID0gKGFycmF5KSBuYW1lcyBvZiB0aGUgZXZlbnRcXG4gICAgXFxcXCovXFxuICAgIGV2ZS5udHMgPSBmdW5jdGlvbiAoKSB7XFxuICAgICAgICByZXR1cm4gaXNBcnJheShjdXJyZW50X2V2ZW50KSA/IGN1cnJlbnRfZXZlbnQgOiBjdXJyZW50X2V2ZW50LnNwbGl0KHNlcGFyYXRvcik7XFxuICAgIH07XFxuICAgIC8qXFxcXFxcbiAgICAgKiBldmUub2ZmXFxuICAgICBbIG1ldGhvZCBdXFxuICAgICAqKlxcbiAgICAgKiBSZW1vdmVzIGdpdmVuIGZ1bmN0aW9uIGZyb20gdGhlIGxpc3Qgb2YgZXZlbnQgbGlzdGVuZXJzIGFzc2lnbmVkIHRvIGdpdmVuIG5hbWUuXFxuICAgICAqIElmIG5vIGFyZ3VtZW50cyBzcGVjaWZpZWQgYWxsIHRoZSBldmVudHMgd2lsbCBiZSBjbGVhcmVkLlxcbiAgICAgKipcXG4gICAgID4gQXJndW1lbnRzXFxuICAgICAqKlxcbiAgICAgLSBuYW1lIChzdHJpbmcpIG5hbWUgb2YgdGhlIGV2ZW50LCBkb3QgKGAuYCkgb3Igc2xhc2ggKGAvYCkgc2VwYXJhdGVkLCB3aXRoIG9wdGlvbmFsIHdpbGRjYXJkc1xcbiAgICAgLSBmIChmdW5jdGlvbikgZXZlbnQgaGFuZGxlciBmdW5jdGlvblxcbiAgICBcXFxcKi9cXG4gICAgLypcXFxcXFxuICAgICAqIGV2ZS51bmJpbmRcXG4gICAgIFsgbWV0aG9kIF1cXG4gICAgICoqXFxuICAgICAqIFNlZSBAZXZlLm9mZlxcbiAgICBcXFxcKi9cXG4gICAgZXZlLm9mZiA9IGV2ZS51bmJpbmQgPSBmdW5jdGlvbiAobmFtZSwgZikge1xcbiAgICAgICAgaWYgKCFuYW1lKSB7XFxuICAgICAgICAgICAgZXZlLl9ldmVudHMgPSBldmVudHMgPSB7bjoge319O1xcbiAgICAgICAgICAgIHJldHVybjtcXG4gICAgICAgIH1cXG4gICAgICAgIHZhciBuYW1lcyA9IGlzQXJyYXkobmFtZSkgPyAoaXNBcnJheShuYW1lWzBdKSA/IG5hbWUgOiBbbmFtZV0pIDogU3RyKG5hbWUpLnNwbGl0KGNvbWFzZXBhcmF0b3IpO1xcbiAgICAgICAgaWYgKG5hbWVzLmxlbmd0aCA+IDEpIHtcXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBuYW1lcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XFxuICAgICAgICAgICAgICAgIGV2ZS5vZmYobmFtZXNbaV0sIGYpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICByZXR1cm47XFxuICAgICAgICB9XFxuICAgICAgICBuYW1lcyA9IGlzQXJyYXkobmFtZSkgPyBuYW1lIDogU3RyKG5hbWUpLnNwbGl0KHNlcGFyYXRvcik7XFxuICAgICAgICB2YXIgZSxcXG4gICAgICAgICAgICBrZXksXFxuICAgICAgICAgICAgc3BsaWNlLFxcbiAgICAgICAgICAgIGksIGlpLCBqLCBqaixcXG4gICAgICAgICAgICBjdXIgPSBbZXZlbnRzXTtcXG4gICAgICAgIGZvciAoaSA9IDAsIGlpID0gbmFtZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xcbiAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBjdXIubGVuZ3RoOyBqICs9IHNwbGljZS5sZW5ndGggLSAyKSB7XFxuICAgICAgICAgICAgICAgIHNwbGljZSA9IFtqLCAxXTtcXG4gICAgICAgICAgICAgICAgZSA9IGN1cltqXS5uO1xcbiAgICAgICAgICAgICAgICBpZiAobmFtZXNbaV0gIT0gd2lsZGNhcmQpIHtcXG4gICAgICAgICAgICAgICAgICAgIGlmIChlW25hbWVzW2ldXSkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwbGljZS5wdXNoKGVbbmFtZXNbaV1dKTtcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICAgIGZvciAoa2V5IGluIGUpIGlmIChlW2hhc10oa2V5KSkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwbGljZS5wdXNoKGVba2V5XSk7XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgY3VyLnNwbGljZS5hcHBseShjdXIsIHNwbGljZSk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgICAgZm9yIChpID0gMCwgaWkgPSBjdXIubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xcbiAgICAgICAgICAgIGUgPSBjdXJbaV07XFxuICAgICAgICAgICAgd2hpbGUgKGUubikge1xcbiAgICAgICAgICAgICAgICBpZiAoZikge1xcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUuZikge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaiA9IDAsIGpqID0gZS5mLmxlbmd0aDsgaiA8IGpqOyBqKyspIGlmIChlLmZbal0gPT0gZikge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLmYuc3BsaWNlKGosIDEpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgIWUuZi5sZW5ndGggJiYgZGVsZXRlIGUuZjtcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgIGZvciAoa2V5IGluIGUubikgaWYgKGUubltoYXNdKGtleSkgJiYgZS5uW2tleV0uZikge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmdW5jcyA9IGUubltrZXldLmY7XFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChqID0gMCwgamogPSBmdW5jcy5sZW5ndGg7IGogPCBqajsgaisrKSBpZiAoZnVuY3Nbal0gPT0gZikge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jcy5zcGxpY2UoaiwgMSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgICAgICAhZnVuY3MubGVuZ3RoICYmIGRlbGV0ZSBlLm5ba2V5XS5mO1xcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGUuZjtcXG4gICAgICAgICAgICAgICAgICAgIGZvciAoa2V5IGluIGUubikgaWYgKGUubltoYXNdKGtleSkgJiYgZS5uW2tleV0uZikge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBlLm5ba2V5XS5mO1xcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIGUgPSBlLm47XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICB9O1xcbiAgICAvKlxcXFxcXG4gICAgICogZXZlLm9uY2VcXG4gICAgIFsgbWV0aG9kIF1cXG4gICAgICoqXFxuICAgICAqIEJpbmRzIGdpdmVuIGV2ZW50IGhhbmRsZXIgd2l0aCBhIGdpdmVuIG5hbWUgdG8gb25seSBydW4gb25jZSB0aGVuIHVuYmluZCBpdHNlbGYuXFxuICAgICB8IGV2ZS5vbmNlKFxcXCJsb2dpblxcXCIsIGYpO1xcbiAgICAgfCBldmUoXFxcImxvZ2luXFxcIik7IC8vIHRyaWdnZXJzIGZcXG4gICAgIHwgZXZlKFxcXCJsb2dpblxcXCIpOyAvLyBubyBsaXN0ZW5lcnNcXG4gICAgICogVXNlIEBldmUgdG8gdHJpZ2dlciB0aGUgbGlzdGVuZXIuXFxuICAgICAqKlxcbiAgICAgPiBBcmd1bWVudHNcXG4gICAgICoqXFxuICAgICAtIG5hbWUgKHN0cmluZykgbmFtZSBvZiB0aGUgZXZlbnQsIGRvdCAoYC5gKSBvciBzbGFzaCAoYC9gKSBzZXBhcmF0ZWQsIHdpdGggb3B0aW9uYWwgd2lsZGNhcmRzXFxuICAgICAtIGYgKGZ1bmN0aW9uKSBldmVudCBoYW5kbGVyIGZ1bmN0aW9uXFxuICAgICAqKlxcbiAgICAgPSAoZnVuY3Rpb24pIHNhbWUgcmV0dXJuIGZ1bmN0aW9uIGFzIEBldmUub25cXG4gICAgXFxcXCovXFxuICAgIGV2ZS5vbmNlID0gZnVuY3Rpb24gKG5hbWUsIGYpIHtcXG4gICAgICAgIHZhciBmMiA9IGZ1bmN0aW9uICgpIHtcXG4gICAgICAgICAgICBldmUub2ZmKG5hbWUsIGYyKTtcXG4gICAgICAgICAgICByZXR1cm4gZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xcbiAgICAgICAgfTtcXG4gICAgICAgIHJldHVybiBldmUub24obmFtZSwgZjIpO1xcbiAgICB9O1xcbiAgICAvKlxcXFxcXG4gICAgICogZXZlLnZlcnNpb25cXG4gICAgIFsgcHJvcGVydHkgKHN0cmluZykgXVxcbiAgICAgKipcXG4gICAgICogQ3VycmVudCB2ZXJzaW9uIG9mIHRoZSBsaWJyYXJ5LlxcbiAgICBcXFxcKi9cXG4gICAgZXZlLnZlcnNpb24gPSB2ZXJzaW9uO1xcbiAgICBldmUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XFxuICAgICAgICByZXR1cm4gXFxcIllvdSBhcmUgcnVubmluZyBFdmUgXFxcIiArIHZlcnNpb247XFxuICAgIH07XFxuICAgICggdHJ1ZSAmJiBtb2R1bGUuZXhwb3J0cykgPyAobW9kdWxlLmV4cG9ydHMgPSBldmUpIDogKCB0cnVlID8gKCEoX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXyA9IFtdLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyA9IChmdW5jdGlvbigpIHsgcmV0dXJuIGV2ZTsgfSkuYXBwbHkoZXhwb3J0cywgX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXyksXFxuXFx0XFx0XFx0XFx0X19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gIT09IHVuZGVmaW5lZCAmJiAobW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXykpKSA6ICh1bmRlZmluZWQpKTtcXG59KSh0aGlzKTtcXG4vLyMgc291cmNlVVJMPVttb2R1bGVdXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lMaTl1YjJSbFgyMXZaSFZzWlhNdlpYWmxMWEpoY0doaFpXd3ZaWFpsTG1wekxtcHpJaXdpYzI5MWNtTmxjeUk2V3lKM1pXSndZV05yT2k4dlVtRndhR0ZsYkM4dUwyNXZaR1ZmYlc5a2RXeGxjeTlsZG1VdGNtRndhR0ZsYkM5bGRtVXVhbk0vWkRKaU5DSmRMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2THlCRGIzQjVjbWxuYUhRZ0tHTXBJREl3TVRNZ1FXUnZZbVVnVTNsemRHVnRjeUJKYm1OdmNuQnZjbUYwWldRdUlFRnNiQ0J5YVdkb2RITWdjbVZ6WlhKMlpXUXVYRzR2THlCY2JpOHZJRXhwWTJWdWMyVmtJSFZ1WkdWeUlIUm9aU0JCY0dGamFHVWdUR2xqWlc1elpTd2dWbVZ5YzJsdmJpQXlMakFnS0hSb1pTQmNJa3hwWTJWdWMyVmNJaWs3WEc0dkx5QjViM1VnYldGNUlHNXZkQ0IxYzJVZ2RHaHBjeUJtYVd4bElHVjRZMlZ3ZENCcGJpQmpiMjF3YkdsaGJtTmxJSGRwZEdnZ2RHaGxJRXhwWTJWdWMyVXVYRzR2THlCWmIzVWdiV0Y1SUc5aWRHRnBiaUJoSUdOdmNIa2diMllnZEdobElFeHBZMlZ1YzJVZ1lYUmNiaTh2SUZ4dUx5OGdhSFIwY0RvdkwzZDNkeTVoY0dGamFHVXViM0puTDJ4cFkyVnVjMlZ6TDB4SlEwVk9VMFV0TWk0d1hHNHZMeUJjYmk4dklGVnViR1Z6Y3lCeVpYRjFhWEpsWkNCaWVTQmhjSEJzYVdOaFlteGxJR3hoZHlCdmNpQmhaM0psWldRZ2RHOGdhVzRnZDNKcGRHbHVaeXdnYzI5bWRIZGhjbVZjYmk4dklHUnBjM1J5YVdKMWRHVmtJSFZ1WkdWeUlIUm9aU0JNYVdObGJuTmxJR2x6SUdScGMzUnlhV0oxZEdWa0lHOXVJR0Z1SUZ3aVFWTWdTVk5jSWlCQ1FWTkpVeXhjYmk4dklGZEpWRWhQVlZRZ1YwRlNVa0ZPVkVsRlV5QlBVaUJEVDA1RVNWUkpUMDVUSUU5R0lFRk9XU0JMU1U1RUxDQmxhWFJvWlhJZ1pYaHdjbVZ6Y3lCdmNpQnBiWEJzYVdWa0xseHVMeThnVTJWbElIUm9aU0JNYVdObGJuTmxJR1p2Y2lCMGFHVWdjM0JsWTJsbWFXTWdiR0Z1WjNWaFoyVWdaMjkyWlhKdWFXNW5JSEJsY20xcGMzTnBiMjV6SUdGdVpGeHVMeThnYkdsdGFYUmhkR2x2Ym5NZ2RXNWtaWElnZEdobElFeHBZMlZ1YzJVdVhHNHZMeURpbEl6aWxJRGlsSURpbElEaWxJRGlsSURpbElEaWxJRGlsSURpbElEaWxJRGlsSURpbElEaWxJRGlsSURpbElEaWxJRGlsSURpbElEaWxJRGlsSURpbElEaWxJRGlsSURpbElEaWxJRGlsSURpbElEaWxJRGlsSURpbElEaWxJRGlsSURpbElEaWxJRGlsSURpbElEaWxJRGlsSURpbElEaWxJRGlsSURpbElEaWxJRGlsSURpbElEaWxJRGlsSURpbElEaWxJRGlsSURpbElEaWxJRGlsSURpbElEaWxJRGlsSURpbElEaWxJRGlsSURpbElEaWxKQWdYRnhjWEZ4dUx5OGc0cFNDSUVWMlpTQXdMalV1TUNBdElFcGhkbUZUWTNKcGNIUWdSWFpsYm5SeklFeHBZbkpoY25rZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWc0cFNDSUZ4Y1hGeGNiaTh2SU9LVW5PS1VnT0tVZ09LVWdPS1VnT0tVZ09LVWdPS1VnT0tVZ09LVWdPS1VnT0tVZ09LVWdPS1VnT0tVZ09LVWdPS1VnT0tVZ09LVWdPS1VnT0tVZ09LVWdPS1VnT0tVZ09LVWdPS1VnT0tVZ09LVWdPS1VnT0tVZ09LVWdPS1VnT0tVZ09LVWdPS1VnT0tVZ09LVWdPS1VnT0tVZ09LVWdPS1VnT0tVZ09LVWdPS1VnT0tVZ09LVWdPS1VnT0tVZ09LVWdPS1VnT0tVZ09LVWdPS1VnT0tVZ09LVWdPS1VnT0tVZ09LVWdPS1VnT0tVZ09LVWdPS1VwQ0JjWEZ4Y1hHNHZMeURpbElJZ1FYVjBhRzl5SUVSdGFYUnllU0JDWVhKaGJtOTJjMnRwZVNBb2FIUjBjRG92TDJSdGFYUnllUzVpWVhKaGJtOTJjMnRwZVM1amIyMHZLU0RpbElJZ1hGeGNYRnh1THk4ZzRwU1U0cFNBNHBTQTRwU0E0cFNBNHBTQTRwU0E0cFNBNHBTQTRwU0E0cFNBNHBTQTRwU0E0cFNBNHBTQTRwU0E0cFNBNHBTQTRwU0E0cFNBNHBTQTRwU0E0cFNBNHBTQTRwU0E0cFNBNHBTQTRwU0E0cFNBNHBTQTRwU0E0cFNBNHBTQTRwU0E0cFNBNHBTQTRwU0E0cFNBNHBTQTRwU0E0cFNBNHBTQTRwU0E0cFNBNHBTQTRwU0E0cFNBNHBTQTRwU0E0cFNBNHBTQTRwU0E0cFNBNHBTQTRwU0E0cFNBNHBTQTRwU0E0cFNBNHBTQTRwU0E0cFNZSUZ4Y1hGeGNibHh1S0daMWJtTjBhVzl1SUNobmJHOWlLU0I3WEc0Z0lDQWdkbUZ5SUhabGNuTnBiMjRnUFNCY0lqQXVOUzR3WENJc1hHNGdJQ0FnSUNBZ0lHaGhjeUE5SUZ3aWFHRnpUM2R1VUhKdmNHVnlkSGxjSWl4Y2JpQWdJQ0FnSUNBZ2MyVndZWEpoZEc5eUlEMGdMMXRjWEM1Y1hDOWRMeXhjYmlBZ0lDQWdJQ0FnWTI5dFlYTmxjR0Z5WVhSdmNpQTlJQzljWEhNcUxGeGNjeW92TEZ4dUlDQWdJQ0FnSUNCM2FXeGtZMkZ5WkNBOUlGd2lLbHdpTEZ4dUlDQWdJQ0FnSUNCbWRXNGdQU0JtZFc1amRHbHZiaUFvS1NCN2ZTeGNiaUFnSUNBZ0lDQWdiblZ0YzI5eWRDQTlJR1oxYm1OMGFXOXVJQ2hoTENCaUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWVNBdElHSTdYRzRnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUdOMWNuSmxiblJmWlhabGJuUXNYRzRnSUNBZ0lDQWdJSE4wYjNBc1hHNGdJQ0FnSUNBZ0lHVjJaVzUwY3lBOUlIdHVPaUI3Zlgwc1hHNGdJQ0FnSUNBZ0lHWnBjbk4wUkdWbWFXNWxaQ0E5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdMQ0JwYVNBOUlIUm9hWE11YkdWdVozUm9PeUJwSUR3Z2FXazdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdkR2hwYzF0cFhTQWhQU0JjSW5WdVpHVm1hVzVsWkZ3aUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdselcybGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnYkdGemRFUmxabWx1WldRZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnYVNBOUlIUm9hWE11YkdWdVozUm9PMXh1SUNBZ0lDQWdJQ0FnSUNBZ2QyaHBiR1VnS0MwdGFTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnZEdocGMxdHBYU0FoUFNCY0luVnVaR1ZtYVc1bFpGd2lLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpXMmxkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ2IySnFkRzl6SUQwZ1QySnFaV04wTG5CeWIzUnZkSGx3WlM1MGIxTjBjbWx1Wnl4Y2JpQWdJQ0FnSUNBZ1UzUnlJRDBnVTNSeWFXNW5MRnh1SUNBZ0lDQWdJQ0JwYzBGeWNtRjVJRDBnUVhKeVlYa3VhWE5CY25KaGVTQjhmQ0JtZFc1amRHbHZiaUFvWVhJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJoY2lCcGJuTjBZVzVqWlc5bUlFRnljbUY1SUh4OElHOWlhblJ2Y3k1allXeHNLR0Z5S1NBOVBTQmNJbHR2WW1wbFkzUWdRWEp5WVhsZFhDSTdYRzRnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdMeXBjWEZ4dUlDQWdJQ0FxSUdWMlpWeHVJQ0FnSUNCYklHMWxkR2h2WkNCZFhHNWNiaUFnSUNBZ0tpQkdhWEpsY3lCbGRtVnVkQ0IzYVhSb0lHZHBkbVZ1SUdCdVlXMWxZQ3dnWjJsMlpXNGdjMk52Y0dVZ1lXNWtJRzkwYUdWeUlIQmhjbUZ0WlhSbGNuTXVYRzVjYmlBZ0lDQWdQaUJCY21kMWJXVnVkSE5jYmx4dUlDQWdJQ0F0SUc1aGJXVWdLSE4wY21sdVp5a2dibUZ0WlNCdlppQjBhR1VnS21WMlpXNTBLaXdnWkc5MElDaGdMbUFwSUc5eUlITnNZWE5vSUNoZ0wyQXBJSE5sY0dGeVlYUmxaRnh1SUNBZ0lDQXRJSE5qYjNCbElDaHZZbXBsWTNRcElHTnZiblJsZUhRZ1ptOXlJSFJvWlNCbGRtVnVkQ0JvWVc1a2JHVnljMXh1SUNBZ0lDQXRJSFpoY21GeVozTWdLQzR1TGlrZ2RHaGxJSEpsYzNRZ2IyWWdZWEpuZFcxbGJuUnpJSGRwYkd3Z1ltVWdjMlZ1ZENCMGJ5QmxkbVZ1ZENCb1lXNWtiR1Z5YzF4dVhHNGdJQ0FnSUQwZ0tHOWlhbVZqZENrZ1lYSnlZWGtnYjJZZ2NtVjBkWEp1WldRZ2RtRnNkV1Z6SUdaeWIyMGdkR2hsSUd4cGMzUmxibVZ5Y3k0Z1FYSnlZWGtnYUdGeklIUjNieUJ0WlhSb2IyUnpJR0F1Wm1seWMzUkVaV1pwYm1Wa0tDbGdJR0Z1WkNCZ0xteGhjM1JFWldacGJtVmtLQ2xnSUhSdklHZGxkQ0JtYVhKemRDQnZjaUJzWVhOMElHNXZkQ0JnZFc1a1pXWnBibVZrWUNCMllXeDFaUzVjYmlBZ0lDQmNYQ292WEc0Z0lDQWdJQ0FnSUhaaGNpQmxkbVVnUFNCbWRXNWpkR2x2YmlBb2JtRnRaU3dnYzJOdmNHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJsSUQwZ1pYWmxiblJ6TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5c1pITjBiM0FnUFNCemRHOXdMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0Z5WjNNZ1BTQkJjbkpoZVM1d2NtOTBiM1I1Y0dVdWMyeHBZMlV1WTJGc2JDaGhjbWQxYldWdWRITXNJRElwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4cGMzUmxibVZ5Y3lBOUlHVjJaUzVzYVhOMFpXNWxjbk1vYm1GdFpTa3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlaUE5SURBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ppQTlJR1poYkhObExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHd3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhVzVrWlhobFpDQTlJRnRkTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhGMVpYVmxJRDBnZTMwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2IzVjBJRDBnVzEwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyVWdQU0JqZFhKeVpXNTBYMlYyWlc1MExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnljbTl5Y3lBOUlGdGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2IzVjBMbVpwY25OMFJHVm1hVzVsWkNBOUlHWnBjbk4wUkdWbWFXNWxaRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHOTFkQzVzWVhOMFJHVm1hVzVsWkNBOUlHeGhjM1JFWldacGJtVmtPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kzVnljbVZ1ZEY5bGRtVnVkQ0E5SUc1aGJXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCemRHOXdJRDBnTUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd0xDQnBhU0E5SUd4cGMzUmxibVZ5Y3k1c1pXNW5kR2c3SUdrZ1BDQnBhVHNnYVNzcktTQnBaaUFvWENKNlNXNWtaWGhjSWlCcGJpQnNhWE4wWlc1bGNuTmJhVjBwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGJtUmxlR1ZrTG5CMWMyZ29iR2x6ZEdWdVpYSnpXMmxkTG5wSmJtUmxlQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHeHBjM1JsYm1WeWMxdHBYUzU2U1c1a1pYZ2dQQ0F3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEYxWlhWbFcyeHBjM1JsYm1WeWMxdHBYUzU2U1c1a1pYaGRJRDBnYkdsemRHVnVaWEp6VzJsZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJR2x1WkdWNFpXUXVjMjl5ZENodWRXMXpiM0owS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSGRvYVd4bElDaHBibVJsZUdWa1czcGRJRHdnTUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHd2dQU0J4ZFdWMVpWdHBibVJsZUdWa1czb3JLMTFkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5MWRDNXdkWE5vS0d3dVlYQndiSGtvYzJOdmNHVXNJR0Z5WjNNcEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYzNSdmNDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemRHOXdJRDBnYjJ4a2MzUnZjRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUc5MWREdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tHa2dQU0F3T3lCcElEd2dhV2s3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3dnUFNCc2FYTjBaVzVsY25OYmFWMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0Z3aWVrbHVaR1Y0WENJZ2FXNGdiQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYkM1NlNXNWtaWGdnUFQwZ2FXNWtaWGhsWkZ0NlhTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiM1YwTG5CMWMyZ29iQzVoY0hCc2VTaHpZMjl3WlN3Z1lYSm5jeWtwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tITjBiM0FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSdklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I2S3lzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiQ0E5SUhGMVpYVmxXMmx1WkdWNFpXUmJlbDFkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHd2dKaVlnYjNWMExuQjFjMmdvYkM1aGNIQnNlU2h6WTI5d1pTd2dZWEpuY3lrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoemRHOXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnZDJocGJHVWdLR3dwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeGRXVjFaVnRzTG5wSmJtUmxlRjBnUFNCc08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2IzVjBMbkIxYzJnb2JDNWhjSEJzZVNoelkyOXdaU3dnWVhKbmN5a3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jM1J2Y0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0J6ZEc5d0lEMGdiMnhrYzNSdmNEdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOMWNuSmxiblJmWlhabGJuUWdQU0JqWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnZkWFE3WEc0Z0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUNBZ0lDOHZJRlZ1Wkc5amRXMWxiblJsWkM0Z1JHVmlkV2NnYjI1c2VTNWNiaUFnSUNBZ0lDQWdaWFpsTGw5bGRtVnVkSE1nUFNCbGRtVnVkSE03WEc0Z0lDQWdMeXBjWEZ4dUlDQWdJQ0FxSUdWMlpTNXNhWE4wWlc1bGNuTmNiaUFnSUNBZ1d5QnRaWFJvYjJRZ1hWeHVYRzRnSUNBZ0lDb2dTVzUwWlhKdVlXd2diV1YwYUc5a0lIZG9hV05vSUdkcGRtVnpJSGx2ZFNCaGNuSmhlU0J2WmlCaGJHd2daWFpsYm5RZ2FHRnVaR3hsY25NZ2RHaGhkQ0IzYVd4c0lHSmxJSFJ5YVdkblpYSmxaQ0JpZVNCMGFHVWdaMmwyWlc0Z1lHNWhiV1ZnTGx4dVhHNGdJQ0FnSUQ0Z1FYSm5kVzFsYm5SelhHNWNiaUFnSUNBZ0xTQnVZVzFsSUNoemRISnBibWNwSUc1aGJXVWdiMllnZEdobElHVjJaVzUwTENCa2IzUWdLR0F1WUNrZ2IzSWdjMnhoYzJnZ0tHQXZZQ2tnYzJWd1lYSmhkR1ZrWEc1Y2JpQWdJQ0FnUFNBb1lYSnlZWGtwSUdGeWNtRjVJRzltSUdWMlpXNTBJR2hoYm1Sc1pYSnpYRzRnSUNBZ1hGd3FMMXh1SUNBZ0lHVjJaUzVzYVhOMFpXNWxjbk1nUFNCbWRXNWpkR2x2YmlBb2JtRnRaU2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdibUZ0WlhNZ1BTQnBjMEZ5Y21GNUtHNWhiV1VwSUQ4Z2JtRnRaU0E2SUc1aGJXVXVjM0JzYVhRb2MyVndZWEpoZEc5eUtTeGNiaUFnSUNBZ0lDQWdJQ0FnSUdVZ1BTQmxkbVZ1ZEhNc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwZEdWdExGeHVJQ0FnSUNBZ0lDQWdJQ0FnYVhSbGJYTXNYRzRnSUNBZ0lDQWdJQ0FnSUNCckxGeHVJQ0FnSUNBZ0lDQWdJQ0FnYVN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdhaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lHcHFMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2JtVnpMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1pYTWdQU0JiWlYwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J2ZFhRZ1BTQmJYVHRjYmlBZ0lDQWdJQ0FnWm05eUlDaHBJRDBnTUN3Z2FXa2dQU0J1WVcxbGN5NXNaVzVuZEdnN0lHa2dQQ0JwYVRzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnVaWE1nUFNCYlhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdadmNpQW9haUE5SURBc0lHcHFJRDBnWlhNdWJHVnVaM1JvT3lCcUlEd2dhbW83SUdvckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1VnUFNCbGMxdHFYUzV1TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsMFpXMXpJRDBnVzJWYmJtRnRaWE5iYVYxZExDQmxXM2RwYkdSallYSmtYVjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYXlBOUlESTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkMmhwYkdVZ0tHc3RMU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBkR1Z0SUQwZ2FYUmxiWE5iYTEwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNocGRHVnRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J1WlhNdWNIVnphQ2hwZEdWdEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOTFkQ0E5SUc5MWRDNWpiMjVqWVhRb2FYUmxiUzVtSUh4OElGdGRLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJR1Z6SUQwZ2JtVnpPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ2ZFhRN1hHNGdJQ0FnZlR0Y2JpQWdJQ0F2S2x4Y1hHNGdJQ0FnSUNvZ1pYWmxMbk5sY0dGeVlYUnZjbHh1SUNBZ0lDQmJJRzFsZEdodlpDQmRYRzVjYmlBZ0lDQWdLaUJKWmlCbWIzSWdjMjl0WlNCeVpXRnpiMjV6SUhsdmRTQmtiMjdpZ0psMElHeHBhMlVnWkdWbVlYVnNkQ0J6WlhCaGNtRjBiM0p6SUNoZ0xtQWdiM0lnWUM5Z0tTQjViM1VnWTJGdUlITndaV05wWm5rZ2VXOTFjbk5jYmlBZ0lDQWdLaUJvWlhKbExpQkNaU0JoZDJGeVpTQjBhR0YwSUdsbUlIbHZkU0J3WVhOeklHRWdjM1J5YVc1bklHeHZibWRsY2lCMGFHRnVJRzl1WlNCamFHRnlZV04wWlhJZ2FYUWdkMmxzYkNCaVpTQjBjbVZoZEdWa0lHRnpYRzRnSUNBZ0lDb2dZU0JzYVhOMElHOW1JR05vWVhKaFkzUmxjbk11WEc1Y2JpQWdJQ0FnTFNCelpYQmhjbUYwYjNJZ0tITjBjbWx1WnlrZ2JtVjNJSE5sY0dGeVlYUnZjaTRnUlcxd2RIa2djM1J5YVc1bklISmxjMlYwY3lCMGJ5QmtaV1poZFd4ME9pQmdMbUFnYjNJZ1lDOWdMbHh1SUNBZ0lGeGNLaTljYmlBZ0lDQmxkbVV1YzJWd1lYSmhkRzl5SUQwZ1puVnVZM1JwYjI0Z0tITmxjQ2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9jMlZ3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6WlhBZ1BTQlRkSElvYzJWd0tTNXlaWEJzWVdObEtDOG9QejFiWEZ3dVhGeGVYRnhkWEZ4YlhGd3RYU2t2Wnl3Z1hDSmNYRnhjWENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYzJWd0lEMGdYQ0piWENJZ0t5QnpaWEFnS3lCY0lsMWNJanRjYmlBZ0lDQWdJQ0FnSUNBZ0lITmxjR0Z5WVhSdmNpQTlJRzVsZHlCU1pXZEZlSEFvYzJWd0tUdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhObGNHRnlZWFJ2Y2lBOUlDOWJYRnd1WEZ3dlhTODdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlPMXh1SUNBZ0lDOHFYRnhjYmlBZ0lDQWdLaUJsZG1VdWIyNWNiaUFnSUNBZ1d5QnRaWFJvYjJRZ1hWeHVJQ0FnSUNBcUtseHVJQ0FnSUNBcUlFSnBibVJ6SUdkcGRtVnVJR1YyWlc1MElHaGhibVJzWlhJZ2QybDBhQ0JoSUdkcGRtVnVJRzVoYldVdUlGbHZkU0JqWVc0Z2RYTmxJSGRwYkdSallYSmtjeURpZ0p4Z0ttRGlnSjBnWm05eUlIUm9aU0J1WVcxbGN6cGNiaUFnSUNBZ2ZDQmxkbVV1YjI0b1hDSXFMblZ1WkdWeUxpcGNJaXdnWmlrN1hHNGdJQ0FnSUh3Z1pYWmxLRndpYlc5MWMyVXVkVzVrWlhJdVpteHZiM0pjSWlrN0lDOHZJSFJ5YVdkblpYSnpJR1pjYmlBZ0lDQWdLaUJWYzJVZ1FHVjJaU0IwYnlCMGNtbG5aMlZ5SUhSb1pTQnNhWE4wWlc1bGNpNWNiaUFnSUNBZ0tpcGNiaUFnSUNBZ0xTQnVZVzFsSUNoemRISnBibWNwSUc1aGJXVWdiMllnZEdobElHVjJaVzUwTENCa2IzUWdLR0F1WUNrZ2IzSWdjMnhoYzJnZ0tHQXZZQ2tnYzJWd1lYSmhkR1ZrTENCM2FYUm9JRzl3ZEdsdmJtRnNJSGRwYkdSallYSmtjMXh1SUNBZ0lDQXRJR1lnS0daMWJtTjBhVzl1S1NCbGRtVnVkQ0JvWVc1a2JHVnlJR1oxYm1OMGFXOXVYRzRnSUNBZ0lDb3FYRzRnSUNBZ0lDMGdibUZ0WlNBb1lYSnlZWGtwSUdsbUlIbHZkU0JrYjI3aWdKbDBJSGRoYm5RZ2RHOGdkWE5sSUhObGNHRnlZWFJ2Y25Nc0lIbHZkU0JqWVc0Z2RYTmxJR0Z5Y21GNUlHOW1JSE4wY21sdVozTmNiaUFnSUNBZ0xTQm1JQ2htZFc1amRHbHZiaWtnWlhabGJuUWdhR0Z1Wkd4bGNpQm1kVzVqZEdsdmJseHVJQ0FnSUNBcUtseHVJQ0FnSUNBOUlDaG1kVzVqZEdsdmJpa2djbVYwZFhKdVpXUWdablZ1WTNScGIyNGdZV05qWlhCMGN5QmhJSE5wYm1kc1pTQnVkVzFsY21saklIQmhjbUZ0WlhSbGNpQjBhR0YwSUhKbGNISmxjMlZ1ZEhNZ2VpMXBibVJsZUNCdlppQjBhR1VnYUdGdVpHeGxjaTRnU1hRZ2FYTWdZVzRnYjNCMGFXOXVZV3dnWm1WaGRIVnlaU0JoYm1RZ2IyNXNlU0IxYzJWa0lIZG9aVzRnZVc5MUlHNWxaV1FnZEc4Z1pXNXpkWEpsSUhSb1lYUWdjMjl0WlNCemRXSnpaWFFnYjJZZ2FHRnVaR3hsY25NZ2QybHNiQ0JpWlNCcGJuWnZhMlZrSUdsdUlHRWdaMmwyWlc0Z2IzSmtaWElzSUdSbGMzQnBkR1VnYjJZZ2RHaGxJRzl5WkdWeUlHOW1JR0Z6YzJsbmJtMWxiblF1SUZ4dUlDQWdJQ0ErSUVWNFlXMXdiR1U2WEc0Z0lDQWdJSHdnWlhabExtOXVLRndpYlc5MWMyVmNJaXdnWldGMFNYUXBLRElwTzF4dUlDQWdJQ0I4SUdWMlpTNXZiaWhjSW0xdmRYTmxYQ0lzSUhOamNtVmhiU2s3WEc0Z0lDQWdJSHdnWlhabExtOXVLRndpYlc5MWMyVmNJaXdnWTJGMFkyaEpkQ2tvTVNrN1hHNGdJQ0FnSUNvZ1ZHaHBjeUIzYVd4c0lHVnVjM1Z5WlNCMGFHRjBJR0JqWVhSamFFbDBZQ0JtZFc1amRHbHZiaUIzYVd4c0lHSmxJR05oYkd4bFpDQmlaV1p2Y21VZ1lHVmhkRWwwWUM1Y2JpQWdJQ0FnS2x4dUlDQWdJQ0FxSUVsbUlIbHZkU0IzWVc1MElIUnZJSEIxZENCNWIzVnlJR2hoYm1Sc1pYSWdZbVZtYjNKbElHNXZiaTFwYm1SbGVHVmtJR2hoYm1Sc1pYSnpMQ0J6Y0dWamFXWjVJR0VnYm1WbllYUnBkbVVnZG1Gc2RXVXVYRzRnSUNBZ0lDb2dUbTkwWlRvZ1NTQmhjM04xYldVZ2JXOXpkQ0J2WmlCMGFHVWdkR2x0WlNCNWIzVWdaRzl1NG9DWmRDQnVaV1ZrSUhSdklIZHZjbko1SUdGaWIzVjBJSG90YVc1a1pYZ3NJR0oxZENCcGRPS0FtWE1nYm1salpTQjBieUJvWVhabElIUm9hWE1nWm1WaGRIVnlaU0RpZ0p4cWRYTjBJR2x1SUdOaGMyWGlnSjB1WEc0Z0lDQWdYRndxTDF4dUlDQWdJR1YyWlM1dmJpQTlJR1oxYm1OMGFXOXVJQ2h1WVcxbExDQm1LU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ1ppQWhQU0JjSW1aMWJtTjBhVzl1WENJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJtZFc1amRHbHZiaUFvS1NCN2ZUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0IyWVhJZ2JtRnRaWE1nUFNCcGMwRnljbUY1S0c1aGJXVXBJRDhnS0dselFYSnlZWGtvYm1GdFpWc3dYU2tnUHlCdVlXMWxJRG9nVzI1aGJXVmRLU0E2SUZOMGNpaHVZVzFsS1M1emNHeHBkQ2hqYjIxaGMyVndZWEpoZEc5eUtUdGNiaUFnSUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURBc0lHbHBJRDBnYm1GdFpYTXViR1Z1WjNSb095QnBJRHdnYVdrN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdLR1oxYm1OMGFXOXVJQ2h1WVcxbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUc1aGJXVnpJRDBnYVhOQmNuSmhlU2h1WVcxbEtTQS9JRzVoYldVZ09pQlRkSElvYm1GdFpTa3VjM0JzYVhRb2MyVndZWEpoZEc5eUtTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWlNBOUlHVjJaVzUwY3l4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaWGhwYzNRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREFzSUdscElEMGdibUZ0WlhNdWJHVnVaM1JvT3lCcElEd2dhV2s3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbElEMGdaUzV1TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxJRDBnWlM1b1lYTlBkMjVRY205d1pYSjBlU2h1WVcxbGMxdHBYU2tnSmlZZ1pWdHVZVzFsYzF0cFhWMGdmSHdnS0dWYmJtRnRaWE5iYVYxZElEMGdlMjQ2SUh0OWZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1V1WmlBOUlHVXVaaUI4ZkNCYlhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0drZ1BTQXdMQ0JwYVNBOUlHVXVaaTVzWlc1bmRHZzdJR2tnUENCcGFUc2dhU3NyS1NCcFppQW9aUzVtVzJsZElEMDlJR1lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaWGhwYzNRZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lXVjRhWE4wSUNZbUlHVXVaaTV3ZFhOb0tHWXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTaHVZVzFsYzF0cFhTa3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJtZFc1amRHbHZiaUFvZWtsdVpHVjRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSzNwSmJtUmxlQ0E5UFNBcmVrbHVaR1Y0S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ppNTZTVzVrWlhnZ1BTQXJla2x1WkdWNE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUgwN1hHNGdJQ0FnTHlwY1hGeHVJQ0FnSUNBcUlHVjJaUzVtWEc0Z0lDQWdJRnNnYldWMGFHOWtJRjFjYmlBZ0lDQWdLaXBjYmlBZ0lDQWdLaUJTWlhSMWNtNXpJR1oxYm1OMGFXOXVJSFJvWVhRZ2QybHNiQ0JtYVhKbElHZHBkbVZ1SUdWMlpXNTBJSGRwZEdnZ2IzQjBhVzl1WVd3Z1lYSm5kVzFsYm5SekxseHVJQ0FnSUNBcUlFRnlaM1Z0Wlc1MGN5QjBhR0YwSUhkcGJHd2dZbVVnY0dGemMyVmtJSFJ2SUhSb1pTQnlaWE4xYkhRZ1puVnVZM1JwYjI0Z2QybHNiQ0JpWlNCaGJITnZYRzRnSUNBZ0lDb2dZMjl1WTJGMFpXUWdkRzhnZEdobElHeHBjM1FnYjJZZ1ptbHVZV3dnWVhKbmRXMWxiblJ6TGx4dUlDQWdJQ0I4SUdWc0xtOXVZMnhwWTJzZ1BTQmxkbVV1WmloY0ltTnNhV05yWENJc0lERXNJRElwTzF4dUlDQWdJQ0I4SUdWMlpTNXZiaWhjSW1Oc2FXTnJYQ0lzSUdaMWJtTjBhVzl1SUNoaExDQmlMQ0JqS1NCN1hHNGdJQ0FnSUh3Z0lDQWdJR052Ym5OdmJHVXViRzluS0dFc0lHSXNJR01wT3lBdkx5QXhMQ0F5TENCYlpYWmxiblFnYjJKcVpXTjBYVnh1SUNBZ0lDQjhJSDBwTzF4dUlDQWdJQ0ErSUVGeVozVnRaVzUwYzF4dUlDQWdJQ0F0SUdWMlpXNTBJQ2h6ZEhKcGJtY3BJR1YyWlc1MElHNWhiV1ZjYmlBZ0lDQWdMU0IyWVhKaGNtZHpJQ2ppZ0tZcElHRnVaQ0JoYm5rZ2IzUm9aWElnWVhKbmRXMWxiblJ6WEc0Z0lDQWdJRDBnS0daMWJtTjBhVzl1S1NCd2IzTnphV0pzWlNCbGRtVnVkQ0JvWVc1a2JHVnlJR1oxYm1OMGFXOXVYRzRnSUNBZ1hGd3FMMXh1SUNBZ0lHVjJaUzVtSUQwZ1puVnVZM1JwYjI0Z0tHVjJaVzUwS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJoZEhSeWN5QTlJRnRkTG5Oc2FXTmxMbU5oYkd3b1lYSm5kVzFsYm5SekxDQXhLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1YyWlM1aGNIQnNlU2h1ZFd4c0xDQmJaWFpsYm5Rc0lHNTFiR3hkTG1OdmJtTmhkQ2hoZEhSeWN5a3VZMjl1WTJGMEtGdGRMbk5zYVdObExtTmhiR3dvWVhKbmRXMWxiblJ6TENBd0tTa3BPMXh1SUNBZ0lDQWdJQ0I5TzF4dUlDQWdJSDA3WEc0Z0lDQWdMeXBjWEZ4dUlDQWdJQ0FxSUdWMlpTNXpkRzl3WEc0Z0lDQWdJRnNnYldWMGFHOWtJRjFjYmlBZ0lDQWdLaXBjYmlBZ0lDQWdLaUJKY3lCMWMyVmtJR2x1YzJsa1pTQmhiaUJsZG1WdWRDQm9ZVzVrYkdWeUlIUnZJSE4wYjNBZ2RHaGxJR1YyWlc1MExDQndjbVYyWlc1MGFXNW5JR0Z1ZVNCemRXSnpaWEYxWlc1MElHeHBjM1JsYm1WeWN5Qm1jbTl0SUdacGNtbHVaeTVjYmlBZ0lDQmNYQ292WEc0Z0lDQWdaWFpsTG5OMGIzQWdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lITjBiM0FnUFNBeE8xeHVJQ0FnSUgwN1hHNGdJQ0FnTHlwY1hGeHVJQ0FnSUNBcUlHVjJaUzV1ZEZ4dUlDQWdJQ0JiSUcxbGRHaHZaQ0JkWEc0Z0lDQWdJQ29xWEc0Z0lDQWdJQ29nUTI5MWJHUWdZbVVnZFhObFpDQnBibk5wWkdVZ1pYWmxiblFnYUdGdVpHeGxjaUIwYnlCbWFXZDFjbVVnYjNWMElHRmpkSFZoYkNCdVlXMWxJRzltSUhSb1pTQmxkbVZ1ZEM1Y2JpQWdJQ0FnS2lwY2JpQWdJQ0FnUGlCQmNtZDFiV1Z1ZEhOY2JpQWdJQ0FnS2lwY2JpQWdJQ0FnTFNCemRXSnVZVzFsSUNoemRISnBibWNwSUNOdmNIUnBiMjVoYkNCemRXSnVZVzFsSUc5bUlIUm9aU0JsZG1WdWRGeHVJQ0FnSUNBcUtseHVJQ0FnSUNBOUlDaHpkSEpwYm1jcElHNWhiV1VnYjJZZ2RHaGxJR1YyWlc1MExDQnBaaUJnYzNWaWJtRnRaV0FnYVhNZ2JtOTBJSE53WldOcFptbGxaRnh1SUNBZ0lDQXFJRzl5WEc0Z0lDQWdJRDBnS0dKdmIyeGxZVzRwSUdCMGNuVmxZQ3dnYVdZZ1kzVnljbVZ1ZENCbGRtVnVkT0tBbVhNZ2JtRnRaU0JqYjI1MFlXbHVjeUJnYzNWaWJtRnRaV0JjYmlBZ0lDQmNYQ292WEc0Z0lDQWdaWFpsTG01MElEMGdablZ1WTNScGIyNGdLSE4xWW01aGJXVXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHTjFjaUE5SUdselFYSnlZWGtvWTNWeWNtVnVkRjlsZG1WdWRDa2dQeUJqZFhKeVpXNTBYMlYyWlc1MExtcHZhVzRvWENJdVhDSXBJRG9nWTNWeWNtVnVkRjlsZG1WdWREdGNiaUFnSUNBZ0lDQWdhV1lnS0hOMVltNWhiV1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnVW1WblJYaHdLRndpS0Q4NlhGeGNYQzU4WEZ4Y1hDOThYaWxjSWlBcklITjFZbTVoYldVZ0t5QmNJaWcvT2x4Y1hGd3VmRnhjWEZ3dmZDUXBYQ0lwTG5SbGMzUW9ZM1Z5S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1kzVnlPMXh1SUNBZ0lIMDdYRzRnSUNBZ0x5cGNYRnh1SUNBZ0lDQXFJR1YyWlM1dWRITmNiaUFnSUNBZ1d5QnRaWFJvYjJRZ1hWeHVJQ0FnSUNBcUtseHVJQ0FnSUNBcUlFTnZkV3hrSUdKbElIVnpaV1FnYVc1emFXUmxJR1YyWlc1MElHaGhibVJzWlhJZ2RHOGdabWxuZFhKbElHOTFkQ0JoWTNSMVlXd2dibUZ0WlNCdlppQjBhR1VnWlhabGJuUXVYRzRnSUNBZ0lDb3FYRzRnSUNBZ0lDb3FYRzRnSUNBZ0lEMGdLR0Z5Y21GNUtTQnVZVzFsY3lCdlppQjBhR1VnWlhabGJuUmNiaUFnSUNCY1hDb3ZYRzRnSUNBZ1pYWmxMbTUwY3lBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR2x6UVhKeVlYa29ZM1Z5Y21WdWRGOWxkbVZ1ZENrZ1B5QmpkWEp5Wlc1MFgyVjJaVzUwSURvZ1kzVnljbVZ1ZEY5bGRtVnVkQzV6Y0d4cGRDaHpaWEJoY21GMGIzSXBPMXh1SUNBZ0lIMDdYRzRnSUNBZ0x5cGNYRnh1SUNBZ0lDQXFJR1YyWlM1dlptWmNiaUFnSUNBZ1d5QnRaWFJvYjJRZ1hWeHVJQ0FnSUNBcUtseHVJQ0FnSUNBcUlGSmxiVzkyWlhNZ1oybDJaVzRnWm5WdVkzUnBiMjRnWm5KdmJTQjBhR1VnYkdsemRDQnZaaUJsZG1WdWRDQnNhWE4wWlc1bGNuTWdZWE56YVdkdVpXUWdkRzhnWjJsMlpXNGdibUZ0WlM1Y2JpQWdJQ0FnS2lCSlppQnVieUJoY21kMWJXVnVkSE1nYzNCbFkybG1hV1ZrSUdGc2JDQjBhR1VnWlhabGJuUnpJSGRwYkd3Z1ltVWdZMnhsWVhKbFpDNWNiaUFnSUNBZ0tpcGNiaUFnSUNBZ1BpQkJjbWQxYldWdWRITmNiaUFnSUNBZ0tpcGNiaUFnSUNBZ0xTQnVZVzFsSUNoemRISnBibWNwSUc1aGJXVWdiMllnZEdobElHVjJaVzUwTENCa2IzUWdLR0F1WUNrZ2IzSWdjMnhoYzJnZ0tHQXZZQ2tnYzJWd1lYSmhkR1ZrTENCM2FYUm9JRzl3ZEdsdmJtRnNJSGRwYkdSallYSmtjMXh1SUNBZ0lDQXRJR1lnS0daMWJtTjBhVzl1S1NCbGRtVnVkQ0JvWVc1a2JHVnlJR1oxYm1OMGFXOXVYRzRnSUNBZ1hGd3FMMXh1SUNBZ0lDOHFYRnhjYmlBZ0lDQWdLaUJsZG1VdWRXNWlhVzVrWEc0Z0lDQWdJRnNnYldWMGFHOWtJRjFjYmlBZ0lDQWdLaXBjYmlBZ0lDQWdLaUJUWldVZ1FHVjJaUzV2Wm1aY2JpQWdJQ0JjWENvdlhHNGdJQ0FnWlhabExtOW1aaUE5SUdWMlpTNTFibUpwYm1RZ1BTQm1kVzVqZEdsdmJpQW9ibUZ0WlN3Z1ppa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb0lXNWhiV1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1YyWlM1ZlpYWmxiblJ6SUQwZ1pYWmxiblJ6SUQwZ2UyNDZJSHQ5ZlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0IyWVhJZ2JtRnRaWE1nUFNCcGMwRnljbUY1S0c1aGJXVXBJRDhnS0dselFYSnlZWGtvYm1GdFpWc3dYU2tnUHlCdVlXMWxJRG9nVzI1aGJXVmRLU0E2SUZOMGNpaHVZVzFsS1M1emNHeHBkQ2hqYjIxaGMyVndZWEpoZEc5eUtUdGNiaUFnSUNBZ0lDQWdhV1lnS0c1aGJXVnpMbXhsYm1kMGFDQStJREVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd0xDQnBhU0E5SUc1aGJXVnpMbXhsYm1kMGFEc2dhU0E4SUdscE95QnBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGRtVXViMlptS0c1aGJXVnpXMmxkTENCbUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J1WVcxbGN5QTlJR2x6UVhKeVlYa29ibUZ0WlNrZ1B5QnVZVzFsSURvZ1UzUnlLRzVoYldVcExuTndiR2wwS0hObGNHRnlZWFJ2Y2lrN1hHNGdJQ0FnSUNBZ0lIWmhjaUJsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdhMlY1TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjM0JzYVdObExGeHVJQ0FnSUNBZ0lDQWdJQ0FnYVN3Z2FXa3NJR29zSUdwcUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnWTNWeUlEMGdXMlYyWlc1MGMxMDdYRzRnSUNBZ0lDQWdJR1p2Y2lBb2FTQTlJREFzSUdscElEMGdibUZ0WlhNdWJHVnVaM1JvT3lCcElEd2dhV2s3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1ptOXlJQ2hxSUQwZ01Ec2dhaUE4SUdOMWNpNXNaVzVuZEdnN0lHb2dLejBnYzNCc2FXTmxMbXhsYm1kMGFDQXRJRElwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemNHeHBZMlVnUFNCYmFpd2dNVjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWlNBOUlHTjFjbHRxWFM1dU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h1WVcxbGMxdHBYU0FoUFNCM2FXeGtZMkZ5WkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1pWdHVZVzFsYzF0cFhWMHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE53YkdsalpTNXdkWE5vS0dWYmJtRnRaWE5iYVYxZEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUFvYTJWNUlHbHVJR1VwSUdsbUlDaGxXMmhoYzEwb2EyVjVLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNCc2FXTmxMbkIxYzJnb1pWdHJaWGxkS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqZFhJdWMzQnNhV05sTG1Gd2NHeDVLR04xY2l3Z2MzQnNhV05sS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCbWIzSWdLR2tnUFNBd0xDQnBhU0E5SUdOMWNpNXNaVzVuZEdnN0lHa2dQQ0JwYVRzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxJRDBnWTNWeVcybGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2QyaHBiR1VnS0dVdWJpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNobUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaGxMbVlwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpQW9haUE5SURBc0lHcHFJRDBnWlM1bUxteGxibWQwYURzZ2FpQThJR3BxT3lCcUt5c3BJR2xtSUNobExtWmJhbDBnUFQwZ1ppa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdVdVppNXpjR3hwWTJVb2Fpd2dNU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FoWlM1bUxteGxibWQwYUNBbUppQmtaV3hsZEdVZ1pTNW1PMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2EyVjVJR2x1SUdVdWJpa2dhV1lnS0dVdWJsdG9ZWE5kS0d0bGVTa2dKaVlnWlM1dVcydGxlVjB1WmlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR1oxYm1OeklEMGdaUzV1VzJ0bGVWMHVaanRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2FpQTlJREFzSUdwcUlEMGdablZ1WTNNdWJHVnVaM1JvT3lCcUlEd2dhbW83SUdvckt5a2dhV1lnS0daMWJtTnpXMnBkSUQwOUlHWXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWRXNWpjeTV6Y0d4cFkyVW9haXdnTVNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBaFpuVnVZM011YkdWdVozUm9JQ1ltSUdSbGJHVjBaU0JsTG01YmEyVjVYUzVtTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdWc1pYUmxJR1V1Wmp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5SUNoclpYa2dhVzRnWlM1dUtTQnBaaUFvWlM1dVcyaGhjMTBvYTJWNUtTQW1KaUJsTG01YmEyVjVYUzVtS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1pXeGxkR1VnWlM1dVcydGxlVjB1Wmp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsSUQwZ1pTNXVPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZUdGNiaUFnSUNBdktseGNYRzRnSUNBZ0lDb2daWFpsTG05dVkyVmNiaUFnSUNBZ1d5QnRaWFJvYjJRZ1hWeHVJQ0FnSUNBcUtseHVJQ0FnSUNBcUlFSnBibVJ6SUdkcGRtVnVJR1YyWlc1MElHaGhibVJzWlhJZ2QybDBhQ0JoSUdkcGRtVnVJRzVoYldVZ2RHOGdiMjVzZVNCeWRXNGdiMjVqWlNCMGFHVnVJSFZ1WW1sdVpDQnBkSE5sYkdZdVhHNGdJQ0FnSUh3Z1pYWmxMbTl1WTJVb1hDSnNiMmRwYmx3aUxDQm1LVHRjYmlBZ0lDQWdmQ0JsZG1Vb1hDSnNiMmRwYmx3aUtUc2dMeThnZEhKcFoyZGxjbk1nWmx4dUlDQWdJQ0I4SUdWMlpTaGNJbXh2WjJsdVhDSXBPeUF2THlCdWJ5QnNhWE4wWlc1bGNuTmNiaUFnSUNBZ0tpQlZjMlVnUUdWMlpTQjBieUIwY21sbloyVnlJSFJvWlNCc2FYTjBaVzVsY2k1Y2JpQWdJQ0FnS2lwY2JpQWdJQ0FnUGlCQmNtZDFiV1Z1ZEhOY2JpQWdJQ0FnS2lwY2JpQWdJQ0FnTFNCdVlXMWxJQ2h6ZEhKcGJtY3BJRzVoYldVZ2IyWWdkR2hsSUdWMlpXNTBMQ0JrYjNRZ0tHQXVZQ2tnYjNJZ2MyeGhjMmdnS0dBdllDa2djMlZ3WVhKaGRHVmtMQ0IzYVhSb0lHOXdkR2x2Ym1Gc0lIZHBiR1JqWVhKa2MxeHVJQ0FnSUNBdElHWWdLR1oxYm1OMGFXOXVLU0JsZG1WdWRDQm9ZVzVrYkdWeUlHWjFibU4wYVc5dVhHNGdJQ0FnSUNvcVhHNGdJQ0FnSUQwZ0tHWjFibU4wYVc5dUtTQnpZVzFsSUhKbGRIVnliaUJtZFc1amRHbHZiaUJoY3lCQVpYWmxMbTl1WEc0Z0lDQWdYRndxTDF4dUlDQWdJR1YyWlM1dmJtTmxJRDBnWm5WdVkzUnBiMjRnS0c1aGJXVXNJR1lwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR1l5SUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pYWmxMbTltWmlodVlXMWxMQ0JtTWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaaTVoY0hCc2VTaDBhR2x6TENCaGNtZDFiV1Z1ZEhNcE8xeHVJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdaWFpsTG05dUtHNWhiV1VzSUdZeUtUdGNiaUFnSUNCOU8xeHVJQ0FnSUM4cVhGeGNiaUFnSUNBZ0tpQmxkbVV1ZG1WeWMybHZibHh1SUNBZ0lDQmJJSEJ5YjNCbGNuUjVJQ2h6ZEhKcGJtY3BJRjFjYmlBZ0lDQWdLaXBjYmlBZ0lDQWdLaUJEZFhKeVpXNTBJSFpsY25OcGIyNGdiMllnZEdobElHeHBZbkpoY25rdVhHNGdJQ0FnWEZ3cUwxeHVJQ0FnSUdWMlpTNTJaWEp6YVc5dUlEMGdkbVZ5YzJsdmJqdGNiaUFnSUNCbGRtVXVkRzlUZEhKcGJtY2dQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCY0lsbHZkU0JoY21VZ2NuVnVibWx1WnlCRmRtVWdYQ0lnS3lCMlpYSnphVzl1TzF4dUlDQWdJSDA3WEc0Z0lDQWdLSFI1Y0dWdlppQnRiMlIxYkdVZ0lUMGdYQ0oxYm1SbFptbHVaV1JjSWlBbUppQnRiMlIxYkdVdVpYaHdiM0owY3lrZ1B5QW9iVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQmxkbVVwSURvZ0tIUjVjR1Z2WmlCa1pXWnBibVVnUFQwOUlGd2lablZ1WTNScGIyNWNJaUFtSmlCa1pXWnBibVV1WVcxa0lEOGdLR1JsWm1sdVpTaGNJbVYyWlZ3aUxDQmJYU3dnWm5WdVkzUnBiMjRvS1NCN0lISmxkSFZ5YmlCbGRtVTdJSDBwS1NBNklDaG5iRzlpTG1WMlpTQTlJR1YyWlNrcE8xeHVmU2tvZEdocGN5azdYRzRpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZCUVR0QlFVTkJPeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlmUT09XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLy4vbm9kZV9tb2R1bGVzL2V2ZS1yYXBoYWVsL2V2ZS5qc1xcblwiKTtcblxuLyoqKi8gfSlcblxuLyoqKioqKi8gfSk7XG59KTsiLCJpbXBvcnQgUmFwaGFlbCBmcm9tICcuL3JhcGhhZWwvcmFwaGFlbCc7XG5cbmNsYXNzIE5vZGUge1xuICBjb25zdHJ1Y3RvcihsYWJlbCkge1xuICAgIHRoaXMubGFiZWwgPSBsYWJlbDtcbiAgICB0aGlzLmNoaWxkcmVuID0gW107XG4gIH1cblxuICBhZGRDaGlsZChub2RlKSB7XG4gICAgdGhpcy5jaGlsZHJlbi5wdXNoKG5vZGUpO1xuICB9XG59XG5cbmNvbnN0IHJvb3QgPSBuZXcgTm9kZShcIlJvb3RcIik7XG5yb290LmFkZENoaWxkKG5ldyBOb2RlKCdjaGlsZC0xJykpO1xucm9vdC5hZGRDaGlsZChuZXcgTm9kZSgnY2hpbGQtMicpKTtcbnJvb3QuYWRkQ2hpbGQobmV3IE5vZGUoJ2NoaWxkLTMnKSk7XG5yb290LmFkZENoaWxkKG5ldyBOb2RlKCdjaGlsZC00JykpO1xucm9vdC5hZGRDaGlsZChuZXcgTm9kZSgnY2hpbGQtNScpKTtcbnJvb3QuYWRkQ2hpbGQobmV3IE5vZGUoJ2NoaWxkLTYnKSk7XG5yb290LmFkZENoaWxkKG5ldyBOb2RlKCdjaGlsZC03JykpO1xuXG5jb25zdCB0cmVlID0gIFtcbiAgcm9vdCAgXG5dO1xuXG5mdW5jdGlvbiBkcmF3VHJlZSh0cmVlKSB7XG4gIGNvbnN0IHAgPSBSYXBoYWVsKDAsMCwgNDAwLCA0MDApO1xuICBsZXQgaSA9IDA7XG4gIHRyZWUuZm9yRWFjaChub2RlID0+IHtcbiAgICBwLmNpcmNsZShpICsgNTAsIGkgKyA1MCwgMjApO1xuICAgIGkgKz0gNTtcbiAgICBkcmF3VHJlZShub2RlLmNoaWxkcmVuKTtcbiAgfSk7XG59XG5jb25zb2xlLmxvZyhcIkhpXCIpO1xuZHJhd1RyZWUodHJlZSk7IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0aWYgKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XG5cdFx0bW9kdWxlLnBhdGhzID0gW107XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==